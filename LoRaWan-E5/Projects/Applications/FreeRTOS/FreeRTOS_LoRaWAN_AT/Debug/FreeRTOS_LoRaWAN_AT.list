
FreeRTOS_LoRaWAN_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020a88  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002864  08020bc8  08020bc8  00030bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802342c  0802342c  00040124  2**0
                  CONTENTS
  4 .ARM          00000008  0802342c  0802342c  0003342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023434  08023434  00040124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023434  08023434  00033434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023438  08023438  00033438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0802343c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004790  20000124  08023560  00040124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048b4  08023560  000448b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00040124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b7e4  00000000  00000000  00040191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b934  00000000  00000000  0008b975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ad0  00000000  00000000  000972b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c57  00000000  00000000  0009ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be60  00000000  00000000  0009d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c17d  00000000  00000000  000c9837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7728  00000000  00000000  001159b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000f25c  00000000  00000000  001ed0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  001fc338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000124 	.word	0x20000124
 800015c:	00000000 	.word	0x00000000
 8000160:	08020bb0 	.word	0x08020bb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000128 	.word	0x20000128
 800017c:	08020bb0 	.word	0x08020bb0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b970 	b.w	8000b7c <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9e08      	ldr	r6, [sp, #32]
 80008ba:	460d      	mov	r5, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	460f      	mov	r7, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4694      	mov	ip, r2
 80008c8:	d965      	bls.n	8000996 <__udivmoddi4+0xe2>
 80008ca:	fab2 f382 	clz	r3, r2
 80008ce:	b143      	cbz	r3, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d4:	f1c3 0220 	rsb	r2, r3, #32
 80008d8:	409f      	lsls	r7, r3
 80008da:	fa20 f202 	lsr.w	r2, r0, r2
 80008de:	4317      	orrs	r7, r2
 80008e0:	409c      	lsls	r4, r3
 80008e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008e6:	fa1f f58c 	uxth.w	r5, ip
 80008ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ee:	0c22      	lsrs	r2, r4, #16
 80008f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f8:	fb01 f005 	mul.w	r0, r1, r5
 80008fc:	4290      	cmp	r0, r2
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x62>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f101 37ff 	add.w	r7, r1, #4294967295
 8000908:	f080 811b 	bcs.w	8000b42 <__udivmoddi4+0x28e>
 800090c:	4290      	cmp	r0, r2
 800090e:	f240 8118 	bls.w	8000b42 <__udivmoddi4+0x28e>
 8000912:	3902      	subs	r1, #2
 8000914:	4462      	add	r2, ip
 8000916:	1a12      	subs	r2, r2, r0
 8000918:	b2a4      	uxth	r4, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000926:	fb00 f505 	mul.w	r5, r0, r5
 800092a:	42a5      	cmp	r5, r4
 800092c:	d90a      	bls.n	8000944 <__udivmoddi4+0x90>
 800092e:	eb1c 0404 	adds.w	r4, ip, r4
 8000932:	f100 32ff 	add.w	r2, r0, #4294967295
 8000936:	f080 8106 	bcs.w	8000b46 <__udivmoddi4+0x292>
 800093a:	42a5      	cmp	r5, r4
 800093c:	f240 8103 	bls.w	8000b46 <__udivmoddi4+0x292>
 8000940:	4464      	add	r4, ip
 8000942:	3802      	subs	r0, #2
 8000944:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	2100      	movs	r1, #0
 800094c:	b11e      	cbz	r6, 8000956 <__udivmoddi4+0xa2>
 800094e:	40dc      	lsrs	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	e9c6 4300 	strd	r4, r3, [r6]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0xbc>
 800095e:	2e00      	cmp	r6, #0
 8000960:	f000 80ec 	beq.w	8000b3c <__udivmoddi4+0x288>
 8000964:	2100      	movs	r1, #0
 8000966:	e9c6 0500 	strd	r0, r5, [r6]
 800096a:	4608      	mov	r0, r1
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	fab3 f183 	clz	r1, r3
 8000974:	2900      	cmp	r1, #0
 8000976:	d149      	bne.n	8000a0c <__udivmoddi4+0x158>
 8000978:	42ab      	cmp	r3, r5
 800097a:	d302      	bcc.n	8000982 <__udivmoddi4+0xce>
 800097c:	4282      	cmp	r2, r0
 800097e:	f200 80f7 	bhi.w	8000b70 <__udivmoddi4+0x2bc>
 8000982:	1a84      	subs	r4, r0, r2
 8000984:	eb65 0203 	sbc.w	r2, r5, r3
 8000988:	2001      	movs	r0, #1
 800098a:	4617      	mov	r7, r2
 800098c:	2e00      	cmp	r6, #0
 800098e:	d0e2      	beq.n	8000956 <__udivmoddi4+0xa2>
 8000990:	e9c6 4700 	strd	r4, r7, [r6]
 8000994:	e7df      	b.n	8000956 <__udivmoddi4+0xa2>
 8000996:	b902      	cbnz	r2, 800099a <__udivmoddi4+0xe6>
 8000998:	deff      	udf	#255	; 0xff
 800099a:	fab2 f382 	clz	r3, r2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 808f 	bne.w	8000ac2 <__udivmoddi4+0x20e>
 80009a4:	1a8a      	subs	r2, r1, r2
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2101      	movs	r1, #1
 80009b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009b4:	fb07 2015 	mls	r0, r7, r5, r2
 80009b8:	0c22      	lsrs	r2, r4, #16
 80009ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009be:	fb0e f005 	mul.w	r0, lr, r5
 80009c2:	4290      	cmp	r0, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x124>
 80009c6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x122>
 80009d0:	4290      	cmp	r0, r2
 80009d2:	f200 80ca 	bhi.w	8000b6a <__udivmoddi4+0x2b6>
 80009d6:	4645      	mov	r5, r8
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e0:	fb07 2210 	mls	r2, r7, r0, r2
 80009e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x14e>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x14c>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80ba 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 8000a00:	4610      	mov	r0, r2
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a0a:	e79f      	b.n	800094c <__udivmoddi4+0x98>
 8000a0c:	f1c1 0720 	rsb	r7, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a22:	40fd      	lsrs	r5, r7
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f901 	lsl.w	r9, r0, r1
 8000a2a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000a2e:	fa1f fe8c 	uxth.w	lr, ip
 8000a32:	fbb5 f8f0 	udiv	r8, r5, r0
 8000a36:	0c1c      	lsrs	r4, r3, #16
 8000a38:	fb00 5518 	mls	r5, r0, r8, r5
 8000a3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a40:	fb08 f50e 	mul.w	r5, r8, lr
 8000a44:	42a5      	cmp	r5, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b0>
 8000a4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8087 	bcs.w	8000b66 <__udivmoddi4+0x2b2>
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	f240 8084 	bls.w	8000b66 <__udivmoddi4+0x2b2>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4464      	add	r4, ip
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	b29d      	uxth	r5, r3
 8000a68:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6c:	fb00 4413 	mls	r4, r0, r3, r4
 8000a70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1da>
 8000a7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d26b      	bcs.n	8000b5e <__udivmoddi4+0x2aa>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	d969      	bls.n	8000b5e <__udivmoddi4+0x2aa>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	4464      	add	r4, ip
 8000a8e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000a92:	fba0 8302 	umull	r8, r3, r0, r2
 8000a96:	eba4 040e 	sub.w	r4, r4, lr
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46c6      	mov	lr, r8
 8000a9e:	461d      	mov	r5, r3
 8000aa0:	d355      	bcc.n	8000b4e <__udivmoddi4+0x29a>
 8000aa2:	d052      	beq.n	8000b4a <__udivmoddi4+0x296>
 8000aa4:	b156      	cbz	r6, 8000abc <__udivmoddi4+0x208>
 8000aa6:	ebb9 030e 	subs.w	r3, r9, lr
 8000aaa:	eb64 0405 	sbc.w	r4, r4, r5
 8000aae:	fa04 f707 	lsl.w	r7, r4, r7
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	e9c6 7400 	strd	r7, r4, [r6]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	f1c3 0120 	rsb	r1, r3, #32
 8000ac6:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aca:	fa20 f201 	lsr.w	r2, r0, r1
 8000ace:	fa25 f101 	lsr.w	r1, r5, r1
 8000ad2:	409d      	lsls	r5, r3
 8000ad4:	432a      	orrs	r2, r5
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae6:	0c11      	lsrs	r1, r2, #16
 8000ae8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aec:	fb00 f50e 	mul.w	r5, r0, lr
 8000af0:	428d      	cmp	r5, r1
 8000af2:	fa04 f403 	lsl.w	r4, r4, r3
 8000af6:	d908      	bls.n	8000b0a <__udivmoddi4+0x256>
 8000af8:	eb1c 0101 	adds.w	r1, ip, r1
 8000afc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b00:	d22f      	bcs.n	8000b62 <__udivmoddi4+0x2ae>
 8000b02:	428d      	cmp	r5, r1
 8000b04:	d92d      	bls.n	8000b62 <__udivmoddi4+0x2ae>
 8000b06:	3802      	subs	r0, #2
 8000b08:	4461      	add	r1, ip
 8000b0a:	1b49      	subs	r1, r1, r5
 8000b0c:	b292      	uxth	r2, r2
 8000b0e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b12:	fb07 1115 	mls	r1, r7, r5, r1
 8000b16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b1a:	fb05 f10e 	mul.w	r1, r5, lr
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x280>
 8000b22:	eb1c 0202 	adds.w	r2, ip, r2
 8000b26:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b2a:	d216      	bcs.n	8000b5a <__udivmoddi4+0x2a6>
 8000b2c:	4291      	cmp	r1, r2
 8000b2e:	d914      	bls.n	8000b5a <__udivmoddi4+0x2a6>
 8000b30:	3d02      	subs	r5, #2
 8000b32:	4462      	add	r2, ip
 8000b34:	1a52      	subs	r2, r2, r1
 8000b36:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b3a:	e739      	b.n	80009b0 <__udivmoddi4+0xfc>
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	4630      	mov	r0, r6
 8000b40:	e709      	b.n	8000956 <__udivmoddi4+0xa2>
 8000b42:	4639      	mov	r1, r7
 8000b44:	e6e7      	b.n	8000916 <__udivmoddi4+0x62>
 8000b46:	4610      	mov	r0, r2
 8000b48:	e6fc      	b.n	8000944 <__udivmoddi4+0x90>
 8000b4a:	45c1      	cmp	r9, r8
 8000b4c:	d2aa      	bcs.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b52:	eb63 050c 	sbc.w	r5, r3, ip
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7a4      	b.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b5a:	4645      	mov	r5, r8
 8000b5c:	e7ea      	b.n	8000b34 <__udivmoddi4+0x280>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e795      	b.n	8000a8e <__udivmoddi4+0x1da>
 8000b62:	4640      	mov	r0, r8
 8000b64:	e7d1      	b.n	8000b0a <__udivmoddi4+0x256>
 8000b66:	46d0      	mov	r8, sl
 8000b68:	e77c      	b.n	8000a64 <__udivmoddi4+0x1b0>
 8000b6a:	3d02      	subs	r5, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	e733      	b.n	80009d8 <__udivmoddi4+0x124>
 8000b70:	4608      	mov	r0, r1
 8000b72:	e70b      	b.n	800098c <__udivmoddi4+0xd8>
 8000b74:	4464      	add	r4, ip
 8000b76:	3802      	subs	r0, #2
 8000b78:	e743      	b.n	8000a02 <__udivmoddi4+0x14e>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_ADC_Init+0x94>)
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <MX_ADC_Init+0x98>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_ADC_Init+0x94>)
 8000be0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000be4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <MX_ADC_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_ADC_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_ADC_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_ADC_Init+0x94>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c42:	2207      	movs	r2, #7
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_ADC_Init+0x94>)
 8000c56:	f001 fe29 	bl	80028ac <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000c60:	f000 faee 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000140 	.word	0x20000140
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <HAL_ADC_MspInit+0x24>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d103      	bne.n	8000c8a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c86:	f7ff ff7b 	bl	8000b80 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40012400 	.word	0x40012400

08000c98 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <HAL_ADC_MspDeInit+0x24>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d103      	bne.n	8000cb2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000caa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cae:	f7ff ff7f 	bl	8000bb0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012400 	.word	0x40012400

08000cc0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <SYS_InitMeasurement+0x14>)
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <SYS_InitMeasurement+0x18>)
 8000cc8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000140 	.word	0x20000140
 8000cd8:	40012400 	.word	0x40012400

08000cdc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000cea:	f000 f871 	bl	8000dd0 <SYS_GetBatteryLevel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000cf2:	4830      	ldr	r0, [pc, #192]	; (8000db4 <SYS_GetTemperatureLevel+0xd8>)
 8000cf4:	f000 f8a0 	bl	8000e38 <ADC_ReadChannels>
 8000cf8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <SYS_GetTemperatureLevel+0xdc>)
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <SYS_GetTemperatureLevel+0xe0>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d026      	beq.n	8000d54 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <SYS_GetTemperatureLevel+0xdc>)
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <SYS_GetTemperatureLevel+0xe0>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d01c      	beq.n	8000d4c <SYS_GetTemperatureLevel+0x70>
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <SYS_GetTemperatureLevel+0xe4>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <SYS_GetTemperatureLevel+0xe0>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2264      	movs	r2, #100	; 0x64
 8000d2e:	fb03 f202 	mul.w	r2, r3, r2
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <SYS_GetTemperatureLevel+0xdc>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <SYS_GetTemperatureLevel+0xe0>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	331e      	adds	r3, #30
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	e001      	b.n	8000d50 <SYS_GetTemperatureLevel+0x74>
 8000d4c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e01c      	b.n	8000d8e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	fb03 f202 	mul.w	r2, r3, r2
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <SYS_GetTemperatureLevel+0xe8>)
 8000d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	0852      	lsrs	r2, r2, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	0adb      	lsrs	r3, r3, #11
 8000d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000d76:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <SYS_GetTemperatureLevel+0xec>)
 8000d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d80:	1292      	asrs	r2, r2, #10
 8000d82:	17db      	asrs	r3, r3, #31
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	331e      	adds	r3, #30
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <SYS_GetTemperatureLevel+0xf0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f01d fd48 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8000da8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	b0001000 	.word	0xb0001000
 8000db8:	1fff75c8 	.word	0x1fff75c8
 8000dbc:	1fff75a8 	.word	0x1fff75a8
 8000dc0:	09ee009f 	.word	0x09ee009f
 8000dc4:	00100101 	.word	0x00100101
 8000dc8:	68db8bad 	.word	0x68db8bad
 8000dcc:	08020bc8 	.word	0x08020bc8

08000dd0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <SYS_GetBatteryLevel+0x5c>)
 8000de0:	f000 f82a 	bl	8000e38 <ADC_ReadChannels>
 8000de4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	80fb      	strh	r3, [r7, #6]
 8000df0:	e016      	b.n	8000e20 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <SYS_GetBatteryLevel+0x60>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00b      	beq.n	8000e16 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <SYS_GetBatteryLevel+0x60>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000e08:	fb03 f202 	mul.w	r2, r3, r2
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	e004      	b.n	8000e20 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <SYS_GetBatteryLevel+0x64>)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e20:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	b4002000 	.word	0xb4002000
 8000e30:	1fff75aa 	.word	0x1fff75aa
 8000e34:	004c08d8 	.word	0x004c08d8

08000e38 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e50:	f7ff fec0 	bl	8000bd4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e54:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000e56:	f002 fb0f 	bl	8003478 <HAL_ADCEx_Calibration_Start>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e60:	f000 f9ee 	bl	8001240 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	4619      	mov	r1, r3
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000e78:	f002 f876 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000e82:	f000 f9dd 	bl	8001240 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000e88:	f001 ff52 	bl	8002d30 <HAL_ADC_Start>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000e92:	f000 f9d5 	bl	8001240 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000e9c:	f001 ffc0 	bl	8002e20 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000ea0:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000ea2:	f001 ff8b 	bl	8002dbc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000ea8:	f002 f851 	bl	8002f4e <HAL_ADC_GetValue>
 8000eac:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <ADC_ReadChannels+0x88>)
 8000eb0:	f001 fec2 	bl	8002c38 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000eb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000140 	.word	0x20000140

08000ec4 <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <PreSleepProcessing+0x34>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	099b      	lsrs	r3, r3, #6
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <PreSleepProcessing+0x38>)
 8000ee4:	f003 fbd4 	bl	8004690 <HAL_LPTIM_Counter_Start_IT>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2000      	movs	r0, #0
 8000eec:	f003 ff66 	bl	8004dbc <HAL_PWR_EnterSLEEPMode>
  //HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
//  *ulExpectedIdleTime = 0;
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	200009f8 	.word	0x200009f8

08000f00 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <PostSleepProcessing+0x1c>)
 8000f0a:	f003 fc63 	bl	80047d4 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 8000f0e:	f000 f8b3 	bl	8001078 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200009f8 	.word	0x200009f8

08000f20 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <vApplicationGetIdleTaskMemory+0x30>)
 8000f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001a4 	.word	0x200001a4
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <LL_AHB1_GRP1_EnableClock>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f7ff ffe3 	bl	8000f54 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff ffe0 	bl	8000f54 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f002 fbc0 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f002 fbd7 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb8:	f023 0218 	bic.w	r2, r3, #24
 8000fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <LL_AHB2_GRP1_EnableClock>:
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b08e      	sub	sp, #56	; 0x38
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f001 fa95 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f833 	bl	8001078 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001012:	f000 f8bb 	bl	800118c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001016:	f000 f88d 	bl	8001134 <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <main+0x64>)
 800101c:	f107 041c 	add.w	r4, r7, #28
 8001020:	461d      	mov	r5, r3
 8001022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001026:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f00b f9b9 	bl	800c3ac <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <main+0x68>)
 800103e:	6013      	str	r3, [r2, #0]
  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <main+0x6c>)
 8001042:	463c      	mov	r4, r7
 8001044:	461d      	mov	r5, r3
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 8001052:	463b      	mov	r3, r7
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00b f9a8 	bl	800c3ac <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <main+0x70>)
 8001060:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8001062:	f00b f99c 	bl	800c39e <osKernelStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001066:	e7fe      	b.n	8001066 <main+0x62>
 8001068:	08020be0 	.word	0x08020be0
 800106c:	20000a34 	.word	0x20000a34
 8001070:	08020c0c 	.word	0x08020c0c
 8001074:	20000a38 	.word	0x20000a38

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09a      	sub	sp, #104	; 0x68
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2248      	movs	r2, #72	; 0x48
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f01f fcd4 	bl	8020a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800109e:	f003 fe7f 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff80 	bl	8000fa8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <SystemClock_Config+0xb8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b0:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <SystemClock_Config+0xb8>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SystemClock_Config+0xb8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 80010c4:	232c      	movs	r3, #44	; 0x2c
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c8:	2381      	movs	r3, #129	; 0x81
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010d4:	23b0      	movs	r3, #176	; 0xb0
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 f97b 	bl	80053e4 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010f4:	f000 f8a4 	bl	8001240 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80010f8:	234f      	movs	r3, #79	; 0x4f
 80010fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fd00 	bl	8005b1c <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001122:	f000 f88d 	bl	8001240 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3768      	adds	r7, #104	; 0x68
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58000400 	.word	0x58000400

08001134 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_LPTIM1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_LPTIM1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_LPTIM1_Init+0x50>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_LPTIM1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_LPTIM1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_LPTIM1_Init+0x50>)
 8001172:	f003 f9c5 	bl	8004500 <HAL_LPTIM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f860 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200009f8 	.word	0x200009f8
 8001188:	40007c00 	.word	0x40007c00

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff ff16 	bl	8000fd2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <MX_GPIO_Init+0x48>)
 80011ac:	f003 f906 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b0:	2320      	movs	r3, #32
 80011b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_GPIO_Init+0x48>)
 80011c6:	f002 fecb 	bl	8003f60 <HAL_GPIO_Init>

}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48000400 	.word	0x48000400

080011d8 <LED_control>:

/* USER CODE BEGIN 4 */
int32_t LED_control(int value) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, value);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	2120      	movs	r1, #32
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <LED_control+0x20>)
 80011ea:	f003 f8e7 	bl	80043bc <HAL_GPIO_WritePin>
  return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	48000400 	.word	0x48000400

080011fc <StartLoRaWANTask>:
/* USER CODE END 4 */
/* USER CODE BEGIN 4 */

void StartLoRaWANTask(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 8001204:	f008 fadc 	bl	80097c0 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_LoRaWAN_Process();
 8001208:	f008 fae2 	bl	80097d0 <MX_LoRaWAN_Process>
    osDelay(10);
 800120c:	200a      	movs	r0, #10
 800120e:	f00b f919 	bl	800c444 <osDelay>
	MX_LoRaWAN_Process();
 8001212:	e7f9      	b.n	8001208 <StartLoRaWANTask+0xc>

08001214 <StartLedTask>:
  }
  /* USER CODE END 5 */
}
/* USER CODE END 4 */
void StartLedTask(void const * argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  LED_control(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffdb 	bl	80011d8 <LED_control>
  for(;;)
  {
	LED_control(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffd8 	bl	80011d8 <LED_control>
	osDelay(500);
 8001228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122c:	f00b f90a 	bl	800c444 <osDelay>
	LED_control(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff ffd1 	bl	80011d8 <LED_control>
	osDelay(500);
 8001236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123a:	f00b f903 	bl	800c444 <osDelay>
	LED_control(0);
 800123e:	e7f0      	b.n	8001222 <StartLedTask+0xe>

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>

0800124a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800125a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <LL_APB1_GRP1_EnableClock>:
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001286:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	222c      	movs	r2, #44	; 0x2c
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f01f fbc3 	bl	8020a34 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_RTC_Init+0x9c>)
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <MX_RTC_Init+0xa0>)
 80012b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_RTC_Init+0x9c>)
 80012b6:	221f      	movs	r2, #31
 80012b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_RTC_Init+0x9c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_RTC_Init+0x9c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_RTC_Init+0x9c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_RTC_Init+0x9c>)
 80012ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_RTC_Init+0x9c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_RTC_Init+0x9c>)
 80012dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012e2:	4815      	ldr	r0, [pc, #84]	; (8001338 <MX_RTC_Init+0x9c>)
 80012e4:	f005 f8d6 	bl	8006494 <HAL_RTC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80012ee:	f7ff ffa7 	bl	8001240 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80012f2:	4811      	ldr	r0, [pc, #68]	; (8001338 <MX_RTC_Init+0x9c>)
 80012f4:	f005 fbc4 	bl	8006a80 <HAL_RTCEx_SetSSRU_IT>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80012fe:	f7ff ff9f 	bl	8001240 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800130e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001312:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_RTC_Init+0x9c>)
 8001322:	f005 f931 	bl	8006588 <HAL_RTC_SetAlarm_IT>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800132c:	f7ff ff88 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000a3c 	.word	0x20000a3c
 800133c:	40002800 	.word	0x40002800

08001340 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b090      	sub	sp, #64	; 0x40
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2238      	movs	r2, #56	; 0x38
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f01f fb6f 	bl	8020a34 <memset>
  if(rtcHandle->Instance==RTC)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_RTC_MspInit+0x74>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d125      	bne.n	80013ac <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001364:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4618      	mov	r0, r3
 8001372:	f004 ff75 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800137c:	f7ff ff60 	bl	8001240 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001380:	f7ff ff63 	bl	800124a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001384:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001388:	f7ff ff6f 	bl	800126a <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2002      	movs	r0, #2
 8001392:	f002 f9c4 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001396:	2002      	movs	r0, #2
 8001398:	f002 f9db 	bl	8003752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	202a      	movs	r0, #42	; 0x2a
 80013a2:	f002 f9bc 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013a6:	202a      	movs	r0, #42	; 0x2a
 80013a8:	f002 f9d3 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013ac:	bf00      	nop
 80013ae:	3740      	adds	r7, #64	; 0x40
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40002800 	.word	0x40002800

080013b8 <LL_APB1_GRP1_EnableClock>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013dc:	68fb      	ldr	r3, [r7, #12]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	210f      	movs	r1, #15
 80013f0:	f06f 0001 	mvn.w	r0, #1
 80013f4:	f002 f993 	bl	800371e <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b090      	sub	sp, #64	; 0x40
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2238      	movs	r2, #56	; 0x38
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f01f fb11 	bl	8020a34 <memset>
  if(hlptim->Instance==LPTIM1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_LPTIM_MspInit+0x60>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11a      	bne.n	8001452 <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_LPTIM_MspInit+0x64>)
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f004 ff18 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8001436:	f7ff ff03 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800143a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800143e:	f7ff ffbb 	bl	80013b8 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2105      	movs	r1, #5
 8001446:	2027      	movs	r0, #39	; 0x27
 8001448:	f002 f969 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800144c:	2027      	movs	r0, #39	; 0x27
 800144e:	f002 f980 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3740      	adds	r7, #64	; 0x40
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40007c00 	.word	0x40007c00
 8001460:	000c0004 	.word	0x000c0004

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f001 f871 	bl	8002578 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001496:	f00b fe07 	bl	800d0a8 <xTaskGetSchedulerState>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d001      	beq.n	80014a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014a0:	f00b fff2 	bl	800d488 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80014ae:	f005 fb23 	bl	8006af8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000a3c 	.word	0x20000a3c

080014bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c4:	f002 ff92 	bl	80043ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <DMA1_Channel5_IRQHandler+0x10>)
 80014d2:	f002 fbd5 	bl	8003c80 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000b18 	.word	0x20000b18

080014e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <USART1_IRQHandler+0x10>)
 80014e6:	f006 f95f 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000a88 	.word	0x20000a88

080014f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <USART2_IRQHandler+0x10>)
 80014fa:	f006 f955 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000b78 	.word	0x20000b78

08001508 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <RTC_Alarm_IRQHandler+0x10>)
 800150e:	f005 f9a3 	bl	8006858 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000a3c 	.word	0x20000a3c

0800151c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001522:	f005 fe51 	bl	80071c8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000a74 	.word	0x20000a74

08001530 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <LPTIM1_IRQHandler+0x10>)
 8001536:	f003 f9b3 	bl	80048a0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200009f8 	.word	0x200009f8

08001544 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4313      	orrs	r3, r2
 800155a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001568:	68fb      	ldr	r3, [r7, #12]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_SUBGHZ_Init+0x20>)
 800157a:	2208      	movs	r2, #8
 800157c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_SUBGHZ_Init+0x20>)
 8001580:	f005 fba6 	bl	8006cd0 <HAL_SUBGHZ_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800158a:	f7ff fe59 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000a74 	.word	0x20000a74

08001598 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ffcf 	bl	8001544 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f002 f8b7 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f002 f8ce 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <LL_RCC_SetClkAfterWakeFromStop>:
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <LL_FLASH_GetUDN+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	1fff7580 	.word	0x1fff7580

080015f8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <LL_FLASH_GetDeviceID+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	1fff7584 	.word	0x1fff7584

08001610 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <LL_FLASH_GetSTCompanyID+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0a1b      	lsrs	r3, r3, #8
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	1fff7584 	.word	0x1fff7584

08001628 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff ffc6 	bl	80015be <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001632:	f01e f921 	bl	801f878 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001636:	f000 f964 	bl	8001902 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800163a:	f01d f8bb 	bl	801e7b4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <SystemApp_Init+0x3c>)
 8001640:	f01d f976 	bl	801e930 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001644:	2002      	movs	r0, #2
 8001646:	f01d f981 	bl	801e94c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800164a:	f7ff fb39 	bl	8000cc0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800164e:	f000 f95e 	bl	800190e <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001652:	f01d fb6f 	bl	801ed34 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001656:	2101      	movs	r1, #1
 8001658:	2001      	movs	r0, #1
 800165a:	f01d fbab 	bl	801edb4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	0800183d 	.word	0x0800183d

08001668 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END UTIL_SEQ_Idle_1 */
//  UTIL_LPM_EnterLowPower();
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800167e:	f7ff fba7 	bl	8000dd0 <SYS_GetBatteryLevel>
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800168c:	4293      	cmp	r3, r2
 800168e:	d902      	bls.n	8001696 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001690:	23fe      	movs	r3, #254	; 0xfe
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	e014      	b.n	80016c0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800169c:	d202      	bcs.n	80016a4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e00d      	b.n	80016c0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80016aa:	461a      	mov	r2, r3
 80016ac:	4613      	mov	r3, r2
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <GetBatteryLevel+0x68>)
 80016b8:	fba3 2302 	umull	r2, r3, r3, r2
 80016bc:	09db      	lsrs	r3, r3, #7
 80016be:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <GetBatteryLevel+0x6c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	2100      	movs	r1, #0
 80016ca:	2002      	movs	r0, #2
 80016cc:	f01d f8b0 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80016d0:	79fb      	ldrb	r3, [r7, #7]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	1b4e81b5 	.word	0x1b4e81b5
 80016e0:	08020c28 	.word	0x08020c28

080016e4 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80016ee:	f7ff faf5 	bl	8000cdc <SYS_GetTemperatureLevel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da00      	bge.n	80016fa <GetTemperatureLevel+0x16>
 80016f8:	33ff      	adds	r3, #255	; 0xff
 80016fa:	121b      	asrs	r3, r3, #8
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001700:	88fb      	ldrh	r3, [r7, #6]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001716:	f7ff ff65 	bl	80015e4 <LL_FLASH_GetUDN>
 800171a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001722:	d138      	bne.n	8001796 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001724:	f000 ff3a 	bl	800259c <HAL_GetUIDw0>
 8001728:	4604      	mov	r4, r0
 800172a:	f000 ff4b 	bl	80025c4 <HAL_GetUIDw2>
 800172e:	4603      	mov	r3, r0
 8001730:	4423      	add	r3, r4
 8001732:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001734:	f000 ff3c 	bl	80025b0 <HAL_GetUIDw1>
 8001738:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	0e1a      	lsrs	r2, r3, #24
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3307      	adds	r3, #7
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	0c1a      	lsrs	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3306      	adds	r3, #6
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	0a1a      	lsrs	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3305      	adds	r3, #5
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	0e1a      	lsrs	r2, r3, #24
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3303      	adds	r3, #3
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0c1a      	lsrs	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3302      	adds	r3, #2
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	0a1a      	lsrs	r2, r3, #8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001794:	e031      	b.n	80017fa <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3307      	adds	r3, #7
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	0a1a      	lsrs	r2, r3, #8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3306      	adds	r3, #6
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	0c1a      	lsrs	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3305      	adds	r3, #5
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	0e1a      	lsrs	r2, r3, #24
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3304      	adds	r3, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80017c4:	f7ff ff18 	bl	80015f8 <LL_FLASH_GetDeviceID>
 80017c8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3303      	adds	r3, #3
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80017d4:	f7ff ff1c 	bl	8001610 <LL_FLASH_GetSTCompanyID>
 80017d8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3302      	adds	r3, #2
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	0a1a      	lsrs	r2, r3, #8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}

08001802 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001802:	b590      	push	{r4, r7, lr}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 800180c:	f7ff feea 	bl	80015e4 <LL_FLASH_GetUDN>
 8001810:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d10b      	bne.n	8001832 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800181a:	f000 febf 	bl	800259c <HAL_GetUIDw0>
 800181e:	4604      	mov	r4, r0
 8001820:	f000 fec6 	bl	80025b0 <HAL_GetUIDw1>
 8001824:	4603      	mov	r3, r0
 8001826:	405c      	eors	r4, r3
 8001828:	f000 fecc 	bl	80025c4 <HAL_GetUIDw2>
 800182c:	4603      	mov	r3, r0
 800182e:	4063      	eors	r3, r4
 8001830:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001832:	687b      	ldr	r3, [r7, #4]

}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af02      	add	r7, sp, #8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4618      	mov	r0, r3
 800184c:	f01d fda0 	bl	801f390 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <TimestampNow+0x3c>)
 800185a:	2110      	movs	r1, #16
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f81d 	bl	800189c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fc8c 	bl	8000180 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08020c34 	.word	0x08020c34

0800187c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f01d fa66 	bl	801ed54 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001890:	2100      	movs	r1, #0
 8001892:	2002      	movs	r0, #2
 8001894:	f01d fa5e 	bl	801ed54 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800189c:	b40c      	push	{r2, r3}
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f01e ff6b 	bl	8020790 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018c4:	b002      	add	sp, #8
 80018c6:	4770      	bx	lr

080018c8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80018e0:	f000 f8de 	bl	8001aa0 <TIMER_IF_GetTimerValue>
 80018e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f95a 	bl	8001bae <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <EnvSensors_Init>:
  return 0;
  /* USER CODE END EnvSensors_Read */
}

int32_t  EnvSensors_Init(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001912:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <TIMER_IF_Init+0x5c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <TIMER_IF_Init+0x60>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001960:	f7ff fc9c 	bl	800129c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001964:	f000 f856 	bl	8001a14 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <TIMER_IF_Init+0x60>)
 800196e:	f004 ff17 	bl	80067a0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <TIMER_IF_Init+0x60>)
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <TIMER_IF_Init+0x60>)
 800197c:	f005 f84e 	bl	8006a1c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f9d3 	bl	8001d2c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001986:	f000 f85f 	bl	8001a48 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <TIMER_IF_Init+0x5c>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001990:	79fb      	ldrb	r3, [r7, #7]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000a80 	.word	0x20000a80
 80019a0:	20000a3c 	.word	0x20000a3c

080019a4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	222c      	movs	r2, #44	; 0x2c
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f01f f83a 	bl	8020a34 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80019c0:	f000 f828 	bl	8001a14 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <TIMER_IF_StartTimer+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80019dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019e0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <TIMER_IF_StartTimer+0x6c>)
 80019f2:	f004 fdc9 	bl	8006588 <HAL_RTC_SetAlarm_IT>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80019fc:	f7ff fc20 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001a00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000a84 	.word	0x20000a84
 8001a10:	20000a3c 	.word	0x20000a3c

08001a14 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <TIMER_IF_StopTimer+0x2c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <TIMER_IF_StopTimer+0x30>)
 8001a2a:	f004 feb9 	bl	80067a0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <TIMER_IF_StopTimer+0x30>)
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40002800 	.word	0x40002800
 8001a44:	20000a3c 	.word	0x20000a3c

08001a48 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001a4c:	f000 f98e 	bl	8001d6c <GetTimerTicks>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <TIMER_IF_SetTimerContext+0x18>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a56:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <TIMER_IF_SetTimerContext+0x18>)
 8001a58:	681b      	ldr	r3, [r3, #0]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000a84 	.word	0x20000a84

08001a64 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <TIMER_IF_GetTimerContext+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000a84 	.word	0x20000a84

08001a78 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001a82:	f000 f973 	bl	8001d6c <GetTimerTicks>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000a84 	.word	0x20000a84

08001aa0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <TIMER_IF_GetTimerValue+0x24>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001ab2:	f000 f95b 	bl	8001d6c <GetTimerTicks>
 8001ab6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a80 	.word	0x20000a80

08001ac8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001ae2:	b5b0      	push	{r4, r5, r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001aea:	2100      	movs	r1, #0
 8001aec:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2000      	movs	r0, #0
 8001af2:	460a      	mov	r2, r1
 8001af4:	4603      	mov	r3, r0
 8001af6:	0d95      	lsrs	r5, r2, #22
 8001af8:	0294      	lsls	r4, r2, #10
 8001afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe febd 	bl	8000884 <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}

08001b1c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b1c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b26:	2100      	movs	r1, #0
 8001b28:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4605      	mov	r5, r0
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f04f 0a00 	mov.w	sl, #0
 8001b3a:	f04f 0b00 	mov.w	fp, #0
 8001b3e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001b42:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001b46:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001b4a:	4650      	mov	r0, sl
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	1b02      	subs	r2, r0, r4
 8001b50:	eb61 0305 	sbc.w	r3, r1, r5
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0099      	lsls	r1, r3, #2
 8001b5e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b62:	0090      	lsls	r0, r2, #2
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	eb12 0804 	adds.w	r8, r2, r4
 8001b6c:	eb43 0905 	adc.w	r9, r3, r5
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b84:	4690      	mov	r8, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	0a82      	lsrs	r2, r0, #10
 8001b96:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001b9a:	0a8b      	lsrs	r3, r1, #10
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bac:	4770      	bx	lr

08001bae <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff93 	bl	8001ae2 <TIMER_IF_Convert_ms2Tick>
 8001bbc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001bbe:	f000 f8d5 	bl	8001d6c <GetTimerTicks>
 8001bc2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bc4:	e000      	b.n	8001bc8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001bc6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bc8:	f000 f8d0 	bl	8001d6c <GetTimerTicks>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f6      	bhi.n	8001bc6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001bea:	f01d ff93 	bl	801fb14 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001bfe:	f000 f8a5 	bl	8001d4c <TIMER_IF_BkUp_Read_MSBticks>
 8001c02:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f88f 	bl	8001d2c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001c16:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001c24:	f000 f8a2 	bl	8001d6c <GetTimerTicks>
 8001c28:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c2a:	f000 f88f 	bl	8001d4c <TIMER_IF_BkUp_Read_MSBticks>
 8001c2e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	2200      	movs	r2, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	60fa      	str	r2, [r7, #12]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	000b      	movs	r3, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c48:	2000      	movs	r0, #0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	4605      	mov	r5, r0
 8001c4e:	eb12 0804 	adds.w	r8, r2, r4
 8001c52:	eb43 0905 	adc.w	r9, r3, r5
 8001c56:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	0a82      	lsrs	r2, r0, #10
 8001c68:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001c6c:	0a8b      	lsrs	r3, r1, #10
 8001c6e:	4613      	mov	r3, r2
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2200      	movs	r2, #0
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001c80:	f04f 0b00 	mov.w	fp, #0
 8001c84:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff46 	bl	8001b1c <TIMER_IF_Convert_Tick2ms>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ca4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001cb2:	f004 ff45 	bl	8006b40 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000a3c 	.word	0x20000a3c

08001cc4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001cd2:	f004 ff35 	bl	8006b40 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000a3c 	.word	0x20000a3c

08001ce4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001cf2:	f004 ff3d 	bl	8006b70 <HAL_RTCEx_BKUPRead>
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000a3c 	.word	0x20000a3c

08001d08 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001d12:	2101      	movs	r1, #1
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001d16:	f004 ff2b 	bl	8006b70 <HAL_RTCEx_BKUPRead>
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000a3c 	.word	0x20000a3c

08001d2c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	2102      	movs	r1, #2
 8001d38:	4803      	ldr	r0, [pc, #12]	; (8001d48 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001d3a:	f004 ff01 	bl	8006b40 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000a3c 	.word	0x20000a3c

08001d4c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001d52:	2102      	movs	r1, #2
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001d56:	f004 ff0b 	bl	8006b70 <HAL_RTCEx_BKUPRead>
 8001d5a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001d5c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000a3c 	.word	0x20000a3c

08001d6c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <GetTimerTicks+0x14>)
 8001d72:	f7ff fdd9 	bl	8001928 <LL_RTC_TIME_GetSubSecond>
 8001d76:	4603      	mov	r3, r0
 8001d78:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40002800 	.word	0x40002800

08001d84 <LL_AHB2_GRP1_EnableClock>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_APB1_GRP1_EnableClock>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_APB1_GRP1_DisableClock>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_APB2_GRP1_EnableClock>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_APB2_GRP1_DisableClock>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4e:	4013      	ands	r3, r2
 8001e50:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <MX_USART1_UART_Init+0x94>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea4:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001ea6:	f005 fb46 	bl	8007536 <HAL_UART_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001eb0:	f7ff f9c6 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001eb8:	f007 fb97 	bl	80095ea <HAL_UARTEx_SetTxFifoThreshold>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ec2:	f7ff f9bd 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001eca:	f007 fbcc 	bl	8009666 <HAL_UARTEx_SetRxFifoThreshold>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f7ff f9b4 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_USART1_UART_Init+0x90>)
 8001eda:	f007 fb4b 	bl	8009574 <HAL_UARTEx_EnableFifoMode>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee4:	f7ff f9ac 	bl	8001240 <Error_Handler>
  }

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000a88 	.word	0x20000a88
 8001ef0:	40013800 	.word	0x40013800

08001ef4 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2238      	movs	r2, #56	; 0x38
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f01e fd8d 	bl	8020a34 <memset>
  if(uartHandle->Instance==USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_UART_MspInit+0x1a0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d156      	bne.n	8001fd2 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_UART_MspInit+0x1a4>)
 8001f2a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 f995 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f3c:	f7ff f980 	bl	8001240 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f44:	f7ff ff60 	bl	8001e08 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7ff ff1b 	bl	8001d84 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f66:	4619      	mov	r1, r3
 8001f68:	484c      	ldr	r0, [pc, #304]	; (800209c <HAL_UART_MspInit+0x1a8>)
 8001f6a:	f001 fff9 	bl	8003f60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_UART_MspInit+0x1b0>)
 8001f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f76:	2212      	movs	r2, #18
 8001f78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9e:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fa4:	483e      	ldr	r0, [pc, #248]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001fa6:	f001 fbf1 	bl	800378c <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001fb0:	f7ff f946 	bl	8001240 <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001fb8:	679a      	str	r2, [r3, #120]	; 0x78
 8001fba:	4a39      	ldr	r2, [pc, #228]	; (80020a0 <HAL_UART_MspInit+0x1ac>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	2024      	movs	r0, #36	; 0x24
 8001fc6:	f001 fbaa 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fca:	2024      	movs	r0, #36	; 0x24
 8001fcc:	f001 fbc1 	bl	8003752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd0:	e05b      	b.n	800208a <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_UART_MspInit+0x1b4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d156      	bne.n	800208a <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_UART_MspInit+0x1b8>)
 8001fe2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 f939 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8001ff4:	f7ff f924 	bl	8001240 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ffc:	f7ff feda 	bl	8001db4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff febf 	bl	8001d84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8002006:	230c      	movs	r3, #12
 8002008:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002016:	2307      	movs	r3, #7
 8002018:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800201e:	4619      	mov	r1, r3
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f001 ff9c 	bl	8003f60 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_UART_MspInit+0x1b0>)
 800202c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002030:	2214      	movs	r2, #20
 8002032:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002036:	2210      	movs	r2, #16
 8002038:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002060:	f001 fb94 	bl	800378c <HAL_DMA_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_UART_MspInit+0x17a>
      Error_Handler();
 800206a:	f7ff f8e9 	bl	8001240 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002072:	679a      	str	r2, [r3, #120]	; 0x78
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_UART_MspInit+0x1bc>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2102      	movs	r1, #2
 800207e:	2025      	movs	r0, #37	; 0x25
 8002080:	f001 fb4d 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002084:	2025      	movs	r0, #37	; 0x25
 8002086:	f001 fb64 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3758      	adds	r7, #88	; 0x58
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40013800 	.word	0x40013800
 8002098:	00030001 	.word	0x00030001
 800209c:	48000400 	.word	0x48000400
 80020a0:	20000b18 	.word	0x20000b18
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40004400 	.word	0x40004400
 80020ac:	000c0004 	.word	0x000c0004
 80020b0:	20000c08 	.word	0x20000c08

080020b4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_UART_MspDeInit+0x68>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d110      	bne.n	80020e8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ca:	f7ff feb5 	bl	8001e38 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 80020ce:	21c0      	movs	r1, #192	; 0xc0
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <HAL_UART_MspDeInit+0x6c>)
 80020d2:	f002 f8a5 	bl	8004220 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fbfe 	bl	80038dc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020e0:	2024      	movs	r0, #36	; 0x24
 80020e2:	f001 fb44 	bl	800376e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80020e6:	e015      	b.n	8002114 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_UART_MspDeInit+0x70>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d110      	bne.n	8002114 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020f6:	f7ff fe75 	bl	8001de4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 80020fa:	210c      	movs	r1, #12
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002100:	f002 f88e 	bl	8004220 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002108:	4618      	mov	r0, r3
 800210a:	f001 fbe7 	bl	80038dc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800210e:	2025      	movs	r0, #37	; 0x25
 8002110:	f001 fb2d 	bl	800376e <HAL_NVIC_DisableIRQ>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40013800 	.word	0x40013800
 8002120:	48000400 	.word	0x48000400
 8002124:	40004400 	.word	0x40004400

08002128 <LL_APB2_GRP1_ForceReset>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4313      	orrs	r3, r2
 800213e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <LL_APB2_GRP1_ReleaseReset>:
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	43db      	mvns	r3, r3
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002160:	4013      	ands	r3, r2
 8002162:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
	...

08002170 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <LL_EXTI_EnableIT_0_31+0x24>)
 800217a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800217e:	4905      	ldr	r1, [pc, #20]	; (8002194 <LL_EXTI_EnableIT_0_31+0x24>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	58000800 	.word	0x58000800

08002198 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <vcom_Init+0x28>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80021a6:	f7fe feed 	bl	8000f84 <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 80021aa:	f7ff fe57 	bl	8001e5c <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80021ae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80021b2:	f7ff ffdd 	bl	8002170 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80021b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000c6c 	.word	0x20000c6c

080021c4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80021c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021cc:	f7ff ffac 	bl	8002128 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80021d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d4:	f7ff ffb9 	bl	800214a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <vcom_DeInit+0x28>)
 80021da:	f7ff ff6b 	bl	80020b4 <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80021de:	200f      	movs	r0, #15
 80021e0:	f001 fac5 	bl	800376e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80021e4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000a88 	.word	0x20000a88

080021f0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	461a      	mov	r2, r3
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <vcom_Trace_DMA+0x24>)
 8002204:	f005 fa3e 	bl	8007684 <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 8002208:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a88 	.word	0x20000a88

08002218 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <vcom_ReceiveInit+0x70>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002226:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800222a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002234:	4815      	ldr	r0, [pc, #84]	; (800228c <vcom_ReceiveInit+0x74>)
 8002236:	f007 f910 	bl	800945a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800223a:	bf00      	nop
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <vcom_ReceiveInit+0x74>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d0f7      	beq.n	800223c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800224c:	bf00      	nop
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <vcom_ReceiveInit+0x74>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225c:	d1f7      	bne.n	800224e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <vcom_ReceiveInit+0x74>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <vcom_ReceiveInit+0x74>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800226c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <vcom_ReceiveInit+0x74>)
 8002270:	f007 f94e 	bl	8009510 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	4906      	ldr	r1, [pc, #24]	; (8002290 <vcom_ReceiveInit+0x78>)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <vcom_ReceiveInit+0x74>)
 800227a:	f005 f9ad 	bl	80075d8 <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 800227e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000c70 	.word	0x20000c70
 800228c:	20000a88 	.word	0x20000a88
 8002290:	20000c68 	.word	0x20000c68

08002294 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_UART_TxCpltCallback+0x18>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2000      	movs	r0, #0
 80022a2:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000c6c 	.word	0x20000c6c

080022b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_UART_RxCpltCallback+0x38>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_UART_RxCpltCallback+0x26>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_UART_RxCpltCallback+0x38>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2101      	movs	r1, #1
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <HAL_UART_RxCpltCallback+0x3c>)
 80022d4:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80022d6:	2201      	movs	r2, #1
 80022d8:	4904      	ldr	r1, [pc, #16]	; (80022ec <HAL_UART_RxCpltCallback+0x3c>)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 f97c 	bl	80075d8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000c70 	.word	0x20000c70
 80022ec:	20000c68 	.word	0x20000c68

080022f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022f4:	f7ff fb12 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <LoopForever+0x6>)
  ldr r1, =_edata
 80022fa:	490d      	ldr	r1, [pc, #52]	; (8002330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <LoopForever+0xe>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002310:	4c0a      	ldr	r4, [pc, #40]	; (800233c <LoopForever+0x16>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800231e:	f01e fba3 	bl	8020a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002322:	f7fe fe6f 	bl	8001004 <main>

08002326 <LoopForever>:

LoopForever:
    b LoopForever
 8002326:	e7fe      	b.n	8002326 <LoopForever>
  ldr   r0, =_estack
 8002328:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002334:	0802343c 	.word	0x0802343c
  ldr r2, =_sbss
 8002338:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800233c:	200048b4 	.word	0x200048b4

08002340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>

08002342 <LL_AHB2_GRP1_EnableClock>:
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4313      	orrs	r3, r2
 8002358:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff ffd7 	bl	8002342 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002394:	2320      	movs	r3, #32
 8002396:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <BSP_LED_Init+0x60>)
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	f107 020c 	add.w	r2, r7, #12
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 fdd4 	bl	8003f60 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <BSP_LED_Init+0x60>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	2120      	movs	r1, #32
 80023c2:	2201      	movs	r2, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fff9 	bl	80043bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000004 	.word	0x20000004

080023d8 <LL_AHB2_GRP1_EnableClock>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff ffdb 	bl	80023d8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002422:	2310      	movs	r3, #16
 8002424:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243a:	f001 fd91 	bl	8003f60 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800243e:	2320      	movs	r3, #32
 8002440:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244a:	f001 fd89 	bl	8003f60 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800244e:	2200      	movs	r2, #0
 8002450:	2120      	movs	r1, #32
 8002452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002456:	f001 ffb1 	bl	80043bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800245a:	2200      	movs	r2, #0
 800245c:	2110      	movs	r1, #16
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f001 ffab 	bl	80043bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d83f      	bhi.n	8002500 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	08002499 	.word	0x08002499
 800248c:	080024b3 	.word	0x080024b3
 8002490:	080024cd 	.word	0x080024cd
 8002494:	080024e7 	.word	0x080024e7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2110      	movs	r1, #16
 800249c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a0:	f001 ff8c 	bl	80043bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2120      	movs	r1, #32
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ac:	f001 ff86 	bl	80043bc <HAL_GPIO_WritePin>
      break;      
 80024b0:	e027      	b.n	8002502 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ba:	f001 ff7f 	bl	80043bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80024be:	2200      	movs	r2, #0
 80024c0:	2120      	movs	r1, #32
 80024c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c6:	f001 ff79 	bl	80043bc <HAL_GPIO_WritePin>
      break;
 80024ca:	e01a      	b.n	8002502 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80024cc:	2201      	movs	r2, #1
 80024ce:	2110      	movs	r1, #16
 80024d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d4:	f001 ff72 	bl	80043bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80024d8:	2201      	movs	r2, #1
 80024da:	2120      	movs	r1, #32
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f001 ff6c 	bl	80043bc <HAL_GPIO_WritePin>
      break;
 80024e4:	e00d      	b.n	8002502 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80024e6:	2200      	movs	r2, #0
 80024e8:	2110      	movs	r1, #16
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ee:	f001 ff65 	bl	80043bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80024f2:	2201      	movs	r2, #1
 80024f4:	2120      	movs	r1, #32
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fa:	f001 ff5f 	bl	80043bc <HAL_GPIO_WritePin>
      break;
 80024fe:	e000      	b.n	8002502 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002500:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002510:	2302      	movs	r3, #2
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002542:	2003      	movs	r0, #3
 8002544:	f001 f8e0 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002548:	f003 fcac 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 800254c:	4603      	mov	r3, r0
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_Init+0x3c>)
 8002550:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002552:	200f      	movs	r0, #15
 8002554:	f7ff f9b8 	bl	80018c8 <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	e001      	b.n	8002568 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002564:	f7fe ff40 	bl	80013e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002568:	79fb      	ldrb	r3, [r7, #7]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_IncTick+0x1c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_IncTick+0x20>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a03      	ldr	r2, [pc, #12]	; (8002598 <HAL_IncTick+0x20>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	2000000c 	.word	0x2000000c
 8002598:	20000c74 	.word	0x20000c74

0800259c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_GetUIDw0+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	1fff7590 	.word	0x1fff7590

080025b0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_GetUIDw1+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	1fff7594 	.word	0x1fff7594

080025c4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025c8:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <HAL_GetUIDw2+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	1fff7598 	.word	0x1fff7598

080025d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2107      	movs	r1, #7
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	431a      	orrs	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	210f      	movs	r1, #15
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	401a      	ands	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	f003 010f 	and.w	r1, r3, #15
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0219      	lsls	r1, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	400b      	ands	r3, r1
 8002722:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272a:	431a      	orrs	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800274a:	f023 0317 	bic.w	r3, r3, #23
 800274e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002770:	f023 0317 	bic.w	r3, r3, #23
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002796:	d101      	bne.n	800279c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b8:	f023 0317 	bic.w	r3, r3, #23
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027de:	f023 0317 	bic.w	r3, r3, #23
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d101      	bne.n	8002830 <LL_ADC_IsDisableOngoing+0x18>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <LL_ADC_IsDisableOngoing+0x1a>
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800284c:	f023 0317 	bic.w	r3, r3, #23
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002872:	f023 0317 	bic.w	r3, r3, #23
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d101      	bne.n	80028a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1ae      	b.n	8002c2c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe f9c7 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff44 	bl	8002782 <LL_ADC_IsInternalRegulatorEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d115      	bne.n	800292c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff18 	bl	800273a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800290a:	4b9b      	ldr	r3, [pc, #620]	; (8002b78 <HAL_ADC_Init+0x2cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_ADC_Init+0x2d0>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	3301      	adds	r3, #1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800291e:	e002      	b.n	8002926 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3b01      	subs	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff26 	bl	8002782 <LL_ADC_IsInternalRegulatorEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff93 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002962:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 8154 	bne.w	8002c1a <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 8150 	bne.w	8002c1a <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff30 	bl	80027f4 <LL_ADC_IsEnabled>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d14f      	bne.n	8002a3a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f023 0118 	bic.w	r1, r3, #24
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029bc:	4313      	orrs	r3, r2
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d111      	bne.n	80029f2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80029e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80029e6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_ADC_Init+0x2d4>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a0e:	d014      	beq.n	8002a3a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d00f      	beq.n	8002a3a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a22:	d00a      	beq.n	8002a3a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_ADC_Init+0x2d8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a34:	4953      	ldr	r1, [pc, #332]	; (8002b84 <HAL_ADC_Init+0x2d8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7e1b      	ldrb	r3, [r3, #24]
 8002a3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7e5b      	ldrb	r3, [r3, #25]
 8002a44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e9b      	ldrb	r3, [r3, #26]
 8002a4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a4e:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_Init+0x1b2>
 8002a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_Init+0x1b4>
 8002a5e:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a66:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da04      	bge.n	8002a7a <HAL_ADC_Init+0x1ce>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	e001      	b.n	8002a7e <HAL_ADC_Init+0x1d2>
 8002a7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002a7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a86:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a88:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d114      	bne.n	8002ac4 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e9b      	ldrb	r3, [r3, #26]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002aea:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_ADC_Init+0x2dc>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	461a      	mov	r2, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	f7ff fd7d 	bl	8002616 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	461a      	mov	r2, r3
 8002b26:	4919      	ldr	r1, [pc, #100]	; (8002b8c <HAL_ADC_Init+0x2e0>)
 8002b28:	f7ff fd75 	bl	8002616 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f062 020f 	orn	r2, r2, #15
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
 8002b44:	e044      	b.n	8002bd0 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b4e:	d13f      	bne.n	8002bd0 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e00c      	b.n	8002b70 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	d012      	beq.n	8002b90 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b07      	cmp	r3, #7
 8002b74:	d9ef      	bls.n	8002b56 <HAL_ADC_Init+0x2aa>
 8002b76:	e00c      	b.n	8002b92 <HAL_ADC_Init+0x2e6>
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	053e2d63 	.word	0x053e2d63
 8002b80:	1ffffc02 	.word	0x1ffffc02
 8002b84:	40012708 	.word	0x40012708
 8002b88:	dffffc02 	.word	0xdffffc02
 8002b8c:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002b90:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f062 020f 	orn	r2, r2, #15
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba8:	e012      	b.n	8002bd0 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f003 031c 	and.w	r3, r3, #28
 8002bbc:	f06f 020f 	mvn.w	r2, #15
 8002bc0:	fa02 f103 	lsl.w	r1, r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_ADC_Init+0x388>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002bf6:	e018      	b.n	8002c2a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f023 0312 	bic.w	r3, r3, #18
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	833fffe7 	.word	0x833fffe7

08002c38 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06a      	b.n	8002d20 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fabe 	bl	80031d8 <ADC_ConversionStop>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fb82 	bl	8003370 <ADC_Disable>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd6d 	bl	8002760 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002c94:	f023 0303 	bic.w	r3, r3, #3
 8002c98:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f240 329f 	movw	r2, #927	; 0x39f
 8002ca2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_ADC_DeInit+0xf0>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002cc2:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0207 	bic.w	r2, r2, #7
 8002cd2:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_ADC_DeInit+0xf4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_ADC_DeInit+0xf4>)
 8002cf8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002cfc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd ffca 	bl	8000c98 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	833e0200 	.word	0x833e0200
 8002d2c:	40012708 	.word	0x40012708

08002d30 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fda3 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d132      	bne.n	8002dae <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_Start+0x26>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e02e      	b.n	8002db4 <HAL_ADC_Start+0x84>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa80 	bl	8003264 <ADC_Enable>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11a      	bne.n	8002da4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	221c      	movs	r2, #28
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fd4d 	bl	800283c <LL_ADC_REG_StartConversion>
 8002da2:	e006      	b.n	8002db2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002dac:	e001      	b.n	8002db2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Stop+0x16>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e022      	b.n	8002e18 <HAL_ADC_Stop+0x5c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9fc 	bl	80031d8 <ADC_ConversionStop>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d111      	bne.n	8002e0e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fac0 	bl	8003370 <ADC_Disable>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d102      	bne.n	8002e38 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002e32:	2308      	movs	r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e010      	b.n	8002e5a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e077      	b.n	8002f46 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002e56:	2304      	movs	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e5a:	f7fe fd3f 	bl	80018dc <HAL_GetTick>
 8002e5e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e60:	e021      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d01d      	beq.n	8002ea6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e6a:	f7fe fd37 	bl	80018dc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <HAL_ADC_PollForConversion+0x60>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0d6      	beq.n	8002e62 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fbc4 	bl	8002652 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d031      	beq.n	8002f34 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7e9b      	ldrb	r3, [r3, #26]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d12d      	bne.n	8002f34 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d126      	bne.n	8002f34 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fccc 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d112      	bne.n	8002f1c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 020c 	bic.w	r2, r2, #12
 8002f04:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58
 8002f1a:	e00b      	b.n	8002f34 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	220c      	movs	r2, #12
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x28>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e110      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x24a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc73 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 80f7 	bne.w	8003198 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	f000 80b1 	beq.w	8003116 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fc2:	4a7e      	ldr	r2, [pc, #504]	; (80031bc <HAL_ADC_ConfigChannel+0x254>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff fb70 	bl	80026b8 <LL_ADC_REG_SetSequencerChAdd>
 8002fd8:	e041      	b.n	800305e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_ADC_ConfigChannel+0xa0>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	e011      	b.n	800302c <HAL_ADC_ConfigChannel+0xc4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	6849      	ldr	r1, [r1, #4]
 8003030:	f001 011f 	and.w	r1, r1, #31
 8003034:	408b      	lsls	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	429a      	cmp	r2, r3
 800304a:	d808      	bhi.n	800305e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	f7ff fb0c 	bl	8002676 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	461a      	mov	r2, r3
 800306c:	f7ff fb49 	bl	8002702 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f280 8097 	bge.w	80031a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800307a:	4851      	ldr	r0, [pc, #324]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 800307c:	f7ff fabe 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 8003080:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4f      	ldr	r2, [pc, #316]	; (80031c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d120      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11b      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309c:	4619      	mov	r1, r3
 800309e:	4848      	ldr	r0, [pc, #288]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 80030a0:	f7ff fa9a 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_ADC_ConfigChannel+0x260>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_ADC_ConfigChannel+0x264>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030be:	e002      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030cc:	e06c      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3f      	ldr	r2, [pc, #252]	; (80031d0 <HAL_ADC_ConfigChannel+0x268>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10c      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x18a>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e8:	4619      	mov	r1, r3
 80030ea:	4835      	ldr	r0, [pc, #212]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 80030ec:	f7ff fa74 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
 80030f0:	e05a      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <HAL_ADC_ConfigChannel+0x26c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d155      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d150      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800310c:	4619      	mov	r1, r3
 800310e:	482c      	ldr	r0, [pc, #176]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 8003110:	f7ff fa62 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
 8003114:	e048      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800311e:	d004      	beq.n	800312a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_ADC_ConfigChannel+0x254>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d107      	bne.n	800313a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f7ff fad1 	bl	80026dc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	da32      	bge.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003142:	481f      	ldr	r0, [pc, #124]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 8003144:	f7ff fa5a 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 8003148:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800315a:	4619      	mov	r1, r3
 800315c:	4818      	ldr	r0, [pc, #96]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 800315e:	f7ff fa3b 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
 8003162:	e021      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_ADC_ConfigChannel+0x268>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d107      	bne.n	800317e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003174:	4619      	mov	r1, r3
 8003176:	4812      	ldr	r0, [pc, #72]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 8003178:	f7ff fa2e 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
 800317c:	e014      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_ADC_ConfigChannel+0x26c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10f      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800318e:	4619      	mov	r1, r3
 8003190:	480b      	ldr	r0, [pc, #44]	; (80031c0 <HAL_ADC_ConfigChannel+0x258>)
 8003192:	f7ff fa21 	bl	80025d8 <LL_ADC_SetCommonPathInternalCh>
 8003196:	e007      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	80000004 	.word	0x80000004
 80031c0:	40012708 	.word	0x40012708
 80031c4:	b0001000 	.word	0xb0001000
 80031c8:	20000000 	.word	0x20000000
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	b8004000 	.word	0xb8004000
 80031d4:	b4002000 	.word	0xb4002000

080031d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb4f 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d033      	beq.n	8003258 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fb0f 	bl	8002818 <LL_ADC_IsDisableOngoing>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fb2c 	bl	8002862 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800320a:	f7fe fb67 	bl	80018dc <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003210:	e01b      	b.n	800324a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003212:	f7fe fb63 	bl	80018dc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d914      	bls.n	800324a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e007      	b.n	800325a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1dc      	bne.n	8003212 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fabd 	bl	80027f4 <LL_ADC_IsEnabled>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d169      	bne.n	8003354 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <ADC_Enable+0xfc>)
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e055      	b.n	8003356 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa7a 	bl	80027a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032b4:	482b      	ldr	r0, [pc, #172]	; (8003364 <ADC_Enable+0x100>)
 80032b6:	f7ff f9a1 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00f      	beq.n	80032e4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <ADC_Enable+0x104>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	4a28      	ldr	r2, [pc, #160]	; (800336c <ADC_Enable+0x108>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	3301      	adds	r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032d6:	e002      	b.n	80032de <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3b01      	subs	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7e5b      	ldrb	r3, [r3, #25]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d033      	beq.n	8003354 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80032ec:	f7fe faf6 	bl	80018dc <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032f2:	e028      	b.n	8003346 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fa7b 	bl	80027f4 <LL_ADC_IsEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fa4d 	bl	80027a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800330e:	f7fe fae5 	bl	80018dc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d914      	bls.n	8003346 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d00d      	beq.n	8003346 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e007      	b.n	8003356 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d1cf      	bne.n	80032f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	80000017 	.word	0x80000017
 8003364:	40012708 	.word	0x40012708
 8003368:	20000000 	.word	0x20000000
 800336c:	053e2d63 	.word	0x053e2d63

08003370 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fa4b 	bl	8002818 <LL_ADC_IsDisableOngoing>
 8003382:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fa33 	bl	80027f4 <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d047      	beq.n	8003424 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d144      	bne.n	8003424 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0305 	and.w	r3, r3, #5
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10c      	bne.n	80033c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fa0e 	bl	80027ce <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ba:	f7fe fa8f 	bl	80018dc <HAL_GetTick>
 80033be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c0:	e029      	b.n	8003416 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	f043 0210 	orr.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e023      	b.n	8003426 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033de:	f7fe fa7d 	bl	80018dc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d914      	bls.n	8003416 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e007      	b.n	8003426 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1dc      	bne.n	80033de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <LL_ADC_IsEnabled>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <LL_ADC_IsEnabled+0x18>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <LL_ADC_IsEnabled+0x1a>
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <LL_ADC_IsCalibrationOnGoing>:
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003466:	d101      	bne.n	800346c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADCEx_Calibration_Start+0x1a>
 800348e:	2302      	movs	r3, #2
 8003490:	e068      	b.n	8003564 <HAL_ADCEx_Calibration_Start+0xec>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff68 	bl	8003370 <ADC_Disable>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ffc0 	bl	800342e <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d14c      	bne.n	800354e <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034bc:	f043 0202 	orr.w	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0203 	bic.w	r2, r2, #3
 80034de:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ee:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034f0:	e014      	b.n	800351c <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3301      	adds	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80034fe:	d30d      	bcc.n	800351c <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f023 0312 	bic.w	r3, r3, #18
 8003508:	f043 0210 	orr.w	r2, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e023      	b.n	8003564 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff96 	bl	8003452 <LL_ADC_IsCalibrationOnGoing>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e2      	bne.n	80034f2 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	659a      	str	r2, [r3, #88]	; 0x58
 800354c:	e005      	b.n	800355a <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359e:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60d3      	str	r3, [r2, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <__NVIC_GetPriorityGrouping+0x18>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 0307 	and.w	r3, r3, #7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db0b      	blt.n	80035fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4906      	ldr	r1, [pc, #24]	; (8003604 <__NVIC_EnableIRQ+0x34>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2001      	movs	r0, #1
 80035f2:	fa00 f202 	lsl.w	r2, r0, r2
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db12      	blt.n	8003640 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	490a      	ldr	r1, [pc, #40]	; (800364c <__NVIC_DisableIRQ+0x44>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	3320      	adds	r3, #32
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003634:	f3bf 8f4f 	dsb	sy
}
 8003638:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800363a:	f3bf 8f6f 	isb	sy
}
 800363e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff2b 	bl	800356c <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff42 	bl	80035b4 <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ffb4 	bl	80036a4 <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff83 	bl	8003650 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff35 	bl	80035d0 <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff43 	bl	8003608 <__NVIC_DisableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e08e      	b.n	80038bc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_DMA_Init+0x138>)
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d80f      	bhi.n	80037ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b45      	ldr	r3, [pc, #276]	; (80038c8 <HAL_DMA_Init+0x13c>)
 80037b2:	4413      	add	r3, r2
 80037b4:	4a45      	ldr	r2, [pc, #276]	; (80038cc <HAL_DMA_Init+0x140>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <HAL_DMA_Init+0x144>)
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
 80037c8:	e00e      	b.n	80037e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_DMA_Init+0x148>)
 80037d2:	4413      	add	r3, r2
 80037d4:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <HAL_DMA_Init+0x140>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	009a      	lsls	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <HAL_DMA_Init+0x14c>)
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb24 	bl	8003e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003848:	d102      	bne.n	8003850 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800385c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003866:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <HAL_DMA_Init+0x106>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d80c      	bhi.n	8003892 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb4d 	bl	8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	e008      	b.n	80038a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020407 	.word	0x40020407
 80038c8:	bffdfff8 	.word	0xbffdfff8
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	40020000 	.word	0x40020000
 80038d4:	bffdfbf8 	.word	0xbffdfbf8
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07b      	b.n	80039e6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_DMA_DeInit+0x114>)
 8003906:	429a      	cmp	r2, r3
 8003908:	d80f      	bhi.n	800392a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_DMA_DeInit+0x118>)
 8003912:	4413      	add	r3, r2
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_DMA_DeInit+0x11c>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	009a      	lsls	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a35      	ldr	r2, [pc, #212]	; (80039fc <HAL_DMA_DeInit+0x120>)
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 8003928:	e00e      	b.n	8003948 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_DMA_DeInit+0x124>)
 8003932:	4413      	add	r3, r2
 8003934:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_DMA_DeInit+0x11c>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	009a      	lsls	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <HAL_DMA_DeInit+0x128>)
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 021c 	and.w	r2, r3, #28
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa8f 	bl	8003e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800397a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <HAL_DMA_DeInit+0xc8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d80b      	bhi.n	80039a4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fac3 	bl	8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039a2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40020407 	.word	0x40020407
 80039f4:	bffdfff8 	.word	0xbffdfff8
 80039f8:	cccccccd 	.word	0xcccccccd
 80039fc:	40020000 	.word	0x40020000
 8003a00:	bffdfbf8 	.word	0xbffdfbf8
 8003a04:	40020400 	.word	0x40020400

08003a08 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_DMA_Start_IT+0x20>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e069      	b.n	8003afc <HAL_DMA_Start_IT+0xf4>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d155      	bne.n	8003ae8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f9d3 	bl	8003e0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 020e 	orr.w	r2, r2, #14
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e00f      	b.n	8003aa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 020a 	orr.w	r2, r2, #10
 8003a9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e008      	b.n	8003afa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e04f      	b.n	8003bb6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d008      	beq.n	8003b34 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e040      	b.n	8003bb6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 020e 	bic.w	r2, r2, #14
 8003b42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 021c 	and.w	r2, r3, #28
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d005      	beq.n	8003be4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e047      	b.n	8003c74 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 020e 	bic.w	r2, r2, #14
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f003 021c 	and.w	r2, r3, #28
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f202 	lsl.w	r2, r1, r2
 8003c26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
    }
  }
  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f003 031c 	and.w	r3, r3, #28
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x7c>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0204 	bic.w	r2, r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f003 021c 	and.w	r2, r3, #28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8081 	beq.w	8003df4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003cfa:	e07b      	b.n	8003df4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f003 031c 	and.w	r3, r3, #28
 8003d04:	2202      	movs	r2, #2
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d03d      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x10c>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d038      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020a 	bic.w	r2, r2, #10
 8003d36:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <HAL_DMA_IRQHandler+0x180>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d909      	bls.n	8003d60 <HAL_DMA_IRQHandler+0xe0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 031c 	and.w	r3, r3, #28
 8003d54:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_DMA_IRQHandler+0x184>)
 8003d56:	2102      	movs	r1, #2
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	6053      	str	r3, [r2, #4]
 8003d5e:	e008      	b.n	8003d72 <HAL_DMA_IRQHandler+0xf2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f003 031c 	and.w	r3, r3, #28
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_DMA_IRQHandler+0x188>)
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d038      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d8a:	e033      	b.n	8003df4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 031c 	and.w	r3, r3, #28
 8003d94:	2208      	movs	r2, #8
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x176>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 021c 	and.w	r2, r3, #28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
}
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40020080 	.word	0x40020080
 8003e04:	40020400 	.word	0x40020400
 8003e08:	40020000 	.word	0x40020000

08003e0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f003 021c 	and.w	r2, r3, #28
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f202 	lsl.w	r2, r1, r2
 8003e48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d108      	bne.n	8003e6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e6a:	e007      	b.n	8003e7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
	...

08003e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d813      	bhi.n	8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3b08      	subs	r3, #8
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e011      	b.n	8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	009a      	lsls	r2, r3, #2
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3b08      	subs	r3, #8
 8003edc:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	3307      	adds	r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003eec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40020407 	.word	0x40020407
 8003f0c:	cccccccd 	.word	0xcccccccd
 8003f10:	4002081c 	.word	0x4002081c
 8003f14:	40020880 	.word	0x40020880

08003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2201      	movs	r2, #1
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	1000823f 	.word	0x1000823f
 8003f5c:	40020940 	.word	0x40020940

08003f60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6e:	e140      	b.n	80041f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8132 	beq.w	80041ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d005      	beq.n	8003fa0 <HAL_GPIO_Init+0x40>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d130      	bne.n	8004002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	f003 0201 	and.w	r2, r3, #1
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b03      	cmp	r3, #3
 800400c:	d017      	beq.n	800403e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d123      	bne.n	8004092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	08da      	lsrs	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3208      	adds	r2, #8
 8004052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	6939      	ldr	r1, [r7, #16]
 800408e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0203 	and.w	r2, r3, #3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 808c 	beq.w	80041ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80040d4:	4a4e      	ldr	r2, [pc, #312]	; (8004210 <HAL_GPIO_Init+0x2b0>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	2207      	movs	r2, #7
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040fe:	d00d      	beq.n	800411c <HAL_GPIO_Init+0x1bc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a44      	ldr	r2, [pc, #272]	; (8004214 <HAL_GPIO_Init+0x2b4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <HAL_GPIO_Init+0x1b8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a43      	ldr	r2, [pc, #268]	; (8004218 <HAL_GPIO_Init+0x2b8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_GPIO_Init+0x1b4>
 8004110:	2302      	movs	r3, #2
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x1be>
 8004114:	2307      	movs	r3, #7
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x1be>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x1be>
 800411c:	2300      	movs	r3, #0
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800412e:	4938      	ldr	r1, [pc, #224]	; (8004210 <HAL_GPIO_Init+0x2b0>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800413c:	4b37      	ldr	r3, [pc, #220]	; (800421c <HAL_GPIO_Init+0x2bc>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004162:	4a2e      	ldr	r2, [pc, #184]	; (800421c <HAL_GPIO_Init+0x2bc>)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_GPIO_Init+0x2bc>)
 800416c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004170:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <HAL_GPIO_Init+0x2bc>)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_GPIO_Init+0x2bc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_GPIO_Init+0x2bc>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_GPIO_Init+0x2bc>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_GPIO_Init+0x2bc>)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f aeb7 	bne.w	8003f70 <HAL_GPIO_Init+0x10>
  }
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010000 	.word	0x40010000
 8004214:	48000400 	.word	0x48000400
 8004218:	48000800 	.word	0x48000800
 800421c:	58000800 	.word	0x58000800

08004220 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800422e:	e0af      	b.n	8004390 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004230:	2201      	movs	r2, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a2 	beq.w	800438a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004246:	4a59      	ldr	r2, [pc, #356]	; (80043ac <HAL_GPIO_DeInit+0x18c>)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	2207      	movs	r2, #7
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800426e:	d00d      	beq.n	800428c <HAL_GPIO_DeInit+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a4f      	ldr	r2, [pc, #316]	; (80043b0 <HAL_GPIO_DeInit+0x190>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_DeInit+0x68>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <HAL_GPIO_DeInit+0x194>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_GPIO_DeInit+0x64>
 8004280:	2302      	movs	r3, #2
 8004282:	e004      	b.n	800428e <HAL_GPIO_DeInit+0x6e>
 8004284:	2307      	movs	r3, #7
 8004286:	e002      	b.n	800428e <HAL_GPIO_DeInit+0x6e>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_GPIO_DeInit+0x6e>
 800428c:	2300      	movs	r3, #0
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	f002 0203 	and.w	r2, r2, #3
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	4093      	lsls	r3, r2
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d136      	bne.n	800430c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800429e:	4b46      	ldr	r3, [pc, #280]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	4943      	ldr	r1, [pc, #268]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80042b0:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	493f      	ldr	r1, [pc, #252]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042bc:	4013      	ands	r3, r2
 80042be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	493b      	ldr	r1, [pc, #236]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80042d0:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	4937      	ldr	r1, [pc, #220]	; (80043b8 <HAL_GPIO_DeInit+0x198>)
 80042da:	4013      	ands	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	2207      	movs	r2, #7
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042ee:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <HAL_GPIO_DeInit+0x18c>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	482b      	ldr	r0, [pc, #172]	; (80043ac <HAL_GPIO_DeInit+0x18c>)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	400a      	ands	r2, r1
 8004306:	3302      	adds	r3, #2
 8004308:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2103      	movs	r1, #3
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	08da      	lsrs	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3208      	adds	r2, #8
 8004328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	08d2      	lsrs	r2, r2, #3
 8004340:	4019      	ands	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3208      	adds	r2, #8
 8004346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2103      	movs	r1, #3
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	2101      	movs	r1, #1
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	401a      	ands	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2103      	movs	r1, #3
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	401a      	ands	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
    }

    position++;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	f47f af49 	bne.w	8004230 <HAL_GPIO_DeInit+0x10>
  }
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	48000400 	.word	0x48000400
 80043b4:	48000800 	.word	0x48000800
 80043b8:	58000800 	.word	0x58000800

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d8:	e002      	b.n	80043e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004402:	4a05      	ldr	r2, [pc, #20]	; (8004418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	4618      	mov	r0, r3
 800440c:	f005 fa5a 	bl	80098c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58000800 	.word	0x58000800

0800441c <LL_RCC_SetLPTIMClockSource>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	43db      	mvns	r3, r3
 8004434:	401a      	ands	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_RCC_GetLPTIMClockSource>:
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4013      	ands	r3, r2
 8004462:	0c1a      	lsrs	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4313      	orrs	r3, r2
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <LL_APB1_GRP1_ForceReset>:
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4313      	orrs	r3, r2
 8004488:	638b      	str	r3, [r1, #56]	; 0x38
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <LL_APB1_GRP2_ForceReset>:
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <LL_APB1_GRP1_ReleaseReset>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044cc:	4013      	ands	r3, r2
 80044ce:	638b      	str	r3, [r1, #56]	; 0x38
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <LL_APB1_GRP2_ReleaseReset>:
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f0:	4013      	ands	r3, r2
 80044f2:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0b6      	b.n	8004680 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fc ff65 	bl	80013fc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004552:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800455e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fac2 	bl	8004aec <LPTIM_WaitForFlag>
 8004568:	4603      	mov	r3, r0
 800456a:	2b03      	cmp	r3, #3
 800456c:	d101      	bne.n	8004572 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e086      	b.n	8004680 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 faea 	bl	8004b4c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 faaa 	bl	8004ad2 <HAL_LPTIM_GetState>
 800457e:	4603      	mov	r3, r0
 8004580:	2b03      	cmp	r3, #3
 8004582:	d101      	bne.n	8004588 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e07b      	b.n	8004680 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d004      	beq.n	80045a2 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a0:	d103      	bne.n	80045aa <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 031e 	bic.w	r3, r3, #30
 80045a8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d005      	beq.n	80045c2 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_LPTIM_Init+0x188>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045d2:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80045d8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80045de:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80045e4:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045fc:	4313      	orrs	r3, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d004      	beq.n	8004616 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004614:	d107      	bne.n	8004626 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800461e:	4313      	orrs	r3, r2
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800462e:	4293      	cmp	r3, r2
 8004630:	d00a      	beq.n	8004648 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800463a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004640:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <HAL_LPTIM_Init+0x18c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d108      	bne.n	800466c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	621a      	str	r2, [r3, #32]
 800466a:	e004      	b.n	8004676 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004674:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	ff19f1fe 	.word	0xff19f1fe
 800468c:	40007c00 	.word	0x40007c00

08004690 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <HAL_LPTIM_Counter_Start_IT+0x138>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <HAL_LPTIM_Counter_Start_IT+0x2e>
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b2:	4a46      	ldr	r2, [pc, #280]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046bc:	e015      	b.n	80046ea <HAL_LPTIM_Counter_Start_IT+0x5a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_LPTIM_Counter_Start_IT+0x140>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <HAL_LPTIM_Counter_Start_IT+0x4a>
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046d8:	e007      	b.n	80046ea <HAL_LPTIM_Counter_Start_IT+0x5a>
 80046da:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e0:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d00c      	beq.n	800470c <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 80046f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fa:	d107      	bne.n	800470c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800470a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2210      	movs	r2, #16
 8004722:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800472c:	2110      	movs	r1, #16
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9dc 	bl	8004aec <LPTIM_WaitForFlag>
 8004734:	4603      	mov	r3, r0
 8004736:	2b03      	cmp	r3, #3
 8004738:	d101      	bne.n	800473e <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e03f      	b.n	80047be <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fa04 	bl	8004b4c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f9c4 	bl	8004ad2 <HAL_LPTIM_GetState>
 800474a:	4603      	mov	r3, r0
 800474c:	2b03      	cmp	r3, #3
 800474e:	d101      	bne.n	8004754 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e034      	b.n	80047be <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0210 	orr.w	r2, r2, #16
 8004762:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0202 	orr.w	r2, r2, #2
 8004772:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004782:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004792:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0204 	orr.w	r2, r2, #4
 80047b2:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40007c00 	.word	0x40007c00
 80047cc:	58000800 	.word	0x58000800
 80047d0:	40009400 	.word	0x40009400

080047d4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d108      	bne.n	8004800 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 80047f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 80047f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047fe:	e015      	b.n	800482c <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_LPTIM_Counter_Stop_IT+0x48>
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 800480c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004816:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800481a:	e007      	b.n	800482c <HAL_LPTIM_Counter_Stop_IT+0x58>
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 800481e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f98d 	bl	8004b4c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f94d 	bl	8004ad2 <HAL_LPTIM_GetState>
 8004838:	4603      	mov	r3, r0
 800483a:	2b03      	cmp	r3, #3
 800483c:	d101      	bne.n	8004842 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e024      	b.n	800488c <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0210 	bic.w	r2, r2, #16
 8004850:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0202 	bic.w	r2, r2, #2
 8004860:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004870:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004880:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40007c00 	.word	0x40007c00
 8004898:	58000800 	.word	0x58000800
 800489c:	40009400 	.word	0x40009400

080048a0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10d      	bne.n	80048d2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d106      	bne.n	80048d2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8af 	bl	8004a30 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d10d      	bne.n	80048fc <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d106      	bne.n	80048fc <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2202      	movs	r2, #2
 80048f4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8a3 	bl	8004a42 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d10d      	bne.n	8004926 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d106      	bne.n	8004926 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f897 	bl	8004a54 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d10d      	bne.n	8004950 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b08      	cmp	r3, #8
 8004940:	d106      	bne.n	8004950 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2208      	movs	r2, #8
 8004948:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f88b 	bl	8004a66 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b10      	cmp	r3, #16
 800495c:	d10d      	bne.n	800497a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b10      	cmp	r3, #16
 800496a:	d106      	bne.n	800497a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2210      	movs	r2, #16
 8004972:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f87f 	bl	8004a78 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10d      	bne.n	80049a4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d106      	bne.n	80049a4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2220      	movs	r2, #32
 800499c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f873 	bl	8004a8a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d10d      	bne.n	80049ce <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d106      	bne.n	80049ce <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2240      	movs	r2, #64	; 0x40
 80049c6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f867 	bl	8004a9c <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d10d      	bne.n	80049f8 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d106      	bne.n	80049f8 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f85b 	bl	8004aae <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a06:	d10f      	bne.n	8004a28 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d107      	bne.n	8004a28 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a20:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f84c 	bl	8004ac0 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ae0:	b2db      	uxtb	r3, r3
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <LPTIM_WaitForFlag+0x58>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <LPTIM_WaitForFlag+0x5c>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	0b9b      	lsrs	r3, r3, #14
 8004b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d002      	beq.n	8004b36 <LPTIM_WaitForFlag+0x4a>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ec      	bne.n	8004b10 <LPTIM_WaitForFlag+0x24>

  return result;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000
 8004b48:	d1b71759 	.word	0xd1b71759

08004b4c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8004b58:	b672      	cpsid	i
}
 8004b5a:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a8c      	ldr	r2, [pc, #560]	; (8004d94 <LPTIM_Disable+0x248>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d015      	beq.n	8004b92 <LPTIM_Disable+0x46>
 8004b66:	4a8b      	ldr	r2, [pc, #556]	; (8004d94 <LPTIM_Disable+0x248>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d818      	bhi.n	8004b9e <LPTIM_Disable+0x52>
 8004b6c:	4a8a      	ldr	r2, [pc, #552]	; (8004d98 <LPTIM_Disable+0x24c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <LPTIM_Disable+0x2e>
 8004b72:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <LPTIM_Disable+0x250>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d006      	beq.n	8004b86 <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8004b78:	e011      	b.n	8004b9e <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b7a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004b7e:	f7ff fc66 	bl	800444e <LL_RCC_GetLPTIMClockSource>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b84:	e00c      	b.n	8004ba0 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b86:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004b8a:	f7ff fc60 	bl	800444e <LL_RCC_GetLPTIMClockSource>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b90:	e006      	b.n	8004ba0 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004b92:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004b96:	f7ff fc5a 	bl	800444e <LL_RCC_GetLPTIMClockSource>
 8004b9a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b9c:	e000      	b.n	8004ba0 <LPTIM_Disable+0x54>
      break;
 8004b9e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6f      	ldr	r2, [pc, #444]	; (8004d94 <LPTIM_Disable+0x248>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <LPTIM_Disable+0xc2>
 8004bda:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <LPTIM_Disable+0x248>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d81d      	bhi.n	8004c1c <LPTIM_Disable+0xd0>
 8004be0:	4a6d      	ldr	r2, [pc, #436]	; (8004d98 <LPTIM_Disable+0x24c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <LPTIM_Disable+0xa2>
 8004be6:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <LPTIM_Disable+0x250>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8004bec:	e016      	b.n	8004c1c <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004bee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004bf2:	f7ff fc3e 	bl	8004472 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004bf6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004bfa:	f7ff fc5c 	bl	80044b6 <LL_APB1_GRP1_ReleaseReset>
      break;
 8004bfe:	e00e      	b.n	8004c1e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004c00:	2020      	movs	r0, #32
 8004c02:	f7ff fc47 	bl	8004494 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004c06:	2020      	movs	r0, #32
 8004c08:	f7ff fc67 	bl	80044da <LL_APB1_GRP2_ReleaseReset>
      break;
 8004c0c:	e007      	b.n	8004c1e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004c0e:	2040      	movs	r0, #64	; 0x40
 8004c10:	f7ff fc40 	bl	8004494 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004c14:	2040      	movs	r0, #64	; 0x40
 8004c16:	f7ff fc60 	bl	80044da <LL_APB1_GRP2_ReleaseReset>
      break;
 8004c1a:	e000      	b.n	8004c1e <LPTIM_Disable+0xd2>
      break;
 8004c1c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <LPTIM_Disable+0xe6>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <LPTIM_Disable+0xe6>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8097 	beq.w	8004d60 <LPTIM_Disable+0x214>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a57      	ldr	r2, [pc, #348]	; (8004d94 <LPTIM_Disable+0x248>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <LPTIM_Disable+0x118>
 8004c3c:	4a55      	ldr	r2, [pc, #340]	; (8004d94 <LPTIM_Disable+0x248>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d815      	bhi.n	8004c6e <LPTIM_Disable+0x122>
 8004c42:	4a55      	ldr	r2, [pc, #340]	; (8004d98 <LPTIM_Disable+0x24c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <LPTIM_Disable+0x104>
 8004c48:	4a54      	ldr	r2, [pc, #336]	; (8004d9c <LPTIM_Disable+0x250>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d005      	beq.n	8004c5a <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8004c4e:	e00e      	b.n	8004c6e <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004c50:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004c54:	f7ff fbe2 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004c58:	e00a      	b.n	8004c70 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004c5a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004c5e:	f7ff fbdd 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004c62:	e005      	b.n	8004c70 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8004c64:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004c68:	f7ff fbd8 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004c6c:	e000      	b.n	8004c70 <LPTIM_Disable+0x124>
        break;
 8004c6e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01a      	beq.n	8004cac <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004c8e:	2108      	movs	r1, #8
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff2b 	bl	8004aec <LPTIM_WaitForFlag>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d103      	bne.n	8004ca4 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004cca:	2110      	movs	r1, #16
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff0d 	bl	8004aec <LPTIM_WaitForFlag>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d103      	bne.n	8004ce0 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2203      	movs	r2, #3
 8004cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2210      	movs	r2, #16
 8004ce6:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01c      	beq.n	8004d28 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff feee 	bl	8004aec <LPTIM_WaitForFlag>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d103      	bne.n	8004d1e <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d26:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <LPTIM_Disable+0x248>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d011      	beq.n	8004d56 <LPTIM_Disable+0x20a>
 8004d32:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <LPTIM_Disable+0x248>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d812      	bhi.n	8004d5e <LPTIM_Disable+0x212>
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <LPTIM_Disable+0x24c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <LPTIM_Disable+0x1fa>
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <LPTIM_Disable+0x250>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8004d44:	e00b      	b.n	8004d5e <LPTIM_Disable+0x212>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d48:	f7ff fb68 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004d4c:	e008      	b.n	8004d60 <LPTIM_Disable+0x214>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d50:	f7ff fb64 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004d54:	e004      	b.n	8004d60 <LPTIM_Disable+0x214>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d58:	f7ff fb60 	bl	800441c <LL_RCC_SetLPTIMClockSource>
        break;
 8004d5c:	e000      	b.n	8004d60 <LPTIM_Disable+0x214>
        break;
 8004d5e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d88:	b662      	cpsie	i
}
 8004d8a:	bf00      	nop

  __enable_irq();
}
 8004d8c:	bf00      	nop
 8004d8e:	3728      	adds	r7, #40	; 0x28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40009800 	.word	0x40009800
 8004d98:	40007c00 	.word	0x40007c00
 8004d9c:	40009400 	.word	0x40009400

08004da0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	58000400 	.word	0x58000400

08004dbc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dda:	d10d      	bne.n	8004df8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ddc:	f000 f83c 	bl	8004e58 <HAL_PWREx_DisableLowPowerRunMode>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004de6:	e015      	b.n	8004e14 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004df4:	f000 f822 	bl	8004e3c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004dfe:	f023 0304 	bic.w	r3, r3, #4
 8004e02:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e0a:	bf30      	wfi
 8004e0c:	e002      	b.n	8004e14 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e0e:	bf40      	sev
    __WFE();
 8004e10:	bf20      	wfe
    __WFE();
 8004e12:	bf20      	wfe
  }
}
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	58000400 	.word	0x58000400
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <HAL_PWREx_GetVoltageRange+0x14>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr
 8004e38:	58000400 	.word	0x58000400

08004e3c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4a:	6013      	str	r3, [r2, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	58000400 	.word	0x58000400

08004e58 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e68:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2232      	movs	r2, #50	; 0x32
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0c9b      	lsrs	r3, r3, #18
 8004e7c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e7e:	e002      	b.n	8004e86 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e92:	d102      	bne.n	8004e9a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f2      	bne.n	8004e80 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea6:	d101      	bne.n	8004eac <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e000      	b.n	8004eae <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	58000400 	.word	0x58000400
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	431bde83 	.word	0x431bde83

08004ec4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed4:	d101      	bne.n	8004eda <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	58000400 	.word	0x58000400

08004ee8 <LL_RCC_HSE_EnableTcxo>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_HSE_DisableTcxo>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d101      	bne.n	8004f38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <LL_RCC_HSE_Enable>:
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_HSE_Disable>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_HSE_IsReady>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f8c:	d101      	bne.n	8004f92 <LL_RCC_HSE_IsReady+0x18>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <LL_RCC_HSE_IsReady+0x1a>
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <LL_RCC_HSI_Enable>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_HSI_Disable>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_HSI_IsReady>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d101      	bne.n	8004fec <LL_RCC_HSI_IsReady+0x18>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <LL_RCC_HSI_IsReady+0x1a>
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <LL_RCC_LSE_IsReady>:
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d101      	bne.n	8005036 <LL_RCC_LSE_IsReady+0x18>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <LL_RCC_LSE_IsReady+0x1a>
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <LL_RCC_LSI_Enable>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <LL_RCC_LSI_Disable>:
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <LL_RCC_LSI_IsReady>:
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d101      	bne.n	8005098 <LL_RCC_LSI_IsReady+0x18>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <LL_RCC_LSI_IsReady+0x1a>
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_MSI_Enable>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <LL_RCC_MSI_Disable>:
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	6013      	str	r3, [r2, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <LL_RCC_MSI_IsReady>:
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d101      	bne.n	80050f0 <LL_RCC_MSI_IsReady+0x16>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <LL_RCC_MSI_IsReady+0x18>
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d101      	bne.n	8005110 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <LL_RCC_MSI_GetRange>:
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005162:	4313      	orrs	r3, r2
 8005164:	604b      	str	r3, [r1, #4]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <LL_RCC_SetSysClkSource>:
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <LL_RCC_GetSysClkSource>:
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_SetAHBPrescaler>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <LL_RCC_SetAHB3Prescaler>:
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e2:	f023 020f 	bic.w	r2, r3, #15
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_SetAPB1Prescaler>:
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <LL_RCC_SetAPB2Prescaler>:
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <LL_RCC_GetAHBPrescaler>:
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <LL_RCC_GetAHB3Prescaler>:
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <LL_RCC_GetAPB1Prescaler>:
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <LL_RCC_GetAPB2Prescaler>:
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d4:	6013      	str	r3, [r2, #0]
}
 80052d6:	bf00      	nop
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80052de:	b480      	push	{r7}
 80052e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80052e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f0:	d101      	bne.n	80052f6 <LL_RCC_PLL_IsReady+0x18>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <LL_RCC_PLL_IsReady+0x1a>
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536c:	d101      	bne.n	8005372 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005384:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d101      	bne.n	8005396 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053b2:	d101      	bne.n	80053b8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053c2:	b480      	push	{r7}
 80053c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d4:	d101      	bne.n	80053da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e38b      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f6:	f7ff fece 	bl	8005196 <LL_RCC_GetSysClkSource>
 80053fa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053fc:	f7ff ffa2 	bl	8005344 <LL_RCC_PLL_GetMainSource>
 8005400:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80c9 	beq.w	80055a2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x3e>
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d17b      	bne.n	8005514 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d178      	bne.n	8005514 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005422:	f7ff fe5a 	bl	80050da <LL_RCC_MSI_IsReady>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x54>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e36a      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800543c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCC_OscConfig+0x72>
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005454:	e006      	b.n	8005464 <HAL_RCC_OscConfig+0x80>
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005464:	4293      	cmp	r3, r2
 8005466:	d222      	bcs.n	80054ae <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fd51 	bl	8005f14 <RCC_SetFlashLatencyFromMSIRange>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e348      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005486:	f043 0308 	orr.w	r3, r3, #8
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fe4e 	bl	8005148 <LL_RCC_MSI_SetCalibTrimming>
 80054ac:	e021      	b.n	80054f2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b8:	f043 0308 	orr.w	r3, r3, #8
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe35 	bl	8005148 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fd16 	bl	8005f14 <RCC_SetFlashLatencyFromMSIRange>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e30d      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054f2:	f000 fcd7 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4aa1      	ldr	r2, [pc, #644]	; (8005780 <HAL_RCC_OscConfig+0x39c>)
 80054fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054fc:	4ba1      	ldr	r3, [pc, #644]	; (8005784 <HAL_RCC_OscConfig+0x3a0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fc f9e1 	bl	80018c8 <HAL_InitTick>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d047      	beq.n	80055a0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	e2fc      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02c      	beq.n	8005576 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800551c:	f7ff fdc1 	bl	80050a2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005520:	f7fc f9dc 	bl	80018dc <HAL_GetTick>
 8005524:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005528:	f7fc f9d8 	bl	80018dc <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e2e9      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800553a:	f7ff fdce 	bl	80050da <LL_RCC_MSI_IsReady>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f1      	beq.n	8005528 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fdea 	bl	8005148 <LL_RCC_MSI_SetCalibTrimming>
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005576:	f7ff fda2 	bl	80050be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800557a:	f7fc f9af 	bl	80018dc <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005582:	f7fc f9ab 	bl	80018dc <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e2bc      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005594:	f7ff fda1 	bl	80050da <LL_RCC_MSI_IsReady>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f1      	bne.n	8005582 <HAL_RCC_OscConfig+0x19e>
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d05f      	beq.n	800566e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_OscConfig+0x1dc>
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d10a      	bne.n	80055d6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c0:	f7ff fcdb 	bl	8004f7a <LL_RCC_HSE_IsReady>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d050      	beq.n	800566c <HAL_RCC_OscConfig+0x288>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d14c      	bne.n	800566c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e29b      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d102      	bne.n	80055fc <HAL_RCC_OscConfig+0x218>
 80055f6:	f7ff fca4 	bl	8004f42 <LL_RCC_HSE_Enable>
 80055fa:	e00d      	b.n	8005618 <HAL_RCC_OscConfig+0x234>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005604:	d104      	bne.n	8005610 <HAL_RCC_OscConfig+0x22c>
 8005606:	f7ff fc6f 	bl	8004ee8 <LL_RCC_HSE_EnableTcxo>
 800560a:	f7ff fc9a 	bl	8004f42 <LL_RCC_HSE_Enable>
 800560e:	e003      	b.n	8005618 <HAL_RCC_OscConfig+0x234>
 8005610:	f7ff fca5 	bl	8004f5e <LL_RCC_HSE_Disable>
 8005614:	f7ff fc76 	bl	8004f04 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fc f95c 	bl	80018dc <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005628:	f7fc f958 	bl	80018dc <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e269      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800563a:	f7ff fc9e 	bl	8004f7a <LL_RCC_HSE_IsReady>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f1      	beq.n	8005628 <HAL_RCC_OscConfig+0x244>
 8005644:	e013      	b.n	800566e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fc f949 	bl	80018dc <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564e:	f7fc f945 	bl	80018dc <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	; 0x64
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e256      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005660:	f7ff fc8b 	bl	8004f7a <LL_RCC_HSE_IsReady>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f1      	bne.n	800564e <HAL_RCC_OscConfig+0x26a>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04b      	beq.n	8005712 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d005      	beq.n	800568c <HAL_RCC_OscConfig+0x2a8>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d113      	bne.n	80056ae <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d110      	bne.n	80056ae <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800568c:	f7ff fca2 	bl	8004fd4 <LL_RCC_HSI_IsReady>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCC_OscConfig+0x2be>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e235      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fca5 	bl	8004ff6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ac:	e031      	b.n	8005712 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d019      	beq.n	80056ea <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b6:	f7ff fc71 	bl	8004f9c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fc f90f 	bl	80018dc <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c2:	f7fc f90b 	bl	80018dc <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e21c      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056d4:	f7ff fc7e 	bl	8004fd4 <LL_RCC_HSI_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f1      	beq.n	80056c2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fc87 	bl	8004ff6 <LL_RCC_HSI_SetCalibTrimming>
 80056e8:	e013      	b.n	8005712 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	f7ff fc65 	bl	8004fb8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fc f8f5 	bl	80018dc <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f6:	f7fc f8f1 	bl	80018dc <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e202      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005708:	f7ff fc64 	bl	8004fd4 <LL_RCC_HSI_IsReady>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f1      	bne.n	80056f6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d06f      	beq.n	80057fe <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d057      	beq.n	80057d6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	429a      	cmp	r2, r3
 800573c:	d036      	beq.n	80057ac <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e1db      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d018      	beq.n	8005792 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005760:	f7ff fc7e 	bl	8005060 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005764:	f7fc f8ba 	bl	80018dc <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800576a:	e00d      	b.n	8005788 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576c:	f7fc f8b6 	bl	80018dc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b11      	cmp	r3, #17
 8005778:	d906      	bls.n	8005788 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1c7      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
 800577e:	bf00      	nop
 8005780:	20000000 	.word	0x20000000
 8005784:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 8005788:	f7ff fc7a 	bl	8005080 <LL_RCC_LSI_IsReady>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ec      	bne.n	800576c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579a:	f023 0210 	bic.w	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ac:	f7ff fc48 	bl	8005040 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fc f894 	bl	80018dc <HAL_GetTick>
 80057b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fc f890 	bl	80018dc <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b11      	cmp	r3, #17
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1a1      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80057ca:	f7ff fc59 	bl	8005080 <LL_RCC_LSI_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f1      	beq.n	80057b8 <HAL_RCC_OscConfig+0x3d4>
 80057d4:	e013      	b.n	80057fe <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d6:	f7ff fc43 	bl	8005060 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fc f87f 	bl	80018dc <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e2:	f7fc f87b 	bl	80018dc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b11      	cmp	r3, #17
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e18c      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80057f4:	f7ff fc44 	bl	8005080 <LL_RCC_LSI_IsReady>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f1      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80d8 	beq.w	80059bc <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800580c:	f7ff fb5a 	bl	8004ec4 <LL_PWR_IsEnabledBkUpAccess>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d113      	bne.n	800583e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005816:	f7ff fac3 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581a:	f7fc f85f 	bl	80018dc <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005822:	f7fc f85b 	bl	80018dc <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e16c      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005834:	f7ff fb46 	bl	8004ec4 <LL_PWR_IsEnabledBkUpAccess>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f1      	beq.n	8005822 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d07b      	beq.n	800593e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b85      	cmp	r3, #133	; 0x85
 800584c:	d003      	beq.n	8005856 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b05      	cmp	r3, #5
 8005854:	d109      	bne.n	800586a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fc f837 	bl	80018dc <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005886:	f7fc f829 	bl	80018dc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	; 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e138      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800589c:	f7ff fbbf 	bl	800501e <LL_RCC_LSE_IsReady>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0ef      	beq.n	8005886 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b81      	cmp	r3, #129	; 0x81
 80058ac:	d003      	beq.n	80058b6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b85      	cmp	r3, #133	; 0x85
 80058b4:	d121      	bne.n	80058fa <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc f811 	bl	80018dc <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058d0:	e00a      	b.n	80058e8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fc f803 	bl	80018dc <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e112      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ec      	beq.n	80058d2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058f8:	e060      	b.n	80059bc <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fb ffef 	bl	80018dc <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005914:	e00a      	b.n	800592c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fb ffe1 	bl	80018dc <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e0f0      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ec      	bne.n	8005916 <HAL_RCC_OscConfig+0x532>
 800593c:	e03e      	b.n	80059bc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fb ffcd 	bl	80018dc <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fb ffbf 	bl	80018dc <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e0ce      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ec      	bne.n	800595a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fb ffac 	bl	80018dc <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7fb ff9e 	bl	80018dc <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0ad      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80059b2:	f7ff fb34 	bl	800501e <LL_RCC_LSE_IsReady>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ef      	bne.n	800599c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a3 	beq.w	8005b0c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d076      	beq.n	8005aba <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d14b      	bne.n	8005a6c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d4:	f7ff fc75 	bl	80052c2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fb ff80 	bl	80018dc <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fb ff7c 	bl	80018dc <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b0a      	cmp	r3, #10
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e08d      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80059f2:	f7ff fc74 	bl	80052de <LL_RCC_PLL_IsReady>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f1      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <HAL_RCC_OscConfig+0x734>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a0e:	4311      	orrs	r1, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a14:	0212      	lsls	r2, r2, #8
 8005a16:	4311      	orrs	r1, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a22:	4311      	orrs	r1, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a32:	f7ff fc38 	bl	80052a6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fb ff49 	bl	80018dc <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fb ff45 	bl	80018dc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b0a      	cmp	r3, #10
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e056      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a60:	f7ff fc3d 	bl	80052de <LL_RCC_PLL_IsReady>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f1      	beq.n	8005a4e <HAL_RCC_OscConfig+0x66a>
 8005a6a:	e04f      	b.n	8005b0c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6c:	f7ff fc29 	bl	80052c2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a92:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fb ff22 	bl	80018dc <HAL_GetTick>
 8005a98:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fb ff1e 	bl	80018dc <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b0a      	cmp	r3, #10
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e02f      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005aae:	f7ff fc16 	bl	80052de <LL_RCC_PLL_IsReady>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f1      	bne.n	8005a9c <HAL_RCC_OscConfig+0x6b8>
 8005ab8:	e028      	b.n	8005b0c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e023      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f003 0203 	and.w	r2, r3, #3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d115      	bne.n	8005b08 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10e      	bne.n	8005b08 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d106      	bne.n	8005b08 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	11c1808c 	.word	0x11c1808c

08005b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e10f      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b89      	ldr	r3, [pc, #548]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d91b      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b86      	ldr	r3, [pc, #536]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0207 	bic.w	r2, r3, #7
 8005b46:	4984      	ldr	r1, [pc, #528]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fb fec5 	bl	80018dc <HAL_GetTick>
 8005b52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b56:	f7fb fec1 	bl	80018dc <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0f3      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b68:	4b7b      	ldr	r3, [pc, #492]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d1ef      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fb10 	bl	80051ac <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b8c:	f7fb fea6 	bl	80018dc <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b94:	f7fb fea2 	bl	80018dc <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0d4      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ba6:	f7ff fbd8 	bl	800535a <LL_RCC_IsActiveFlag_HPRE>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f1      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d016      	beq.n	8005bea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fb06 	bl	80051d2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bc6:	f7fb fe89 	bl	80018dc <HAL_GetTick>
 8005bca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bce:	f7fb fe85 	bl	80018dc <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e0b7      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005be0:	f7ff fbcc 	bl	800537c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f1      	beq.n	8005bce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff faff 	bl	80051fe <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c00:	f7fb fe6c 	bl	80018dc <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c08:	f7fb fe68 	bl	80018dc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e09a      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c1a:	f7ff fbc1 	bl	80053a0 <LL_RCC_IsActiveFlag_PPRE1>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f1      	beq.n	8005c08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff faf4 	bl	8005224 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c3c:	f7fb fe4e 	bl	80018dc <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c44:	f7fb fe4a 	bl	80018dc <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e07c      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c56:	f7ff fbb4 	bl	80053c2 <LL_RCC_IsActiveFlag_PPRE2>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f1      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d043      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d106      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c74:	f7ff f981 	bl	8004f7a <LL_RCC_HSE_IsReady>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11e      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e066      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d106      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c8a:	f7ff fb28 	bl	80052de <LL_RCC_PLL_IsReady>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d113      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e05b      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005ca0:	f7ff fa1b 	bl	80050da <LL_RCC_MSI_IsReady>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e050      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cae:	f7ff f991 	bl	8004fd4 <LL_RCC_HSI_IsReady>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e049      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fa55 	bl	8005170 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fb fe09 	bl	80018dc <HAL_GetTick>
 8005cca:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cce:	f7fb fe05 	bl	80018dc <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e035      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce4:	f7ff fa57 	bl	8005196 <LL_RCC_GetSysClkSource>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d1ec      	bne.n	8005cce <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d21b      	bcs.n	8005d3a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 0207 	bic.w	r2, r3, #7
 8005d0a:	4913      	ldr	r1, [pc, #76]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d12:	f7fb fde3 	bl	80018dc <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d1a:	f7fb fddf 	bl	80018dc <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e011      	b.n	8005d50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <HAL_RCC_ClockConfig+0x23c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d1ef      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d3a:	f000 f8b3 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4a06      	ldr	r2, [pc, #24]	; (8005d5c <HAL_RCC_ClockConfig+0x240>)
 8005d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <HAL_RCC_ClockConfig+0x244>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fb fdbd 	bl	80018c8 <HAL_InitTick>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	58004000 	.word	0x58004000
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	20000008 	.word	0x20000008

08005d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d72:	f7ff fa10 	bl	8005196 <LL_RCC_GetSysClkSource>
 8005d76:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d78:	f7ff fae4 	bl	8005344 <LL_RCC_PLL_GetMainSource>
 8005d7c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_GetSysClockFreq+0x2c>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d139      	bne.n	8005dfe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d136      	bne.n	8005dfe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d90:	f7ff f9b3 	bl	80050fa <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d115      	bne.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x62>
 8005d9a:	f7ff f9ae 	bl	80050fa <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d106      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x4e>
 8005da4:	f7ff f9b9 	bl	800511a <LL_RCC_MSI_GetRange>
 8005da8:	4603      	mov	r3, r0
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	e005      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x5a>
 8005db2:	f7ff f9bd 	bl	8005130 <LL_RCC_MSI_GetRangeAfterStandby>
 8005db6:	4603      	mov	r3, r0
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x134>)
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	e014      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005dc6:	f7ff f998 	bl	80050fa <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d106      	bne.n	8005dde <HAL_RCC_GetSysClockFreq+0x7a>
 8005dd0:	f7ff f9a3 	bl	800511a <LL_RCC_MSI_GetRange>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	e005      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x86>
 8005dde:	f7ff f9a7 	bl	8005130 <LL_RCC_MSI_GetRangeAfterStandby>
 8005de2:	4603      	mov	r3, r0
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x134>)
 8005dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d115      	bne.n	8005e24 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dfc:	e012      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d102      	bne.n	8005e0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e04:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e00c      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d109      	bne.n	8005e24 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e10:	f7ff f886 	bl	8004f20 <LL_RCC_HSE_IsEnabledDiv2>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d102      	bne.n	8005e20 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e001      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e22:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e24:	f7ff f9b7 	bl	8005196 <LL_RCC_GetSysClkSource>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d12f      	bne.n	8005e8e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e2e:	f7ff fa89 	bl	8005344 <LL_RCC_PLL_GetMainSource>
 8005e32:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d003      	beq.n	8005e42 <HAL_RCC_GetSysClockFreq+0xde>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e40:	e00d      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e42:	4b16      	ldr	r3, [pc, #88]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e44:	60fb      	str	r3, [r7, #12]
        break;
 8005e46:	e00d      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e48:	f7ff f86a 	bl	8004f20 <LL_RCC_HSE_IsEnabledDiv2>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d102      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e54:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e56:	e005      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e5a:	60fb      	str	r3, [r7, #12]
        break;
 8005e5c:	e002      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	60fb      	str	r3, [r7, #12]
        break;
 8005e62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e64:	f7ff fa4c 	bl	8005300 <LL_RCC_PLL_GetN>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	fb03 f402 	mul.w	r4, r3, r2
 8005e70:	f7ff fa5d 	bl	800532e <LL_RCC_PLL_GetDivider>
 8005e74:	4603      	mov	r3, r0
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	3301      	adds	r3, #1
 8005e7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e7e:	f7ff fa4b 	bl	8005318 <LL_RCC_PLL_GetR>
 8005e82:	4603      	mov	r3, r0
 8005e84:	0f5b      	lsrs	r3, r3, #29
 8005e86:	3301      	adds	r3, #1
 8005e88:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e8c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	08022abc 	.word	0x08022abc
 8005e9c:	00f42400 	.word	0x00f42400
 8005ea0:	01e84800 	.word	0x01e84800

08005ea4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea4:	b598      	push	{r3, r4, r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ea8:	f7ff ff5c 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005eac:	4604      	mov	r4, r0
 8005eae:	f7ff f9cc 	bl	800524a <LL_RCC_GetAHBPrescaler>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	4a03      	ldr	r2, [pc, #12]	; (8005ec8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd98      	pop	{r3, r4, r7, pc}
 8005ec8:	08022a5c 	.word	0x08022a5c

08005ecc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ecc:	b598      	push	{r3, r4, r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ed0:	f7ff ffe8 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	f7ff f9d0 	bl	800527a <LL_RCC_GetAPB1Prescaler>
 8005eda:	4603      	mov	r3, r0
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	4a03      	ldr	r2, [pc, #12]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd98      	pop	{r3, r4, r7, pc}
 8005eec:	08022a9c 	.word	0x08022a9c

08005ef0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef0:	b598      	push	{r3, r4, r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ef4:	f7ff ffd6 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	f7ff f9c9 	bl	8005290 <LL_RCC_GetAPB2Prescaler>
 8005efe:	4603      	mov	r3, r0
 8005f00:	0adb      	lsrs	r3, r3, #11
 8005f02:	4a03      	ldr	r2, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd98      	pop	{r3, r4, r7, pc}
 8005f10:	08022a9c 	.word	0x08022a9c

08005f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005f2c:	f7ff f998 	bl	8005260 <LL_RCC_GetAHB3Prescaler>
 8005f30:	4603      	mov	r3, r0
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	4a0c      	ldr	r2, [pc, #48]	; (8005f6c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0c9c      	lsrs	r4, r3, #18
 8005f50:	f7fe ff68 	bl	8004e24 <HAL_PWREx_GetVoltageRange>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4619      	mov	r1, r3
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 f80b 	bl	8005f74 <RCC_SetFlashLatency>
 8005f5e:	4603      	mov	r3, r0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd90      	pop	{r4, r7, pc}
 8005f68:	08022abc 	.word	0x08022abc
 8005f6c:	08022a5c 	.word	0x08022a5c
 8005f70:	431bde83 	.word	0x431bde83

08005f74 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005f7e:	4a3a      	ldr	r2, [pc, #232]	; (8006068 <RCC_SetFlashLatency+0xf4>)
 8005f80:	f107 0320 	add.w	r3, r7, #32
 8005f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f88:	6018      	str	r0, [r3, #0]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005f8e:	4a37      	ldr	r2, [pc, #220]	; (800606c <RCC_SetFlashLatency+0xf8>)
 8005f90:	f107 0318 	add.w	r3, r7, #24
 8005f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f98:	6018      	str	r0, [r3, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005f9e:	4a34      	ldr	r2, [pc, #208]	; (8006070 <RCC_SetFlashLatency+0xfc>)
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005faa:	2300      	movs	r3, #0
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb4:	d11b      	bne.n	8005fee <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	e014      	b.n	8005fe6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	3338      	adds	r3, #56	; 0x38
 8005fc2:	443b      	add	r3, r7
 8005fc4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d807      	bhi.n	8005fe0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	3338      	adds	r3, #56	; 0x38
 8005fd6:	443b      	add	r3, r7
 8005fd8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fde:	e021      	b.n	8006024 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d9e7      	bls.n	8005fbc <RCC_SetFlashLatency+0x48>
 8005fec:	e01a      	b.n	8006024 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	e014      	b.n	800601e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	3338      	adds	r3, #56	; 0x38
 8005ffa:	443b      	add	r3, r7
 8005ffc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4293      	cmp	r3, r2
 8006006:	d807      	bhi.n	8006018 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	3338      	adds	r3, #56	; 0x38
 800600e:	443b      	add	r3, r7
 8006010:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006016:	e005      	b.n	8006024 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	3301      	adds	r3, #1
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	2b02      	cmp	r3, #2
 8006022:	d9e7      	bls.n	8005ff4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006024:	4b13      	ldr	r3, [pc, #76]	; (8006074 <RCC_SetFlashLatency+0x100>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f023 0207 	bic.w	r2, r3, #7
 800602c:	4911      	ldr	r1, [pc, #68]	; (8006074 <RCC_SetFlashLatency+0x100>)
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	4313      	orrs	r3, r2
 8006032:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006034:	f7fb fc52 	bl	80018dc <HAL_GetTick>
 8006038:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800603a:	e008      	b.n	800604e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800603c:	f7fb fc4e 	bl	80018dc <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e007      	b.n	800605e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <RCC_SetFlashLatency+0x100>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006058:	429a      	cmp	r2, r3
 800605a:	d1ef      	bne.n	800603c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3738      	adds	r7, #56	; 0x38
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08020c40 	.word	0x08020c40
 800606c:	08020c48 	.word	0x08020c48
 8006070:	08020c50 	.word	0x08020c50
 8006074:	58004000 	.word	0x58004000

08006078 <LL_RCC_LSE_IsReady>:
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d101      	bne.n	8006090 <LL_RCC_LSE_IsReady+0x18>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <LL_RCC_LSE_IsReady+0x1a>
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr

0800609a <LL_RCC_SetUSARTClockSource>:
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80060a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	43db      	mvns	r3, r3
 80060b0:	401a      	ands	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <LL_RCC_SetI2SClockSource>:
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <LL_RCC_SetLPUARTClockSource>:
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <LL_RCC_SetI2CClockSource>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006136:	43db      	mvns	r3, r3
 8006138:	401a      	ands	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <LL_RCC_SetLPTIMClockSource>:
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006162:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	43db      	mvns	r3, r3
 800616e:	401a      	ands	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <LL_RCC_SetRNGClockSource>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800619c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <LL_RCC_SetADCClockSource>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <LL_RCC_SetRTCClockSource>:
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <LL_RCC_GetRTCClockSource>:
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006216:	4618      	mov	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <LL_RCC_ForceBackupDomainReset>:
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800622e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <LL_RCC_ReleaseBackupDomainReset>:
{
 800623e:	b480      	push	{r7}
 8006240:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800624e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
	...

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800626c:	2300      	movs	r3, #0
 800626e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006270:	2300      	movs	r3, #0
 8006272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d058      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006280:	f7fe fd8e 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006284:	f7fb fb2a 	bl	80018dc <HAL_GetTick>
 8006288:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800628a:	e009      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628c:	f7fb fb26 	bl	80018dc <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d902      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	74fb      	strb	r3, [r7, #19]
        break;
 800629e:	e006      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80062a0:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	d1ee      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d13c      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80062b4:	f7ff ffa7 	bl	8006206 <LL_RCC_GetRTCClockSource>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	429a      	cmp	r2, r3
 80062c0:	d00f      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062d0:	f7ff ffa5 	bl	800621e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d4:	f7ff ffb3 	bl	800623e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d014      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fb faf6 	bl	80018dc <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80062f2:	e00b      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fb faf2 	bl	80018dc <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d902      	bls.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	74fb      	strb	r3, [r7, #19]
            break;
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800630c:	f7ff feb4 	bl	8006078 <LL_RCC_LSE_IsReady>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d1ee      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff ff5b 	bl	80061dc <LL_RCC_SetRTCClockSource>
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
 800632c:	e001      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fea9 	bl	800609a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fe9e 	bl	800609a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fec0 	bl	80060f4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fee6 	bl	8006156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fedb 	bl	8006156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fed0 	bl	8006156 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fea9 	bl	800611e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fe9e 	bl	800611e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fe93 	bl	800611e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d011      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fe5e 	bl	80060ca <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fea5 	bl	8006188 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	d107      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006454:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fea3 	bl	80061b2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006484:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006486:	7cbb      	ldrb	r3, [r7, #18]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58000400 	.word	0x58000400

08006494 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d068      	beq.n	8006578 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fa ff40 	bl	8001340 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_RTC_Init+0xf0>)
 80064ca:	22ca      	movs	r2, #202	; 0xca
 80064cc:	625a      	str	r2, [r3, #36]	; 0x24
 80064ce:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <HAL_RTC_Init+0xf0>)
 80064d0:	2253      	movs	r2, #83	; 0x53
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa0f 	bl	80068f8 <RTC_EnterInitMode>
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13f      	bne.n	8006564 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <HAL_RTC_Init+0xf0>)
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	4a26      	ldr	r2, [pc, #152]	; (8006584 <HAL_RTC_Init+0xf0>)
 80064ea:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80064ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80064f4:	4b23      	ldr	r3, [pc, #140]	; (8006584 <HAL_RTC_Init+0xf0>)
 80064f6:	699a      	ldr	r2, [r3, #24]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	4319      	orrs	r1, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	430b      	orrs	r3, r1
 8006508:	491e      	ldr	r1, [pc, #120]	; (8006584 <HAL_RTC_Init+0xf0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	491a      	ldr	r1, [pc, #104]	; (8006584 <HAL_RTC_Init+0xf0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RTC_Init+0xf0>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	430b      	orrs	r3, r1
 8006530:	4914      	ldr	r1, [pc, #80]	; (8006584 <HAL_RTC_Init+0xf0>)
 8006532:	4313      	orrs	r3, r2
 8006534:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa12 	bl	8006960 <RTC_ExitInitMode>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10e      	bne.n	8006564 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <HAL_RTC_Init+0xf0>)
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a19      	ldr	r1, [r3, #32]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4319      	orrs	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	430b      	orrs	r3, r1
 800655e:	4909      	ldr	r1, [pc, #36]	; (8006584 <HAL_RTC_Init+0xf0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <HAL_RTC_Init+0xf0>)
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40002800 	.word	0x40002800

08006588 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_RTC_SetAlarm_IT+0x1e>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0f3      	b.n	800678e <HAL_RTC_SetAlarm_IT+0x206>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80065b6:	4b78      	ldr	r3, [pc, #480]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065be:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c6:	d06a      	beq.n	800669e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13a      	bne.n	8006644 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80065ce:	4b72      	ldr	r3, [pc, #456]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2200      	movs	r2, #0
 80065de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f9f5 	bl	80069dc <RTC_ByteToBcd2>
 80065f2:	4603      	mov	r3, r0
 80065f4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f9ee 	bl	80069dc <RTC_ByteToBcd2>
 8006600:	4603      	mov	r3, r0
 8006602:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006604:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	789b      	ldrb	r3, [r3, #2]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f9e6 	bl	80069dc <RTC_ByteToBcd2>
 8006610:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006612:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800661c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f9d8 	bl	80069dc <RTC_ByteToBcd2>
 800662c:	4603      	mov	r3, r0
 800662e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006630:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006638:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e02c      	b.n	800669e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800664c:	d00d      	beq.n	800666a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006656:	d008      	beq.n	800666a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006658:	4b4f      	ldr	r3, [pc, #316]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006676:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800667c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006684:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800668c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800668e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006694:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800669e:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066a0:	22ca      	movs	r2, #202	; 0xca
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24
 80066a4:	4b3c      	ldr	r3, [pc, #240]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066a6:	2253      	movs	r2, #83	; 0x53
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d12c      	bne.n	800670e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80066b4:	4b38      	ldr	r3, [pc, #224]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	4a37      	ldr	r2, [pc, #220]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066be:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80066c0:	4b35      	ldr	r3, [pc, #212]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066cc:	d107      	bne.n	80066de <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4930      	ldr	r1, [pc, #192]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	644b      	str	r3, [r1, #68]	; 0x44
 80066dc:	e006      	b.n	80066ec <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80066de:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80066e4:	4a2c      	ldr	r2, [pc, #176]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80066ec:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	f043 0201 	orr.w	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006700:	4b25      	ldr	r3, [pc, #148]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006706:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800670a:	6193      	str	r3, [r2, #24]
 800670c:	e02b      	b.n	8006766 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	4a21      	ldr	r2, [pc, #132]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006714:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006718:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800671a:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 800671c:	2202      	movs	r2, #2
 800671e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d107      	bne.n	8006738 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	4919      	ldr	r1, [pc, #100]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006732:	4313      	orrs	r3, r2
 8006734:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006736:	e006      	b.n	8006746 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006746:	4a14      	ldr	r2, [pc, #80]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f043 0202 	orr.w	r2, r3, #2
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006760:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006764:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <HAL_RTC_SetAlarm_IT+0x214>)
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676c:	4a0b      	ldr	r2, [pc, #44]	; (800679c <HAL_RTC_SetAlarm_IT+0x214>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006772:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_RTC_SetAlarm_IT+0x210>)
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	40002800 	.word	0x40002800
 800679c:	58000800 	.word	0x58000800

080067a0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_RTC_DeactivateAlarm+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e048      	b.n	800684a <HAL_RTC_DeactivateAlarm+0xaa>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067c8:	4b22      	ldr	r3, [pc, #136]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067ca:	22ca      	movs	r2, #202	; 0xca
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24
 80067ce:	4b21      	ldr	r3, [pc, #132]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067d0:	2253      	movs	r2, #83	; 0x53
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067da:	d115      	bne.n	8006808 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80067dc:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067e6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	4a19      	ldr	r2, [pc, #100]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067f2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	f023 0201 	bic.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006802:	2201      	movs	r2, #1
 8006804:	65da      	str	r2, [r3, #92]	; 0x5c
 8006806:	e014      	b.n	8006832 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4a11      	ldr	r2, [pc, #68]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 800680e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006812:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006818:	4a0e      	ldr	r2, [pc, #56]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 800681a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800681e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f023 0202 	bic.w	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 800682e:	2202      	movs	r2, #2
 8006830:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006832:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr
 8006854:	40002800 	.word	0x40002800

08006858 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006862:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	4013      	ands	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006878:	2201      	movs	r2, #1
 800687a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fb f9b0 	bl	8001be2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800688e:	2202      	movs	r2, #2
 8006890:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f94a 	bl	8006b2c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40002800 	.word	0x40002800

080068ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <HAL_RTC_WaitForSynchro+0x48>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a0e      	ldr	r2, [pc, #56]	; (80068f4 <HAL_RTC_WaitForSynchro+0x48>)
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068c0:	f7fb f80c 	bl	80018dc <HAL_GetTick>
 80068c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068c6:	e009      	b.n	80068dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068c8:	f7fb f808 	bl	80018dc <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d6:	d901      	bls.n	80068dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e006      	b.n	80068ea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RTC_WaitForSynchro+0x48>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ef      	beq.n	80068c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40002800 	.word	0x40002800

080068f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <RTC_EnterInitMode+0x64>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d120      	bne.n	8006952 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <RTC_EnterInitMode+0x64>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <RTC_EnterInitMode+0x64>)
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800691c:	f7fa ffde 	bl	80018dc <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006922:	e00d      	b.n	8006940 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006924:	f7fa ffda 	bl	80018dc <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006932:	d905      	bls.n	8006940 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2203      	movs	r2, #3
 800693c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <RTC_EnterInitMode+0x64>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <RTC_EnterInitMode+0x5a>
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b03      	cmp	r3, #3
 8006950:	d1e8      	bne.n	8006924 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40002800 	.word	0x40002800

08006960 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <RTC_ExitInitMode+0x78>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <RTC_ExitInitMode+0x78>)
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006978:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <RTC_ExitInitMode+0x78>)
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff91 	bl	80068ac <HAL_RTC_WaitForSynchro>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2203      	movs	r2, #3
 8006994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	e017      	b.n	80069ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800699e:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <RTC_ExitInitMode+0x78>)
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <RTC_ExitInitMode+0x78>)
 80069a4:	f023 0320 	bic.w	r3, r3, #32
 80069a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff ff7e 	bl	80068ac <HAL_RTC_WaitForSynchro>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2203      	movs	r2, #3
 80069ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <RTC_ExitInitMode+0x78>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <RTC_ExitInitMode+0x78>)
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40002800 	.word	0x40002800

080069dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80069ee:	e005      	b.n	80069fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	3b0a      	subs	r3, #10
 80069fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d8f6      	bhi.n	80069f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b2db      	uxtb	r3, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e01f      	b.n	8006a72 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a44:	22ca      	movs	r2, #202	; 0xca
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a4a:	2253      	movs	r2, #83	; 0x53
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a54:	f043 0320 	orr.w	r3, r3, #32
 8006a58:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a5c:	22ff      	movs	r2, #255	; 0xff
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	40002800 	.word	0x40002800

08006a80 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e027      	b.n	8006ae6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006aa8:	22ca      	movs	r2, #202	; 0xca
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8006aac:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006aae:	2253      	movs	r2, #83	; 0x53
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr
 8006af0:	40002800 	.word	0x40002800
 8006af4:	58000800 	.word	0x58000800

08006af8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb f86f 	bl	8001bf6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40002800 	.word	0x40002800

08006b2c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
	...

08006b40 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <HAL_RTCEx_BKUPWrite+0x2c>)
 8006b4e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4413      	add	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	4000b100 	.word	0x4000b100

08006b70 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <HAL_RTCEx_BKUPRead+0x28>)
 8006b7c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	4000b100 	.word	0x4000b100

08006b9c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	58000400 	.word	0x58000400

08006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	4a04      	ldr	r2, [pc, #16]	; (8006be0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	58000400 	.word	0x58000400

08006be4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	58000400 	.word	0x58000400

08006c04 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006c08:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c0e:	619a      	str	r2, [r3, #24]
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	58000400 	.word	0x58000400

08006c1c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d101      	bne.n	8006c30 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	58000400 	.word	0x58000400

08006c40 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d101      	bne.n	8006c54 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	58000400 	.word	0x58000400

08006c64 <LL_RCC_RF_DisableReset>:
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <LL_RCC_IsRFUnderReset>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c98:	d101      	bne.n	8006c9e <LL_RCC_IsRFUnderReset+0x1a>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <LL_RCC_IsRFUnderReset+0x1c>
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <LL_EXTI_EnableIT_32_63+0x24>)
 8006cb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cb6:	4905      	ldr	r1, [pc, #20]	; (8006ccc <LL_EXTI_EnableIT_32_63+0x24>)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	58000800 	.word	0x58000800

08006cd0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
    return status;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	e04b      	b.n	8006d7e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	799b      	ldrb	r3, [r3, #6]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fa fc4c 	bl	8001598 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006d06:	f7ff ffad 	bl	8006c64 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <HAL_SUBGHZ_Init+0xb8>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	0cdb      	lsrs	r3, r3, #19
 8006d18:	2264      	movs	r2, #100	; 0x64
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	609a      	str	r2, [r3, #8]
      break;
 8006d30:	e007      	b.n	8006d42 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006d38:	f7ff ffa4 	bl	8006c84 <LL_RCC_IsRFUnderReset>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1ee      	bne.n	8006d20 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d42:	f7ff ff3f 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006d46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006d4a:	f7ff ffad 	bl	8006ca8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006d4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006d52:	f7ff ff23 	bl	8006b9c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006d56:	f7ff ff55 	bl	8006c04 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 faa5 	bl	80072b4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	719a      	strb	r2, [r3, #6]

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000000 	.word	0x20000000

08006d8c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	461a      	mov	r2, r3
 8006d98:	460b      	mov	r3, r1
 8006d9a:	817b      	strh	r3, [r7, #10]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	799b      	ldrb	r3, [r3, #6]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d14a      	bne.n	8006e40 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e045      	b.n	8006e42 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fb44 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006dc8:	f7ff ff0c 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006dcc:	210d      	movs	r1, #13
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa90 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006dd4:	897b      	ldrh	r3, [r7, #10]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa88 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006de4:	897b      	ldrh	r3, [r7, #10]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa82 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006df0:	2300      	movs	r3, #0
 8006df2:	82bb      	strh	r3, [r7, #20]
 8006df4:	e00a      	b.n	8006e0c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006df6:	8abb      	ldrh	r3, [r7, #20]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fa77 	bl	80072f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e06:	8abb      	ldrh	r3, [r7, #20]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	82bb      	strh	r3, [r7, #20]
 8006e0c:	8aba      	ldrh	r2, [r7, #20]
 8006e0e:	893b      	ldrh	r3, [r7, #8]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d3f0      	bcc.n	8006df6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e14:	f7ff fed6 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fb3d 	bl	8007498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
 8006e2a:	e001      	b.n	8006e30 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	715a      	strb	r2, [r3, #5]

    return status;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	e000      	b.n	8006e42 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
  }
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	461a      	mov	r2, r3
 8006e56:	460b      	mov	r3, r1
 8006e58:	817b      	strh	r3, [r7, #10]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	799b      	ldrb	r3, [r3, #6]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d14a      	bne.n	8006f02 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	795b      	ldrb	r3, [r3, #5]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e045      	b.n	8006f04 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fae6 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e84:	f7ff feae 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006e88:	211d      	movs	r1, #29
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fa32 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006e90:	897b      	ldrh	r3, [r7, #10]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 fa2a 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ea0:	897b      	ldrh	r3, [r7, #10]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fa24 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006eac:	2100      	movs	r1, #0
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa20 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	82fb      	strh	r3, [r7, #22]
 8006eb8:	e009      	b.n	8006ece <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006eba:	69b9      	ldr	r1, [r7, #24]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fa6f 	bl	80073a0 <SUBGHZSPI_Receive>
      pData++;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006ec8:	8afb      	ldrh	r3, [r7, #22]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	82fb      	strh	r3, [r7, #22]
 8006ece:	8afa      	ldrh	r2, [r7, #22]
 8006ed0:	893b      	ldrh	r3, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d3f1      	bcc.n	8006eba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ed6:	f7ff fe75 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fadc 	bl	8007498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	77fb      	strb	r3, [r7, #31]
 8006eec:	e001      	b.n	8006ef2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	715a      	strb	r2, [r3, #5]

    return status;
 8006efe:	7ffb      	ldrb	r3, [r7, #31]
 8006f00:	e000      	b.n	8006f04 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	461a      	mov	r2, r3
 8006f18:	460b      	mov	r3, r1
 8006f1a:	72fb      	strb	r3, [r7, #11]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	799b      	ldrb	r3, [r3, #6]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d14a      	bne.n	8006fc0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	795b      	ldrb	r3, [r3, #5]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e045      	b.n	8006fc2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa87 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b84      	cmp	r3, #132	; 0x84
 8006f46:	d002      	beq.n	8006f4e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	2b94      	cmp	r3, #148	; 0x94
 8006f4c:	d103      	bne.n	8006f56 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	711a      	strb	r2, [r3, #4]
 8006f54:	e002      	b.n	8006f5c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f5c:	f7ff fe42 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f9c5 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	82bb      	strh	r3, [r7, #20]
 8006f6e:	e00a      	b.n	8006f86 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f70:	8abb      	ldrh	r3, [r7, #20]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f9ba 	bl	80072f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f80:	8abb      	ldrh	r3, [r7, #20]
 8006f82:	3301      	adds	r3, #1
 8006f84:	82bb      	strh	r3, [r7, #20]
 8006f86:	8aba      	ldrh	r2, [r7, #20]
 8006f88:	893b      	ldrh	r3, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3f0      	bcc.n	8006f70 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f8e:	f7ff fe19 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b84      	cmp	r3, #132	; 0x84
 8006f96:	d002      	beq.n	8006f9e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fa7d 	bl	8007498 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]
 8006faa:	e001      	b.n	8006fb0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	715a      	strb	r2, [r3, #5]

    return status;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	e000      	b.n	8006fc2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b088      	sub	sp, #32
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	72fb      	strb	r3, [r7, #11]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	799b      	ldrb	r3, [r3, #6]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d13d      	bne.n	8007068 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	795b      	ldrb	r3, [r3, #5]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e038      	b.n	800706a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa26 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007004:	f7ff fdee 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	4619      	mov	r1, r3
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f971 	bl	80072f4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f96d 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	82fb      	strh	r3, [r7, #22]
 800701e:	e009      	b.n	8007034 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f9bc 	bl	80073a0 <SUBGHZSPI_Receive>
      pData++;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	3301      	adds	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800702e:	8afb      	ldrh	r3, [r7, #22]
 8007030:	3301      	adds	r3, #1
 8007032:	82fb      	strh	r3, [r7, #22]
 8007034:	8afa      	ldrh	r2, [r7, #22]
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	d3f1      	bcc.n	8007020 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800703c:	f7ff fdc2 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fa29 	bl	8007498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e001      	b.n	8007058 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	715a      	strb	r2, [r3, #5]

    return status;
 8007064:	7ffb      	ldrb	r3, [r7, #31]
 8007066:	e000      	b.n	800706a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	461a      	mov	r2, r3
 800707e:	460b      	mov	r3, r1
 8007080:	72fb      	strb	r3, [r7, #11]
 8007082:	4613      	mov	r3, r2
 8007084:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	799b      	ldrb	r3, [r3, #6]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d13e      	bne.n	800710e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	795b      	ldrb	r3, [r3, #5]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007098:	2302      	movs	r3, #2
 800709a:	e039      	b.n	8007110 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f9d4 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070a8:	f7ff fd9c 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80070ac:	210e      	movs	r1, #14
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f920 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	4619      	mov	r1, r3
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f91b 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070be:	2300      	movs	r3, #0
 80070c0:	82bb      	strh	r3, [r7, #20]
 80070c2:	e00a      	b.n	80070da <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070c4:	8abb      	ldrh	r3, [r7, #20]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f910 	bl	80072f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070d4:	8abb      	ldrh	r3, [r7, #20]
 80070d6:	3301      	adds	r3, #1
 80070d8:	82bb      	strh	r3, [r7, #20]
 80070da:	8aba      	ldrh	r2, [r7, #20]
 80070dc:	893b      	ldrh	r3, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3f0      	bcc.n	80070c4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070e2:	f7ff fd6f 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f9d6 	bl	8007498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
 80070f8:	e001      	b.n	80070fe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	715a      	strb	r2, [r3, #5]

    return status;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	e000      	b.n	8007110 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800710e:	2302      	movs	r3, #2
  }
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	461a      	mov	r2, r3
 8007124:	460b      	mov	r3, r1
 8007126:	72fb      	strb	r3, [r7, #11]
 8007128:	4613      	mov	r3, r2
 800712a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	799b      	ldrb	r3, [r3, #6]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d141      	bne.n	80071be <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	795b      	ldrb	r3, [r3, #5]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007142:	2302      	movs	r3, #2
 8007144:	e03c      	b.n	80071c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f97f 	bl	8007450 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007152:	f7ff fd47 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007156:	211e      	movs	r1, #30
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f8cb 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	4619      	mov	r1, r3
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f8c6 	bl	80072f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f8c2 	bl	80072f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007170:	2300      	movs	r3, #0
 8007172:	82fb      	strh	r3, [r7, #22]
 8007174:	e009      	b.n	800718a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007176:	69b9      	ldr	r1, [r7, #24]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f911 	bl	80073a0 <SUBGHZSPI_Receive>
      pData++;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3301      	adds	r3, #1
 8007182:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007184:	8afb      	ldrh	r3, [r7, #22]
 8007186:	3301      	adds	r3, #1
 8007188:	82fb      	strh	r3, [r7, #22]
 800718a:	8afa      	ldrh	r2, [r7, #22]
 800718c:	893b      	ldrh	r3, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	d3f1      	bcc.n	8007176 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007192:	f7ff fd17 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f97e 	bl	8007498 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	e001      	b.n	80071ae <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	715a      	strb	r2, [r3, #5]

    return status;
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	e000      	b.n	80071c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80071d0:	2300      	movs	r3, #0
 80071d2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80071d4:	f107 020c 	add.w	r2, r7, #12
 80071d8:	2302      	movs	r3, #2
 80071da:	2112      	movs	r1, #18
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fef4 	bl	8006fca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80071e2:	7b3b      	ldrb	r3, [r7, #12]
 80071e4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80071e6:	89fb      	ldrh	r3, [r7, #14]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	b21a      	sxth	r2, r3
 80071ec:	7b7b      	ldrb	r3, [r7, #13]
 80071ee:	b21b      	sxth	r3, r3
 80071f0:	4313      	orrs	r3, r2
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80071f6:	89fb      	ldrh	r3, [r7, #14]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f017 f90b 	bl	801e41c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007206:	89fb      	ldrh	r3, [r7, #14]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f017 f911 	bl	801e438 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007216:	89fb      	ldrh	r3, [r7, #14]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f017 f961 	bl	801e4e8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007226:	89fb      	ldrh	r3, [r7, #14]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f017 f967 	bl	801e504 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f017 f96d 	bl	801e520 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007246:	89fb      	ldrh	r3, [r7, #14]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f017 f93b 	bl	801e4cc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f017 f8f7 	bl	801e454 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007266:	89fb      	ldrh	r3, [r7, #14]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800727a:	2101      	movs	r1, #1
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f017 f8f7 	bl	801e470 <HAL_SUBGHZ_CADStatusCallback>
 8007282:	e003      	b.n	800728c <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007284:	2100      	movs	r1, #0
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f017 f8f2 	bl	801e470 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800728c:	89fb      	ldrh	r3, [r7, #14]
 800728e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f017 f908 	bl	801e4ac <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800729c:	f107 020c 	add.w	r2, r7, #12
 80072a0:	2302      	movs	r3, #2
 80072a2:	2102      	movs	r1, #2
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fe31 	bl	8006f0c <HAL_SUBGHZ_ExecSetCmd>
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80072d0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072d4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80072d8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a04      	ldr	r2, [pc, #16]	; (80072f0 <SUBGHZSPI_Init+0x3c>)
 80072e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e4:	6013      	str	r3, [r2, #0]
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr
 80072f0:	58010000 	.word	0x58010000

080072f4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007304:	4b23      	ldr	r3, [pc, #140]	; (8007394 <SUBGHZSPI_Transmit+0xa0>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	0cdb      	lsrs	r3, r3, #19
 8007312:	2264      	movs	r2, #100	; 0x64
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	609a      	str	r2, [r3, #8]
      break;
 800732a:	e008      	b.n	800733e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007332:	4b19      	ldr	r3, [pc, #100]	; (8007398 <SUBGHZSPI_Transmit+0xa4>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b02      	cmp	r3, #2
 800733c:	d1ed      	bne.n	800731a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800733e:	4b17      	ldr	r3, [pc, #92]	; (800739c <SUBGHZSPI_Transmit+0xa8>)
 8007340:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <SUBGHZSPI_Transmit+0xa0>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	0cdb      	lsrs	r3, r3, #19
 8007356:	2264      	movs	r2, #100	; 0x64
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	609a      	str	r2, [r3, #8]
      break;
 800736e:	e008      	b.n	8007382 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b01      	subs	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007376:	4b08      	ldr	r3, [pc, #32]	; (8007398 <SUBGHZSPI_Transmit+0xa4>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b01      	cmp	r3, #1
 8007380:	d1ed      	bne.n	800735e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <SUBGHZSPI_Transmit+0xa4>)
 8007384:	68db      	ldr	r3, [r3, #12]

  return status;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000000 	.word	0x20000000
 8007398:	58010000 	.word	0x58010000
 800739c:	5801000c 	.word	0x5801000c

080073a0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073ae:	4b25      	ldr	r3, [pc, #148]	; (8007444 <SUBGHZSPI_Receive+0xa4>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	0cdb      	lsrs	r3, r3, #19
 80073bc:	2264      	movs	r2, #100	; 0x64
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e008      	b.n	80073e8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b01      	subs	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <SUBGHZSPI_Receive+0xa8>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d1ed      	bne.n	80073c4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <SUBGHZSPI_Receive+0xac>)
 80073ea:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <SUBGHZSPI_Receive+0xa4>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	0cdb      	lsrs	r3, r3, #19
 8007400:	2264      	movs	r2, #100	; 0x64
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	609a      	str	r2, [r3, #8]
      break;
 8007418:	e008      	b.n	800742c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b01      	subs	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007420:	4b09      	ldr	r3, [pc, #36]	; (8007448 <SUBGHZSPI_Receive+0xa8>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d1ed      	bne.n	8007408 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <SUBGHZSPI_Receive+0xa8>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	701a      	strb	r2, [r3, #0]

  return status;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000000 	.word	0x20000000
 8007448:	58010000 	.word	0x58010000
 800744c:	5801000c 	.word	0x5801000c

08007450 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	791b      	ldrb	r3, [r3, #4]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d111      	bne.n	8007484 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <SUBGHZ_CheckDeviceReady+0x44>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	4413      	add	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007470:	f7ff fbb8 	bl	8006be4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f9      	bne.n	8007474 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007480:	f7ff fba0 	bl	8006bc4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f807 	bl	8007498 <SUBGHZ_WaitOnBusy>
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000000 	.word	0x20000000

08007498 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80074a4:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <SUBGHZ_WaitOnBusy+0x58>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	0d1b      	lsrs	r3, r3, #20
 80074b2:	2264      	movs	r2, #100	; 0x64
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80074ba:	f7ff fbc1 	bl	8006c40 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80074be:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	609a      	str	r2, [r3, #8]
      break;
 80074d0:	e009      	b.n	80074e6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80074d8:	f7ff fba0 	bl	8006c1c <LL_PWR_IsActiveFlag_RFBUSYS>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d0e9      	beq.n	80074ba <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000000 	.word	0x20000000

080074f4 <LL_RCC_GetUSARTClockSource>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007500:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	401a      	ands	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	4313      	orrs	r3, r2
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <LL_RCC_GetLPUARTClockSource>:
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007524:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4013      	ands	r3, r2
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr

08007536 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e042      	b.n	80075ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fa fcca 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2224      	movs	r2, #36	; 0x24
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc4b 	bl	8007e14 <UART_SetConfig>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e022      	b.n	80075ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 feb3 	bl	80082fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0201 	orr.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 ff39 	bl	800843e <UART_CheckIdleState>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d142      	bne.n	8007676 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Receive_IT+0x24>
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e03b      	b.n	8007678 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UART_Receive_IT+0x36>
 800760a:	2302      	movs	r3, #2
 800760c:	e034      	b.n	8007678 <HAL_UART_Receive_IT+0xa0>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a17      	ldr	r2, [pc, #92]	; (8007680 <HAL_UART_Receive_IT+0xa8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01f      	beq.n	8007666 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d018      	beq.n	8007666 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	613b      	str	r3, [r7, #16]
   return(result);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	623b      	str	r3, [r7, #32]
 8007654:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	69f9      	ldr	r1, [r7, #28]
 8007658:	6a3a      	ldr	r2, [r7, #32]
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	461a      	mov	r2, r3
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fff9 	bl	8008664 <UART_Start_Receive_IT>
 8007672:	4603      	mov	r3, r0
 8007674:	e000      	b.n	8007678 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
  }
}
 8007678:	4618      	mov	r0, r3
 800767a:	3728      	adds	r7, #40	; 0x28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40008000 	.word	0x40008000

08007684 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08a      	sub	sp, #40	; 0x28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	2b20      	cmp	r3, #32
 800769a:	d17a      	bne.n	8007792 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_UART_Transmit_DMA+0x24>
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e073      	b.n	8007794 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Transmit_DMA+0x36>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e06c      	b.n	8007794 <HAL_UART_Transmit_DMA+0x110>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2221      	movs	r2, #33	; 0x21
 80076e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02c      	beq.n	800774a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f4:	4a29      	ldr	r2, [pc, #164]	; (800779c <HAL_UART_Transmit_DMA+0x118>)
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <HAL_UART_Transmit_DMA+0x11c>)
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <HAL_UART_Transmit_DMA+0x120>)
 8007706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770c:	2200      	movs	r2, #0
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	4619      	mov	r1, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3328      	adds	r3, #40	; 0x28
 8007720:	461a      	mov	r2, r3
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	f7fc f970 	bl	8003a08 <HAL_DMA_Start_IT>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2210      	movs	r2, #16
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e024      	b.n	8007794 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2240      	movs	r2, #64	; 0x40
 8007750:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	613b      	str	r3, [r7, #16]
   return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777a:	623a      	str	r2, [r7, #32]
 800777c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	69f9      	ldr	r1, [r7, #28]
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	61bb      	str	r3, [r7, #24]
   return(result);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3728      	adds	r7, #40	; 0x28
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	080089b3 	.word	0x080089b3
 80077a0:	08008a4d 	.word	0x08008a4d
 80077a4:	08008a69 	.word	0x08008a69

080077a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b0ba      	sub	sp, #232	; 0xe8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80077d6:	4013      	ands	r3, r2
 80077d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11b      	bne.n	800781c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d015      	beq.n	800781c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 82d6 	beq.w	8007dbe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      }
      return;
 800781a:	e2d0      	b.n	8007dbe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800781c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 811f 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800782a:	4b8b      	ldr	r3, [pc, #556]	; (8007a58 <HAL_UART_IRQHandler+0x2b0>)
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007836:	4b89      	ldr	r3, [pc, #548]	; (8007a5c <HAL_UART_IRQHandler+0x2b4>)
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8112 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d011      	beq.n	8007870 <HAL_UART_IRQHandler+0xc8>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2201      	movs	r2, #1
 800785e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007866:	f043 0201 	orr.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d011      	beq.n	80078a0 <HAL_UART_IRQHandler+0xf8>
 800787c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2202      	movs	r2, #2
 800788e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d011      	beq.n	80078d0 <HAL_UART_IRQHandler+0x128>
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2204      	movs	r2, #4
 80078be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d017      	beq.n	800790c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078ec:	4b5a      	ldr	r3, [pc, #360]	; (8007a58 <HAL_UART_IRQHandler+0x2b0>)
 80078ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2208      	movs	r2, #8
 80078fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	f043 0208 	orr.w	r2, r3, #8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_UART_IRQHandler+0x196>
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00c      	beq.n	800793e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800792c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 823c 	beq.w	8007dc2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d013      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d005      	beq.n	80079a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d04f      	beq.n	8007a42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 ffa0 	bl	80088e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d141      	bne.n	8007a3a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1d9      	bne.n	80079b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d013      	beq.n	8007a32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a0e:	4a14      	ldr	r2, [pc, #80]	; (8007a60 <HAL_UART_IRQHandler+0x2b8>)
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fc f8d2 	bl	8003bc0 <HAL_DMA_Abort_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	e00f      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9d9 	bl	8007dea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	e00b      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9d5 	bl	8007dea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e007      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f9d1 	bl	8007dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a50:	e1b7      	b.n	8007dc2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a52:	bf00      	nop
    return;
 8007a54:	e1b5      	b.n	8007dc2 <HAL_UART_IRQHandler+0x61a>
 8007a56:	bf00      	nop
 8007a58:	10000001 	.word	0x10000001
 8007a5c:	04000120 	.word	0x04000120
 8007a60:	08008ae9 	.word	0x08008ae9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814a 	bne.w	8007d02 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8143 	beq.w	8007d02 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 813c 	beq.w	8007d02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	f040 80b5 	bne.w	8007c0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8187 	beq.w	8007dc6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	f080 817f 	bcs.w	8007dc6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 8086 	bne.w	8007bf0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1da      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e1      	bne.n	8007b2e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e3      	bne.n	8007b6a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fb ff8a 	bl	8003b04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8f9 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c0a:	e0dc      	b.n	8007dc6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80ce 	beq.w	8007dca <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80c9 	beq.w	8007dca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e4      	bne.n	8007c38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c96:	633a      	str	r2, [r7, #48]	; 0x30
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e1      	bne.n	8007c6e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	617b      	str	r3, [r7, #20]
   return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e4      	bne.n	8007cbe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f87e 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d00:	e063      	b.n	8007dca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <HAL_UART_IRQHandler+0x584>
 8007d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d008      	beq.n	8007d2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fb7d 	bl	8009424 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d2a:	e051      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d014      	beq.n	8007d62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d03a      	beq.n	8007dce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
    }
    return;
 8007d60:	e035      	b.n	8007dce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5da>
 8007d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 feca 	bl	8008b14 <UART_EndTransmit_IT>
    return;
 8007d80:	e026      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5fa>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fb54 	bl	8009448 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da0:	e016      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x628>
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da0c      	bge.n	8007dd0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fb3d 	bl	8009436 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dbc:	e008      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dbe:	bf00      	nop
 8007dc0:	e006      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8007dc2:	bf00      	nop
 8007dc4:	e004      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dc6:	bf00      	nop
 8007dc8:	e002      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8007dce:	bf00      	nop
  }
}
 8007dd0:	37e8      	adds	r7, #232	; 0xe8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop

08007dd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
	...

08007e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e18:	b08c      	sub	sp, #48	; 0x30
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b94      	ldr	r3, [pc, #592]	; (8008094 <UART_SetConfig+0x280>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a89      	ldr	r2, [pc, #548]	; (8008098 <UART_SetConfig+0x284>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	f023 010f 	bic.w	r1, r3, #15
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7a      	ldr	r2, [pc, #488]	; (800809c <UART_SetConfig+0x288>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d127      	bne.n	8007f08 <UART_SetConfig+0xf4>
 8007eb8:	2003      	movs	r0, #3
 8007eba:	f7ff fb1b 	bl	80074f4 <LL_RCC_GetUSARTClockSource>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d81b      	bhi.n	8007f00 <UART_SetConfig+0xec>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0xbc>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee6:	e080      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eee:	e07c      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e078      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e074      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e070      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a64      	ldr	r2, [pc, #400]	; (80080a0 <UART_SetConfig+0x28c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d138      	bne.n	8007f84 <UART_SetConfig+0x170>
 8007f12:	200c      	movs	r0, #12
 8007f14:	f7ff faee 	bl	80074f4 <LL_RCC_GetUSARTClockSource>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d82c      	bhi.n	8007f7c <UART_SetConfig+0x168>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0x114>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f7d 	.word	0x08007f7d
 8007f38:	08007f6d 	.word	0x08007f6d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f75 	.word	0x08007f75
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f62:	e042      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f64:	2302      	movs	r3, #2
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6a:	e03e      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f72:	e03a      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f74:	2308      	movs	r3, #8
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7a:	e036      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f82:	e032      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a43      	ldr	r2, [pc, #268]	; (8008098 <UART_SetConfig+0x284>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d12a      	bne.n	8007fe4 <UART_SetConfig+0x1d0>
 8007f8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007f92:	f7ff fac1 	bl	8007518 <LL_RCC_GetLPUARTClockSource>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f9c:	d01a      	beq.n	8007fd4 <UART_SetConfig+0x1c0>
 8007f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fa2:	d81b      	bhi.n	8007fdc <UART_SetConfig+0x1c8>
 8007fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa8:	d00c      	beq.n	8007fc4 <UART_SetConfig+0x1b0>
 8007faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fae:	d815      	bhi.n	8007fdc <UART_SetConfig+0x1c8>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <UART_SetConfig+0x1a8>
 8007fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb8:	d008      	beq.n	8007fcc <UART_SetConfig+0x1b8>
 8007fba:	e00f      	b.n	8007fdc <UART_SetConfig+0x1c8>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e012      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e00e      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e00a      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fda:	e006      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe2:	e002      	b.n	8007fea <UART_SetConfig+0x1d6>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2a      	ldr	r2, [pc, #168]	; (8008098 <UART_SetConfig+0x284>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	f040 80a4 	bne.w	800813e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d823      	bhi.n	8008046 <UART_SetConfig+0x232>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x1f0>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008029 	.word	0x08008029
 8008008:	08008047 	.word	0x08008047
 800800c:	08008031 	.word	0x08008031
 8008010:	08008047 	.word	0x08008047
 8008014:	08008037 	.word	0x08008037
 8008018:	08008047 	.word	0x08008047
 800801c:	08008047 	.word	0x08008047
 8008020:	08008047 	.word	0x08008047
 8008024:	0800803f 	.word	0x0800803f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008028:	f7fd ff50 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800802e:	e010      	b.n	8008052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008030:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <UART_SetConfig+0x290>)
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008034:	e00d      	b.n	8008052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008036:	f7fd fe95 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 800803a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800803c:	e009      	b.n	8008052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800803e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008044:	e005      	b.n	8008052 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8137 	beq.w	80082c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	4a12      	ldr	r2, [pc, #72]	; (80080a8 <UART_SetConfig+0x294>)
 8008060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008064:	461a      	mov	r2, r3
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	fbb3 f3f2 	udiv	r3, r3, r2
 800806c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	4413      	add	r3, r2
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	429a      	cmp	r2, r3
 800807c:	d305      	bcc.n	800808a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	429a      	cmp	r2, r3
 8008088:	d910      	bls.n	80080ac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008090:	e11a      	b.n	80082c8 <UART_SetConfig+0x4b4>
 8008092:	bf00      	nop
 8008094:	cfff69f3 	.word	0xcfff69f3
 8008098:	40008000 	.word	0x40008000
 800809c:	40013800 	.word	0x40013800
 80080a0:	40004400 	.word	0x40004400
 80080a4:	00f42400 	.word	0x00f42400
 80080a8:	08022b4c 	.word	0x08022b4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2200      	movs	r2, #0
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	60fa      	str	r2, [r7, #12]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	4a8e      	ldr	r2, [pc, #568]	; (80082f4 <UART_SetConfig+0x4e0>)
 80080ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2200      	movs	r2, #0
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080ce:	f7f8 fbd9 	bl	8000884 <__aeabi_uldivmod>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	020b      	lsls	r3, r1, #8
 80080e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e8:	0202      	lsls	r2, r0, #8
 80080ea:	6979      	ldr	r1, [r7, #20]
 80080ec:	6849      	ldr	r1, [r1, #4]
 80080ee:	0849      	lsrs	r1, r1, #1
 80080f0:	2000      	movs	r0, #0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4605      	mov	r5, r0
 80080f6:	eb12 0804 	adds.w	r8, r2, r4
 80080fa:	eb43 0905 	adc.w	r9, r3, r5
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	469a      	mov	sl, r3
 8008106:	4693      	mov	fp, r2
 8008108:	4652      	mov	r2, sl
 800810a:	465b      	mov	r3, fp
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 fbb8 	bl	8000884 <__aeabi_uldivmod>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4613      	mov	r3, r2
 800811a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008122:	d308      	bcc.n	8008136 <UART_SetConfig+0x322>
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812a:	d204      	bcs.n	8008136 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a3a      	ldr	r2, [r7, #32]
 8008132:	60da      	str	r2, [r3, #12]
 8008134:	e0c8      	b.n	80082c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800813c:	e0c4      	b.n	80082c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008146:	d168      	bne.n	800821a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800814c:	2b08      	cmp	r3, #8
 800814e:	d828      	bhi.n	80081a2 <UART_SetConfig+0x38e>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x344>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081a3 	.word	0x080081a3
 8008168:	08008193 	.word	0x08008193
 800816c:	080081a3 	.word	0x080081a3
 8008170:	080081a3 	.word	0x080081a3
 8008174:	080081a3 	.word	0x080081a3
 8008178:	0800819b 	.word	0x0800819b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817c:	f7fd fea6 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8008180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008182:	e014      	b.n	80081ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fd feb4 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 8008188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800818a:	e010      	b.n	80081ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800818c:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <UART_SetConfig+0x4e4>)
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008190:	e00d      	b.n	80081ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008192:	f7fd fde7 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008196:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008198:	e009      	b.n	80081ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081a0:	e005      	b.n	80081ae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8089 	beq.w	80082c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	4a4e      	ldr	r2, [pc, #312]	; (80082f4 <UART_SetConfig+0x4e0>)
 80081bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c8:	005a      	lsls	r2, r3, #1
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	085b      	lsrs	r3, r3, #1
 80081d0:	441a      	add	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081da:	b29b      	uxth	r3, r3
 80081dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d916      	bls.n	8008212 <UART_SetConfig+0x3fe>
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ea:	d212      	bcs.n	8008212 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f023 030f 	bic.w	r3, r3, #15
 80081f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	b29a      	uxth	r2, r3
 8008202:	8bfb      	ldrh	r3, [r7, #30]
 8008204:	4313      	orrs	r3, r2
 8008206:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	8bfa      	ldrh	r2, [r7, #30]
 800820e:	60da      	str	r2, [r3, #12]
 8008210:	e05a      	b.n	80082c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008218:	e056      	b.n	80082c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800821a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800821e:	2b08      	cmp	r3, #8
 8008220:	d827      	bhi.n	8008272 <UART_SetConfig+0x45e>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x414>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	08008273 	.word	0x08008273
 8008238:	08008263 	.word	0x08008263
 800823c:	08008273 	.word	0x08008273
 8008240:	08008273 	.word	0x08008273
 8008244:	08008273 	.word	0x08008273
 8008248:	0800826b 	.word	0x0800826b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824c:	f7fd fe3e 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008252:	e014      	b.n	800827e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fd fe4c 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 8008258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800825a:	e010      	b.n	800827e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800825c:	4b26      	ldr	r3, [pc, #152]	; (80082f8 <UART_SetConfig+0x4e4>)
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008260:	e00d      	b.n	800827e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008262:	f7fd fd7f 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008266:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008268:	e009      	b.n	800827e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008270:	e005      	b.n	800827e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800827c:	bf00      	nop
    }

    if (pclk != 0U)
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d021      	beq.n	80082c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <UART_SetConfig+0x4e0>)
 800828a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828e:	461a      	mov	r2, r3
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	fbb3 f2f2 	udiv	r2, r3, r2
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	441a      	add	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	2b0f      	cmp	r3, #15
 80082ae:	d908      	bls.n	80082c2 <UART_SetConfig+0x4ae>
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b6:	d204      	bcs.n	80082c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a3a      	ldr	r2, [r7, #32]
 80082be:	60da      	str	r2, [r3, #12]
 80082c0:	e002      	b.n	80082c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2200      	movs	r2, #0
 80082dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2200      	movs	r2, #0
 80082e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80082e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3730      	adds	r7, #48	; 0x30
 80082ec:	46bd      	mov	sp, r7
 80082ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f2:	bf00      	nop
 80082f4:	08022b4c 	.word	0x08022b4c
 80082f8:	00f42400 	.word	0x00f42400

080082fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01a      	beq.n	8008412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083fa:	d10a      	bne.n	8008412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	605a      	str	r2, [r3, #4]
  }
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr

0800843e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b086      	sub	sp, #24
 8008442:	af02      	add	r7, sp, #8
 8008444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800844e:	f7f9 fa45 	bl	80018dc <HAL_GetTick>
 8008452:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b08      	cmp	r3, #8
 8008460:	d10e      	bne.n	8008480 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008462:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f82f 	bl	80084d4 <UART_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e025      	b.n	80084cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0304 	and.w	r3, r3, #4
 800848a:	2b04      	cmp	r3, #4
 800848c:	d10e      	bne.n	80084ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f819 	bl	80084d4 <UART_WaitOnFlagUntilTimeout>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e00f      	b.n	80084cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b09c      	sub	sp, #112	; 0x70
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	4613      	mov	r3, r2
 80084e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e4:	e0a9      	b.n	800863a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	f000 80a5 	beq.w	800863a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f0:	f7f9 f9f4 	bl	80018dc <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <UART_WaitOnFlagUntilTimeout+0x32>
 8008500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008502:	2b00      	cmp	r3, #0
 8008504:	d140      	bne.n	8008588 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800851a:	667b      	str	r3, [r7, #100]	; 0x64
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008526:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800852a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e6      	bne.n	8008506 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	f023 0301 	bic.w	r3, r3, #1
 800854e:	663b      	str	r3, [r7, #96]	; 0x60
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008558:	64ba      	str	r2, [r7, #72]	; 0x48
 800855a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800855e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e5      	bne.n	8008538 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e069      	b.n	800865c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d051      	beq.n	800863a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a4:	d149      	bne.n	800863a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
 80085d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	613b      	str	r3, [r7, #16]
   return(result);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008602:	623a      	str	r2, [r7, #32]
 8008604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	69f9      	ldr	r1, [r7, #28]
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e010      	b.n	800865c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69da      	ldr	r2, [r3, #28]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4013      	ands	r3, r2
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	429a      	cmp	r2, r3
 8008656:	f43f af46 	beq.w	80084e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3770      	adds	r7, #112	; 0x70
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008664:	b480      	push	{r7}
 8008666:	b09d      	sub	sp, #116	; 0x74
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	88fa      	ldrh	r2, [r7, #6]
 8008684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008696:	d10e      	bne.n	80086b6 <UART_Start_Receive_IT+0x52>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <UART_Start_Receive_IT+0x48>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086aa:	e02d      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	22ff      	movs	r2, #255	; 0xff
 80086b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086b4:	e028      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10d      	bne.n	80086da <UART_Start_Receive_IT+0x76>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d104      	bne.n	80086d0 <UART_Start_Receive_IT+0x6c>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086ce:	e01b      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	227f      	movs	r2, #127	; 0x7f
 80086d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086d8:	e016      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e2:	d10d      	bne.n	8008700 <UART_Start_Receive_IT+0x9c>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <UART_Start_Receive_IT+0x92>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	227f      	movs	r2, #127	; 0x7f
 80086f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086f4:	e008      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	223f      	movs	r2, #63	; 0x3f
 80086fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086fe:	e003      	b.n	8008708 <UART_Start_Receive_IT+0xa4>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2222      	movs	r2, #34	; 0x22
 8008714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008738:	65fa      	str	r2, [r7, #92]	; 0x5c
 800873a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800873e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e5      	bne.n	8008718 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008754:	d14d      	bne.n	80087f2 <UART_Start_Receive_IT+0x18e>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	429a      	cmp	r2, r3
 8008760:	d347      	bcc.n	80087f2 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876a:	d107      	bne.n	800877c <UART_Start_Receive_IT+0x118>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a38      	ldr	r2, [pc, #224]	; (8008858 <UART_Start_Receive_IT+0x1f4>)
 8008778:	671a      	str	r2, [r3, #112]	; 0x70
 800877a:	e002      	b.n	8008782 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a37      	ldr	r2, [pc, #220]	; (800885c <UART_Start_Receive_IT+0x1f8>)
 8008780:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800879e:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d2:	667b      	str	r3, [r7, #100]	; 0x64
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087dc:	637a      	str	r2, [r7, #52]	; 0x34
 80087de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e5      	bne.n	80087bc <UART_Start_Receive_IT+0x158>
 80087f0:	e02c      	b.n	800884c <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d107      	bne.n	800880c <UART_Start_Receive_IT+0x1a8>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4a16      	ldr	r2, [pc, #88]	; (8008860 <UART_Start_Receive_IT+0x1fc>)
 8008808:	671a      	str	r2, [r3, #112]	; 0x70
 800880a:	e002      	b.n	8008812 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a15      	ldr	r2, [pc, #84]	; (8008864 <UART_Start_Receive_IT+0x200>)
 8008810:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	613b      	str	r3, [r7, #16]
   return(result);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800882e:	663b      	str	r3, [r7, #96]	; 0x60
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008838:	623b      	str	r3, [r7, #32]
 800883a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	69f9      	ldr	r1, [r7, #28]
 800883e:	6a3a      	ldr	r2, [r7, #32]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	61bb      	str	r3, [r7, #24]
   return(result);
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e6      	bne.n	800881a <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3774      	adds	r7, #116	; 0x74
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	08009125 	.word	0x08009125
 800885c:	08008e2d 	.word	0x08008e2d
 8008860:	08008ccb 	.word	0x08008ccb
 8008864:	08008b6b 	.word	0x08008b6b

08008868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b08f      	sub	sp, #60	; 0x3c
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	61fb      	str	r3, [r7, #28]
   return(result);
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008884:	637b      	str	r3, [r7, #52]	; 0x34
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008890:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e6      	bne.n	8008870 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3308      	adds	r3, #8
 80088c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c2:	61ba      	str	r2, [r7, #24]
 80088c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	6979      	ldr	r1, [r7, #20]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	613b      	str	r3, [r7, #16]
   return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e5      	bne.n	80088a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2220      	movs	r2, #32
 80088da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80088de:	bf00      	nop
 80088e0:	373c      	adds	r7, #60	; 0x3c
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bc80      	pop	{r7}
 80088e6:	4770      	bx	lr

080088e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b095      	sub	sp, #84	; 0x54
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890e:	643b      	str	r3, [r7, #64]	; 0x40
 8008910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	61fb      	str	r3, [r7, #28]
   return(result);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008938:	f023 0301 	bic.w	r3, r3, #1
 800893c:	64bb      	str	r3, [r7, #72]	; 0x48
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800894c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e3      	bne.n	8008922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d118      	bne.n	8008994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6979      	ldr	r1, [r7, #20]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	613b      	str	r3, [r7, #16]
   return(result);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e6      	bne.n	8008962 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80089a8:	bf00      	nop
 80089aa:	3754      	adds	r7, #84	; 0x54
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr

080089b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b090      	sub	sp, #64	; 0x40
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d137      	bne.n	8008a3e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	623b      	str	r3, [r7, #32]
   return(result);
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f6:	633a      	str	r2, [r7, #48]	; 0x30
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e5      	bne.n	80089d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	617b      	str	r3, [r7, #20]
   return(result);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e6      	bne.n	8008a0a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a3c:	e002      	b.n	8008a44 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008a3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a40:	f7f9 fc28 	bl	8002294 <HAL_UART_TxCpltCallback>
}
 8008a44:	bf00      	nop
 8008a46:	3740      	adds	r7, #64	; 0x40
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff f9bc 	bl	8007dd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a90:	2b80      	cmp	r3, #128	; 0x80
 8008a92:	d109      	bne.n	8008aa8 <UART_DMAError+0x40>
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b21      	cmp	r3, #33	; 0x21
 8008a98:	d106      	bne.n	8008aa8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008aa2:	6978      	ldr	r0, [r7, #20]
 8008aa4:	f7ff fee0 	bl	8008868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d109      	bne.n	8008aca <UART_DMAError+0x62>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b22      	cmp	r3, #34	; 0x22
 8008aba:	d106      	bne.n	8008aca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f7ff ff0f 	bl	80088e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ad0:	f043 0210 	orr.w	r2, r3, #16
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ada:	6978      	ldr	r0, [r7, #20]
 8008adc:	f7ff f985 	bl	8007dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae0:	bf00      	nop
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff f96f 	bl	8007dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	61bb      	str	r3, [r7, #24]
 8008b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6979      	ldr	r1, [r7, #20]
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e6      	bne.n	8008b1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7f9 fb99 	bl	8002294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b62:	bf00      	nop
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b096      	sub	sp, #88	; 0x58
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	2b22      	cmp	r3, #34	; 0x22
 8008b84:	f040 8095 	bne.w	8008cb2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b92:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008b96:	b2d9      	uxtb	r1, r3
 8008b98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba2:	400a      	ands	r2, r1
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d178      	bne.n	8008cc2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008be4:	653b      	str	r3, [r7, #80]	; 0x50
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bee:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	623b      	str	r3, [r7, #32]
   return(result);
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c22:	633a      	str	r2, [r7, #48]	; 0x30
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e5      	bne.n	8008c02 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d12e      	bne.n	8008caa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	69b9      	ldr	r1, [r7, #24]
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e6      	bne.n	8008c52 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	f003 0310 	and.w	r3, r3, #16
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d103      	bne.n	8008c9a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2210      	movs	r2, #16
 8008c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f8aa 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ca8:	e00b      	b.n	8008cc2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7f9 fb00 	bl	80022b0 <HAL_UART_RxCpltCallback>
}
 8008cb0:	e007      	b.n	8008cc2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	699a      	ldr	r2, [r3, #24]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f042 0208 	orr.w	r2, r2, #8
 8008cc0:	619a      	str	r2, [r3, #24]
}
 8008cc2:	bf00      	nop
 8008cc4:	3758      	adds	r7, #88	; 0x58
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b096      	sub	sp, #88	; 0x58
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce2:	2b22      	cmp	r3, #34	; 0x22
 8008ce4:	f040 8095 	bne.w	8008e12 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cf8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008cfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d00:	4013      	ands	r3, r2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d06:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0c:	1c9a      	adds	r2, r3, #2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d178      	bne.n	8008e22 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e6      	bne.n	8008d30 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3308      	adds	r3, #8
 8008d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	f023 0301 	bic.w	r3, r3, #1
 8008d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3308      	adds	r3, #8
 8008d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e5      	bne.n	8008d62 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d12e      	bne.n	8008e0a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f023 0310 	bic.w	r3, r3, #16
 8008dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6979      	ldr	r1, [r7, #20]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b10      	cmp	r3, #16
 8008df0:	d103      	bne.n	8008dfa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2210      	movs	r2, #16
 8008df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fe fffa 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e08:	e00b      	b.n	8008e22 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7f9 fa50 	bl	80022b0 <HAL_UART_RxCpltCallback>
}
 8008e10:	e007      	b.n	8008e22 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699a      	ldr	r2, [r3, #24]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0208 	orr.w	r2, r2, #8
 8008e20:	619a      	str	r2, [r3, #24]
}
 8008e22:	bf00      	nop
 8008e24:	3758      	adds	r7, #88	; 0x58
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b0a6      	sub	sp, #152	; 0x98
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e3a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e62:	2b22      	cmp	r3, #34	; 0x22
 8008e64:	f040 814f 	bne.w	8009106 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e6e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e72:	e0f6      	b.n	8009062 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e7e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008e82:	b2d9      	uxtb	r1, r3
 8008e84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	400a      	ands	r2, r1
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d053      	beq.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d011      	beq.n	8008ef6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eec:	f043 0201 	orr.w	r2, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d011      	beq.n	8008f26 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2202      	movs	r2, #2
 8008f14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f1c:	f043 0204 	orr.w	r2, r3, #4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d011      	beq.n	8008f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2204      	movs	r2, #4
 8008f44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f4c:	f043 0202 	orr.w	r2, r3, #2
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fe ff42 	bl	8007dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d173      	bne.n	8009062 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f9e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e4      	bne.n	8008f7a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc6:	f023 0301 	bic.w	r3, r3, #1
 8008fca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008fd4:	657a      	str	r2, [r7, #84]	; 0x54
 8008fd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e3      	bne.n	8008fb0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d12e      	bne.n	800905c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	f023 0310 	bic.w	r3, r3, #16
 8009018:	67bb      	str	r3, [r7, #120]	; 0x78
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009022:	643b      	str	r3, [r7, #64]	; 0x40
 8009024:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b10      	cmp	r3, #16
 8009042:	d103      	bne.n	800904c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2210      	movs	r2, #16
 800904a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe fed1 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
 800905a:	e002      	b.n	8009062 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7f9 f927 	bl	80022b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009062:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800906a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	f47f aefe 	bne.w	8008e74 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800907e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009082:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009086:	2b00      	cmp	r3, #0
 8009088:	d045      	beq.n	8009116 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009094:	429a      	cmp	r2, r3
 8009096:	d23e      	bcs.n	8009116 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ae:	673b      	str	r3, [r7, #112]	; 0x70
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3308      	adds	r3, #8
 80090b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80090b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e5      	bne.n	8009098 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a14      	ldr	r2, [pc, #80]	; (8009120 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80090d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f043 0320 	orr.w	r3, r3, #32
 80090e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6979      	ldr	r1, [r7, #20]
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	613b      	str	r3, [r7, #16]
   return(result);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e6      	bne.n	80090d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009104:	e007      	b.n	8009116 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0208 	orr.w	r2, r2, #8
 8009114:	619a      	str	r2, [r3, #24]
}
 8009116:	bf00      	nop
 8009118:	3798      	adds	r7, #152	; 0x98
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	08008b6b 	.word	0x08008b6b

08009124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b0a8      	sub	sp, #160	; 0xa0
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009132:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915a:	2b22      	cmp	r3, #34	; 0x22
 800915c:	f040 8153 	bne.w	8009406 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009166:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800916a:	e0fa      	b.n	8009362 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800917e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009182:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009186:	4013      	ands	r3, r2
 8009188:	b29a      	uxth	r2, r3
 800918a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800918e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	1c9a      	adds	r2, r3, #2
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d053      	beq.n	800926a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d011      	beq.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80091ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2201      	movs	r2, #1
 80091e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e8:	f043 0201 	orr.w	r2, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d011      	beq.n	8009222 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2202      	movs	r2, #2
 8009210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009218:	f043 0204 	orr.w	r2, r3, #4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	d011      	beq.n	8009252 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800922e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2204      	movs	r2, #4
 8009240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009248:	f043 0202 	orr.w	r2, r3, #2
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fe fdc4 	bl	8007dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d175      	bne.n	8009362 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800928a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800929a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800929e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e4      	bne.n	8009276 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3308      	adds	r3, #8
 80092b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092c2:	f023 0301 	bic.w	r3, r3, #1
 80092c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80092d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e1      	bne.n	80092ac <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d12e      	bne.n	800935c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	f023 0310 	bic.w	r3, r3, #16
 8009318:	67fb      	str	r3, [r7, #124]	; 0x7c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009322:	647b      	str	r3, [r7, #68]	; 0x44
 8009324:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e6      	bne.n	8009304 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b10      	cmp	r3, #16
 8009342:	d103      	bne.n	800934c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2210      	movs	r2, #16
 800934a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fe fd51 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
 800935a:	e002      	b.n	8009362 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7f8 ffa7 	bl	80022b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009362:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009366:	2b00      	cmp	r3, #0
 8009368:	d006      	beq.n	8009378 <UART_RxISR_16BIT_FIFOEN+0x254>
 800936a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	f47f aefa 	bne.w	800916c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800937e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009382:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009386:	2b00      	cmp	r3, #0
 8009388:	d045      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009390:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009394:	429a      	cmp	r2, r3
 8009396:	d23e      	bcs.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	623b      	str	r3, [r7, #32]
   return(result);
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ae:	677b      	str	r3, [r7, #116]	; 0x74
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80093b8:	633a      	str	r2, [r7, #48]	; 0x30
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a14      	ldr	r2, [pc, #80]	; (8009420 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80093d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f043 0320 	orr.w	r3, r3, #32
 80093e6:	673b      	str	r3, [r7, #112]	; 0x70
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093f0:	61fb      	str	r3, [r7, #28]
 80093f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	69b9      	ldr	r1, [r7, #24]
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	617b      	str	r3, [r7, #20]
   return(result);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e6      	bne.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009404:	e007      	b.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	619a      	str	r2, [r3, #24]
}
 8009416:	bf00      	nop
 8009418:	37a0      	adds	r7, #160	; 0xa0
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	08008ccb 	.word	0x08008ccb

08009424 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bc80      	pop	{r7}
 8009434:	4770      	bx	lr

08009436 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr

0800945a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b088      	sub	sp, #32
 800945e:	af02      	add	r7, sp, #8
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	1d3b      	adds	r3, r7, #4
 8009464:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009476:	2302      	movs	r3, #2
 8009478:	e046      	b.n	8009508 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2224      	movs	r2, #36	; 0x24
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0201 	bic.w	r2, r2, #1
 8009498:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 f911 	bl	80096e2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0201 	orr.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094d0:	f7f8 fa04 	bl	80018dc <HAL_GetTick>
 80094d4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2200      	movs	r2, #0
 80094e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7fe fff5 	bl	80084d4 <UART_WaitOnFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	75fb      	strb	r3, [r7, #23]
 80094f4:	e003      	b.n	80094fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b089      	sub	sp, #36	; 0x24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_UARTEx_EnableStopMode+0x16>
 8009522:	2302      	movs	r3, #2
 8009524:	e021      	b.n	800956a <HAL_UARTEx_EnableStopMode+0x5a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60bb      	str	r3, [r7, #8]
   return(result);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f043 0302 	orr.w	r3, r3, #2
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	613b      	str	r3, [r7, #16]
   return(result);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3724      	adds	r7, #36	; 0x24
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_UARTEx_EnableFifoMode+0x16>
 8009586:	2302      	movs	r3, #2
 8009588:	e02b      	b.n	80095e2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	; 0x24
 8009596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0201 	bic.w	r2, r2, #1
 80095b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80095c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f8ac 	bl	8009728 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095fe:	2302      	movs	r3, #2
 8009600:	e02d      	b.n	800965e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2224      	movs	r2, #36	; 0x24
 800960e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0201 	bic.w	r2, r2, #1
 8009628:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f872 	bl	8009728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800967a:	2302      	movs	r3, #2
 800967c:	e02d      	b.n	80096da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2224      	movs	r2, #36	; 0x24
 800968a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0201 	bic.w	r2, r2, #1
 80096a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	430a      	orrs	r2, r1
 80096b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f834 	bl	8009728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b085      	sub	sp, #20
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f023 0210 	bic.w	r2, r3, #16
 80096fa:	893b      	ldrh	r3, [r7, #8]
 80096fc:	4619      	mov	r1, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009710:	7abb      	ldrb	r3, [r7, #10]
 8009712:	061a      	lsls	r2, r3, #24
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	605a      	str	r2, [r3, #4]
}
 800971c:	bf00      	nop
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
	...

08009728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009734:	2b00      	cmp	r3, #0
 8009736:	d108      	bne.n	800974a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009748:	e031      	b.n	80097ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974a:	2308      	movs	r3, #8
 800974c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800974e:	2308      	movs	r3, #8
 8009750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	0e5b      	lsrs	r3, r3, #25
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	0f5b      	lsrs	r3, r3, #29
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	7b3a      	ldrb	r2, [r7, #12]
 8009776:	4910      	ldr	r1, [pc, #64]	; (80097b8 <UARTEx_SetNbDataToProcess+0x90>)
 8009778:	5c8a      	ldrb	r2, [r1, r2]
 800977a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800977e:	7b3a      	ldrb	r2, [r7, #12]
 8009780:	490e      	ldr	r1, [pc, #56]	; (80097bc <UARTEx_SetNbDataToProcess+0x94>)
 8009782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009784:	fb93 f3f2 	sdiv	r3, r3, r2
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	7b7a      	ldrb	r2, [r7, #13]
 8009794:	4908      	ldr	r1, [pc, #32]	; (80097b8 <UARTEx_SetNbDataToProcess+0x90>)
 8009796:	5c8a      	ldrb	r2, [r1, r2]
 8009798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800979c:	7b7a      	ldrb	r2, [r7, #13]
 800979e:	4907      	ldr	r1, [pc, #28]	; (80097bc <UARTEx_SetNbDataToProcess+0x94>)
 80097a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097ae:	bf00      	nop
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bc80      	pop	{r7}
 80097b6:	4770      	bx	lr
 80097b8:	08022b64 	.word	0x08022b64
 80097bc:	08022b6c 	.word	0x08022b6c

080097c0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80097c4:	f7f7 ff30 	bl	8001628 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80097c8:	f000 f80a 	bl	80097e0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80097cc:	bf00      	nop
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	f015 fb56 	bl	801ee88 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80097dc:	bf00      	nop
 80097de:	bd80      	pop	{r7, pc}

080097e0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */
  CMD_Init(CmdProcessNotify);
 80097e6:	482c      	ldr	r0, [pc, #176]	; (8009898 <LoRaWAN_Init+0xb8>)
 80097e8:	f001 fe5c 	bl	800b4a4 <CMD_Init>

  BSP_LED_Init(LED_RED);
 80097ec:	2000      	movs	r0, #0
 80097ee:	f7f8 fdc1 	bl	8002374 <BSP_LED_Init>
  //BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 80097f2:	2300      	movs	r3, #0
 80097f4:	9302      	str	r3, [sp, #8]
 80097f6:	2301      	movs	r3, #1
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	2301      	movs	r3, #1
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	4b27      	ldr	r3, [pc, #156]	; (800989c <LoRaWAN_Init+0xbc>)
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	2002      	movs	r0, #2
 8009806:	f015 f813 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800980a:	2300      	movs	r3, #0
 800980c:	9302      	str	r3, [sp, #8]
 800980e:	2303      	movs	r3, #3
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	2302      	movs	r3, #2
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	4b22      	ldr	r3, [pc, #136]	; (80098a0 <LoRaWAN_Init+0xc0>)
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	2002      	movs	r0, #2
 800981e:	f015 f807 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8009822:	2300      	movs	r3, #0
 8009824:	9302      	str	r3, [sp, #8]
 8009826:	2301      	movs	r3, #1
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	2301      	movs	r3, #1
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4b1d      	ldr	r3, [pc, #116]	; (80098a4 <LoRaWAN_Init+0xc4>)
 8009830:	2200      	movs	r2, #0
 8009832:	2100      	movs	r1, #0
 8009834:	2002      	movs	r0, #2
 8009836:	f014 fffb 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n\r\n\r\n----------LoRaWAN_End_Node_FreeRTOS----------\r\n\r\n\r\n");
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <LoRaWAN_Init+0xc8>)
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	2002      	movs	r0, #2
 8009842:	f014 fff5 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009846:	4a19      	ldr	r2, [pc, #100]	; (80098ac <LoRaWAN_Init+0xcc>)
 8009848:	2100      	movs	r1, #0
 800984a:	2002      	movs	r0, #2
 800984c:	f015 fc00 	bl	801f050 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 8009850:	4a17      	ldr	r2, [pc, #92]	; (80098b0 <LoRaWAN_Init+0xd0>)
 8009852:	2100      	movs	r1, #0
 8009854:	2001      	movs	r0, #1
 8009856:	f015 fbfb 	bl	801f050 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800985a:	f002 f8c7 	bl	800b9ec <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800985e:	4815      	ldr	r0, [pc, #84]	; (80098b4 <LoRaWAN_Init+0xd4>)
 8009860:	f005 fd42 	bl	800f2e8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009864:	4814      	ldr	r0, [pc, #80]	; (80098b8 <LoRaWAN_Init+0xd8>)
 8009866:	f005 fd8b 	bl	800f380 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  APP_PPRINTF("ATtention command interface\r\n");
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <LoRaWAN_Init+0xdc>)
 800986c:	2200      	movs	r2, #0
 800986e:	2100      	movs	r1, #0
 8009870:	2000      	movs	r0, #0
 8009872:	f014 ffdd 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f6      	bne.n	800986a <LoRaWAN_Init+0x8a>
  APP_PPRINTF("AT? to list all available functions\r\n");
 800987c:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <LoRaWAN_Init+0xe0>)
 800987e:	2200      	movs	r2, #0
 8009880:	2100      	movs	r1, #0
 8009882:	2000      	movs	r0, #0
 8009884:	f014 ffd4 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f6      	bne.n	800987c <LoRaWAN_Init+0x9c>
  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800988e:	bf00      	nop
 8009890:	bf00      	nop
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	08009937 	.word	0x08009937
 800989c:	08020c5c 	.word	0x08020c5c
 80098a0:	08020c7c 	.word	0x08020c7c
 80098a4:	08020c9c 	.word	0x08020c9c
 80098a8:	08020cbc 	.word	0x08020cbc
 80098ac:	0800f5d9 	.word	0x0800f5d9
 80098b0:	0800b501 	.word	0x0800b501
 80098b4:	20000010 	.word	0x20000010
 80098b8:	20000044 	.word	0x20000044
 80098bc:	08020cf8 	.word	0x08020cf8
 80098c0:	08020d18 	.word	0x08020d18

080098c4 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	80fb      	strh	r3, [r7, #6]
//      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
//      break;
//    default:
//      break;
//  }
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr

080098d8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <OnRxData+0x16>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <OnRxData+0x1e>
  {
	    AT_event_receive(appData, params);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f873 	bl	80099dc <AT_event_receive>
  }
  /* USER CODE END OnRxData_1 */
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <OnTxData>:


static void OnTxData(LmHandlerTxParams_t *params)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <OnTxData+0x14>
  {
	  AT_event_confirm(params);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f913 	bl	8009b38 <AT_event_confirm>
  }
  /* USER CODE END OnTxData_1 */
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <OnJoinRequest+0x14>
  {
	  AT_event_join(joinParams);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f835 	bl	8009998 <AT_event_join>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <CmdProcessNotify>:

static void CmdProcessNotify(void)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CmdProcessNotify_1 */

  /* USER CODE END CmdProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 800993a:	2100      	movs	r1, #0
 800993c:	2001      	movs	r0, #1
 800993e:	f015 fba9 	bl	801f094 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN CmdProcessNotify_2 */

  /* USER CODE END CmdProcessNotify_2 */
}
 8009942:	bf00      	nop
 8009944:	bd80      	pop	{r7, pc}

08009946 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800994a:	2100      	movs	r1, #0
 800994c:	2002      	movs	r0, #2
 800994e:	f015 fba1 	bl	801f094 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009952:	bf00      	nop
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800995c:	f3bf 8f4f 	dsb	sy
}
 8009960:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009962:	4b06      	ldr	r3, [pc, #24]	; (800997c <__NVIC_SystemReset+0x24>)
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800996a:	4904      	ldr	r1, [pc, #16]	; (800997c <__NVIC_SystemReset+0x24>)
 800996c:	4b04      	ldr	r3, [pc, #16]	; (8009980 <__NVIC_SystemReset+0x28>)
 800996e:	4313      	orrs	r3, r2
 8009970:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009972:	f3bf 8f4f 	dsb	sy
}
 8009976:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009978:	bf00      	nop
 800997a:	e7fd      	b.n	8009978 <__NVIC_SystemReset+0x20>
 800997c:	e000ed00 	.word	0xe000ed00
 8009980:	05fa0004 	.word	0x05fa0004

08009984 <AT_return_error>:
{
  return AT_OK;
}

ATEerror_t AT_return_error(const char *param)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  return AT_ERROR;
 800998c:	2301      	movs	r3, #1
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr

08009998 <AT_event_join>:

/* --------------- Application events --------------- */
void AT_event_join(LmHandlerJoinParams_t *params)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_join_1 */

  /* USER CODE END AT_event_join_1 */
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <AT_event_join+0x26>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <AT_event_join+0x26>
  {
    AT_PRINTF("+EVT:JOINED\r\n");
 80099b0:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <AT_event_join+0x3c>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	2100      	movs	r1, #0
 80099b6:	2000      	movs	r0, #0
 80099b8:	f014 ff3a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 80099bc:	e006      	b.n	80099cc <AT_event_join+0x34>
  }
  else
  {
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 80099be:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <AT_event_join+0x40>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	2000      	movs	r0, #0
 80099c6:	f014 ff33 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_join_2 */

  /* USER CODE END AT_event_join_2 */
}
 80099ca:	bf00      	nop
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	08020d40 	.word	0x08020d40
 80099d8:	08020d50 	.word	0x08020d50

080099dc <AT_event_receive>:

void AT_event_receive(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b090      	sub	sp, #64	; 0x40
 80099e0:	af06      	add	r7, sp, #24
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN AT_event_receive_1 */

  /* USER CODE END AT_event_receive_1 */
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 80099e6:	4b4e      	ldr	r3, [pc, #312]	; (8009b20 <AT_event_receive+0x144>)
 80099e8:	f107 040c 	add.w	r4, r7, #12
 80099ec:	461d      	mov	r5, r3
 80099ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80099f6:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t ReceivedDataSize = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((appData != NULL) && (appData->BufferSize > 0))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d03e      	beq.n	8009a84 <AT_event_receive+0xa8>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d03a      	beq.n	8009a84 <AT_event_receive+0xa8>
  {
    /* Received data to be copied*/
    if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2bf1      	cmp	r3, #241	; 0xf1
 8009a14:	d903      	bls.n	8009a1e <AT_event_receive+0x42>
    {
      ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 8009a16:	23f2      	movs	r3, #242	; 0xf2
 8009a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a1c:	e003      	b.n	8009a26 <AT_event_receive+0x4a>
    }
    else
    {
      ReceivedDataSize = appData->BufferSize;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /*asynchronous notification to the host*/
    AT_PRINTF("+EVT:%d:%02X:", appData->Port, ReceivedDataSize);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	9200      	str	r2, [sp, #0]
 8009a34:	4b3b      	ldr	r3, [pc, #236]	; (8009b24 <AT_event_receive+0x148>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f014 fef8 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a46:	e011      	b.n	8009a6c <AT_event_receive+0x90>
    {
      AT_PRINTF("%02x", appData->Buffer[i]);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a50:	4413      	add	r3, r2
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	4b34      	ldr	r3, [pc, #208]	; (8009b28 <AT_event_receive+0x14c>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f014 fee7 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8009a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a66:	3301      	adds	r3, #1
 8009a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d3e7      	bcc.n	8009a48 <AT_event_receive+0x6c>
    }
    AT_PRINTF("\r\n");
 8009a78:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <AT_event_receive+0x150>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f014 fed6 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }

  if (params != NULL)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d046      	beq.n	8009b18 <AT_event_receive+0x13c>
  {
    if (params->LinkCheck == true)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	7b5b      	ldrb	r3, [r3, #13]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d025      	beq.n	8009ade <AT_event_receive+0x102>
    {
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	3328      	adds	r3, #40	; 0x28
 8009a9c:	443b      	add	r3, r7
 8009a9e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009ab8:	4614      	mov	r4, r2
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	7b92      	ldrb	r2, [r2, #14]
 8009abe:	4615      	mov	r5, r2
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	7bd2      	ldrb	r2, [r2, #15]
 8009ac4:	9205      	str	r2, [sp, #20]
 8009ac6:	9504      	str	r5, [sp, #16]
 8009ac8:	9403      	str	r4, [sp, #12]
 8009aca:	9002      	str	r0, [sp, #8]
 8009acc:	9101      	str	r1, [sp, #4]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <AT_event_receive+0x154>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f014 feaa 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN AT_event_receive_2 */

  /* USER CODE END AT_event_receive_2 */
}
 8009adc:	e01c      	b.n	8009b18 <AT_event_receive+0x13c>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d\r\n", slotStrings[params->RxSlot], params->Datarate, params->Rssi,
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	3328      	adds	r3, #40	; 0x28
 8009ae8:	443b      	add	r3, r7
 8009aea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8009af4:	4611      	mov	r1, r2
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8009afc:	4610      	mov	r0, r2
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	9002      	str	r0, [sp, #8]
 8009b08:	9101      	str	r1, [sp, #4]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <AT_event_receive+0x158>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	2000      	movs	r0, #0
 8009b14:	f014 fe8c 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8009b18:	bf00      	nop
 8009b1a:	3728      	adds	r7, #40	; 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b20:	08020e1c 	.word	0x08020e1c
 8009b24:	08020d64 	.word	0x08020d64
 8009b28:	08020d74 	.word	0x08020d74
 8009b2c:	08020d7c 	.word	0x08020d7c
 8009b30:	08020d80 	.word	0x08020d80
 8009b34:	08020db8 	.word	0x08020db8

08009b38 <AT_event_confirm>:

void AT_event_confirm(LmHandlerTxParams_t *params)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_confirm_1 */

  /* USER CODE END AT_event_confirm_1 */
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <AT_event_confirm+0x2a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	789b      	ldrb	r3, [r3, #2]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d109      	bne.n	8009b62 <AT_event_confirm+0x2a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	78db      	ldrb	r3, [r3, #3]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <AT_event_confirm+0x2a>
  {
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <AT_event_confirm+0x34>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f014 fe67 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_confirm_2 */

  /* USER CODE END AT_event_confirm_2 */
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08020e34 	.word	0x08020e34

08009b70 <AT_reset>:

/* --------------- General commands --------------- */
ATEerror_t AT_reset(const char *param)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_reset_1 */

  /* USER CODE END AT_reset_1 */
  NVIC_SystemReset();
 8009b78:	f7ff feee 	bl	8009958 <__NVIC_SystemReset>

08009b7c <AT_verbose_get>:

  /* USER CODE END AT_reset_2 */
}

ATEerror_t AT_verbose_get(const char *param)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_get_1 */

  /* USER CODE END AT_verbose_get_1 */
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 8009b84:	f014 fef2 	bl	801e96c <UTIL_ADV_TRACE_GetVerboseLevel>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fc4c 	bl	800b428 <print_u>
  return AT_OK;
 8009b90:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_get_2 */

  /* USER CODE END AT_verbose_get_2 */
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <AT_verbose_set>:

ATEerror_t AT_verbose_set(const char *param)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_set_1 */

  /* USER CODE END AT_verbose_set_1 */
  const char *buf = param;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60fb      	str	r3, [r7, #12]
  int32_t lvl_nb;

  /* read and set the verbose level */
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 8009ba8:	f107 0308 	add.w	r3, r7, #8
 8009bac:	461a      	mov	r2, r3
 8009bae:	4913      	ldr	r1, [pc, #76]	; (8009bfc <AT_verbose_set+0x60>)
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f016 fcc3 	bl	802053c <tiny_sscanf>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d007      	beq.n	8009bcc <AT_verbose_set+0x30>
  {
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 8009bbc:	4b10      	ldr	r3, [pc, #64]	; (8009c00 <AT_verbose_set+0x64>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	f014 fe34 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e013      	b.n	8009bf4 <AT_verbose_set+0x58>
  }
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	dc02      	bgt.n	8009bd8 <AT_verbose_set+0x3c>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da07      	bge.n	8009be8 <AT_verbose_set+0x4c>
  {
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <AT_verbose_set+0x68>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2100      	movs	r1, #0
 8009bde:	2000      	movs	r0, #0
 8009be0:	f014 fe26 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8009be4:	2302      	movs	r3, #2
 8009be6:	e005      	b.n	8009bf4 <AT_verbose_set+0x58>
  }

  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	4618      	mov	r0, r3
 8009bee:	f014 fead 	bl	801e94c <UTIL_ADV_TRACE_SetVerboseLevel>

  return AT_OK;
 8009bf2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_set_2 */

  /* USER CODE END AT_verbose_set_2 */
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	08020e4c 	.word	0x08020e4c
 8009c00:	08020e50 	.word	0x08020e50
 8009c04:	08020e78 	.word	0x08020e78

08009c08 <AT_LocalTime_get>:

ATEerror_t AT_LocalTime_get(const char *param)
{
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b094      	sub	sp, #80	; 0x50
 8009c0c:	af06      	add	r7, sp, #24
 8009c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_LocalTime_get_1 */

  /* USER CODE END AT_LocalTime_get_1 */
  struct tm localtime;
  SysTime_t UnixEpoch = SysTimeGet();
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	4618      	mov	r0, r3
 8009c16:	f015 fbbb 	bl	801f390 <SysTimeGet>
  UnixEpoch.Seconds -= 18; /*removing leap seconds*/
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3b12      	subs	r3, #18
 8009c1e:	60fb      	str	r3, [r7, #12]

  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8009c26:	60fb      	str	r3, [r7, #12]

  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f107 0214 	add.w	r2, r7, #20
 8009c2e:	4611      	mov	r1, r2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f015 fc6b 	bl	801f50c <SysTimeLocalTime>

  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	6979      	ldr	r1, [r7, #20]
 8009c3c:	6a38      	ldr	r0, [r7, #32]
 8009c3e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009c40:	3401      	adds	r4, #1
 8009c42:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8009c44:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8009c48:	9505      	str	r5, [sp, #20]
 8009c4a:	9404      	str	r4, [sp, #16]
 8009c4c:	9003      	str	r0, [sp, #12]
 8009c4e:	9102      	str	r1, [sp, #8]
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <AT_LocalTime_get+0x64>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	f014 fde8 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            localtime.tm_hour, localtime.tm_min, localtime.tm_sec,
            localtime.tm_mday, localtime.tm_mon + 1, localtime.tm_year + 1900);

  return AT_OK;
 8009c60:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_LocalTime_get_2 */

  /* USER CODE END AT_LocalTime_get_2 */
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3738      	adds	r7, #56	; 0x38
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bdb0      	pop	{r4, r5, r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	08020ebc 	.word	0x08020ebc

08009c70 <AT_JoinEUI_get>:

/* --------------- Keys, IDs and EUIs management commands --------------- */
ATEerror_t AT_JoinEUI_get(const char *param)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_get_1 */

  /* USER CODE END AT_JoinEUI_get_1 */
  uint8_t appEUI[8];
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8009c78:	f107 0308 	add.w	r3, r7, #8
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f006 f9d4 	bl	801002a <LmHandlerGetAppEUI>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <AT_JoinEUI_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e005      	b.n	8009c98 <AT_JoinEUI_get+0x28>
  }

  print_8_02x(appEUI);
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4618      	mov	r0, r3
 8009c92:	f001 fb7f 	bl	800b394 <print_8_02x>
  return AT_OK;
 8009c96:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_get_2 */

  /* USER CODE END AT_JoinEUI_get_2 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <AT_JoinEUI_set>:

ATEerror_t AT_JoinEUI_set(const char *param)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af06      	add	r7, sp, #24
 8009ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_set_1 */

  /* USER CODE END AT_JoinEUI_set_1 */
  uint8_t JoinEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	1c59      	adds	r1, r3, #1
 8009cae:	f107 0208 	add.w	r2, r7, #8
 8009cb2:	f107 0308 	add.w	r3, r7, #8
 8009cb6:	3307      	adds	r3, #7
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	f107 0308 	add.w	r3, r7, #8
 8009cbe:	3306      	adds	r3, #6
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	3305      	adds	r3, #5
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	f107 0308 	add.w	r3, r7, #8
 8009cce:	3304      	adds	r3, #4
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	3303      	adds	r3, #3
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	3302      	adds	r3, #2
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	490b      	ldr	r1, [pc, #44]	; (8009d14 <AT_JoinEUI_set+0x74>)
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f016 fc28 	bl	802053c <tiny_sscanf>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d001      	beq.n	8009cf6 <AT_JoinEUI_set+0x56>
                  &JoinEui[0], &JoinEui[1], &JoinEui[2], &JoinEui[3],
                  &JoinEui[4], &JoinEui[5], &JoinEui[6], &JoinEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e00a      	b.n	8009d0c <AT_JoinEUI_set+0x6c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f006 f9b7 	bl	801006e <LmHandlerSetAppEUI>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <AT_JoinEUI_set+0x6a>
  {
    return AT_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e000      	b.n	8009d0c <AT_JoinEUI_set+0x6c>
  }

  return AT_OK;
 8009d0a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_set_2 */

  /* USER CODE END AT_JoinEUI_set_2 */
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	08020ee8 	.word	0x08020ee8

08009d18 <AT_NwkKey_get>:

ATEerror_t AT_NwkKey_get(const char *param)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkKey_get_1 */

  /* USER CODE END AT_NwkKey_get_1 */
  uint8_t nwkKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkKey(nwkKey))
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	4618      	mov	r0, r3
 8009d26:	f006 fc54 	bl	80105d2 <LmHandlerGetNwkKey>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <AT_NwkKey_get+0x1c>
  {
    return AT_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e005      	b.n	8009d40 <AT_NwkKey_get+0x28>
  }
  print_16_02x(nwkKey);
 8009d34:	f107 0308 	add.w	r3, r7, #8
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fac3 	bl	800b2c4 <print_16_02x>

  return AT_OK;
 8009d3e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkKey_get_2 */

  /* USER CODE END AT_NwkKey_get_2 */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <AT_NwkKey_set>:

ATEerror_t AT_NwkKey_set(const char *param)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkKey_set_1 */

  /* USER CODE END AT_NwkKey_set_1 */
  uint8_t nwkKey[16];
  if (sscanf_16_hhx(param, nwkKey) != 16)
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 fa3a 	bl	800b1d0 <sscanf_16_hhx>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	d001      	beq.n	8009d66 <AT_NwkKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009d62:	2302      	movs	r3, #2
 8009d64:	e00a      	b.n	8009d7c <AT_NwkKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkKey(nwkKey))
 8009d66:	f107 0308 	add.w	r3, r7, #8
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f006 fc53 	bl	8010616 <LmHandlerSetNwkKey>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <AT_NwkKey_set+0x32>
  {
    return AT_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e000      	b.n	8009d7c <AT_NwkKey_set+0x34>
  }

  return AT_OK;
 8009d7a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkKey_set_2 */

  /* USER CODE END AT_NwkKey_set_2 */
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <AT_AppKey_get>:

ATEerror_t AT_AppKey_get(const char *param)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppKey_get_1 */

  /* USER CODE END AT_AppKey_get_1 */
  uint8_t appKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppKey(appKey))
 8009d8c:	f107 0308 	add.w	r3, r7, #8
 8009d90:	4618      	mov	r0, r3
 8009d92:	f006 fc60 	bl	8010656 <LmHandlerGetAppKey>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <AT_AppKey_get+0x1c>
  {
    return AT_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e005      	b.n	8009dac <AT_AppKey_get+0x28>
  }
  print_16_02x(appKey);
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 fa8d 	bl	800b2c4 <print_16_02x>

  return AT_OK;
 8009daa:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppKey_get_2 */

  /* USER CODE END AT_AppKey_get_2 */
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <AT_AppKey_set>:

ATEerror_t AT_AppKey_set(const char *param)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppKey_set_1 */

  /* USER CODE END AT_AppKey_set_1 */
  uint8_t appKey[16];
  if (sscanf_16_hhx(param, appKey) != 16)
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fa04 	bl	800b1d0 <sscanf_16_hhx>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d001      	beq.n	8009dd2 <AT_AppKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e00a      	b.n	8009de8 <AT_AppKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppKey(appKey))
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f006 fc5f 	bl	801069a <LmHandlerSetAppKey>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <AT_AppKey_set+0x32>
  {
    return AT_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <AT_AppKey_set+0x34>
  }

  return AT_OK;
 8009de6:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppKey_set_2 */

  /* USER CODE END AT_AppKey_set_2 */
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <AT_NwkSKey_get>:

ATEerror_t AT_NwkSKey_get(const char *param)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkSKey_get_1 */

  /* USER CODE END AT_NwkSKey_get_1 */
  uint8_t nwkSKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkSKey(nwkSKey))
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f006 fc6c 	bl	80106da <LmHandlerGetNwkSKey>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <AT_NwkSKey_get+0x1c>
  {
    return AT_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e005      	b.n	8009e18 <AT_NwkSKey_get+0x28>
  }
  print_16_02x(nwkSKey);
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 fa57 	bl	800b2c4 <print_16_02x>

  return AT_OK;
 8009e16:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkSKey_get_2 */

  /* USER CODE END AT_NwkSKey_get_2 */
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <AT_NwkSKey_set>:

ATEerror_t AT_NwkSKey_set(const char *param)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkSKey_set_1 */

  /* USER CODE END AT_NwkSKey_set_1 */
  uint8_t nwkSKey[16];
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f9ce 	bl	800b1d0 <sscanf_16_hhx>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d001      	beq.n	8009e3e <AT_NwkSKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e00a      	b.n	8009e54 <AT_NwkSKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkSKey(nwkSKey))
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f006 fc6b 	bl	801071e <LmHandlerSetNwkSKey>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <AT_NwkSKey_set+0x32>
  {
    return AT_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <AT_NwkSKey_set+0x34>
  }

  return AT_OK;
 8009e52:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkSKey_set_2 */

  /* USER CODE END AT_NwkSKey_set_2 */
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <AT_AppSKey_get>:

ATEerror_t AT_AppSKey_get(const char *param)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppSKey_get_1 */

  /* USER CODE END AT_AppSKey_get_1 */
  uint8_t appSKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppSKey(appSKey))
 8009e64:	f107 0308 	add.w	r3, r7, #8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f006 fc78 	bl	801075e <LmHandlerGetAppSKey>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <AT_AppSKey_get+0x1c>
  {
    return AT_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e005      	b.n	8009e84 <AT_AppSKey_get+0x28>
  }
  print_16_02x(appSKey);
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fa21 	bl	800b2c4 <print_16_02x>

  return AT_OK;
 8009e82:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppSKey_get_2 */

  /* USER CODE END AT_AppSKey_get_2 */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <AT_AppSKey_set>:

ATEerror_t AT_AppSKey_set(const char *param)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppSKey_set_1 */

  /* USER CODE END AT_AppSKey_set_1 */
  uint8_t appSKey[16];
  if (sscanf_16_hhx(param, appSKey) != 16)
 8009e94:	f107 0308 	add.w	r3, r7, #8
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 f998 	bl	800b1d0 <sscanf_16_hhx>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d001      	beq.n	8009eaa <AT_AppSKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e00a      	b.n	8009ec0 <AT_AppSKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppSKey(appSKey))
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f006 fc77 	bl	80107a2 <LmHandlerSetAppSKey>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <AT_AppSKey_set+0x32>
  {
    return AT_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <AT_AppSKey_set+0x34>
  }

  return AT_OK;
 8009ebe:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppSKey_set_2 */

  /* USER CODE END AT_AppSKey_set_2 */
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <AT_DevAddr_get>:

ATEerror_t AT_DevAddr_get(const char *param)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_get_1 */

  /* USER CODE END AT_DevAddr_get_1 */
  uint32_t devAddr;
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f006 f929 	bl	801012c <LmHandlerGetDevAddr>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <AT_DevAddr_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e004      	b.n	8009eee <AT_DevAddr_get+0x26>
  }

  print_uint32_as_02x(devAddr);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f9ca 	bl	800b280 <print_uint32_as_02x>
  return AT_OK;
 8009eec:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_get_2 */

  /* USER CODE END AT_DevAddr_get_2 */
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <AT_DevAddr_set>:

ATEerror_t AT_DevAddr_set(const char *param)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_set_1 */

  /* USER CODE END AT_DevAddr_set_1 */
  uint32_t devAddr;
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 8009efe:	f107 030c 	add.w	r3, r7, #12
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f947 	bl	800b198 <sscanf_uint32_as_hhx>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d001      	beq.n	8009f14 <AT_DevAddr_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009f10:	2302      	movs	r3, #2
 8009f12:	e009      	b.n	8009f28 <AT_DevAddr_set+0x32>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f006 f927 	bl	801016a <LmHandlerSetDevAddr>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <AT_DevAddr_set+0x30>
  {
    return AT_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <AT_DevAddr_set+0x32>
  }

  return AT_OK;
 8009f26:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_set_2 */

  /* USER CODE END AT_DevAddr_set_2 */
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <AT_DevEUI_get>:

ATEerror_t AT_DevEUI_get(const char *param)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_get_1 */

  /* USER CODE END AT_DevEUI_get_1 */
  uint8_t devEUI[8];
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f006 f847 	bl	800ffd0 <LmHandlerGetDevEUI>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <AT_DevEUI_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e005      	b.n	8009f58 <AT_DevEUI_get+0x28>
  }

  print_8_02x(devEUI);
 8009f4c:	f107 0308 	add.w	r3, r7, #8
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 fa1f 	bl	800b394 <print_8_02x>
  return AT_OK;
 8009f56:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_get_2 */

  /* USER CODE END AT_DevEUI_get_2 */
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <AT_DevEUI_set>:

ATEerror_t AT_DevEUI_set(const char *param)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af06      	add	r7, sp, #24
 8009f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_set_1 */

  /* USER CODE END AT_DevEUI_set_1 */
  uint8_t devEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009f68:	f107 0308 	add.w	r3, r7, #8
 8009f6c:	1c59      	adds	r1, r3, #1
 8009f6e:	f107 0208 	add.w	r2, r7, #8
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	3307      	adds	r3, #7
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	3306      	adds	r3, #6
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	f107 0308 	add.w	r3, r7, #8
 8009f86:	3305      	adds	r3, #5
 8009f88:	9303      	str	r3, [sp, #12]
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	3304      	adds	r3, #4
 8009f90:	9302      	str	r3, [sp, #8]
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	3303      	adds	r3, #3
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	f107 0308 	add.w	r3, r7, #8
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	490b      	ldr	r1, [pc, #44]	; (8009fd4 <AT_DevEUI_set+0x74>)
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f016 fac8 	bl	802053c <tiny_sscanf>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b08      	cmp	r3, #8
 8009fb0:	d001      	beq.n	8009fb6 <AT_DevEUI_set+0x56>
                  &devEui[0], &devEui[1], &devEui[2], &devEui[3],
                  &devEui[4], &devEui[5], &devEui[6], &devEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e00a      	b.n	8009fcc <AT_DevEUI_set+0x6c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 8009fb6:	f107 0308 	add.w	r3, r7, #8
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f006 f82a 	bl	8010014 <LmHandlerSetDevEUI>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <AT_DevEUI_set+0x6a>
  {
    return AT_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <AT_DevEUI_set+0x6c>
  }

  return AT_OK;
 8009fca:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_set_2 */

  /* USER CODE END AT_DevEUI_set_2 */
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08020ee8 	.word	0x08020ee8

08009fd8 <AT_NetworkID_get>:

ATEerror_t AT_NetworkID_get(const char *param)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_get_1 */

  /* USER CODE END AT_NetworkID_get_1 */
  uint32_t networkId;
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8009fe0:	f107 030c 	add.w	r3, r7, #12
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f006 f862 	bl	80100ae <LmHandlerGetNetworkID>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <AT_NetworkID_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e004      	b.n	8009ffe <AT_NetworkID_get+0x26>
  }

  print_d(networkId);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fa04 	bl	800b404 <print_d>
  return AT_OK;
 8009ffc:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_get_2 */

  /* USER CODE END AT_NetworkID_get_2 */
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <AT_NetworkID_set>:

ATEerror_t AT_NetworkID_set(const char *param)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_set_1 */

  /* USER CODE END AT_NetworkID_set_1 */
  uint32_t networkId;
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 800a010:	f107 030c 	add.w	r3, r7, #12
 800a014:	461a      	mov	r2, r3
 800a016:	490b      	ldr	r1, [pc, #44]	; (800a044 <AT_NetworkID_set+0x3c>)
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f016 fa8f 	bl	802053c <tiny_sscanf>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b01      	cmp	r3, #1
 800a022:	d001      	beq.n	800a028 <AT_NetworkID_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a024:	2302      	movs	r3, #2
 800a026:	e009      	b.n	800a03c <AT_NetworkID_set+0x34>
  }

  if (networkId > 127)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b7f      	cmp	r3, #127	; 0x7f
 800a02c:	d901      	bls.n	800a032 <AT_NetworkID_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a02e:	2302      	movs	r3, #2
 800a030:	e004      	b.n	800a03c <AT_NetworkID_set+0x34>
  }

  LmHandlerSetNetworkID(networkId);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4618      	mov	r0, r3
 800a036:	f006 f859 	bl	80100ec <LmHandlerSetNetworkID>
  return AT_OK;
 800a03a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_set_2 */

  /* USER CODE END AT_NetworkID_set_2 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	08020e4c 	.word	0x08020e4c

0800a048 <AT_Join>:

/* --------------- LoRaWAN join and send data commands --------------- */
ATEerror_t AT_Join(const char *param)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Join_1 */

  /* USER CODE END AT_Join_1 */
  switch (param[0])
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b30      	cmp	r3, #48	; 0x30
 800a056:	d002      	beq.n	800a05e <AT_Join+0x16>
 800a058:	2b31      	cmp	r3, #49	; 0x31
 800a05a:	d004      	beq.n	800a066 <AT_Join+0x1e>
 800a05c:	e007      	b.n	800a06e <AT_Join+0x26>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800a05e:	2001      	movs	r0, #1
 800a060:	f005 fac4 	bl	800f5ec <LmHandlerJoin>
      break;
 800a064:	e005      	b.n	800a072 <AT_Join+0x2a>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 800a066:	2002      	movs	r0, #2
 800a068:	f005 fac0 	bl	800f5ec <LmHandlerJoin>
      break;
 800a06c:	e001      	b.n	800a072 <AT_Join+0x2a>
    default:
      return AT_PARAM_ERROR;
 800a06e:	2302      	movs	r3, #2
 800a070:	e000      	b.n	800a074 <AT_Join+0x2c>
  }

  return AT_OK;
 800a072:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Join_2 */

  /* USER CODE END AT_Join_2 */
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <AT_Link_Check>:

ATEerror_t AT_Link_Check(const char *param)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Link_Check_1 */

  /* USER CODE END AT_Link_Check_1 */
  if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS)
 800a084:	f005 fbfe 	bl	800f884 <LmHandlerLinkCheckReq>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <AT_Link_Check+0x16>
  {
    return AT_PARAM_ERROR;
 800a08e:	2302      	movs	r3, #2
 800a090:	e000      	b.n	800a094 <AT_Link_Check+0x18>
  }

  return AT_OK;
 800a092:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Link_Check_2 */

  /* USER CODE END AT_Link_Check_2 */
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <AT_Send>:

ATEerror_t AT_Send(const char *param)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08a      	sub	sp, #40	; 0x28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Send_1 */

  /* USER CODE END AT_Send_1 */
  const char *buf = param;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t bufSize = strlen(param);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7f6 f869 	bl	8000180 <strlen>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t appPort;
  LmHandlerMsgTypes_t isTxConfirmed;
  unsigned size = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61fb      	str	r3, [r7, #28]
  char hex[3] = {0, 0, 0};
 800a0b6:	4a7b      	ldr	r2, [pc, #492]	; (800a2a4 <AT_Send+0x208>)
 800a0b8:	f107 0310 	add.w	r3, r7, #16
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	8019      	strh	r1, [r3, #0]
 800a0c2:	3302      	adds	r3, #2
 800a0c4:	0c12      	lsrs	r2, r2, #16
 800a0c6:	701a      	strb	r2, [r3, #0]
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a0cc:	23ff      	movs	r3, #255	; 0xff
 800a0ce:	76bb      	strb	r3, [r7, #26]
  ATEerror_t status = AT_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	76fb      	strb	r3, [r7, #27]

  /* read and set the application port */
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4973      	ldr	r1, [pc, #460]	; (800a2a8 <AT_Send+0x20c>)
 800a0dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0de:	f016 fa2d 	bl	802053c <tiny_sscanf>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d00d      	beq.n	800a104 <AT_Send+0x68>
  {
    AT_PRINTF("AT+SEND without the application port\r\n");
 800a0e8:	4b70      	ldr	r3, [pc, #448]	; (800a2ac <AT_Send+0x210>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f014 fb9e 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e0d0      	b.n	800a29a <AT_Send+0x1fe>
  }

  /* skip the application port */
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
  {
    buf ++;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a0fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a100:	3b01      	subs	r3, #1
 800a102:	847b      	strh	r3, [r7, #34]	; 0x22
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b2f      	cmp	r3, #47	; 0x2f
 800a10a:	d906      	bls.n	800a11a <AT_Send+0x7e>
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b39      	cmp	r3, #57	; 0x39
 800a112:	d802      	bhi.n	800a11a <AT_Send+0x7e>
 800a114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a116:	2b01      	cmp	r3, #1
 800a118:	d8ee      	bhi.n	800a0f8 <AT_Send+0x5c>
  };

  if ((bufSize == 0) || (':' != buf[0]))
 800a11a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <AT_Send+0x8c>
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b3a      	cmp	r3, #58	; 0x3a
 800a126:	d007      	beq.n	800a138 <AT_Send+0x9c>
  {
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 800a128:	4b61      	ldr	r3, [pc, #388]	; (800a2b0 <AT_Send+0x214>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	2100      	movs	r1, #0
 800a12e:	2000      	movs	r0, #0
 800a130:	f014 fb7e 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a134:	2302      	movs	r3, #2
 800a136:	e0b0      	b.n	800a29a <AT_Send+0x1fe>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	3301      	adds	r3, #1
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a13e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a140:	3b01      	subs	r3, #1
 800a142:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  switch (buf[0])
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b30      	cmp	r3, #48	; 0x30
 800a14a:	d002      	beq.n	800a152 <AT_Send+0xb6>
 800a14c:	2b31      	cmp	r3, #49	; 0x31
 800a14e:	d004      	beq.n	800a15a <AT_Send+0xbe>
 800a150:	e007      	b.n	800a162 <AT_Send+0xc6>
  {
    case '0':
      isTxConfirmed = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800a158:	e00b      	b.n	800a172 <AT_Send+0xd6>
    case '1':
      isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800a160:	e007      	b.n	800a172 <AT_Send+0xd6>
    default:
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 800a162:	4b54      	ldr	r3, [pc, #336]	; (800a2b4 <AT_Send+0x218>)
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	2000      	movs	r0, #0
 800a16a:	f014 fb61 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      return AT_PARAM_ERROR;
 800a16e:	2302      	movs	r3, #2
 800a170:	e093      	b.n	800a29a <AT_Send+0x1fe>
  }

  if (bufSize > 0)
 800a172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a174:	2b00      	cmp	r3, #0
 800a176:	d005      	beq.n	800a184 <AT_Send+0xe8>
  {
    /* skip the acknowledge flag */
    buf ++;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	3301      	adds	r3, #1
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a17e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a180:	3b01      	subs	r3, #1
 800a182:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((bufSize == 0) || (':' != buf[0]))
 800a184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <AT_Send+0xf6>
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b3a      	cmp	r3, #58	; 0x3a
 800a190:	d007      	beq.n	800a1a2 <AT_Send+0x106>
  {
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 800a192:	4b49      	ldr	r3, [pc, #292]	; (800a2b8 <AT_Send+0x21c>)
 800a194:	2200      	movs	r2, #0
 800a196:	2100      	movs	r1, #0
 800a198:	2000      	movs	r0, #0
 800a19a:	f014 fb49 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e07b      	b.n	800a29a <AT_Send+0x1fe>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a1a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 800a1ae:	e021      	b.n	800a1f4 <AT_Send+0x158>
  {
    hex[0] = buf[size * 2];
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b6:	4413      	add	r3, r2
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	743b      	strb	r3, [r7, #16]
    hex[1] = buf[size * 2 + 1];
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c4:	4413      	add	r3, r2
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	747b      	strb	r3, [r7, #17]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 800a1ca:	4b3c      	ldr	r3, [pc, #240]	; (800a2bc <AT_Send+0x220>)
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	441a      	add	r2, r3
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	493a      	ldr	r1, [pc, #232]	; (800a2c0 <AT_Send+0x224>)
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f016 f9af 	bl	802053c <tiny_sscanf>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d001      	beq.n	800a1e8 <AT_Send+0x14c>
    {
      return AT_PARAM_ERROR;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e058      	b.n	800a29a <AT_Send+0x1fe>
    }
    size++;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	61fb      	str	r3, [r7, #28]
    bufSize -= 2;
 800a1ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1f0:	3b02      	subs	r3, #2
 800a1f2:	847b      	strh	r3, [r7, #34]	; 0x22
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	2bf1      	cmp	r3, #241	; 0xf1
 800a1f8:	d802      	bhi.n	800a200 <AT_Send+0x164>
 800a1fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d8d7      	bhi.n	800a1b0 <AT_Send+0x114>
  }
  if (bufSize != 0)
 800a200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <AT_Send+0x16e>
  {
    return AT_PARAM_ERROR;
 800a206:	2302      	movs	r3, #2
 800a208:	e047      	b.n	800a29a <AT_Send+0x1fe>
  }

  AppData.BufferSize = size;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	4b2b      	ldr	r3, [pc, #172]	; (800a2bc <AT_Send+0x220>)
 800a210:	705a      	strb	r2, [r3, #1]
  AppData.Port = appPort;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	b2da      	uxtb	r2, r3
 800a216:	4b29      	ldr	r3, [pc, #164]	; (800a2bc <AT_Send+0x220>)
 800a218:	701a      	strb	r2, [r3, #0]

  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 800a21a:	f107 020c 	add.w	r2, r7, #12
 800a21e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800a222:	2300      	movs	r3, #0
 800a224:	4825      	ldr	r0, [pc, #148]	; (800a2bc <AT_Send+0x220>)
 800a226:	f005 fa57 	bl	800f6d8 <LmHandlerSend>
 800a22a:	4603      	mov	r3, r0
 800a22c:	76bb      	strb	r3, [r7, #26]

  switch (lmhStatus)
 800a22e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a232:	3306      	adds	r3, #6
 800a234:	2b06      	cmp	r3, #6
 800a236:	d82c      	bhi.n	800a292 <AT_Send+0x1f6>
 800a238:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <AT_Send+0x1a4>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a287 	.word	0x0800a287
 800a244:	0800a28d 	.word	0x0800a28d
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a281 	.word	0x0800a281
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	0800a293 	.word	0x0800a293
 800a258:	0800a25d 	.word	0x0800a25d
  {
    case LORAMAC_HANDLER_SUCCESS:
      status = (nextTxIn > 0) ? AT_DUTYCYCLE_RESTRICTED : AT_OK;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <AT_Send+0x1ca>
 800a262:	2308      	movs	r3, #8
 800a264:	e000      	b.n	800a268 <AT_Send+0x1cc>
 800a266:	2300      	movs	r3, #0
 800a268:	76fb      	strb	r3, [r7, #27]
      break;
 800a26a:	e015      	b.n	800a298 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_BUSY_ERROR:
    case LORAMAC_HANDLER_COMPLIANCE_RUNNING:
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 800a26c:	f005 fa18 	bl	800f6a0 <LmHandlerJoinStatus>
 800a270:	4603      	mov	r3, r0
 800a272:	2b01      	cmp	r3, #1
 800a274:	d001      	beq.n	800a27a <AT_Send+0x1de>
 800a276:	2305      	movs	r3, #5
 800a278:	e000      	b.n	800a27c <AT_Send+0x1e0>
 800a27a:	2303      	movs	r3, #3
 800a27c:	76fb      	strb	r3, [r7, #27]
      break;
 800a27e:	e00b      	b.n	800a298 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_NO_NETWORK_JOINED:
      status = AT_NO_NET_JOINED;
 800a280:	2305      	movs	r3, #5
 800a282:	76fb      	strb	r3, [r7, #27]
      break;
 800a284:	e008      	b.n	800a298 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED:
      status = AT_DUTYCYCLE_RESTRICTED;
 800a286:	2308      	movs	r3, #8
 800a288:	76fb      	strb	r3, [r7, #27]
      break;
 800a28a:	e005      	b.n	800a298 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_CRYPTO_ERROR:
      status = AT_CRYPTO_ERROR;
 800a28c:	2309      	movs	r3, #9
 800a28e:	76fb      	strb	r3, [r7, #27]
      break;
 800a290:	e002      	b.n	800a298 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_ERROR:
    default:
      status = AT_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	76fb      	strb	r3, [r7, #27]
      break;
 800a296:	bf00      	nop
  }

  return status;
 800a298:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE BEGIN AT_Send_2 */

  /* USER CODE END AT_Send_2 */
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3728      	adds	r7, #40	; 0x28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	08020fcc 	.word	0x08020fcc
 800a2a8:	08020f10 	.word	0x08020f10
 800a2ac:	08020f14 	.word	0x08020f14
 800a2b0:	08020f3c 	.word	0x08020f3c
 800a2b4:	08020f6c 	.word	0x08020f6c
 800a2b8:	08020f94 	.word	0x08020f94
 800a2bc:	20000054 	.word	0x20000054
 800a2c0:	08020fc4 	.word	0x08020fc4

0800a2c4 <AT_version_get>:

/* --------------- LoRaWAN network management commands --------------- */
ATEerror_t AT_version_get(const char *param)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af04      	add	r7, sp, #16
 800a2ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_version_get_1 */

  /* USER CODE END AT_version_get_1 */
  /* Get LoRa APP version*/
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9302      	str	r3, [sp, #8]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4b11      	ldr	r3, [pc, #68]	; (800a320 <AT_version_get+0x5c>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f014 faa6 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  AT_PRINTF("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <AT_version_get+0x60>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f014 fa9a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  AT_PRINTF("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	2301      	movs	r3, #1
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	2301      	movs	r3, #1
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <AT_version_get+0x64>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	2100      	movs	r1, #0
 800a30e:	2000      	movs	r0, #0
 800a310:	f014 fa8e 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  return AT_OK;
 800a314:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_version_get_2 */

  /* USER CODE END AT_version_get_2 */
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	08020fd0 	.word	0x08020fd0
 800a324:	08020ff0 	.word	0x08020ff0
 800a328:	08021010 	.word	0x08021010

0800a32c <AT_ADR_get>:

ATEerror_t AT_ADR_get(const char *param)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_get_1 */

  /* USER CODE END AT_ADR_get_1 */
  bool adrEnable;
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 800a334:	f107 030f 	add.w	r3, r7, #15
 800a338:	4618      	mov	r0, r3
 800a33a:	f005 ff51 	bl	80101e0 <LmHandlerGetAdrEnable>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <AT_ADR_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a344:	2302      	movs	r3, #2
 800a346:	e004      	b.n	800a352 <AT_ADR_get+0x26>
  }

  print_d(adrEnable);
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f85a 	bl	800b404 <print_d>
  return AT_OK;
 800a350:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_ADR_get_2 */

  /* USER CODE END AT_ADR_get_2 */
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <AT_ADR_set>:

ATEerror_t AT_ADR_set(const char *param)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_set_1 */

  /* USER CODE END AT_ADR_set_1 */
  switch (param[0])
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	3b30      	subs	r3, #48	; 0x30
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d80d      	bhi.n	800a388 <AT_ADR_set+0x2e>
  {
    case '0':
    case '1':
      LmHandlerSetAdrEnable(param[0] - '0');
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	3b30      	subs	r3, #48	; 0x30
 800a372:	2b00      	cmp	r3, #0
 800a374:	bf14      	ite	ne
 800a376:	2301      	movne	r3, #1
 800a378:	2300      	moveq	r3, #0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	f005 ff45 	bl	801020c <LmHandlerSetAdrEnable>
      break;
 800a382:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	e000      	b.n	800a38a <AT_ADR_set+0x30>
      return AT_PARAM_ERROR;
 800a388:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_ADR_set_2 */

  /* USER CODE END AT_ADR_set_2 */
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <AT_DataRate_get>:

ATEerror_t AT_DataRate_get(const char *param)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_get_1 */

  /* USER CODE END AT_DataRate_get_1 */
  int8_t txDatarate;
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 800a39a:	f107 030f 	add.w	r3, r7, #15
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f005 fb4c 	bl	800fa3c <LmHandlerGetTxDatarate>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <AT_DataRate_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e005      	b.n	800a3ba <AT_DataRate_get+0x28>
  }

  print_d(txDatarate);
 800a3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f001 f826 	bl	800b404 <print_d>
  return AT_OK;
 800a3b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_get_2 */

  /* USER CODE END AT_DataRate_get_2 */
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <AT_DataRate_set>:

ATEerror_t AT_DataRate_set(const char *param)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_set_1 */

  /* USER CODE END AT_DataRate_set_1 */
  int8_t datarate;

  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 800a3cc:	f107 030f 	add.w	r3, r7, #15
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4911      	ldr	r1, [pc, #68]	; (800a418 <AT_DataRate_set+0x54>)
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f016 f8b1 	bl	802053c <tiny_sscanf>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d001      	beq.n	800a3e4 <AT_DataRate_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e014      	b.n	800a40e <AT_DataRate_set+0x4a>
  }
  if ((datarate < 0) || (datarate > 15))
 800a3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db03      	blt.n	800a3f4 <AT_DataRate_set+0x30>
 800a3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f0:	2b0f      	cmp	r3, #15
 800a3f2:	dd01      	ble.n	800a3f8 <AT_DataRate_set+0x34>
  {
    return AT_PARAM_ERROR;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e00a      	b.n	800a40e <AT_DataRate_set+0x4a>
  }

  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 800a3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f005 ff23 	bl	8010248 <LmHandlerSetTxDatarate>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <AT_DataRate_set+0x48>
  {
    return AT_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e000      	b.n	800a40e <AT_DataRate_set+0x4a>
  }

  return AT_OK;
 800a40c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_set_2 */

  /* USER CODE END AT_DataRate_set_2 */
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	08021030 	.word	0x08021030

0800a41c <AT_Region_get>:

ATEerror_t AT_Region_get(const char *param)
{
 800a41c:	b5b0      	push	{r4, r5, r7, lr}
 800a41e:	b090      	sub	sp, #64	; 0x40
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_get_1 */

  /* USER CODE END AT_Region_get_1 */
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 800a424:	4b17      	ldr	r3, [pc, #92]	; (800a484 <AT_Region_get+0x68>)
 800a426:	f107 0410 	add.w	r4, r7, #16
 800a42a:	461d      	mov	r5, r3
 800a42c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a42e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a434:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a438:	e884 0003 	stmia.w	r4, {r0, r1}
  LoRaMacRegion_t region;
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 800a43c:	f107 030f 	add.w	r3, r7, #15
 800a440:	4618      	mov	r0, r3
 800a442:	f005 fb23 	bl	800fa8c <LmHandlerGetActiveRegion>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <AT_Region_get+0x34>
  {
    return AT_PARAM_ERROR;
 800a44c:	2302      	movs	r3, #2
 800a44e:	e015      	b.n	800a47c <AT_Region_get+0x60>
  }

  if (region > LORAMAC_REGION_RU864)
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	2b09      	cmp	r3, #9
 800a454:	d901      	bls.n	800a45a <AT_Region_get+0x3e>
  {
    return AT_PARAM_ERROR;
 800a456:	2302      	movs	r3, #2
 800a458:	e010      	b.n	800a47c <AT_Region_get+0x60>
  }

  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	461a      	mov	r2, r3
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	3338      	adds	r3, #56	; 0x38
 800a464:	443b      	add	r3, r7
 800a466:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	9200      	str	r2, [sp, #0]
 800a46e:	4b06      	ldr	r3, [pc, #24]	; (800a488 <AT_Region_get+0x6c>)
 800a470:	2200      	movs	r2, #0
 800a472:	2100      	movs	r1, #0
 800a474:	2000      	movs	r0, #0
 800a476:	f014 f9db 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800a47a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_get_2 */

  /* USER CODE END AT_Region_get_2 */
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3738      	adds	r7, #56	; 0x38
 800a480:	46bd      	mov	sp, r7
 800a482:	bdb0      	pop	{r4, r5, r7, pc}
 800a484:	08021090 	.word	0x08021090
 800a488:	08021038 	.word	0x08021038

0800a48c <AT_Region_set>:

ATEerror_t AT_Region_set(const char *param)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_set_1 */

  /* USER CODE END AT_Region_set_1 */
  LoRaMacRegion_t region;
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 800a494:	f107 030f 	add.w	r3, r7, #15
 800a498:	461a      	mov	r2, r3
 800a49a:	490e      	ldr	r1, [pc, #56]	; (800a4d4 <AT_Region_set+0x48>)
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f016 f84d 	bl	802053c <tiny_sscanf>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d001      	beq.n	800a4ac <AT_Region_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e00e      	b.n	800a4ca <AT_Region_set+0x3e>
  }
  if (region > LORAMAC_REGION_RU864)
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b09      	cmp	r3, #9
 800a4b0:	d901      	bls.n	800a4b6 <AT_Region_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e009      	b.n	800a4ca <AT_Region_set+0x3e>
  }

  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f005 fe77 	bl	80101ac <LmHandlerSetActiveRegion>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <AT_Region_set+0x3c>
  {
    return AT_PARAM_ERROR;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	e000      	b.n	800a4ca <AT_Region_set+0x3e>
  }

  return AT_OK;
 800a4c8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_set_2 */

  /* USER CODE END AT_Region_set_2 */
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	08021030 	.word	0x08021030

0800a4d8 <AT_DeviceClass_get>:

ATEerror_t AT_DeviceClass_get(const char *param)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_get_1 */

  /* USER CODE END AT_DeviceClass_get_1 */
  DeviceClass_t currentClass;
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800a4e0:	f001 fabc 	bl	800ba5c <LoraInfo_GetPtr>
 800a4e4:	60f8      	str	r0, [r7, #12]
  if (loraInfo == NULL)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <AT_DeviceClass_get+0x18>
  {
    return AT_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e053      	b.n	800a598 <AT_DeviceClass_get+0xc0>
  }

  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 800a4f0:	f107 030b 	add.w	r3, r7, #11
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f005 fa81 	bl	800f9fc <LmHandlerGetCurrentClass>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <AT_DeviceClass_get+0x2c>
  {
    return AT_PARAM_ERROR;
 800a500:	2302      	movs	r3, #2
 800a502:	e049      	b.n	800a598 <AT_DeviceClass_get+0xc0>
  }

  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d13b      	bne.n	800a584 <AT_DeviceClass_get+0xac>
 800a50c:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <AT_DeviceClass_get+0xc8>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d037      	beq.n	800a584 <AT_DeviceClass_get+0xac>
 800a514:	7afb      	ldrb	r3, [r7, #11]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d134      	bne.n	800a584 <AT_DeviceClass_get+0xac>
  {
    BeaconState_t beaconState;

    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 800a51a:	f107 030a 	add.w	r3, r7, #10
 800a51e:	4618      	mov	r0, r3
 800a520:	f006 f84c 	bl	80105bc <LmHandlerGetBeaconState>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <AT_DeviceClass_get+0x56>
    {
      return AT_PARAM_ERROR;
 800a52a:	2302      	movs	r3, #2
 800a52c:	e034      	b.n	800a598 <AT_DeviceClass_get+0xc0>
    }

    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 800a52e:	7abb      	ldrb	r3, [r7, #10]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <AT_DeviceClass_get+0x68>
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 800a534:	7abb      	ldrb	r3, [r7, #10]
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 800a536:	2b01      	cmp	r3, #1
 800a538:	d002      	beq.n	800a540 <AT_DeviceClass_get+0x68>
        (beaconState == BEACON_STATE_REACQUISITION)) /*Beacon_Searching on Class B request*/
 800a53a:	7abb      	ldrb	r3, [r7, #10]
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d106      	bne.n	800a54e <AT_DeviceClass_get+0x76>
    {
      AT_PRINTF("B,S0\r\n");
 800a540:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <AT_DeviceClass_get+0xcc>)
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	2000      	movs	r0, #0
 800a548:	f014 f972 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800a54c:	e019      	b.n	800a582 <AT_DeviceClass_get+0xaa>
    }
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800a54e:	7abb      	ldrb	r3, [r7, #10]
 800a550:	2b05      	cmp	r3, #5
 800a552:	d008      	beq.n	800a566 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_IDLE)   ||
 800a554:	7abb      	ldrb	r3, [r7, #10]
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800a556:	2b07      	cmp	r3, #7
 800a558:	d005      	beq.n	800a566 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_GUARD)  ||
 800a55a:	7abb      	ldrb	r3, [r7, #10]
             (beaconState == BEACON_STATE_IDLE)   ||
 800a55c:	2b08      	cmp	r3, #8
 800a55e:	d002      	beq.n	800a566 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_RX))
 800a560:	7abb      	ldrb	r3, [r7, #10]
             (beaconState == BEACON_STATE_GUARD)  ||
 800a562:	2b09      	cmp	r3, #9
 800a564:	d106      	bne.n	800a574 <AT_DeviceClass_get+0x9c>
    {
      AT_PRINTF("B,S1\r\n");
 800a566:	4b10      	ldr	r3, [pc, #64]	; (800a5a8 <AT_DeviceClass_get+0xd0>)
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	2000      	movs	r0, #0
 800a56e:	f014 f95f 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800a572:	e006      	b.n	800a582 <AT_DeviceClass_get+0xaa>
    }
    else
    {
      AT_PRINTF("B,S2\r\n");
 800a574:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <AT_DeviceClass_get+0xd4>)
 800a576:	2200      	movs	r2, #0
 800a578:	2100      	movs	r1, #0
 800a57a:	2000      	movs	r0, #0
 800a57c:	f014 f958 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  {
 800a580:	e009      	b.n	800a596 <AT_DeviceClass_get+0xbe>
 800a582:	e008      	b.n	800a596 <AT_DeviceClass_get+0xbe>
    }
  }
  else /* we are now either in Class B enable or Class C enable*/
  {
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 800a584:	7afb      	ldrb	r3, [r7, #11]
 800a586:	3341      	adds	r3, #65	; 0x41
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <AT_DeviceClass_get+0xd8>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	2100      	movs	r1, #0
 800a590:	2000      	movs	r0, #0
 800a592:	f014 f94d 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }

  return AT_OK;
 800a596:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_get_2 */

  /* USER CODE END AT_DeviceClass_get_2 */
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000c78 	.word	0x20000c78
 800a5a4:	080210b8 	.word	0x080210b8
 800a5a8:	080210c0 	.word	0x080210c0
 800a5ac:	080210c8 	.word	0x080210c8
 800a5b0:	080210d0 	.word	0x080210d0

0800a5b4 <AT_DeviceClass_set>:

ATEerror_t AT_DeviceClass_set(const char *param)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_set_1 */

  /* USER CODE END AT_DeviceClass_set_1 */
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800a5c0:	f001 fa4c 	bl	800ba5c <LoraInfo_GetPtr>
 800a5c4:	60b8      	str	r0, [r7, #8]
  if (loraInfo == NULL)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <AT_DeviceClass_set+0x1c>
  {
    return AT_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e03c      	b.n	800a64a <AT_DeviceClass_set+0x96>
  }

  switch (param[0])
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b43      	cmp	r3, #67	; 0x43
 800a5d6:	d022      	beq.n	800a61e <AT_DeviceClass_set+0x6a>
 800a5d8:	2b43      	cmp	r3, #67	; 0x43
 800a5da:	dc26      	bgt.n	800a62a <AT_DeviceClass_set+0x76>
 800a5dc:	2b41      	cmp	r3, #65	; 0x41
 800a5de:	d002      	beq.n	800a5e6 <AT_DeviceClass_set+0x32>
 800a5e0:	2b42      	cmp	r3, #66	; 0x42
 800a5e2:	d00d      	beq.n	800a600 <AT_DeviceClass_set+0x4c>
 800a5e4:	e021      	b.n	800a62a <AT_DeviceClass_set+0x76>
  {
    case 'A':
      if (loraInfo->ClassB == 1)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d102      	bne.n	800a5f4 <AT_DeviceClass_set+0x40>
      {
        ClassBEnableRequest = false;
 800a5ee:	4b19      	ldr	r3, [pc, #100]	; (800a654 <AT_DeviceClass_set+0xa0>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
      }
      errorStatus = LmHandlerRequestClass(CLASS_A);
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f005 f971 	bl	800f8dc <LmHandlerRequestClass>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5fe:	e016      	b.n	800a62e <AT_DeviceClass_set+0x7a>
    case 'B':
      if (loraInfo->ClassB == 1)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d108      	bne.n	800a61a <AT_DeviceClass_set+0x66>
      {
        ClassBEnableRequest = true;
 800a608:	4b12      	ldr	r3, [pc, #72]	; (800a654 <AT_DeviceClass_set+0xa0>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]
        errorStatus = LmHandlerRequestClass(CLASS_B);  /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 800a60e:	2001      	movs	r0, #1
 800a610:	f005 f964 	bl	800f8dc <LmHandlerRequestClass>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        return AT_NO_CLASS_B_ENABLE;
      }
      break;
 800a618:	e009      	b.n	800a62e <AT_DeviceClass_set+0x7a>
        return AT_NO_CLASS_B_ENABLE;
 800a61a:	2307      	movs	r3, #7
 800a61c:	e015      	b.n	800a64a <AT_DeviceClass_set+0x96>
    case 'C':
      errorStatus = LmHandlerRequestClass(CLASS_C);
 800a61e:	2002      	movs	r0, #2
 800a620:	f005 f95c 	bl	800f8dc <LmHandlerRequestClass>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
      break;
 800a628:	e001      	b.n	800a62e <AT_DeviceClass_set+0x7a>
    default:
      return AT_PARAM_ERROR;
 800a62a:	2302      	movs	r3, #2
 800a62c:	e00d      	b.n	800a64a <AT_DeviceClass_set+0x96>
  }

  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 800a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a632:	f113 0f03 	cmn.w	r3, #3
 800a636:	d101      	bne.n	800a63c <AT_DeviceClass_set+0x88>
  {
    return AT_NO_NET_JOINED;
 800a638:	2305      	movs	r3, #5
 800a63a:	e006      	b.n	800a64a <AT_DeviceClass_set+0x96>
  }
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 800a63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <AT_DeviceClass_set+0x94>
  {
    return AT_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <AT_DeviceClass_set+0x96>
  }

  return AT_OK;
 800a648:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_set_2 */

  /* USER CODE END AT_DeviceClass_set_2 */
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000c78 	.word	0x20000c78

0800a658 <AT_DutyCycle_get>:

ATEerror_t AT_DutyCycle_get(const char *param)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_get_1 */

  /* USER CODE END AT_DutyCycle_get_1 */
  bool dutyCycleEnable;
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 800a660:	f107 030f 	add.w	r3, r7, #15
 800a664:	4618      	mov	r0, r3
 800a666:	f005 fe15 	bl	8010294 <LmHandlerGetDutyCycleEnable>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <AT_DutyCycle_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a670:	2302      	movs	r3, #2
 800a672:	e004      	b.n	800a67e <AT_DutyCycle_get+0x26>
  }

  print_d(dutyCycleEnable);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fec4 	bl	800b404 <print_d>
  return AT_OK;
 800a67c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DutyCycle_get_2 */

  /* USER CODE END AT_DutyCycle_get_2 */
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <AT_DutyCycle_set>:

ATEerror_t AT_DutyCycle_set(const char *param)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_set_1 */

  /* USER CODE END AT_DutyCycle_set_1 */
  switch (param[0])
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	3b30      	subs	r3, #48	; 0x30
 800a694:	2b01      	cmp	r3, #1
 800a696:	d80d      	bhi.n	800a6b4 <AT_DutyCycle_set+0x2e>
  {
    case '0':
    case '1':
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	3b30      	subs	r3, #48	; 0x30
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	bf14      	ite	ne
 800a6a2:	2301      	movne	r3, #1
 800a6a4:	2300      	moveq	r3, #0
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f005 fe09 	bl	80102c0 <LmHandlerSetDutyCycleEnable>
      break;
 800a6ae:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	e000      	b.n	800a6b6 <AT_DutyCycle_set+0x30>
      return AT_PARAM_ERROR;
 800a6b4:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_DutyCycle_set_2 */

  /* USER CODE END AT_DutyCycle_set_2 */
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <AT_JoinAcceptDelay1_get>:

ATEerror_t AT_JoinAcceptDelay1_get(const char *param)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_1 */

  /* USER CODE END AT_JoinAcceptDelay1_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f005 fe8c 	bl	80103e8 <LmHandlerGetJoinRx1Delay>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <AT_JoinAcceptDelay1_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e004      	b.n	800a6e4 <AT_JoinAcceptDelay1_get+0x26>
  }

  print_u(rxDelay);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fea3 	bl	800b428 <print_u>
  return AT_OK;
 800a6e2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_2 */

  /* USER CODE END AT_JoinAcceptDelay1_get_2 */
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <AT_JoinAcceptDelay1_set>:

ATEerror_t AT_JoinAcceptDelay1_set(const char *param)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_1 */

  /* USER CODE END AT_JoinAcceptDelay1_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	490b      	ldr	r1, [pc, #44]	; (800a728 <AT_JoinAcceptDelay1_set+0x3c>)
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f015 ff1d 	bl	802053c <tiny_sscanf>
 800a702:	4603      	mov	r3, r0
 800a704:	2b01      	cmp	r3, #1
 800a706:	d001      	beq.n	800a70c <AT_JoinAcceptDelay1_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a708:	2302      	movs	r3, #2
 800a70a:	e009      	b.n	800a720 <AT_JoinAcceptDelay1_set+0x34>
  }
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4618      	mov	r0, r3
 800a710:	f005 ff0d 	bl	801052e <LmHandlerSetJoinRx1Delay>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <AT_JoinAcceptDelay1_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a71a:	2302      	movs	r3, #2
 800a71c:	e000      	b.n	800a720 <AT_JoinAcceptDelay1_set+0x34>
  }

  return AT_OK;
 800a71e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_2 */

  /* USER CODE END AT_JoinAcceptDelay1_set_2 */
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	080210d8 	.word	0x080210d8

0800a72c <AT_JoinAcceptDelay2_get>:

ATEerror_t AT_JoinAcceptDelay2_get(const char *param)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_1 */

  /* USER CODE END AT_JoinAcceptDelay2_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a734:	f107 030c 	add.w	r3, r7, #12
 800a738:	4618      	mov	r0, r3
 800a73a:	f005 fe74 	bl	8010426 <LmHandlerGetJoinRx2Delay>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <AT_JoinAcceptDelay2_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a744:	2302      	movs	r3, #2
 800a746:	e004      	b.n	800a752 <AT_JoinAcceptDelay2_get+0x26>
  }

  print_u(rxDelay);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fe6c 	bl	800b428 <print_u>
  return AT_OK;
 800a750:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_2 */

  /* USER CODE END AT_JoinAcceptDelay2_get_2 */
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <AT_JoinAcceptDelay2_set>:

ATEerror_t AT_JoinAcceptDelay2_set(const char *param)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_1 */

  /* USER CODE END AT_JoinAcceptDelay2_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a764:	f107 030c 	add.w	r3, r7, #12
 800a768:	461a      	mov	r2, r3
 800a76a:	490b      	ldr	r1, [pc, #44]	; (800a798 <AT_JoinAcceptDelay2_set+0x3c>)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f015 fee5 	bl	802053c <tiny_sscanf>
 800a772:	4603      	mov	r3, r0
 800a774:	2b01      	cmp	r3, #1
 800a776:	d001      	beq.n	800a77c <AT_JoinAcceptDelay2_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a778:	2302      	movs	r3, #2
 800a77a:	e009      	b.n	800a790 <AT_JoinAcceptDelay2_set+0x34>
  }
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4618      	mov	r0, r3
 800a780:	f005 feed 	bl	801055e <LmHandlerSetJoinRx2Delay>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <AT_JoinAcceptDelay2_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a78a:	2302      	movs	r3, #2
 800a78c:	e000      	b.n	800a790 <AT_JoinAcceptDelay2_set+0x34>
  }

  return AT_OK;
 800a78e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_2 */

  /* USER CODE END AT_JoinAcceptDelay2_set_2 */
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	080210d8 	.word	0x080210d8

0800a79c <AT_Rx1Delay_get>:

ATEerror_t AT_Rx1Delay_get(const char *param)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_get_1 */

  /* USER CODE END AT_Rx1Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a7a4:	f107 030c 	add.w	r3, r7, #12
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f005 fddf 	bl	801036c <LmHandlerGetRx1Delay>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <AT_Rx1Delay_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e004      	b.n	800a7c2 <AT_Rx1Delay_get+0x26>
  }

  print_u(rxDelay);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fe34 	bl	800b428 <print_u>
  return AT_OK;
 800a7c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_get_2 */

  /* USER CODE END AT_Rx1Delay_get_2 */
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <AT_Rx1Delay_set>:

ATEerror_t AT_Rx1Delay_set(const char *param)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_set_1 */

  /* USER CODE END AT_Rx1Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a7d4:	f107 030c 	add.w	r3, r7, #12
 800a7d8:	461a      	mov	r2, r3
 800a7da:	490b      	ldr	r1, [pc, #44]	; (800a808 <AT_Rx1Delay_set+0x3c>)
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f015 fead 	bl	802053c <tiny_sscanf>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d001      	beq.n	800a7ec <AT_Rx1Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e009      	b.n	800a800 <AT_Rx1Delay_set+0x34>
  }
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f005 fe6d 	bl	80104ce <LmHandlerSetRx1Delay>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <AT_Rx1Delay_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e000      	b.n	800a800 <AT_Rx1Delay_set+0x34>
  }

  return AT_OK;
 800a7fe:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_set_2 */

  /* USER CODE END AT_Rx1Delay_set_2 */
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	080210d8 	.word	0x080210d8

0800a80c <AT_Rx2Delay_get>:

ATEerror_t AT_Rx2Delay_get(const char *param)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_get_1 */

  /* USER CODE END AT_Rx2Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f005 fdc6 	bl	80103aa <LmHandlerGetRx2Delay>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <AT_Rx2Delay_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a824:	2302      	movs	r3, #2
 800a826:	e004      	b.n	800a832 <AT_Rx2Delay_get+0x26>
  }

  print_u(rxDelay);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fdfc 	bl	800b428 <print_u>
  return AT_OK;
 800a830:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_get_2 */

  /* USER CODE END AT_Rx2Delay_get_2 */
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <AT_Rx2Delay_set>:

ATEerror_t AT_Rx2Delay_set(const char *param)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_set_1 */

  /* USER CODE END AT_Rx2Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a844:	f107 030c 	add.w	r3, r7, #12
 800a848:	461a      	mov	r2, r3
 800a84a:	490b      	ldr	r1, [pc, #44]	; (800a878 <AT_Rx2Delay_set+0x3c>)
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f015 fe75 	bl	802053c <tiny_sscanf>
 800a852:	4603      	mov	r3, r0
 800a854:	2b01      	cmp	r3, #1
 800a856:	d001      	beq.n	800a85c <AT_Rx2Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a858:	2302      	movs	r3, #2
 800a85a:	e009      	b.n	800a870 <AT_Rx2Delay_set+0x34>
  }
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4618      	mov	r0, r3
 800a860:	f005 fe4d 	bl	80104fe <LmHandlerSetRx2Delay>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <AT_Rx2Delay_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a86a:	2302      	movs	r3, #2
 800a86c:	e000      	b.n	800a870 <AT_Rx2Delay_set+0x34>
  }

  return AT_OK;
 800a86e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_set_2 */

  /* USER CODE END AT_Rx2Delay_set_2 */
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	080210d8 	.word	0x080210d8

0800a87c <AT_Rx2DataRate_get>:

ATEerror_t AT_Rx2DataRate_get(const char *param)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2DataRate_get_1 */

  /* USER CODE END AT_Rx2DataRate_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4618      	mov	r0, r3
 800a88a:	f005 fd2d 	bl	80102e8 <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 800a88e:	7b3b      	ldrb	r3, [r7, #12]
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fdb7 	bl	800b404 <print_d>
  return AT_OK;
 800a896:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_get_2 */

  /* USER CODE END AT_Rx2DataRate_get_2 */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <AT_Rx2DataRate_set>:

ATEerror_t AT_Rx2DataRate_set(const char *param)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2DataRate_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 800a8a8:	f107 0308 	add.w	r3, r7, #8
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f005 fd1b 	bl	80102e8 <LmHandlerGetRX2Params>

  /* Update the Datarate with scanf */
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 800a8b2:	f107 0308 	add.w	r3, r7, #8
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	490e      	ldr	r1, [pc, #56]	; (800a8f4 <AT_Rx2DataRate_set+0x54>)
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f015 fe3d 	bl	802053c <tiny_sscanf>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d001      	beq.n	800a8cc <AT_Rx2DataRate_set+0x2c>
  {
    return AT_PARAM_ERROR;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e00f      	b.n	800a8ec <AT_Rx2DataRate_set+0x4c>
  }
  else if (rx2Params.Datarate > 15)
 800a8cc:	7b3b      	ldrb	r3, [r7, #12]
 800a8ce:	2b0f      	cmp	r3, #15
 800a8d0:	d901      	bls.n	800a8d6 <AT_Rx2DataRate_set+0x36>
  {
    return AT_PARAM_ERROR;
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	e00a      	b.n	800a8ec <AT_Rx2DataRate_set+0x4c>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 800a8d6:	f107 0308 	add.w	r3, r7, #8
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f005 fddb 	bl	8010496 <LmHandlerSetRX2Params>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <AT_Rx2DataRate_set+0x4a>
  {
    return AT_PARAM_ERROR;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e000      	b.n	800a8ec <AT_Rx2DataRate_set+0x4c>
  }

  return AT_OK;
 800a8ea:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_set_2 */

  /* USER CODE END AT_Rx2DataRate_set_2 */
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	08021030 	.word	0x08021030

0800a8f8 <AT_Rx2Frequency_get>:

ATEerror_t AT_Rx2Frequency_get(const char *param)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Frequency_get_1 */

  /* USER CODE END AT_Rx2Frequency_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4618      	mov	r0, r3
 800a906:	f005 fcef 	bl	80102e8 <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fd79 	bl	800b404 <print_d>
  return AT_OK;
 800a912:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_get_2 */

  /* USER CODE END AT_Rx2Frequency_get_2 */
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <AT_Rx2Frequency_set>:

ATEerror_t AT_Rx2Frequency_set(const char *param)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2Frequency_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 800a924:	f107 0308 	add.w	r3, r7, #8
 800a928:	4618      	mov	r0, r3
 800a92a:	f005 fcdd 	bl	80102e8 <LmHandlerGetRX2Params>

  /* Update the frequency with scanf */
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	461a      	mov	r2, r3
 800a934:	490b      	ldr	r1, [pc, #44]	; (800a964 <AT_Rx2Frequency_set+0x48>)
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f015 fe00 	bl	802053c <tiny_sscanf>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d001      	beq.n	800a946 <AT_Rx2Frequency_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a942:	2302      	movs	r3, #2
 800a944:	e00a      	b.n	800a95c <AT_Rx2Frequency_set+0x40>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 800a946:	f107 0308 	add.w	r3, r7, #8
 800a94a:	4618      	mov	r0, r3
 800a94c:	f005 fda3 	bl	8010496 <LmHandlerSetRX2Params>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <AT_Rx2Frequency_set+0x3e>
  {
    return AT_PARAM_ERROR;
 800a956:	2302      	movs	r3, #2
 800a958:	e000      	b.n	800a95c <AT_Rx2Frequency_set+0x40>
  }

  return AT_OK;
 800a95a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_set_2 */

  /* USER CODE END AT_Rx2Frequency_set_2 */
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	080210d8 	.word	0x080210d8

0800a968 <AT_TransmitPower_get>:

ATEerror_t AT_TransmitPower_get(const char *param)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_get_1 */

  /* USER CODE END AT_TransmitPower_get_1 */
  int8_t txPower;
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 800a970:	f107 030f 	add.w	r3, r7, #15
 800a974:	4618      	mov	r0, r3
 800a976:	f005 fcd9 	bl	801032c <LmHandlerGetTxPower>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <AT_TransmitPower_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a980:	2302      	movs	r3, #2
 800a982:	e005      	b.n	800a990 <AT_TransmitPower_get+0x28>
  }

  print_d(txPower);
 800a984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fd3b 	bl	800b404 <print_d>
  return AT_OK;
 800a98e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_get_2 */

  /* USER CODE END AT_TransmitPower_get_2 */
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <AT_TransmitPower_set>:

ATEerror_t AT_TransmitPower_set(const char *param)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_set_1 */

  /* USER CODE END AT_TransmitPower_set_1 */
  int8_t txPower;
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 800a9a0:	f107 030f 	add.w	r3, r7, #15
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	490c      	ldr	r1, [pc, #48]	; (800a9d8 <AT_TransmitPower_set+0x40>)
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f015 fdc7 	bl	802053c <tiny_sscanf>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d001      	beq.n	800a9b8 <AT_TransmitPower_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e00a      	b.n	800a9ce <AT_TransmitPower_set+0x36>
  }

  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 800a9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f005 fd51 	bl	8010464 <LmHandlerSetTxPower>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <AT_TransmitPower_set+0x34>
  {
    return AT_PARAM_ERROR;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e000      	b.n	800a9ce <AT_TransmitPower_set+0x36>
  }

  return AT_OK;
 800a9cc:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_set_2 */

  /* USER CODE END AT_TransmitPower_set_2 */
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	08021030 	.word	0x08021030

0800a9dc <AT_PingSlot_get>:

ATEerror_t AT_PingSlot_get(const char *param)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_get_1 */

  /* USER CODE END AT_PingSlot_get_1 */
  uint8_t periodicity;

  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 800a9e4:	f107 030f 	add.w	r3, r7, #15
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f005 fdd0 	bl	801058e <LmHandlerGetPingPeriodicity>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <AT_PingSlot_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e004      	b.n	800aa02 <AT_PingSlot_get+0x26>
  }

  print_d(periodicity);
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fd02 	bl	800b404 <print_d>
  return AT_OK;
 800aa00:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_get_2 */

  /* USER CODE END AT_PingSlot_get_2 */
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <AT_PingSlot_set>:

ATEerror_t AT_PingSlot_set(const char *param)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_set_1 */

  /* USER CODE END AT_PingSlot_set_1 */
  uint8_t periodicity;

  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 800aa14:	f107 030f 	add.w	r3, r7, #15
 800aa18:	461a      	mov	r2, r3
 800aa1a:	490e      	ldr	r1, [pc, #56]	; (800aa54 <AT_PingSlot_set+0x48>)
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f015 fd8d 	bl	802053c <tiny_sscanf>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d001      	beq.n	800aa2c <AT_PingSlot_set+0x20>
  {
    return AT_PARAM_ERROR;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e00e      	b.n	800aa4a <AT_PingSlot_set+0x3e>
  }
  else if (periodicity > 7)
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	2b07      	cmp	r3, #7
 800aa30:	d901      	bls.n	800aa36 <AT_PingSlot_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800aa32:	2302      	movs	r3, #2
 800aa34:	e009      	b.n	800aa4a <AT_PingSlot_set+0x3e>
  }
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f005 fdb3 	bl	80105a4 <LmHandlerSetPingPeriodicity>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <AT_PingSlot_set+0x3c>
  {
    return AT_PARAM_ERROR;
 800aa44:	2302      	movs	r3, #2
 800aa46:	e000      	b.n	800aa4a <AT_PingSlot_set+0x3e>
  }

  return AT_OK;
 800aa48:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_set_2 */

  /* USER CODE END AT_PingSlot_set_2 */
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	08021030 	.word	0x08021030

0800aa58 <AT_test_txTone>:

/* --------------- Radio tests commands --------------- */
ATEerror_t AT_test_txTone(const char *param)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_txTone_1 */

  /* USER CODE END AT_test_txTone_1 */
  if (0U == TST_TxTone())
 800aa60:	f001 f806 	bl	800ba70 <TST_TxTone>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <AT_test_txTone+0x16>
  {
    return AT_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e000      	b.n	800aa70 <AT_test_txTone+0x18>
  }
  else
  {
    return AT_BUSY_ERROR;
 800aa6e:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_txTone_2 */

  /* USER CODE END AT_test_txTone_2 */
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <AT_test_rxRssi>:

ATEerror_t AT_test_rxRssi(const char *param)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rxRssi_1 */

  /* USER CODE END AT_test_rxRssi_1 */
  if (0U == TST_RxRssi())
 800aa80:	f001 f824 	bl	800bacc <TST_RxRssi>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <AT_test_rxRssi+0x16>
  {
    return AT_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e000      	b.n	800aa90 <AT_test_rxRssi+0x18>
  }
  else
  {
    return AT_BUSY_ERROR;
 800aa8e:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rxRssi_2 */

  /* USER CODE END AT_test_rxRssi_2 */
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <AT_test_get_config>:

ATEerror_t AT_test_get_config(const char *param)
{
 800aa98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa9a:	b0a7      	sub	sp, #156	; 0x9c
 800aa9c:	af0c      	add	r7, sp, #48	; 0x30
 800aa9e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN AT_test_get_config_1 */

  /* USER CODE END AT_test_get_config_1 */
  testParameter_t testParam;
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 800aaa0:	4b86      	ldr	r3, [pc, #536]	; (800acbc <AT_test_get_config+0x224>)
 800aaa2:	f107 041c 	add.w	r4, r7, #28
 800aaa6:	461d      	mov	r5, r3
 800aaa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  TST_get_config(&testParam);
 800aab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aab8:	4618      	mov	r0, r3
 800aaba:	f001 f8b3 	bl	800bc24 <TST_get_config>

  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 800aabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	4b7f      	ldr	r3, [pc, #508]	; (800acc0 <AT_test_get_config+0x228>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	2000      	movs	r0, #0
 800aaca:	f013 feb1 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 800aace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4b7c      	ldr	r3, [pc, #496]	; (800acc4 <AT_test_get_config+0x22c>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	2100      	movs	r1, #0
 800aad8:	2000      	movs	r0, #0
 800aada:	f013 fea9 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

  if (testParam.modulation == 0)
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d14a      	bne.n	800ab7a <AT_test_get_config+0xe2>
  {
    /*fsk*/
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 800aae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	4b77      	ldr	r3, [pc, #476]	; (800acc8 <AT_test_get_config+0x230>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f013 fe9e 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800aaf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4b74      	ldr	r3, [pc, #464]	; (800accc <AT_test_get_config+0x234>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	2100      	movs	r1, #0
 800aafe:	2000      	movs	r0, #0
 800ab00:	f013 fe96 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 800ab04:	4b72      	ldr	r3, [pc, #456]	; (800acd0 <AT_test_get_config+0x238>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	f013 fe90 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800ab10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	4b6f      	ldr	r3, [pc, #444]	; (800acd4 <AT_test_get_config+0x23c>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f013 fe88 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800ab20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4b6c      	ldr	r3, [pc, #432]	; (800acd8 <AT_test_get_config+0x240>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	2100      	movs	r1, #0
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	f013 fe80 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 800ab30:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <AT_test_get_config+0x244>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2000      	movs	r0, #0
 800ab38:	f013 fe7a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800ab3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	4b67      	ldr	r3, [pc, #412]	; (800ace0 <AT_test_get_config+0x248>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	2000      	movs	r0, #0
 800ab48:	f013 fe72 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 800ab4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	4b64      	ldr	r3, [pc, #400]	; (800ace4 <AT_test_get_config+0x24c>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	2100      	movs	r1, #0
 800ab56:	2000      	movs	r0, #0
 800ab58:	f013 fe6a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 800ab5c:	4b62      	ldr	r3, [pc, #392]	; (800ace8 <AT_test_get_config+0x250>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	2000      	movs	r0, #0
 800ab64:	f013 fe64 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 800ab68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4b5f      	ldr	r3, [pc, #380]	; (800acec <AT_test_get_config+0x254>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	2000      	movs	r0, #0
 800ab74:	f013 fe5c 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ab78:	e061      	b.n	800ac3e <AT_test_get_config+0x1a6>
  }
  else if (testParam.modulation == 1)
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d156      	bne.n	800ac2e <AT_test_get_config+0x196>
  {
    /*Lora*/
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth, loraBW[testParam.bandwidth]);
 800ab80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	3358      	adds	r3, #88	; 0x58
 800ab88:	f107 0110 	add.w	r1, r7, #16
 800ab8c:	440b      	add	r3, r1
 800ab8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	9200      	str	r2, [sp, #0]
 800ab96:	4b56      	ldr	r3, [pc, #344]	; (800acf0 <AT_test_get_config+0x258>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f013 fe47 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 800aba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4b53      	ldr	r3, [pc, #332]	; (800acf4 <AT_test_get_config+0x25c>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	2100      	movs	r1, #0
 800abac:	2000      	movs	r0, #0
 800abae:	f013 fe3f 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate, testParam.codingRate + 4);
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abb6:	3204      	adds	r2, #4
 800abb8:	9201      	str	r2, [sp, #4]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4b4e      	ldr	r3, [pc, #312]	; (800acf8 <AT_test_get_config+0x260>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	2100      	movs	r1, #0
 800abc2:	2000      	movs	r0, #0
 800abc4:	f013 fe34 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800abc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4b41      	ldr	r3, [pc, #260]	; (800acd4 <AT_test_get_config+0x23c>)
 800abce:	2200      	movs	r2, #0
 800abd0:	2100      	movs	r1, #0
 800abd2:	2000      	movs	r0, #0
 800abd4:	f013 fe2c 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800abd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	4b3e      	ldr	r3, [pc, #248]	; (800acd8 <AT_test_get_config+0x240>)
 800abde:	2200      	movs	r2, #0
 800abe0:	2100      	movs	r1, #0
 800abe2:	2000      	movs	r0, #0
 800abe4:	f013 fe24 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 800abe8:	4b44      	ldr	r3, [pc, #272]	; (800acfc <AT_test_get_config+0x264>)
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2000      	movs	r0, #0
 800abf0:	f013 fe1e 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800abf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4b39      	ldr	r3, [pc, #228]	; (800ace0 <AT_test_get_config+0x248>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	2000      	movs	r0, #0
 800ac00:	f013 fe16 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 800ac04:	4b3e      	ldr	r3, [pc, #248]	; (800ad00 <AT_test_get_config+0x268>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f013 fe10 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 800ac10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <AT_test_get_config+0x26c>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f013 fe08 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 800ac20:	4b39      	ldr	r3, [pc, #228]	; (800ad08 <AT_test_get_config+0x270>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	2000      	movs	r0, #0
 800ac28:	f013 fe02 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ac2c:	e007      	b.n	800ac3e <AT_test_get_config+0x1a6>
  }
  else
  {
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800ac2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4b36      	ldr	r3, [pc, #216]	; (800ad0c <AT_test_get_config+0x274>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f013 fdf9 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  }

  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", testParam.freq,
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac46:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ac48:	3404      	adds	r4, #4
 800ac4a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800ac4c:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 800ac4e:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
 800ac52:	f8c7 c010 	str.w	ip, [r7, #16]
 800ac56:	f8d7 e058 	ldr.w	lr, [r7, #88]	; 0x58
 800ac5a:	f8c7 e00c 	str.w	lr, [r7, #12]
 800ac5e:	f8d7 c05c 	ldr.w	ip, [r7, #92]	; 0x5c
 800ac62:	f8c7 c008 	str.w	ip, [r7, #8]
 800ac66:	f8d7 e060 	ldr.w	lr, [r7, #96]	; 0x60
 800ac6a:	f8c7 e004 	str.w	lr, [r7, #4]
 800ac6e:	f8d7 c064 	ldr.w	ip, [r7, #100]	; 0x64
 800ac72:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800ac76:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ac7a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800ac7e:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ac82:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ac86:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800ac8a:	f8cd e020 	str.w	lr, [sp, #32]
 800ac8e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800ac92:	f8cd c01c 	str.w	ip, [sp, #28]
 800ac96:	9606      	str	r6, [sp, #24]
 800ac98:	9505      	str	r5, [sp, #20]
 800ac9a:	9404      	str	r4, [sp, #16]
 800ac9c:	9003      	str	r0, [sp, #12]
 800ac9e:	9102      	str	r1, [sp, #8]
 800aca0:	9201      	str	r2, [sp, #4]
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <AT_test_get_config+0x278>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	2100      	movs	r1, #0
 800acaa:	2000      	movs	r0, #0
 800acac:	f013 fdc0 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            testParam.power,
            testParam.bandwidth, testParam.loraSf_datarate, testParam.codingRate + 4, \
            testParam.lna, testParam.paBoost, testParam.modulation, testParam.payloadLen, testParam.fskDev, testParam.lowDrOpt,
            testParam.BTproduct);
  return AT_OK;
 800acb0:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_get_config_2 */

  /* USER CODE END AT_test_get_config_2 */
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	376c      	adds	r7, #108	; 0x6c
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acba:	bf00      	nop
 800acbc:	0802134c 	.word	0x0802134c
 800acc0:	080210dc 	.word	0x080210dc
 800acc4:	080210f0 	.word	0x080210f0
 800acc8:	08021104 	.word	0x08021104
 800accc:	0802111c 	.word	0x0802111c
 800acd0:	08021138 	.word	0x08021138
 800acd4:	08021158 	.word	0x08021158
 800acd8:	08021170 	.word	0x08021170
 800acdc:	0802118c 	.word	0x0802118c
 800ace0:	080211a0 	.word	0x080211a0
 800ace4:	080211bc 	.word	0x080211bc
 800ace8:	080211d8 	.word	0x080211d8
 800acec:	080211f8 	.word	0x080211f8
 800acf0:	0802121c 	.word	0x0802121c
 800acf4:	08021238 	.word	0x08021238
 800acf8:	08021248 	.word	0x08021248
 800acfc:	08021260 	.word	0x08021260
 800ad00:	08021278 	.word	0x08021278
 800ad04:	080212a4 	.word	0x080212a4
 800ad08:	080212c0 	.word	0x080212c0
 800ad0c:	080212e0 	.word	0x080212e0
 800ad10:	080212fc 	.word	0x080212fc

0800ad14 <AT_test_set_config>:

ATEerror_t AT_test_set_config(const char *param)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b0a8      	sub	sp, #160	; 0xa0
 800ad18:	af0c      	add	r7, sp, #48	; 0x30
 800ad1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_set_config_1 */

  /* USER CODE END AT_test_set_config_1 */
  testParameter_t testParam = {0};
 800ad1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad20:	2230      	movs	r2, #48	; 0x30
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f015 fe85 	bl	8020a34 <memset>
  uint32_t fskDeviation;
  uint32_t lowDrOpt;
  uint32_t BTproduct;
  uint32_t crNum;

  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 800ad2a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ad2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ad32:	f107 0310 	add.w	r3, r7, #16
 800ad36:	930a      	str	r3, [sp, #40]	; 0x28
 800ad38:	f107 0314 	add.w	r3, r7, #20
 800ad3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3e:	f107 0318 	add.w	r3, r7, #24
 800ad42:	9308      	str	r3, [sp, #32]
 800ad44:	f107 031c 	add.w	r3, r7, #28
 800ad48:	9307      	str	r3, [sp, #28]
 800ad4a:	f107 0320 	add.w	r3, r7, #32
 800ad4e:	9306      	str	r3, [sp, #24]
 800ad50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	f107 030c 	add.w	r3, r7, #12
 800ad66:	9302      	str	r3, [sp, #8]
 800ad68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	460b      	mov	r3, r1
 800ad76:	4975      	ldr	r1, [pc, #468]	; (800af4c <AT_test_set_config+0x238>)
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f015 fbdf 	bl	802053c <tiny_sscanf>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b0d      	cmp	r3, #13
 800ad82:	d001      	beq.n	800ad88 <AT_test_set_config+0x74>
  {
    /*extend to new format for extended*/
  }
  else
  {
    return AT_PARAM_ERROR;
 800ad84:	2302      	movs	r3, #2
 800ad86:	e0dd      	b.n	800af44 <AT_test_set_config+0x230>
  }
  /*get current config*/
  TST_get_config(&testParam);
 800ad88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 ff49 	bl	800bc24 <TST_get_config>

  /* 8: modulation check and set */
  /* first check because required for others */
  if (modulation == 0)
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <AT_test_set_config+0x8a>
  {
    testParam.modulation = TEST_FSK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad9c:	e00d      	b.n	800adba <AT_test_set_config+0xa6>
  }
  else if (modulation == 1)
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d102      	bne.n	800adaa <AT_test_set_config+0x96>
  {
    testParam.modulation = TEST_LORA;
 800ada4:	2301      	movs	r3, #1
 800ada6:	643b      	str	r3, [r7, #64]	; 0x40
 800ada8:	e007      	b.n	800adba <AT_test_set_config+0xa6>
  }
  else if (modulation == 2)
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	2b02      	cmp	r3, #2
 800adae:	d102      	bne.n	800adb6 <AT_test_set_config+0xa2>
  {
    testParam.modulation = TEST_BPSK;
 800adb0:	2302      	movs	r3, #2
 800adb2:	643b      	str	r3, [r7, #64]	; 0x40
 800adb4:	e001      	b.n	800adba <AT_test_set_config+0xa6>
  }
  else
  {
    return AT_PARAM_ERROR;
 800adb6:	2302      	movs	r3, #2
 800adb8:	e0c4      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 1: frequency check and set */
  if (freq < 1000)
 800adba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adc0:	d205      	bcs.n	800adce <AT_test_set_config+0xba>
  {
    /*given in MHz*/
    testParam.freq = freq * 1000000;
 800adc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc4:	4a62      	ldr	r2, [pc, #392]	; (800af50 <AT_test_set_config+0x23c>)
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
 800adca:	647b      	str	r3, [r7, #68]	; 0x44
 800adcc:	e001      	b.n	800add2 <AT_test_set_config+0xbe>
  }
  else
  {
    testParam.freq = freq;
 800adce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  /* 2: power check and set */
  if ((power >= -9) && (power <= 22))
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	f113 0f09 	cmn.w	r3, #9
 800add8:	db08      	blt.n	800adec <AT_test_set_config+0xd8>
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	2b16      	cmp	r3, #22
 800adde:	dc05      	bgt.n	800adec <AT_test_set_config+0xd8>
  {
    testParam.power = power;
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    return AT_PARAM_ERROR;
  }

  /* 3: bandwidth check and set */
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 800ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <AT_test_set_config+0xdc>
 800adea:	e00c      	b.n	800ae06 <AT_test_set_config+0xf2>
    return AT_PARAM_ERROR;
 800adec:	2302      	movs	r3, #2
 800adee:	e0a9      	b.n	800af44 <AT_test_set_config+0x230>
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 800adf6:	d306      	bcc.n	800ae06 <AT_test_set_config+0xf2>
 800adf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adfa:	4a56      	ldr	r2, [pc, #344]	; (800af54 <AT_test_set_config+0x240>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d802      	bhi.n	800ae06 <AT_test_set_config+0xf2>
  {
    testParam.bandwidth = bandwidth;
 800ae00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae04:	e00d      	b.n	800ae22 <AT_test_set_config+0x10e>
  }
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 800ae06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d105      	bne.n	800ae18 <AT_test_set_config+0x104>
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	2b06      	cmp	r3, #6
 800ae10:	d802      	bhi.n	800ae18 <AT_test_set_config+0x104>
  {
    testParam.bandwidth = bandwidth;
 800ae12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae16:	e004      	b.n	800ae22 <AT_test_set_config+0x10e>
  }
  else if (testParam.modulation == TEST_BPSK)
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d001      	beq.n	800ae22 <AT_test_set_config+0x10e>
  {
    /* Not used */
  }
  else
  {
    return AT_PARAM_ERROR;
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e090      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 4: datarate/spreading factor check and set */
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 800ae22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <AT_test_set_config+0x12a>
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800ae2e:	d306      	bcc.n	800ae3e <AT_test_set_config+0x12a>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	4a49      	ldr	r2, [pc, #292]	; (800af58 <AT_test_set_config+0x244>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d802      	bhi.n	800ae3e <AT_test_set_config+0x12a>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ae3c:	e017      	b.n	800ae6e <AT_test_set_config+0x15a>
  }
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 800ae3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d108      	bne.n	800ae56 <AT_test_set_config+0x142>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d905      	bls.n	800ae56 <AT_test_set_config+0x142>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2b0c      	cmp	r3, #12
 800ae4e:	d802      	bhi.n	800ae56 <AT_test_set_config+0x142>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	653b      	str	r3, [r7, #80]	; 0x50
 800ae54:	e00b      	b.n	800ae6e <AT_test_set_config+0x15a>
  }
  else if ((testParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 800ae56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d106      	bne.n	800ae6a <AT_test_set_config+0x156>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae62:	d802      	bhi.n	800ae6a <AT_test_set_config+0x156>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	653b      	str	r3, [r7, #80]	; 0x50
 800ae68:	e001      	b.n	800ae6e <AT_test_set_config+0x15a>
  }
  else
  {
    return AT_PARAM_ERROR;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e06a      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 5: coding rate check and set */
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 800ae6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d011      	beq.n	800ae98 <AT_test_set_config+0x184>
 800ae74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d00e      	beq.n	800ae98 <AT_test_set_config+0x184>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 800ae7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d109      	bne.n	800ae94 <AT_test_set_config+0x180>
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d906      	bls.n	800ae94 <AT_test_set_config+0x180>
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2b08      	cmp	r3, #8
 800ae8a:	d803      	bhi.n	800ae94 <AT_test_set_config+0x180>
  {
    testParam.codingRate = codingRate - 4;
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	3b04      	subs	r3, #4
 800ae90:	657b      	str	r3, [r7, #84]	; 0x54
 800ae92:	e001      	b.n	800ae98 <AT_test_set_config+0x184>
  }
  else
  {
    return AT_PARAM_ERROR;
 800ae94:	2302      	movs	r3, #2
 800ae96:	e055      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 6: lna state check and set */
  if (lna <= 1)
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d805      	bhi.n	800aeaa <AT_test_set_config+0x196>
  {
    testParam.lna = lna;
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	65bb      	str	r3, [r7, #88]	; 0x58
  {
    return AT_PARAM_ERROR;
  }

  /* 7: pa boost check and set */
  if (paBoost <= 1)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d804      	bhi.n	800aeb2 <AT_test_set_config+0x19e>
 800aea8:	e001      	b.n	800aeae <AT_test_set_config+0x19a>
    return AT_PARAM_ERROR;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	e04a      	b.n	800af44 <AT_test_set_config+0x230>
  {
    /* Not used */
    testParam.paBoost = paBoost;
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  /* 9: payloadLen check and set */
  if ((payloadLen != 0) && (payloadLen < 256))
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <AT_test_set_config+0x1b6>
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2bff      	cmp	r3, #255	; 0xff
 800aebc:	d805      	bhi.n	800aeca <AT_test_set_config+0x1b6>
  {
    testParam.payloadLen = payloadLen;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	663b      	str	r3, [r7, #96]	; 0x60
  {
    return AT_PARAM_ERROR;
  }

  /* 10: fsk Deviation check and set */
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800aec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d015      	beq.n	800aef4 <AT_test_set_config+0x1e0>
 800aec8:	e001      	b.n	800aece <AT_test_set_config+0x1ba>
    return AT_PARAM_ERROR;
 800aeca:	2302      	movs	r3, #2
 800aecc:	e03a      	b.n	800af44 <AT_test_set_config+0x230>
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d00f      	beq.n	800aef4 <AT_test_set_config+0x1e0>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 800aed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <AT_test_set_config+0x1dc>
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800aee0:	d306      	bcc.n	800aef0 <AT_test_set_config+0x1dc>
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	4a1d      	ldr	r2, [pc, #116]	; (800af5c <AT_test_set_config+0x248>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d802      	bhi.n	800aef0 <AT_test_set_config+0x1dc>
  {
    /*given in MHz*/
    testParam.fskDev = fskDeviation;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	667b      	str	r3, [r7, #100]	; 0x64
 800aeee:	e001      	b.n	800aef4 <AT_test_set_config+0x1e0>
  }
  else
  {
    return AT_PARAM_ERROR;
 800aef0:	2302      	movs	r3, #2
 800aef2:	e027      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 11: low datarate optimization check and set */
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 800aef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00d      	beq.n	800af16 <AT_test_set_config+0x202>
 800aefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d00a      	beq.n	800af16 <AT_test_set_config+0x202>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 800af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af02:	2b01      	cmp	r3, #1
 800af04:	d105      	bne.n	800af12 <AT_test_set_config+0x1fe>
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d802      	bhi.n	800af12 <AT_test_set_config+0x1fe>
  {
    testParam.lowDrOpt = lowDrOpt;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800af10:	e001      	b.n	800af16 <AT_test_set_config+0x202>
  }
  else
  {
    return AT_PARAM_ERROR;
 800af12:	2302      	movs	r3, #2
 800af14:	e016      	b.n	800af44 <AT_test_set_config+0x230>
  }

  /* 12: FSK gaussian BT product check and set */
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d00d      	beq.n	800af38 <AT_test_set_config+0x224>
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d00a      	beq.n	800af38 <AT_test_set_config+0x224>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_FSK) && (BTproduct <= 4))
 800af22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af24:	2b00      	cmp	r3, #0
 800af26:	d105      	bne.n	800af34 <AT_test_set_config+0x220>
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d802      	bhi.n	800af34 <AT_test_set_config+0x220>
  {
    /*given in MHz*/
    testParam.BTproduct = BTproduct;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af32:	e001      	b.n	800af38 <AT_test_set_config+0x224>
  }
  else
  {
    return AT_PARAM_ERROR;
 800af34:	2302      	movs	r3, #2
 800af36:	e005      	b.n	800af44 <AT_test_set_config+0x230>
  }

  TST_set_config(&testParam);
 800af38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fe61 	bl	800bc04 <TST_set_config>

  return AT_OK;
 800af42:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_set_config_2 */

  /* USER CODE END AT_test_set_config_2 */
}
 800af44:	4618      	mov	r0, r3
 800af46:	3770      	adds	r7, #112	; 0x70
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	08021368 	.word	0x08021368
 800af50:	000f4240 	.word	0x000f4240
 800af54:	00072038 	.word	0x00072038
 800af58:	000493e0 	.word	0x000493e0
 800af5c:	00030d40 	.word	0x00030d40

0800af60 <AT_test_tx>:

ATEerror_t AT_test_tx(const char *param)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_1 */

  /* USER CODE END AT_test_tx_1 */
  const char *buf = param;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	461a      	mov	r2, r3
 800af72:	490e      	ldr	r1, [pc, #56]	; (800afac <AT_test_tx+0x4c>)
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f015 fae1 	bl	802053c <tiny_sscanf>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d007      	beq.n	800af90 <AT_test_tx+0x30>
  {
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <AT_test_tx+0x50>)
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	2000      	movs	r0, #0
 800af88:	f013 fc52 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800af8c:	2302      	movs	r3, #2
 800af8e:	e009      	b.n	800afa4 <AT_test_tx+0x44>
  }

  if (0U == TST_TX_Start(nb_packet))
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fe66 	bl	800bc64 <TST_TX_Start>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <AT_test_tx+0x42>
  {
    return AT_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e000      	b.n	800afa4 <AT_test_tx+0x44>
  }
  else
  {
    return AT_BUSY_ERROR;
 800afa2:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_tx_2 */

  /* USER CODE END AT_test_tx_2 */
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	08020e4c 	.word	0x08020e4c
 800afb0:	08021390 	.word	0x08021390

0800afb4 <AT_test_rx>:

ATEerror_t AT_test_rx(const char *param)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rx_1 */

  /* USER CODE END AT_test_rx_1 */
  const char *buf = param;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	461a      	mov	r2, r3
 800afc6:	490e      	ldr	r1, [pc, #56]	; (800b000 <AT_test_rx+0x4c>)
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f015 fab7 	bl	802053c <tiny_sscanf>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d007      	beq.n	800afe4 <AT_test_rx+0x30>
  {
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 800afd4:	4b0b      	ldr	r3, [pc, #44]	; (800b004 <AT_test_rx+0x50>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	2100      	movs	r1, #0
 800afda:	2000      	movs	r0, #0
 800afdc:	f013 fc28 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800afe0:	2302      	movs	r3, #2
 800afe2:	e009      	b.n	800aff8 <AT_test_rx+0x44>
  }

  if (0U == TST_RX_Start(nb_packet))
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 ff80 	bl	800beec <TST_RX_Start>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <AT_test_rx+0x42>
  {
    return AT_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	e000      	b.n	800aff8 <AT_test_rx+0x44>
  }
  else
  {
    return AT_BUSY_ERROR;
 800aff6:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rx_2 */

  /* USER CODE END AT_test_rx_2 */
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	08020e4c 	.word	0x08020e4c
 800b004:	080213b8 	.word	0x080213b8

0800b008 <AT_Certif>:
ATEerror_t AT_Certif(const char *param)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Certif_1 */

  /* USER CODE END AT_Certif_1 */
  switch (param[0])
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b30      	cmp	r3, #48	; 0x30
 800b016:	d002      	beq.n	800b01e <AT_Certif+0x16>
 800b018:	2b31      	cmp	r3, #49	; 0x31
 800b01a:	d003      	beq.n	800b024 <AT_Certif+0x1c>
 800b01c:	e01e      	b.n	800b05c <AT_Certif+0x54>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800b01e:	2001      	movs	r0, #1
 800b020:	f004 fae4 	bl	800f5ec <LmHandlerJoin>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 800b024:	2002      	movs	r0, #2
 800b026:	f004 fae1 	bl	800f5ec <LmHandlerJoin>
      break;
 800b02a:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  UTIL_TIMER_Create(&TxCertifTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 800b02c:	2300      	movs	r3, #0
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <AT_Certif+0x60>)
 800b032:	2200      	movs	r2, #0
 800b034:	f04f 31ff 	mov.w	r1, #4294967295
 800b038:	480c      	ldr	r0, [pc, #48]	; (800b06c <AT_Certif+0x64>)
 800b03a:	f014 fc2d 	bl	801f898 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxCertifTimer,  8000);  /* 8s */
 800b03e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800b042:	480a      	ldr	r0, [pc, #40]	; (800b06c <AT_Certif+0x64>)
 800b044:	f014 fd3c 	bl	801fac0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxCertifTimer);
 800b048:	4808      	ldr	r0, [pc, #32]	; (800b06c <AT_Certif+0x64>)
 800b04a:	f014 fc5b 	bl	801f904 <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 800b04e:	4a08      	ldr	r2, [pc, #32]	; (800b070 <AT_Certif+0x68>)
 800b050:	2100      	movs	r1, #0
 800b052:	2004      	movs	r0, #4
 800b054:	f013 fffc 	bl	801f050 <UTIL_SEQ_RegTask>

  return AT_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	e000      	b.n	800b05e <AT_Certif+0x56>
      return AT_PARAM_ERROR;
 800b05c:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_Certif_2 */

  /* USER CODE END AT_Certif_2 */
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	0800b44d 	.word	0x0800b44d
 800b06c:	20000d70 	.word	0x20000d70
 800b070:	0800b465 	.word	0x0800b465

0800b074 <AT_test_tx_hopping>:

ATEerror_t AT_test_tx_hopping(const char *param)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b09a      	sub	sp, #104	; 0x68
 800b078:	af04      	add	r7, sp, #16
 800b07a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_hopping_1 */

  /* USER CODE END AT_test_tx_hopping_1 */
  const char *buf = param;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t nb_tx;

  testParameter_t test_param;
  uint32_t hop_freq;

  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 800b080:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b084:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	460b      	mov	r3, r1
 800b096:	492b      	ldr	r1, [pc, #172]	; (800b144 <AT_test_tx_hopping+0xd0>)
 800b098:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b09a:	f015 fa4f 	bl	802053c <tiny_sscanf>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	d001      	beq.n	800b0a8 <AT_test_tx_hopping+0x34>
  {
    return AT_PARAM_ERROR;
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	e048      	b.n	800b13a <AT_test_tx_hopping+0xc6>
  }

  /*if freq is set in MHz, convert to Hz*/
  if (freq_start < 1000)
 800b0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0ae:	d204      	bcs.n	800b0ba <AT_test_tx_hopping+0x46>
  {
    freq_start *= 1000000;
 800b0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0b2:	4a25      	ldr	r2, [pc, #148]	; (800b148 <AT_test_tx_hopping+0xd4>)
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  if (freq_stop < 1000)
 800b0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0c0:	d204      	bcs.n	800b0cc <AT_test_tx_hopping+0x58>
  {
    freq_stop *= 1000000;
 800b0c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c4:	4a20      	ldr	r2, [pc, #128]	; (800b148 <AT_test_tx_hopping+0xd4>)
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  /**/
  hop_freq = freq_start;
 800b0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ce:	657b      	str	r3, [r7, #84]	; 0x54

  for (int i = 0; i < nb_tx; i++)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	653b      	str	r3, [r7, #80]	; 0x50
 800b0d4:	e02c      	b.n	800b130 <AT_test_tx_hopping+0xbc>
  {
    /*get current config*/
    TST_get_config(&test_param);
 800b0d6:	f107 030c 	add.w	r3, r7, #12
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fda2 	bl	800bc24 <TST_get_config>

    /*increment frequency*/
    test_param.freq = hop_freq;
 800b0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e2:	613b      	str	r3, [r7, #16]
    /*Set new config*/
    TST_set_config(&test_param);
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fd8b 	bl	800bc04 <TST_set_config>

    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 800b0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f0:	9302      	str	r3, [sp, #8]
 800b0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <AT_test_tx_hopping+0xd8>)
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	2100      	movs	r1, #0
 800b100:	2000      	movs	r0, #0
 800b102:	f013 fb95 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    if (0U != TST_TX_Start(1))
 800b106:	2001      	movs	r0, #1
 800b108:	f000 fdac 	bl	800bc64 <TST_TX_Start>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <AT_test_tx_hopping+0xa2>
    {
      return AT_BUSY_ERROR;
 800b112:	2303      	movs	r3, #3
 800b114:	e011      	b.n	800b13a <AT_test_tx_hopping+0xc6>
    }

    hop_freq += delta_f;
 800b116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b11a:	4413      	add	r3, r2
 800b11c:	657b      	str	r3, [r7, #84]	; 0x54

    if (hop_freq > freq_stop)
 800b11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b122:	429a      	cmp	r2, r3
 800b124:	d901      	bls.n	800b12a <AT_test_tx_hopping+0xb6>
    {
      hop_freq = freq_start;
 800b126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b128:	657b      	str	r3, [r7, #84]	; 0x54
  for (int i = 0; i < nb_tx; i++)
 800b12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12c:	3301      	adds	r3, #1
 800b12e:	653b      	str	r3, [r7, #80]	; 0x50
 800b130:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b134:	429a      	cmp	r2, r3
 800b136:	d3ce      	bcc.n	800b0d6 <AT_test_tx_hopping+0x62>
    }
  }

  return AT_OK;
 800b138:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_tx_hopping_2 */

  /* USER CODE END AT_test_tx_hopping_2 */
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3758      	adds	r7, #88	; 0x58
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	080213e4 	.word	0x080213e4
 800b148:	000f4240 	.word	0x000f4240
 800b14c:	080213f0 	.word	0x080213f0

0800b150 <AT_test_stop>:

ATEerror_t AT_test_stop(const char *param)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_stop_1 */

  /* USER CODE END AT_test_stop_1 */
  TST_stop();
 800b158:	f000 fd74 	bl	800bc44 <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <AT_test_stop+0x24>)
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	2000      	movs	r0, #0
 800b164:	f013 fb64 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800b168:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_stop_2 */

  /* USER CODE END AT_test_stop_2 */
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	0802140c 	.word	0x0802140c

0800b178 <AT_bat_get>:
  /* USER CODE END AT_read_register_2 */
}

/* --------------- Information command --------------- */
ATEerror_t AT_bat_get(const char *param)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_bat_get_1 */

  /* USER CODE END AT_bat_get_1 */
  print_d(SYS_GetBatteryLevel());
 800b180:	f7f5 fe26 	bl	8000dd0 <SYS_GetBatteryLevel>
 800b184:	4603      	mov	r3, r0
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f93c 	bl	800b404 <print_d>

  return AT_OK;
 800b18c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_bat_get_2 */

  /* USER CODE END AT_bat_get_2 */
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <sscanf_uint32_as_hhx>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t sscanf_uint32_as_hhx(const char *from, uint32_t *value)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN sscanf_uint32_as_hhx_1 */

  /* USER CODE END sscanf_uint32_as_hhx_1 */
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	1cd9      	adds	r1, r3, #3
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	1c98      	adds	r0, r3, #2
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	9201      	str	r2, [sp, #4]
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	460a      	mov	r2, r1
 800b1b8:	4904      	ldr	r1, [pc, #16]	; (800b1cc <sscanf_uint32_as_hhx+0x34>)
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f015 f9be 	bl	802053c <tiny_sscanf>
 800b1c0:	4603      	mov	r3, r0
                     &((unsigned char *)(value))[1],
                     &((unsigned char *)(value))[0]);
  /* USER CODE BEGIN sscanf_uint32_as_hhx_2 */

  /* USER CODE END sscanf_uint32_as_hhx_2 */
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0802142c 	.word	0x0802142c

0800b1d0 <sscanf_16_hhx>:

static int sscanf_16_hhx(const char *from, uint8_t *pt)
{
 800b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1d2:	b099      	sub	sp, #100	; 0x64
 800b1d4:	af0e      	add	r7, sp, #56	; 0x38
 800b1d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d8:	6239      	str	r1, [r7, #32]
  /* USER CODE BEGIN sscanf_16_hhx_1 */

  /* USER CODE END sscanf_16_hhx_1 */
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	f103 0c01 	add.w	ip, r3, #1
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	1c99      	adds	r1, r3, #2
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	1cd8      	adds	r0, r3, #3
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	1d1c      	adds	r4, r3, #4
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	1d5d      	adds	r5, r3, #5
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	1d9e      	adds	r6, r3, #6
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	3307      	adds	r3, #7
 800b1f8:	61fb      	str	r3, [r7, #28]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	f103 0208 	add.w	r2, r3, #8
 800b200:	61ba      	str	r2, [r7, #24]
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	f103 0e09 	add.w	lr, r3, #9
 800b208:	f8c7 e014 	str.w	lr, [r7, #20]
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	330a      	adds	r3, #10
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	f103 020b 	add.w	r2, r3, #11
 800b218:	60fa      	str	r2, [r7, #12]
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	f103 0e0c 	add.w	lr, r3, #12
 800b220:	f8c7 e008 	str.w	lr, [r7, #8]
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	330d      	adds	r3, #13
 800b228:	607b      	str	r3, [r7, #4]
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	f103 020e 	add.w	r2, r3, #14
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	330f      	adds	r3, #15
 800b234:	930d      	str	r3, [sp, #52]	; 0x34
 800b236:	920c      	str	r2, [sp, #48]	; 0x30
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b23c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800b240:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	9209      	str	r2, [sp, #36]	; 0x24
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	9308      	str	r3, [sp, #32]
 800b24c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800b250:	f8cd e01c 	str.w	lr, [sp, #28]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	9206      	str	r2, [sp, #24]
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	9305      	str	r3, [sp, #20]
 800b25c:	9604      	str	r6, [sp, #16]
 800b25e:	9503      	str	r5, [sp, #12]
 800b260:	9402      	str	r4, [sp, #8]
 800b262:	9001      	str	r0, [sp, #4]
 800b264:	9100      	str	r1, [sp, #0]
 800b266:	4663      	mov	r3, ip
 800b268:	6a3a      	ldr	r2, [r7, #32]
 800b26a:	4904      	ldr	r1, [pc, #16]	; (800b27c <sscanf_16_hhx+0xac>)
 800b26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b26e:	f015 f965 	bl	802053c <tiny_sscanf>
 800b272:	4603      	mov	r3, r0
                     &pt[7], &pt[8], &pt[9], &pt[10], &pt[11], &pt[12], &pt[13],
                     &pt[14], &pt[15]);
  /* USER CODE BEGIN sscanf_16_hhx_2 */

  /* USER CODE END sscanf_16_hhx_2 */
}
 800b274:	4618      	mov	r0, r3
 800b276:	372c      	adds	r7, #44	; 0x2c
 800b278:	46bd      	mov	sp, r7
 800b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27c:	08021440 	.word	0x08021440

0800b280 <print_uint32_as_02x>:

static void print_uint32_as_02x(uint32_t value)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af04      	add	r7, sp, #16
 800b286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_uint32_as_02x_1 */

  /* USER CODE END print_uint32_as_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 800b288:	1d3b      	adds	r3, r7, #4
 800b28a:	3303      	adds	r3, #3
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	1d3b      	adds	r3, r7, #4
 800b292:	3302      	adds	r3, #2
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	4619      	mov	r1, r3
 800b298:	1d3b      	adds	r3, r7, #4
 800b29a:	3301      	adds	r3, #1
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	1d3b      	adds	r3, r7, #4
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	9303      	str	r3, [sp, #12]
 800b2a6:	9002      	str	r0, [sp, #8]
 800b2a8:	9101      	str	r1, [sp, #4]
 800b2aa:	9200      	str	r2, [sp, #0]
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <print_uint32_as_02x+0x40>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	f013 fabc 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            (unsigned)((unsigned char *)(&value))[1],
            (unsigned)((unsigned char *)(&value))[0]);
  /* USER CODE BEGIN print_uint32_as_02x_2 */

  /* USER CODE END print_uint32_as_02x_2 */
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	08021490 	.word	0x08021490

0800b2c4 <print_16_02x>:

static void print_16_02x(uint8_t *pt)
{
 800b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c6:	b09b      	sub	sp, #108	; 0x6c
 800b2c8:	af10      	add	r7, sp, #64	; 0x40
 800b2ca:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN print_16_02x_1 */

  /* USER CODE END print_16_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	461c      	mov	r4, r3
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	3302      	adds	r3, #2
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	461d      	mov	r5, r3
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	461e      	mov	r6, r3
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	623b      	str	r3, [r7, #32]
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	3305      	adds	r3, #5
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	3306      	adds	r3, #6
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	3307      	adds	r3, #7
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	3308      	adds	r3, #8
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	613b      	str	r3, [r7, #16]
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	3309      	adds	r3, #9
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	330a      	adds	r3, #10
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	60bb      	str	r3, [r7, #8]
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	330b      	adds	r3, #11
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	330c      	adds	r3, #12
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	603b      	str	r3, [r7, #0]
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	330d      	adds	r3, #13
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	4619      	mov	r1, r3
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	330e      	adds	r3, #14
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	330f      	adds	r3, #15
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	930f      	str	r3, [sp, #60]	; 0x3c
 800b34a:	920e      	str	r2, [sp, #56]	; 0x38
 800b34c:	910d      	str	r1, [sp, #52]	; 0x34
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	920c      	str	r2, [sp, #48]	; 0x30
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	920b      	str	r2, [sp, #44]	; 0x2c
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	920a      	str	r2, [sp, #40]	; 0x28
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	9209      	str	r2, [sp, #36]	; 0x24
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	9208      	str	r2, [sp, #32]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	9207      	str	r2, [sp, #28]
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	9206      	str	r2, [sp, #24]
 800b36a:	69fa      	ldr	r2, [r7, #28]
 800b36c:	9205      	str	r2, [sp, #20]
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	9603      	str	r6, [sp, #12]
 800b374:	9502      	str	r5, [sp, #8]
 800b376:	9401      	str	r4, [sp, #4]
 800b378:	9000      	str	r0, [sp, #0]
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <print_16_02x+0xcc>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	2000      	movs	r0, #0
 800b382:	f013 fa55 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            pt[8], pt[9], pt[10], pt[11],
            pt[12], pt[13], pt[14], pt[15]);
  /* USER CODE BEGIN print_16_02x_2 */

  /* USER CODE END print_16_02x_2 */
}
 800b386:	bf00      	nop
 800b388:	372c      	adds	r7, #44	; 0x2c
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b38e:	bf00      	nop
 800b390:	080214a8 	.word	0x080214a8

0800b394 <print_8_02x>:

static void print_8_02x(uint8_t *pt)
{
 800b394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b396:	b08b      	sub	sp, #44	; 0x2c
 800b398:	af08      	add	r7, sp, #32
 800b39a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_8_02x_1 */

  /* USER CODE END print_8_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3303      	adds	r3, #3
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	461c      	mov	r4, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	461d      	mov	r5, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3305      	adds	r3, #5
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	461e      	mov	r6, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3306      	adds	r3, #6
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	603b      	str	r3, [r7, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3307      	adds	r3, #7
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	9307      	str	r3, [sp, #28]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	9605      	str	r6, [sp, #20]
 800b3e0:	9504      	str	r5, [sp, #16]
 800b3e2:	9403      	str	r4, [sp, #12]
 800b3e4:	9002      	str	r0, [sp, #8]
 800b3e6:	9101      	str	r1, [sp, #4]
 800b3e8:	9200      	str	r2, [sp, #0]
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <print_8_02x+0x6c>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f013 fa1d 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
            pt[0], pt[1], pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
  /* USER CODE BEGIN print_8_02x_2 */

  /* USER CODE END print_8_02x_2 */
}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fe:	bf00      	nop
 800b400:	080214fc 	.word	0x080214fc

0800b404 <print_d>:

static void print_d(int32_t value)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af02      	add	r7, sp, #8
 800b40a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_d_1 */

  /* USER CODE END print_d_1 */
  AT_PRINTF("%d\r\n", value);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	4b04      	ldr	r3, [pc, #16]	; (800b424 <print_d+0x20>)
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	2000      	movs	r0, #0
 800b418:	f013 fa0a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_d_2 */

  /* USER CODE END print_d_2 */
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	08021528 	.word	0x08021528

0800b428 <print_u>:

static void print_u(uint32_t value)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	4b04      	ldr	r3, [pc, #16]	; (800b448 <print_u+0x20>)
 800b436:	2200      	movs	r2, #0
 800b438:	2100      	movs	r1, #0
 800b43a:	2000      	movs	r0, #0
 800b43c:	f013 f9f8 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	08021530 	.word	0x08021530

0800b44c <OnCertifTimer>:

static void OnCertifTimer(void *context)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnCertifTimer_1 */

  /* USER CODE END OnCertifTimer_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 800b454:	2100      	movs	r1, #0
 800b456:	2004      	movs	r0, #4
 800b458:	f013 fe1c 	bl	801f094 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnCertifTimer_2 */

  /* USER CODE END OnCertifTimer_2 */
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <CertifSend>:

static void CertifSend(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 800b468:	4b0c      	ldr	r3, [pc, #48]	; (800b49c <CertifSend+0x38>)
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2243      	movs	r2, #67	; 0x43
 800b46e:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 1;
 800b470:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <CertifSend+0x38>)
 800b472:	2201      	movs	r2, #1
 800b474:	705a      	strb	r2, [r3, #1]
  AppData.Port = 99;
 800b476:	4b09      	ldr	r3, [pc, #36]	; (800b49c <CertifSend+0x38>)
 800b478:	2263      	movs	r2, #99	; 0x63
 800b47a:	701a      	strb	r2, [r3, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800b47c:	f004 f910 	bl	800f6a0 <LmHandlerJoinStatus>
 800b480:	4603      	mov	r3, r0
 800b482:	2b01      	cmp	r3, #1
 800b484:	d002      	beq.n	800b48c <CertifSend+0x28>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
 800b486:	4806      	ldr	r0, [pc, #24]	; (800b4a0 <CertifSend+0x3c>)
 800b488:	f014 fa3c 	bl	801f904 <UTIL_TIMER_Start>
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 800b48c:	2300      	movs	r3, #0
 800b48e:	2200      	movs	r2, #0
 800b490:	2100      	movs	r1, #0
 800b492:	4802      	ldr	r0, [pc, #8]	; (800b49c <CertifSend+0x38>)
 800b494:	f004 f920 	bl	800f6d8 <LmHandlerSend>
}
 800b498:	bf00      	nop
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000054 	.word	0x20000054
 800b4a0:	20000d70 	.word	0x20000d70

0800b4a4 <CMD_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void CMD_Init(void (*CmdProcessNotify)(void))
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_Init_1 */

  /* USER CODE END CMD_Init_1 */
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 800b4ac:	480d      	ldr	r0, [pc, #52]	; (800b4e4 <CMD_Init+0x40>)
 800b4ae:	f013 f9af 	bl	801e810 <UTIL_ADV_TRACE_StartRxProcess>
  /* register call back*/
  if (CmdProcessNotify != NULL)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <CMD_Init+0x1a>
  {
    NotifyCb = CmdProcessNotify;
 800b4b8:	4a0b      	ldr	r2, [pc, #44]	; (800b4e8 <CMD_Init+0x44>)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6013      	str	r3, [r2, #0]
  }
  widx = 0;
 800b4be:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <CMD_Init+0x48>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	601a      	str	r2, [r3, #0]
  ridx = 0;
 800b4c4:	4b0a      	ldr	r3, [pc, #40]	; (800b4f0 <CMD_Init+0x4c>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
  charCount = 0;
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <CMD_Init+0x50>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	601a      	str	r2, [r3, #0]
  i = 0;
 800b4d0:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <CMD_Init+0x54>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
  circBuffOverflow = 0;
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <CMD_Init+0x58>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN CMD_Init_2 */

  /* USER CODE END CMD_Init_2 */
}
 800b4dc:	bf00      	nop
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	0800b7a5 	.word	0x0800b7a5
 800b4e8:	20001008 	.word	0x20001008
 800b4ec:	20000ff8 	.word	0x20000ff8
 800b4f0:	20000ffc 	.word	0x20000ffc
 800b4f4:	20001000 	.word	0x20001000
 800b4f8:	20000ff4 	.word	0x20000ff4
 800b4fc:	20001004 	.word	0x20001004

0800b500 <CMD_Process>:

void CMD_Process(void)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b090      	sub	sp, #64	; 0x40
 800b504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CMD_Process_1 */

  /* USER CODE END CMD_Process_1 */
  /* Process all commands */
  if (circBuffOverflow == 1)
 800b506:	4b6b      	ldr	r3, [pc, #428]	; (800b6b4 <CMD_Process+0x1b4>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	f040 80c7 	bne.w	800b69e <CMD_Process+0x19e>
  {
    com_error(AT_TEST_PARAM_OVERFLOW);
 800b510:	2004      	movs	r0, #4
 800b512:	f000 fa4d 	bl	800b9b0 <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b516:	f3ef 8310 	mrs	r3, PRIMASK
 800b51a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /*Full flush in case of overflow */
    UTILS_ENTER_CRITICAL_SECTION();
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800b520:	b672      	cpsid	i
}
 800b522:	bf00      	nop
    ridx = widx;
 800b524:	4b64      	ldr	r3, [pc, #400]	; (800b6b8 <CMD_Process+0x1b8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a64      	ldr	r2, [pc, #400]	; (800b6bc <CMD_Process+0x1bc>)
 800b52a:	6013      	str	r3, [r2, #0]
    charCount = 0;
 800b52c:	4b64      	ldr	r3, [pc, #400]	; (800b6c0 <CMD_Process+0x1c0>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
    circBuffOverflow = 0;
 800b532:	4b60      	ldr	r3, [pc, #384]	; (800b6b4 <CMD_Process+0x1b4>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	f383 8810 	msr	PRIMASK, r3
}
 800b542:	bf00      	nop
    UTILS_EXIT_CRITICAL_SECTION();
    i = 0;
 800b544:	4b5f      	ldr	r3, [pc, #380]	; (800b6c4 <CMD_Process+0x1c4>)
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]
  }

  while (charCount != 0)
 800b54a:	e0a8      	b.n	800b69e <CMD_Process+0x19e>
  {
#if 0 /* echo On    */
    AT_PPRINTF("%c", circBuffer[ridx]);
#endif /* 0 */

    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 800b54c:	4b5b      	ldr	r3, [pc, #364]	; (800b6bc <CMD_Process+0x1bc>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a5d      	ldr	r2, [pc, #372]	; (800b6c8 <CMD_Process+0x1c8>)
 800b552:	5cd3      	ldrb	r3, [r2, r3]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d124      	bne.n	800b5a2 <CMD_Process+0xa2>
    {
      ridx++;
 800b558:	4b58      	ldr	r3, [pc, #352]	; (800b6bc <CMD_Process+0x1bc>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	4a57      	ldr	r2, [pc, #348]	; (800b6bc <CMD_Process+0x1bc>)
 800b560:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800b562:	4b56      	ldr	r3, [pc, #344]	; (800b6bc <CMD_Process+0x1bc>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b50      	cmp	r3, #80	; 0x50
 800b568:	d102      	bne.n	800b570 <CMD_Process+0x70>
      {
        ridx = 0;
 800b56a:	4b54      	ldr	r3, [pc, #336]	; (800b6bc <CMD_Process+0x1bc>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b570:	f3ef 8310 	mrs	r3, PRIMASK
 800b574:	61fb      	str	r3, [r7, #28]
  return(result);
 800b576:	69fb      	ldr	r3, [r7, #28]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800b57a:	b672      	cpsid	i
}
 800b57c:	bf00      	nop
      charCount--;
 800b57e:	4b50      	ldr	r3, [pc, #320]	; (800b6c0 <CMD_Process+0x1c0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3b01      	subs	r3, #1
 800b584:	4a4e      	ldr	r2, [pc, #312]	; (800b6c0 <CMD_Process+0x1c0>)
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	f383 8810 	msr	PRIMASK, r3
}
 800b592:	bf00      	nop
      UTILS_EXIT_CRITICAL_SECTION();
      com_error(AT_RX_ERROR);
 800b594:	2006      	movs	r0, #6
 800b596:	f000 fa0b 	bl	800b9b0 <com_error>
      i = 0;
 800b59a:	4b4a      	ldr	r3, [pc, #296]	; (800b6c4 <CMD_Process+0x1c4>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	e07d      	b.n	800b69e <CMD_Process+0x19e>
    }
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 800b5a2:	4b46      	ldr	r3, [pc, #280]	; (800b6bc <CMD_Process+0x1bc>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a48      	ldr	r2, [pc, #288]	; (800b6c8 <CMD_Process+0x1c8>)
 800b5a8:	5cd3      	ldrb	r3, [r2, r3]
 800b5aa:	2b0d      	cmp	r3, #13
 800b5ac:	d005      	beq.n	800b5ba <CMD_Process+0xba>
 800b5ae:	4b43      	ldr	r3, [pc, #268]	; (800b6bc <CMD_Process+0x1bc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a45      	ldr	r2, [pc, #276]	; (800b6c8 <CMD_Process+0x1c8>)
 800b5b4:	5cd3      	ldrb	r3, [r2, r3]
 800b5b6:	2b0a      	cmp	r3, #10
 800b5b8:	d13d      	bne.n	800b636 <CMD_Process+0x136>
    {
      ridx++;
 800b5ba:	4b40      	ldr	r3, [pc, #256]	; (800b6bc <CMD_Process+0x1bc>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	4a3e      	ldr	r2, [pc, #248]	; (800b6bc <CMD_Process+0x1bc>)
 800b5c2:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800b5c4:	4b3d      	ldr	r3, [pc, #244]	; (800b6bc <CMD_Process+0x1bc>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b50      	cmp	r3, #80	; 0x50
 800b5ca:	d102      	bne.n	800b5d2 <CMD_Process+0xd2>
      {
        ridx = 0;
 800b5cc:	4b3b      	ldr	r3, [pc, #236]	; (800b6bc <CMD_Process+0x1bc>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d6:	617b      	str	r3, [r7, #20]
  return(result);
 800b5d8:	697b      	ldr	r3, [r7, #20]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800b5dc:	b672      	cpsid	i
}
 800b5de:	bf00      	nop
      charCount--;
 800b5e0:	4b37      	ldr	r3, [pc, #220]	; (800b6c0 <CMD_Process+0x1c0>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	4a36      	ldr	r2, [pc, #216]	; (800b6c0 <CMD_Process+0x1c0>)
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	f383 8810 	msr	PRIMASK, r3
}
 800b5f4:	bf00      	nop
      UTILS_EXIT_CRITICAL_SECTION();

      if (i != 0)
 800b5f6:	4b33      	ldr	r3, [pc, #204]	; (800b6c4 <CMD_Process+0x1c4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d04f      	beq.n	800b69e <CMD_Process+0x19e>
      {
        command[i] = '\0';
 800b5fe:	4b31      	ldr	r3, [pc, #196]	; (800b6c4 <CMD_Process+0x1c4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a32      	ldr	r2, [pc, #200]	; (800b6cc <CMD_Process+0x1cc>)
 800b604:	2100      	movs	r1, #0
 800b606:	54d1      	strb	r1, [r2, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b608:	f3ef 8310 	mrs	r3, PRIMASK
 800b60c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b60e:	68fb      	ldr	r3, [r7, #12]
        UTILS_ENTER_CRITICAL_SECTION();
 800b610:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800b612:	b672      	cpsid	i
}
 800b614:	bf00      	nop
        CMD_ProcessBackSpace(command);
 800b616:	482d      	ldr	r0, [pc, #180]	; (800b6cc <CMD_Process+0x1cc>)
 800b618:	f000 f85a 	bl	800b6d0 <CMD_ProcessBackSpace>
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f383 8810 	msr	PRIMASK, r3
}
 800b626:	bf00      	nop
        UTILS_EXIT_CRITICAL_SECTION();
        parse_cmd(command);
 800b628:	4828      	ldr	r0, [pc, #160]	; (800b6cc <CMD_Process+0x1cc>)
 800b62a:	f000 f8fb 	bl	800b824 <parse_cmd>
        i = 0;
 800b62e:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <CMD_Process+0x1c4>)
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
    {
 800b634:	e033      	b.n	800b69e <CMD_Process+0x19e>
      }
    }
    else if (i == (CMD_SIZE - 1))
 800b636:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <CMD_Process+0x1c4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f240 221b 	movw	r2, #539	; 0x21b
 800b63e:	4293      	cmp	r3, r2
 800b640:	d106      	bne.n	800b650 <CMD_Process+0x150>
    {
      i = 0;
 800b642:	4b20      	ldr	r3, [pc, #128]	; (800b6c4 <CMD_Process+0x1c4>)
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
      com_error(AT_TEST_PARAM_OVERFLOW);
 800b648:	2004      	movs	r0, #4
 800b64a:	f000 f9b1 	bl	800b9b0 <com_error>
 800b64e:	e026      	b.n	800b69e <CMD_Process+0x19e>
    }
    else
    {
      command[i++] = circBuffer[ridx++];
 800b650:	4b1a      	ldr	r3, [pc, #104]	; (800b6bc <CMD_Process+0x1bc>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	1c53      	adds	r3, r2, #1
 800b656:	4919      	ldr	r1, [pc, #100]	; (800b6bc <CMD_Process+0x1bc>)
 800b658:	600b      	str	r3, [r1, #0]
 800b65a:	4b1a      	ldr	r3, [pc, #104]	; (800b6c4 <CMD_Process+0x1c4>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	1c59      	adds	r1, r3, #1
 800b660:	4818      	ldr	r0, [pc, #96]	; (800b6c4 <CMD_Process+0x1c4>)
 800b662:	6001      	str	r1, [r0, #0]
 800b664:	4918      	ldr	r1, [pc, #96]	; (800b6c8 <CMD_Process+0x1c8>)
 800b666:	5c89      	ldrb	r1, [r1, r2]
 800b668:	4a18      	ldr	r2, [pc, #96]	; (800b6cc <CMD_Process+0x1cc>)
 800b66a:	54d1      	strb	r1, [r2, r3]
      if (ridx == CIRC_BUFF_SIZE)
 800b66c:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <CMD_Process+0x1bc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b50      	cmp	r3, #80	; 0x50
 800b672:	d102      	bne.n	800b67a <CMD_Process+0x17a>
      {
        ridx = 0;
 800b674:	4b11      	ldr	r3, [pc, #68]	; (800b6bc <CMD_Process+0x1bc>)
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b67a:	f3ef 8310 	mrs	r3, PRIMASK
 800b67e:	607b      	str	r3, [r7, #4]
  return(result);
 800b680:	687b      	ldr	r3, [r7, #4]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b682:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 800b684:	b672      	cpsid	i
}
 800b686:	bf00      	nop
      charCount--;
 800b688:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <CMD_Process+0x1c0>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	4a0c      	ldr	r2, [pc, #48]	; (800b6c0 <CMD_Process+0x1c0>)
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f383 8810 	msr	PRIMASK, r3
}
 800b69c:	bf00      	nop
  while (charCount != 0)
 800b69e:	4b08      	ldr	r3, [pc, #32]	; (800b6c0 <CMD_Process+0x1c0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f47f af52 	bne.w	800b54c <CMD_Process+0x4c>
    }
  }
  /* USER CODE BEGIN CMD_Process_2 */

  /* USER CODE END CMD_Process_2 */
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	3740      	adds	r7, #64	; 0x40
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001004 	.word	0x20001004
 800b6b8:	20000ff8 	.word	0x20000ff8
 800b6bc:	20000ffc 	.word	0x20000ffc
 800b6c0:	20001000 	.word	0x20001000
 800b6c4:	20000ff4 	.word	0x20000ff4
 800b6c8:	20000d88 	.word	0x20000d88
 800b6cc:	20000dd8 	.word	0x20000dd8

0800b6d0 <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b089      	sub	sp, #36	; 0x24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
  uint32_t bs_cnt = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	61bb      	str	r3, [r7, #24]
  uint32_t cmd_len = 0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 800b6e4:	e00b      	b.n	800b6fe <CMD_ProcessBackSpace+0x2e>
  {
    if (cmd[cmd_len] == '\b')
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d102      	bne.n	800b6f8 <CMD_ProcessBackSpace+0x28>
    {
      bs_cnt++;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	61bb      	str	r3, [r7, #24]
    }
    cmd_len++;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	617b      	str	r3, [r7, #20]
  while (cmd[cmd_len] != '\0')
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	4413      	add	r3, r2
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1ed      	bne.n	800b6e6 <CMD_ProcessBackSpace+0x16>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	e03f      	b.n	800b790 <CMD_ProcessBackSpace+0xc0>
  {
    int curs = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
    int j = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
 800b718:	e002      	b.n	800b720 <CMD_ProcessBackSpace+0x50>
    {
      curs++;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	3301      	adds	r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
    while (cmd[curs] != '\b')
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	4413      	add	r3, r2
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b08      	cmp	r3, #8
 800b72a:	d1f6      	bne.n	800b71a <CMD_ProcessBackSpace+0x4a>
    }
    if (curs > 0)
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dd28      	ble.n	800b784 <CMD_ProcessBackSpace+0xb4>
    {
      for (j = curs - 1; j < cmd_len - 2; j++)
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3b01      	subs	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e00b      	b.n	800b752 <CMD_ProcessBackSpace+0x82>
      {
        cmd[j] = cmd[j + 2];
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3302      	adds	r3, #2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	441a      	add	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	440b      	add	r3, r1
 800b748:	7812      	ldrb	r2, [r2, #0]
 800b74a:	701a      	strb	r2, [r3, #0]
      for (j = curs - 1; j < cmd_len - 2; j++)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	1e9a      	subs	r2, r3, #2
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d8ee      	bhi.n	800b73a <CMD_ProcessBackSpace+0x6a>
      }
      cmd[j++] = '\0';
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	60fa      	str	r2, [r7, #12]
 800b762:	461a      	mov	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4413      	add	r3, r2
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
      cmd[j++] = '\0';
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	60fa      	str	r2, [r7, #12]
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4413      	add	r3, r2
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
      cmd_len -= 2;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	3b02      	subs	r3, #2
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	e002      	b.n	800b78a <CMD_ProcessBackSpace+0xba>
    }
    else
    {
      return -1;
 800b784:	f04f 33ff 	mov.w	r3, #4294967295
 800b788:	e007      	b.n	800b79a <CMD_ProcessBackSpace+0xca>
  for (i = 0; i < bs_cnt; i++)
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	3301      	adds	r3, #1
 800b78e:	61fb      	str	r3, [r7, #28]
 800b790:	69fa      	ldr	r2, [r7, #28]
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d3bb      	bcc.n	800b710 <CMD_ProcessBackSpace+0x40>
    }
  }
  return 0;
 800b798:	2300      	movs	r3, #0
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3724      	adds	r7, #36	; 0x24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr

0800b7a4 <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	807b      	strh	r3, [r7, #2]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	707b      	strb	r3, [r7, #1]
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 800b7b4:	4b16      	ldr	r3, [pc, #88]	; (800b810 <CMD_GetChar+0x6c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	4a15      	ldr	r2, [pc, #84]	; (800b810 <CMD_GetChar+0x6c>)
 800b7bc:	6013      	str	r3, [r2, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 800b7be:	4b14      	ldr	r3, [pc, #80]	; (800b810 <CMD_GetChar+0x6c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b51      	cmp	r3, #81	; 0x51
 800b7c4:	d108      	bne.n	800b7d8 <CMD_GetChar+0x34>
  {
    circBuffOverflow = 1;
 800b7c6:	4b13      	ldr	r3, [pc, #76]	; (800b814 <CMD_GetChar+0x70>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
    charCount--;
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <CMD_GetChar+0x6c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	4a0f      	ldr	r2, [pc, #60]	; (800b810 <CMD_GetChar+0x6c>)
 800b7d4:	6013      	str	r3, [r2, #0]
 800b7d6:	e00f      	b.n	800b7f8 <CMD_GetChar+0x54>
  }
  else
  {
    circBuffer[widx++] = *rxChar;
 800b7d8:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <CMD_GetChar+0x74>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	490e      	ldr	r1, [pc, #56]	; (800b818 <CMD_GetChar+0x74>)
 800b7e0:	600a      	str	r2, [r1, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	7811      	ldrb	r1, [r2, #0]
 800b7e6:	4a0d      	ldr	r2, [pc, #52]	; (800b81c <CMD_GetChar+0x78>)
 800b7e8:	54d1      	strb	r1, [r2, r3]
    if (widx == CIRC_BUFF_SIZE)
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <CMD_GetChar+0x74>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b50      	cmp	r3, #80	; 0x50
 800b7f0:	d102      	bne.n	800b7f8 <CMD_GetChar+0x54>
    {
      widx = 0;
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <CMD_GetChar+0x74>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
    }
  }

  if (NotifyCb != NULL)
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <CMD_GetChar+0x7c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <CMD_GetChar+0x62>
  {
    NotifyCb();
 800b800:	4b07      	ldr	r3, [pc, #28]	; (800b820 <CMD_GetChar+0x7c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20001000 	.word	0x20001000
 800b814:	20001004 	.word	0x20001004
 800b818:	20000ff8 	.word	0x20000ff8
 800b81c:	20000d88 	.word	0x20000d88
 800b820:	20001008 	.word	0x20001008

0800b824 <parse_cmd>:

static void parse_cmd(const char *cmd)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN parse_cmd_1 */

  /* USER CODE END parse_cmd_1 */
  ATEerror_t status = AT_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	75fb      	strb	r3, [r7, #23]
  const struct ATCommand_s *Current_ATCommand;
  int32_t i;

  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b41      	cmp	r3, #65	; 0x41
 800b836:	d104      	bne.n	800b842 <parse_cmd+0x1e>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3301      	adds	r3, #1
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b54      	cmp	r3, #84	; 0x54
 800b840:	d002      	beq.n	800b848 <parse_cmd+0x24>
  {
    status = AT_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	75fb      	strb	r3, [r7, #23]
 800b846:	e0a7      	b.n	800b998 <parse_cmd+0x174>
  }
  else if (cmd[2] == '\0')
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3302      	adds	r3, #2
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80a2 	beq.w	800b998 <parse_cmd+0x174>
  {
    /* status = AT_OK; */
  }
  else if (cmd[2] == '?')
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3302      	adds	r3, #2
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b3f      	cmp	r3, #63	; 0x3f
 800b85c:	d129      	bne.n	800b8b2 <parse_cmd+0x8e>
  {
#ifdef NO_HELP
#else
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800b85e:	4b52      	ldr	r3, [pc, #328]	; (800b9a8 <parse_cmd+0x184>)
 800b860:	2200      	movs	r2, #0
 800b862:	2100      	movs	r1, #0
 800b864:	2000      	movs	r0, #0
 800b866:	f012 ffe3 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1f6      	bne.n	800b85e <parse_cmd+0x3a>
               "AT+<CMD>         : Run <CMD>\r\n"
               "AT+<CMD>=<value> : Set the value\r\n"
               "AT+<CMD>=?       : Get the value\r\n");
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b870:	2300      	movs	r3, #0
 800b872:	613b      	str	r3, [r7, #16]
 800b874:	e013      	b.n	800b89e <parse_cmd+0x7a>
    {
      AT_PPRINTF(ATCommand[i].help_string);
 800b876:	494d      	ldr	r1, [pc, #308]	; (800b9ac <parse_cmd+0x188>)
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	4613      	mov	r3, r2
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	4413      	add	r3, r2
 800b880:	00db      	lsls	r3, r3, #3
 800b882:	440b      	add	r3, r1
 800b884:	3314      	adds	r3, #20
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2200      	movs	r2, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	2000      	movs	r0, #0
 800b88e:	f012 ffcf 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1ee      	bne.n	800b876 <parse_cmd+0x52>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	3301      	adds	r3, #1
 800b89c:	613b      	str	r3, [r7, #16]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b24      	cmp	r3, #36	; 0x24
 800b8a2:	d9e8      	bls.n	800b876 <parse_cmd+0x52>
    }

    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b8a4:	bf00      	nop
 800b8a6:	f012 ffa1 	bl	801e7ec <UTIL_ADV_TRACE_IsBufferEmpty>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d1fa      	bne.n	800b8a6 <parse_cmd+0x82>
 800b8b0:	e072      	b.n	800b998 <parse_cmd+0x174>
#endif /* !NO_HELP */
  }
  else
  {
    /* point to the start of the command, excluding AT */
    status = AT_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	75fb      	strb	r3, [r7, #23]
    cmd += 2;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	3302      	adds	r3, #2
 800b8ba:	607b      	str	r3, [r7, #4]
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	e067      	b.n	800b992 <parse_cmd+0x16e>
    {
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 800b8c2:	493a      	ldr	r1, [pc, #232]	; (800b9ac <parse_cmd+0x188>)
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	440b      	add	r3, r1
 800b8d0:	6819      	ldr	r1, [r3, #0]
 800b8d2:	4836      	ldr	r0, [pc, #216]	; (800b9ac <parse_cmd+0x188>)
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	4413      	add	r3, r2
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	4403      	add	r3, r0
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f015 f8ac 	bl	8020a44 <strncmp>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d14c      	bne.n	800b98c <parse_cmd+0x168>
      {
        Current_ATCommand = &(ATCommand[i]);
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	4413      	add	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4a2b      	ldr	r2, [pc, #172]	; (800b9ac <parse_cmd+0x188>)
 800b8fe:	4413      	add	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]
        /* point to the string after the command to parse it */
        cmd += Current_ATCommand->size_string;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	461a      	mov	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	607b      	str	r3, [r7, #4]

        /* parse after the command */
        switch (cmd[0])
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2b3f      	cmp	r3, #63	; 0x3f
 800b914:	d02b      	beq.n	800b96e <parse_cmd+0x14a>
 800b916:	2b3f      	cmp	r3, #63	; 0x3f
 800b918:	dc36      	bgt.n	800b988 <parse_cmd+0x164>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <parse_cmd+0x100>
 800b91e:	2b3d      	cmp	r3, #61	; 0x3d
 800b920:	d007      	beq.n	800b932 <parse_cmd+0x10e>
#endif /* !NO_HELP */
            status = AT_OK;
            break;
          default:
            /* not recognized */
            break;
 800b922:	e031      	b.n	800b988 <parse_cmd+0x164>
            status = Current_ATCommand->run(cmd);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
 800b92c:	4603      	mov	r3, r0
 800b92e:	75fb      	strb	r3, [r7, #23]
            break;
 800b930:	e02b      	b.n	800b98a <parse_cmd+0x166>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3301      	adds	r3, #1
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b3f      	cmp	r3, #63	; 0x3f
 800b93a:	d10e      	bne.n	800b95a <parse_cmd+0x136>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3302      	adds	r3, #2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d109      	bne.n	800b95a <parse_cmd+0x136>
              status = Current_ATCommand->get(cmd + 1);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	3201      	adds	r2, #1
 800b94e:	4610      	mov	r0, r2
 800b950:	4798      	blx	r3
 800b952:	4603      	mov	r3, r0
 800b954:	75fb      	strb	r3, [r7, #23]
 800b956:	bf00      	nop
            break;
 800b958:	e017      	b.n	800b98a <parse_cmd+0x166>
              status = Current_ATCommand->set(cmd + 1);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	3201      	adds	r2, #1
 800b962:	4610      	mov	r0, r2
 800b964:	4798      	blx	r3
 800b966:	4603      	mov	r3, r0
 800b968:	75fb      	strb	r3, [r7, #23]
            break;
 800b96a:	e00e      	b.n	800b98a <parse_cmd+0x166>
          case '?':
 800b96c:	bf00      	nop
            AT_PPRINTF(Current_ATCommand->help_string);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	2200      	movs	r2, #0
 800b974:	2100      	movs	r1, #0
 800b976:	2000      	movs	r0, #0
 800b978:	f012 ff5a 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f4      	bne.n	800b96c <parse_cmd+0x148>
            status = AT_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]
            break;
 800b986:	e000      	b.n	800b98a <parse_cmd+0x166>
            break;
 800b988:	bf00      	nop
        }

        /* we end the loop as the command was found */
        break;
 800b98a:	e005      	b.n	800b998 <parse_cmd+0x174>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	3301      	adds	r3, #1
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b24      	cmp	r3, #36	; 0x24
 800b996:	d994      	bls.n	800b8c2 <parse_cmd+0x9e>
      }
    }
  }

  com_error(status);
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f808 	bl	800b9b0 <com_error>
  /* USER CODE BEGIN parse_cmd_2 */

  /* USER CODE END parse_cmd_2 */
}
 800b9a0:	bf00      	nop
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	080223c0 	.word	0x080223c0
 800b9ac:	08022ba0 	.word	0x08022ba0

0800b9b0 <com_error>:

static void com_error(ATEerror_t error_type)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	2b0a      	cmp	r3, #10
 800b9be:	d901      	bls.n	800b9c4 <com_error+0x14>
  {
    error_type = AT_MAX;
 800b9c0:	230a      	movs	r3, #10
 800b9c2:	71fb      	strb	r3, [r7, #7]
  }
  AT_PPRINTF(ATError_description[error_type]);
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	4a08      	ldr	r2, [pc, #32]	; (800b9e8 <com_error+0x38>)
 800b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f012 ff2d 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1f3      	bne.n	800b9c4 <com_error+0x14>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 800b9dc:	bf00      	nop
 800b9de:	bf00      	nop
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	08022b74 	.word	0x08022b74

0800b9ec <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b9f0:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <LoraInfo_Init+0x68>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b9f6:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <LoraInfo_Init+0x68>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b9fc:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <LoraInfo_Init+0x68>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ba02:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f043 0320 	orr.w	r3, r3, #32
 800ba10:	4a10      	ldr	r2, [pc, #64]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba12:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800ba14:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba1c:	4a0d      	ldr	r2, [pc, #52]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba1e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ba20:	4b0c      	ldr	r3, [pc, #48]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10c      	bne.n	800ba42 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <LoraInfo_Init+0x6c>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	2000      	movs	r0, #0
 800ba30:	f012 fefe 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ba34:	bf00      	nop
 800ba36:	f012 fed9 	bl	801e7ec <UTIL_ADV_TRACE_IsBufferEmpty>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d1fa      	bne.n	800ba36 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ba40:	e7fe      	b.n	800ba40 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ba42:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ba48:	4b02      	ldr	r3, [pc, #8]	; (800ba54 <LoraInfo_Init+0x68>)
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ba4e:	bf00      	nop
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2000100c 	.word	0x2000100c
 800ba58:	08022448 	.word	0x08022448

0800ba5c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ba60:	4b02      	ldr	r3, [pc, #8]	; (800ba6c <LoraInfo_GetPtr+0x10>)
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	2000100c 	.word	0x2000100c

0800ba70 <TST_TxTone>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t TST_TxTone(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_TxTone_1 */

  /* USER CODE END TST_TxTone_1 */
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 800ba74:	4b11      	ldr	r3, [pc, #68]	; (800babc <TST_TxTone+0x4c>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d118      	bne.n	800bab2 <TST_TxTone+0x42>
  {
    TestState |= TX_TEST_TONE;
 800ba80:	4b0e      	ldr	r3, [pc, #56]	; (800babc <TST_TxTone+0x4c>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f043 0301 	orr.w	r3, r3, #1
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b0c      	ldr	r3, [pc, #48]	; (800babc <TST_TxTone+0x4c>)
 800ba8c:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx FSK Test\r\n");
 800ba8e:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <TST_TxTone+0x50>)
 800ba90:	2201      	movs	r2, #1
 800ba92:	2100      	movs	r1, #0
 800ba94:	2000      	movs	r0, #0
 800ba96:	f012 fecb 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <TST_TxTone+0x54>)
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	4a0a      	ldr	r2, [pc, #40]	; (800bac8 <TST_TxTone+0x58>)
 800baa0:	6850      	ldr	r0, [r2, #4]
 800baa2:	4a09      	ldr	r2, [pc, #36]	; (800bac8 <TST_TxTone+0x58>)
 800baa4:	6892      	ldr	r2, [r2, #8]
 800baa6:	b251      	sxtb	r1, r2
 800baa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baac:	4798      	blx	r3

    return 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	e001      	b.n	800bab6 <TST_TxTone+0x46>
  }
  else
  {
    return -1;
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_TxTone_2 */

  /* USER CODE END TST_TxTone_2 */
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000101c 	.word	0x2000101c
 800bac0:	08022498 	.word	0x08022498
 800bac4:	080232e4 	.word	0x080232e4
 800bac8:	2000005c 	.word	0x2000005c

0800bacc <TST_RxRssi>:

int32_t TST_RxRssi(void)
{
 800bacc:	b590      	push	{r4, r7, lr}
 800bace:	b097      	sub	sp, #92	; 0x5c
 800bad0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TST_RxRssi_1 */

  /* USER CODE END TST_RxRssi_1 */
  uint32_t timeout = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  int16_t rssiVal = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  RxConfigGeneric_t RxConfig;
  /* Test with LNA */
  /* check that test is not already started*/
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 800badc:	4b43      	ldr	r3, [pc, #268]	; (800bbec <TST_RxRssi+0x120>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d17a      	bne.n	800bbde <TST_RxRssi+0x112>
  {
    TestState |= RX_TEST_RSSI;
 800bae8:	4b40      	ldr	r3, [pc, #256]	; (800bbec <TST_RxRssi+0x120>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f043 0302 	orr.w	r3, r3, #2
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	4b3e      	ldr	r3, [pc, #248]	; (800bbec <TST_RxRssi+0x120>)
 800baf4:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Rx FSK Test\r\n");
 800baf6:	4b3e      	ldr	r3, [pc, #248]	; (800bbf0 <TST_RxRssi+0x124>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	2100      	movs	r1, #0
 800bafc:	2000      	movs	r0, #0
 800bafe:	f012 fe97 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetChannel(testParam.freq);
 800bb02:	4b3c      	ldr	r3, [pc, #240]	; (800bbf4 <TST_RxRssi+0x128>)
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	4a3c      	ldr	r2, [pc, #240]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb08:	6852      	ldr	r2, [r2, #4]
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	4798      	blx	r3

    /* RX Continuous */
    uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bb0e:	4a3b      	ldr	r2, [pc, #236]	; (800bbfc <TST_RxRssi+0x130>)
 800bb10:	1d3b      	adds	r3, r7, #4
 800bb12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb16:	e883 0003 	stmia.w	r3, {r0, r1}
    RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800bb1a:	4b37      	ldr	r3, [pc, #220]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <TST_RxRssi+0x60>
 800bb22:	4b35      	ldr	r3, [pc, #212]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb26:	3308      	adds	r3, #8
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	e000      	b.n	800bb2e <TST_RxRssi+0x62>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	743b      	strb	r3, [r7, #16]
    RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bb30:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	617b      	str	r3, [r7, #20]
    RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bb36:	4b30      	ldr	r3, [pc, #192]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	61bb      	str	r3, [r7, #24]
    RxConfig.fsk.PreambleLen = 3;   /*in Byte*/
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	61fb      	str	r3, [r7, #28]
    RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800bb40:	2303      	movs	r3, #3
 800bb42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bb46:	1d3b      	adds	r3, r7, #4
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
    RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800bb4a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bb4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bb56:	23f2      	movs	r3, #242	; 0xf2
 800bb58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    RxConfig.fsk.CrcPolynomial = 0x1021;
 800bb5c:	f241 0321 	movw	r3, #4129	; 0x1021
 800bb60:	867b      	strh	r3, [r7, #50]	; 0x32
    RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800bb62:	2301      	movs	r3, #1
 800bb64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800bb68:	4b22      	ldr	r3, [pc, #136]	; (800bbf4 <TST_RxRssi+0x128>)
 800bb6a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800bb6c:	f107 010c 	add.w	r1, r7, #12
 800bb70:	2300      	movs	r3, #0
 800bb72:	2201      	movs	r2, #1
 800bb74:	2000      	movs	r0, #0
 800bb76:	47a0      	blx	r4

    timeout = 0xFFFFFF; /* continuous Rx */
 800bb78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bb7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (testParam.lna == 0)
 800bb7e:	4b1e      	ldr	r3, [pc, #120]	; (800bbf8 <TST_RxRssi+0x12c>)
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d104      	bne.n	800bb90 <TST_RxRssi+0xc4>
    {
      Radio.Rx(timeout);
 800bb86:	4b1b      	ldr	r3, [pc, #108]	; (800bbf4 <TST_RxRssi+0x128>)
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb8c:	4798      	blx	r3
 800bb8e:	e003      	b.n	800bb98 <TST_RxRssi+0xcc>
    }
    else
    {
      Radio.RxBoosted(timeout);
 800bb90:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <TST_RxRssi+0x128>)
 800bb92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb96:	4798      	blx	r3
    }

    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 800bb98:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <TST_RxRssi+0x128>)
 800bb9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb9c:	4798      	blx	r3
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7f5 fea2 	bl	80018ea <HAL_Delay>

    rssiVal = Radio.Rssi(MODEM_FSK);
 800bba6:	4b13      	ldr	r3, [pc, #76]	; (800bbf4 <TST_RxRssi+0x128>)
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	2000      	movs	r0, #0
 800bbac:	4798      	blx	r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 800bbb4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	4b11      	ldr	r3, [pc, #68]	; (800bc00 <TST_RxRssi+0x134>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f012 fe35 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    Radio.Sleep();
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <TST_RxRssi+0x128>)
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <TST_RxRssi+0x120>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f023 0302 	bic.w	r3, r3, #2
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4b05      	ldr	r3, [pc, #20]	; (800bbec <TST_RxRssi+0x120>)
 800bbd8:	701a      	strb	r2, [r3, #0]
    return 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e001      	b.n	800bbe2 <TST_RxRssi+0x116>
  }
  else
  {
    return -1;
 800bbde:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_RxRssi_2 */

  /* USER CODE END TST_RxRssi_2 */
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3754      	adds	r7, #84	; 0x54
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd90      	pop	{r4, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	2000101c 	.word	0x2000101c
 800bbf0:	080224a8 	.word	0x080224a8
 800bbf4:	080232e4 	.word	0x080232e4
 800bbf8:	2000005c 	.word	0x2000005c
 800bbfc:	080224d4 	.word	0x080224d4
 800bc00:	080224b8 	.word	0x080224b8

0800bc04 <TST_set_config>:

int32_t  TST_set_config(testParameter_t *Param)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_set_config_1 */

  /* USER CODE END TST_set_config_1 */
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 800bc0c:	2230      	movs	r2, #48	; 0x30
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	4803      	ldr	r0, [pc, #12]	; (800bc20 <TST_set_config+0x1c>)
 800bc12:	f013 f8ff 	bl	801ee14 <UTIL_MEM_cpy_8>

  return 0;
 800bc16:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_set_config_2 */

  /* USER CODE END TST_set_config_2 */
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	2000005c 	.word	0x2000005c

0800bc24 <TST_get_config>:

int32_t TST_get_config(testParameter_t *Param)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_get_config_1 */

  /* USER CODE END TST_get_config_1 */
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 800bc2c:	2230      	movs	r2, #48	; 0x30
 800bc2e:	4904      	ldr	r1, [pc, #16]	; (800bc40 <TST_get_config+0x1c>)
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f013 f8ef 	bl	801ee14 <UTIL_MEM_cpy_8>
  return 0;
 800bc36:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_get_config_2 */

  /* USER CODE END TST_get_config_2 */
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	2000005c 	.word	0x2000005c

0800bc44 <TST_stop>:

int32_t TST_stop(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_stop_1 */

  /* USER CODE END TST_stop_1 */
  TestState = 0;
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <TST_stop+0x18>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	701a      	strb	r2, [r3, #0]

  /* Set the radio in Sleep*/
  Radio.Sleep();
 800bc4e:	4b04      	ldr	r3, [pc, #16]	; (800bc60 <TST_stop+0x1c>)
 800bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc52:	4798      	blx	r3

  return 0;
 800bc54:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_stop_2 */

  /* USER CODE END TST_stop_2 */
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	2000101c 	.word	0x2000101c
 800bc60:	080232e4 	.word	0x080232e4

0800bc64 <TST_TX_Start>:

int32_t TST_TX_Start(int32_t nb_packet)
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b097      	sub	sp, #92	; 0x5c
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	6078      	str	r0, [r7, #4]

  /* USER CODE END TST_TX_Start_1 */
  int32_t i;
  TxConfigGeneric_t TxConfig;

  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 800bc6c:	4b8c      	ldr	r3, [pc, #560]	; (800bea0 <TST_TX_Start+0x23c>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f040 810c 	bne.w	800be92 <TST_TX_Start+0x22e>
  {
    TestState |= TX_TEST_LORA;
 800bc7a:	4b89      	ldr	r3, [pc, #548]	; (800bea0 <TST_TX_Start+0x23c>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	f043 0304 	orr.w	r3, r3, #4
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	4b86      	ldr	r3, [pc, #536]	; (800bea0 <TST_TX_Start+0x23c>)
 800bc86:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx LoRa Test\r\n");
 800bc88:	4b86      	ldr	r3, [pc, #536]	; (800bea4 <TST_TX_Start+0x240>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f012 fdce 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800bc94:	4b84      	ldr	r3, [pc, #528]	; (800bea8 <TST_TX_Start+0x244>)
 800bc96:	4a85      	ldr	r2, [pc, #532]	; (800beac <TST_TX_Start+0x248>)
 800bc98:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800bc9a:	4b83      	ldr	r3, [pc, #524]	; (800bea8 <TST_TX_Start+0x244>)
 800bc9c:	4a84      	ldr	r2, [pc, #528]	; (800beb0 <TST_TX_Start+0x24c>)
 800bc9e:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800bca0:	4b81      	ldr	r3, [pc, #516]	; (800bea8 <TST_TX_Start+0x244>)
 800bca2:	4a84      	ldr	r2, [pc, #528]	; (800beb4 <TST_TX_Start+0x250>)
 800bca4:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800bca6:	4b80      	ldr	r3, [pc, #512]	; (800bea8 <TST_TX_Start+0x244>)
 800bca8:	4a83      	ldr	r2, [pc, #524]	; (800beb8 <TST_TX_Start+0x254>)
 800bcaa:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800bcac:	4b7e      	ldr	r3, [pc, #504]	; (800bea8 <TST_TX_Start+0x244>)
 800bcae:	4a83      	ldr	r2, [pc, #524]	; (800bebc <TST_TX_Start+0x258>)
 800bcb0:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800bcb2:	4b83      	ldr	r3, [pc, #524]	; (800bec0 <TST_TX_Start+0x25c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	487c      	ldr	r0, [pc, #496]	; (800bea8 <TST_TX_Start+0x244>)
 800bcb8:	4798      	blx	r3
    /*Fill payload with PRBS9 data*/
    Prbs9_generator(payload, testParam.payloadLen);
 800bcba:	4b82      	ldr	r3, [pc, #520]	; (800bec4 <TST_TX_Start+0x260>)
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4881      	ldr	r0, [pc, #516]	; (800bec8 <TST_TX_Start+0x264>)
 800bcc4:	f000 fada 	bl	800c27c <Prbs9_generator>

    /* Launch several times payload: nb times given by user */
    for (i = 1; i <= nb_packet; i++)
 800bcc8:	2301      	movs	r3, #1
 800bcca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bccc:	e0d3      	b.n	800be76 <TST_TX_Start+0x212>
    {
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	4b7d      	ldr	r3, [pc, #500]	; (800becc <TST_TX_Start+0x268>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	2100      	movs	r1, #0
 800bcdc:	2000      	movs	r0, #0
 800bcde:	f012 fda7 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 800bce2:	4b77      	ldr	r3, [pc, #476]	; (800bec0 <TST_TX_Start+0x25c>)
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	4a77      	ldr	r2, [pc, #476]	; (800bec4 <TST_TX_Start+0x260>)
 800bce8:	6852      	ldr	r2, [r2, #4]
 800bcea:	4610      	mov	r0, r2
 800bcec:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800bcee:	4b75      	ldr	r3, [pc, #468]	; (800bec4 <TST_TX_Start+0x260>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d13d      	bne.n	800bd72 <TST_TX_Start+0x10e>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bcf6:	4a76      	ldr	r2, [pc, #472]	; (800bed0 <TST_TX_Start+0x26c>)
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd00:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800bd04:	4b6f      	ldr	r3, [pc, #444]	; (800bec4 <TST_TX_Start+0x260>)
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d004      	beq.n	800bd16 <TST_TX_Start+0xb2>
 800bd0c:	4b6d      	ldr	r3, [pc, #436]	; (800bec4 <TST_TX_Start+0x260>)
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	3307      	adds	r3, #7
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	e000      	b.n	800bd18 <TST_TX_Start+0xb4>
 800bd16:	2300      	movs	r3, #0
 800bd18:	753b      	strb	r3, [r7, #20]
        TxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bd1a:	4b6a      	ldr	r3, [pc, #424]	; (800bec4 <TST_TX_Start+0x260>)
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	61bb      	str	r3, [r7, #24]
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 800bd20:	4b68      	ldr	r3, [pc, #416]	; (800bec4 <TST_TX_Start+0x260>)
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	623b      	str	r3, [r7, #32]
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bd26:	4b67      	ldr	r3, [pc, #412]	; (800bec4 <TST_TX_Start+0x260>)
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	61fb      	str	r3, [r7, #28]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800bd30:	2303      	movs	r3, #3
 800bd32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bd36:	f107 030c 	add.w	r3, r7, #12
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        TxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed  */
 800bd3c:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bd40:	863b      	strh	r3, [r7, #48]	; 0x30
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bd42:	2301      	movs	r3, #1
 800bd44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bd48:	23f2      	movs	r3, #242	; 0xf2
 800bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800bd4e:	f241 0321 	movw	r3, #4129	; 0x1021
 800bd52:	86bb      	strh	r3, [r7, #52]	; 0x34
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800bd54:	2300      	movs	r3, #0
 800bd56:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bd5a:	4b59      	ldr	r3, [pc, #356]	; (800bec0 <TST_TX_Start+0x25c>)
 800bd5c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bd5e:	4b59      	ldr	r3, [pc, #356]	; (800bec4 <TST_TX_Start+0x260>)
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	b25a      	sxtb	r2, r3
 800bd64:	f107 0114 	add.w	r1, r7, #20
 800bd68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	47a0      	blx	r4
 800bd70:	e045      	b.n	800bdfe <TST_TX_Start+0x19a>
      }
      else if (testParam.modulation == TEST_LORA)
 800bd72:	4b54      	ldr	r3, [pc, #336]	; (800bec4 <TST_TX_Start+0x260>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d12b      	bne.n	800bdd2 <TST_TX_Start+0x16e>
      {
        /*lora modulation*/
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800bd7a:	4b52      	ldr	r3, [pc, #328]	; (800bec4 <TST_TX_Start+0x260>)
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800bd84:	4b4f      	ldr	r3, [pc, #316]	; (800bec4 <TST_TX_Start+0x260>)
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800bd8e:	4b4d      	ldr	r3, [pc, #308]	; (800bec4 <TST_TX_Start+0x260>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800bd98:	4b4a      	ldr	r3, [pc, #296]	; (800bec4 <TST_TX_Start+0x260>)
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800bda2:	2308      	movs	r3, #8
 800bda4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bdba:	4b41      	ldr	r3, [pc, #260]	; (800bec0 <TST_TX_Start+0x25c>)
 800bdbc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bdbe:	4b41      	ldr	r3, [pc, #260]	; (800bec4 <TST_TX_Start+0x260>)
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	b25a      	sxtb	r2, r3
 800bdc4:	f107 0114 	add.w	r1, r7, #20
 800bdc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bdcc:	2001      	movs	r0, #1
 800bdce:	47a0      	blx	r4
 800bdd0:	e015      	b.n	800bdfe <TST_TX_Start+0x19a>
      }
      else if (testParam.modulation == TEST_BPSK)
 800bdd2:	4b3c      	ldr	r3, [pc, #240]	; (800bec4 <TST_TX_Start+0x260>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d10e      	bne.n	800bdf8 <TST_TX_Start+0x194>
      {
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bdda:	4b3a      	ldr	r3, [pc, #232]	; (800bec4 <TST_TX_Start+0x260>)
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	64bb      	str	r3, [r7, #72]	; 0x48
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bde0:	4b37      	ldr	r3, [pc, #220]	; (800bec0 <TST_TX_Start+0x25c>)
 800bde2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bde4:	4b37      	ldr	r3, [pc, #220]	; (800bec4 <TST_TX_Start+0x260>)
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	b25a      	sxtb	r2, r3
 800bdea:	f107 0114 	add.w	r1, r7, #20
 800bdee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bdf2:	2002      	movs	r0, #2
 800bdf4:	47a0      	blx	r4
 800bdf6:	e002      	b.n	800bdfe <TST_TX_Start+0x19a>
      }
      else
      {
        return -1; /*error*/
 800bdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfc:	e04b      	b.n	800be96 <TST_TX_Start+0x232>
      }
      /* Send payload once*/
      Radio.Send(payload, testParam.payloadLen);
 800bdfe:	4b30      	ldr	r3, [pc, #192]	; (800bec0 <TST_TX_Start+0x25c>)
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	4a30      	ldr	r2, [pc, #192]	; (800bec4 <TST_TX_Start+0x260>)
 800be04:	6a12      	ldr	r2, [r2, #32]
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	4611      	mov	r1, r2
 800be0a:	482f      	ldr	r0, [pc, #188]	; (800bec8 <TST_TX_Start+0x264>)
 800be0c:	4798      	blx	r3
      /* Wait Tx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800be0e:	2001      	movs	r0, #1
 800be10:	f013 f98a 	bl	801f128 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800be14:	4b2a      	ldr	r3, [pc, #168]	; (800bec0 <TST_TX_Start+0x25c>)
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	4798      	blx	r3

      if (RadioTxDone_flag == 1)
 800be1a:	4b2e      	ldr	r3, [pc, #184]	; (800bed4 <TST_TX_Start+0x270>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d105      	bne.n	800be2e <TST_TX_Start+0x1ca>
      {
        APP_TPRINTF("OnTxDone\r\n");
 800be22:	4b2d      	ldr	r3, [pc, #180]	; (800bed8 <TST_TX_Start+0x274>)
 800be24:	2201      	movs	r2, #1
 800be26:	2100      	movs	r1, #0
 800be28:	2000      	movs	r0, #0
 800be2a:	f012 fd01 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioTxTimeout_flag == 1)
 800be2e:	4b2b      	ldr	r3, [pc, #172]	; (800bedc <TST_TX_Start+0x278>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d105      	bne.n	800be42 <TST_TX_Start+0x1de>
      {
        APP_TPRINTF("OnTxTimeout\r\n");
 800be36:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <TST_TX_Start+0x27c>)
 800be38:	2201      	movs	r2, #1
 800be3a:	2100      	movs	r1, #0
 800be3c:	2000      	movs	r0, #0
 800be3e:	f012 fcf7 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800be42:	4b28      	ldr	r3, [pc, #160]	; (800bee4 <TST_TX_Start+0x280>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d105      	bne.n	800be56 <TST_TX_Start+0x1f2>
      {
        APP_TPRINTF("OnRxError\r\n");
 800be4a:	4b27      	ldr	r3, [pc, #156]	; (800bee8 <TST_TX_Start+0x284>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	2100      	movs	r1, #0
 800be50:	2000      	movs	r0, #0
 800be52:	f012 fced 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*Delay between 2 consecutive Tx*/
      HAL_Delay(500);
 800be56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be5a:	f7f5 fd46 	bl	80018ea <HAL_Delay>
      /* Reset TX Done or timeout flags */
      RadioTxDone_flag = 0;
 800be5e:	4b1d      	ldr	r3, [pc, #116]	; (800bed4 <TST_TX_Start+0x270>)
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]
      RadioTxTimeout_flag = 0;
 800be64:	4b1d      	ldr	r3, [pc, #116]	; (800bedc <TST_TX_Start+0x278>)
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800be6a:	4b1e      	ldr	r3, [pc, #120]	; (800bee4 <TST_TX_Start+0x280>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
    for (i = 1; i <= nb_packet; i++)
 800be70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be72:	3301      	adds	r3, #1
 800be74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	f77f af27 	ble.w	800bcce <TST_TX_Start+0x6a>
    }
    TestState &= ~TX_TEST_LORA;
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <TST_TX_Start+0x23c>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f023 0304 	bic.w	r3, r3, #4
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <TST_TX_Start+0x23c>)
 800be8c:	701a      	strb	r2, [r3, #0]
    return 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	e001      	b.n	800be96 <TST_TX_Start+0x232>
  }
  else
  {
    return -1;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_TX_Start_2 */

  /* USER CODE END TST_TX_Start_2 */
}
 800be96:	4618      	mov	r0, r3
 800be98:	3754      	adds	r7, #84	; 0x54
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd90      	pop	{r4, r7, pc}
 800be9e:	bf00      	nop
 800bea0:	2000101c 	.word	0x2000101c
 800bea4:	080224dc 	.word	0x080224dc
 800bea8:	20001038 	.word	0x20001038
 800beac:	0800c1d5 	.word	0x0800c1d5
 800beb0:	0800c1ed 	.word	0x0800c1ed
 800beb4:	0800c235 	.word	0x0800c235
 800beb8:	0800c24d 	.word	0x0800c24d
 800bebc:	0800c265 	.word	0x0800c265
 800bec0:	080232e4 	.word	0x080232e4
 800bec4:	2000005c 	.word	0x2000005c
 800bec8:	20001054 	.word	0x20001054
 800becc:	080224ec 	.word	0x080224ec
 800bed0:	080224d4 	.word	0x080224d4
 800bed4:	20001020 	.word	0x20001020
 800bed8:	080224fc 	.word	0x080224fc
 800bedc:	20001024 	.word	0x20001024
 800bee0:	08022508 	.word	0x08022508
 800bee4:	20001030 	.word	0x20001030
 800bee8:	08022518 	.word	0x08022518

0800beec <TST_RX_Start>:

int32_t TST_RX_Start(int32_t nb_packet)
{
 800beec:	b590      	push	{r4, r7, lr}
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	af04      	add	r7, sp, #16
 800bef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_RX_Start_1 */

  /* USER CODE END TST_RX_Start_1 */
  int32_t i;
  /* init of PER counter */
  uint32_t count_RxOk = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t count_RxKo = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t PER = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	653b      	str	r3, [r7, #80]	; 0x50
  RxConfigGeneric_t RxConfig = {0};
 800bf00:	f107 0310 	add.w	r3, r7, #16
 800bf04:	223c      	movs	r2, #60	; 0x3c
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f014 fd93 	bl	8020a34 <memset>

  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA) && (nb_packet > 0))
 800bf0e:	4b9c      	ldr	r3, [pc, #624]	; (800c180 <TST_RX_Start+0x294>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f040 812b 	bne.w	800c172 <TST_RX_Start+0x286>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f340 8127 	ble.w	800c172 <TST_RX_Start+0x286>
  {
    TestState |= RX_TEST_LORA;
 800bf24:	4b96      	ldr	r3, [pc, #600]	; (800c180 <TST_RX_Start+0x294>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	f043 0308 	orr.w	r3, r3, #8
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b94      	ldr	r3, [pc, #592]	; (800c180 <TST_RX_Start+0x294>)
 800bf30:	701a      	strb	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800bf32:	4b94      	ldr	r3, [pc, #592]	; (800c184 <TST_RX_Start+0x298>)
 800bf34:	4a94      	ldr	r2, [pc, #592]	; (800c188 <TST_RX_Start+0x29c>)
 800bf36:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800bf38:	4b92      	ldr	r3, [pc, #584]	; (800c184 <TST_RX_Start+0x298>)
 800bf3a:	4a94      	ldr	r2, [pc, #592]	; (800c18c <TST_RX_Start+0x2a0>)
 800bf3c:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800bf3e:	4b91      	ldr	r3, [pc, #580]	; (800c184 <TST_RX_Start+0x298>)
 800bf40:	4a93      	ldr	r2, [pc, #588]	; (800c190 <TST_RX_Start+0x2a4>)
 800bf42:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800bf44:	4b8f      	ldr	r3, [pc, #572]	; (800c184 <TST_RX_Start+0x298>)
 800bf46:	4a93      	ldr	r2, [pc, #588]	; (800c194 <TST_RX_Start+0x2a8>)
 800bf48:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800bf4a:	4b8e      	ldr	r3, [pc, #568]	; (800c184 <TST_RX_Start+0x298>)
 800bf4c:	4a92      	ldr	r2, [pc, #584]	; (800c198 <TST_RX_Start+0x2ac>)
 800bf4e:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800bf50:	4b92      	ldr	r3, [pc, #584]	; (800c19c <TST_RX_Start+0x2b0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	488b      	ldr	r0, [pc, #556]	; (800c184 <TST_RX_Start+0x298>)
 800bf56:	4798      	blx	r3

    for (i = 1; i <= nb_packet; i++)
 800bf58:	2301      	movs	r3, #1
 800bf5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf5c:	e0fb      	b.n	800c156 <TST_RX_Start+0x26a>
    {
      /* Rx config */
      Radio.SetChannel(testParam.freq);
 800bf5e:	4b8f      	ldr	r3, [pc, #572]	; (800c19c <TST_RX_Start+0x2b0>)
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	4a8f      	ldr	r2, [pc, #572]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf64:	6852      	ldr	r2, [r2, #4]
 800bf66:	4610      	mov	r0, r2
 800bf68:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800bf6a:	4b8d      	ldr	r3, [pc, #564]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d13f      	bne.n	800bff2 <TST_RX_Start+0x106>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bf72:	4a8c      	ldr	r2, [pc, #560]	; (800c1a4 <TST_RX_Start+0x2b8>)
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf7c:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800bf80:	4b87      	ldr	r3, [pc, #540]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <TST_RX_Start+0xa6>
 800bf88:	4b85      	ldr	r3, [pc, #532]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	e000      	b.n	800bf94 <TST_RX_Start+0xa8>
 800bf92:	2300      	movs	r3, #0
 800bf94:	753b      	strb	r3, [r7, #20]
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bf96:	4b82      	ldr	r3, [pc, #520]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	61bb      	str	r3, [r7, #24]
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bf9c:	4b80      	ldr	r3, [pc, #512]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	61fb      	str	r3, [r7, #28]
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	623b      	str	r3, [r7, #32]
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800bfb2:	2304      	movs	r3, #4
 800bfb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800bfb8:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bfbc:	863b      	strh	r3, [r7, #48]	; 0x30
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bfc4:	23f2      	movs	r3, #242	; 0xf2
 800bfc6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800bfca:	f241 0321 	movw	r3, #4129	; 0x1021
 800bfce:	86fb      	strh	r3, [r7, #54]	; 0x36
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
        RxConfig.fsk.MaxPayloadLength = 255;
 800bfd6:	23ff      	movs	r3, #255	; 0xff
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800bfe0:	4b6e      	ldr	r3, [pc, #440]	; (800c19c <TST_RX_Start+0x2b0>)
 800bfe2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800bfe4:	f107 0110 	add.w	r1, r7, #16
 800bfe8:	2300      	movs	r3, #0
 800bfea:	2201      	movs	r2, #1
 800bfec:	2000      	movs	r0, #0
 800bfee:	47a0      	blx	r4
 800bff0:	e02f      	b.n	800c052 <TST_RX_Start+0x166>
      }
      else if (testParam.modulation == TEST_LORA)
 800bff2:	4b6b      	ldr	r3, [pc, #428]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d128      	bne.n	800c04c <TST_RX_Start+0x160>
      {
        /*Lora*/
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800bffa:	4b69      	ldr	r3, [pc, #420]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800c004:	4b66      	ldr	r3, [pc, #408]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800c00e:	4b64      	ldr	r3, [pc, #400]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800c018:	4b61      	ldr	r3, [pc, #388]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800c022:	2308      	movs	r3, #8
 800c024:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800c02e:	2301      	movs	r3, #1
 800c030:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800c034:	2300      	movs	r3, #0
 800c036:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800c03a:	4b58      	ldr	r3, [pc, #352]	; (800c19c <TST_RX_Start+0x2b0>)
 800c03c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c03e:	f107 0110 	add.w	r1, r7, #16
 800c042:	231e      	movs	r3, #30
 800c044:	2201      	movs	r2, #1
 800c046:	2001      	movs	r0, #1
 800c048:	47a0      	blx	r4
 800c04a:	e002      	b.n	800c052 <TST_RX_Start+0x166>
      }
      else
      {
        return -1; /*error*/
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295
 800c050:	e091      	b.n	800c176 <TST_RX_Start+0x28a>
      }

      Radio.Rx(RX_TIMEOUT_VALUE);
 800c052:	4b52      	ldr	r3, [pc, #328]	; (800c19c <TST_RX_Start+0x2b0>)
 800c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c056:	f241 3088 	movw	r0, #5000	; 0x1388
 800c05a:	4798      	blx	r3

      /* Wait Rx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c05c:	2001      	movs	r0, #1
 800c05e:	f013 f863 	bl	801f128 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800c062:	4b4e      	ldr	r3, [pc, #312]	; (800c19c <TST_RX_Start+0x2b0>)
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	4798      	blx	r3

      if (RadioRxDone_flag == 1)
 800c068:	4b4f      	ldr	r3, [pc, #316]	; (800c1a8 <TST_RX_Start+0x2bc>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d12a      	bne.n	800c0c6 <TST_RX_Start+0x1da>
      {
        int16_t rssi = last_rx_rssi;
 800c070:	4b4e      	ldr	r3, [pc, #312]	; (800c1ac <TST_RX_Start+0x2c0>)
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800c078:	4b4d      	ldr	r3, [pc, #308]	; (800c1b0 <TST_RX_Start+0x2c4>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        APP_TPRINTF("OnRxDone\r\n");
 800c080:	4b4c      	ldr	r3, [pc, #304]	; (800c1b4 <TST_RX_Start+0x2c8>)
 800c082:	2201      	movs	r2, #1
 800c084:	2100      	movs	r1, #0
 800c086:	2000      	movs	r0, #0
 800c088:	f012 fbd2 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800c08c:	4b44      	ldr	r3, [pc, #272]	; (800c1a0 <TST_RX_Start+0x2b4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10c      	bne.n	800c0ae <TST_RX_Start+0x1c2>
        {
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800c094:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c098:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 800c09c:	9201      	str	r2, [sp, #4]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	4b45      	ldr	r3, [pc, #276]	; (800c1b8 <TST_RX_Start+0x2cc>)
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	f012 fbc2 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800c0ac:	e00b      	b.n	800c0c6 <TST_RX_Start+0x1da>
        }
        else
        {
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800c0ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c0b2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 800c0b6:	9201      	str	r2, [sp, #4]
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	4b40      	ldr	r3, [pc, #256]	; (800c1bc <TST_RX_Start+0x2d0>)
 800c0bc:	2201      	movs	r2, #1
 800c0be:	2100      	movs	r1, #0
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	f012 fbb5 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        }
      }

      if (RadioRxTimeout_flag == 1)
 800c0c6:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <TST_RX_Start+0x2d4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d105      	bne.n	800c0da <TST_RX_Start+0x1ee>
      {
        APP_TPRINTF("OnRxTimeout\r\n");
 800c0ce:	4b3d      	ldr	r3, [pc, #244]	; (800c1c4 <TST_RX_Start+0x2d8>)
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f012 fbab 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800c0da:	4b3b      	ldr	r3, [pc, #236]	; (800c1c8 <TST_RX_Start+0x2dc>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d105      	bne.n	800c0ee <TST_RX_Start+0x202>
      {
        APP_TPRINTF("OnRxError\r\n");
 800c0e2:	4b3a      	ldr	r3, [pc, #232]	; (800c1cc <TST_RX_Start+0x2e0>)
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f012 fba1 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800c0ee:	4b34      	ldr	r3, [pc, #208]	; (800c1c0 <TST_RX_Start+0x2d4>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d003      	beq.n	800c0fe <TST_RX_Start+0x212>
 800c0f6:	4b34      	ldr	r3, [pc, #208]	; (800c1c8 <TST_RX_Start+0x2dc>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d102      	bne.n	800c104 <TST_RX_Start+0x218>
      {
        count_RxKo++;
 800c0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c100:	3301      	adds	r3, #1
 800c102:	657b      	str	r3, [r7, #84]	; 0x54
      }
      if (RadioRxDone_flag == 1)
 800c104:	4b28      	ldr	r3, [pc, #160]	; (800c1a8 <TST_RX_Start+0x2bc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d102      	bne.n	800c112 <TST_RX_Start+0x226>
      {
        count_RxOk++;
 800c10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c10e:	3301      	adds	r3, #1
 800c110:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 800c112:	4b25      	ldr	r3, [pc, #148]	; (800c1a8 <TST_RX_Start+0x2bc>)
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
      RadioRxTimeout_flag = 0;
 800c118:	4b29      	ldr	r3, [pc, #164]	; (800c1c0 <TST_RX_Start+0x2d4>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800c11e:	4b2a      	ldr	r3, [pc, #168]	; (800c1c8 <TST_RX_Start+0x2dc>)
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]

      /* Compute PER */
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800c124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c126:	2264      	movs	r2, #100	; 0x64
 800c128:	fb03 f202 	mul.w	r2, r3, r2
 800c12c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c12e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c130:	440b      	add	r3, r1
 800c132:	fbb2 f3f3 	udiv	r3, r2, r3
 800c136:	653b      	str	r3, [r7, #80]	; 0x50
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 800c138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13a:	9302      	str	r3, [sp, #8]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4b22      	ldr	r3, [pc, #136]	; (800c1d0 <TST_RX_Start+0x2e4>)
 800c146:	2201      	movs	r2, #1
 800c148:	2100      	movs	r1, #0
 800c14a:	2000      	movs	r0, #0
 800c14c:	f012 fb70 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 800c150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c152:	3301      	adds	r3, #1
 800c154:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	f77f aeff 	ble.w	800bf5e <TST_RX_Start+0x72>
    }
    TestState &= ~RX_TEST_LORA;
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <TST_RX_Start+0x294>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	f023 0308 	bic.w	r3, r3, #8
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <TST_RX_Start+0x294>)
 800c16c:	701a      	strb	r2, [r3, #0]
    return 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	e001      	b.n	800c176 <TST_RX_Start+0x28a>
  }
  else
  {
    return -1;
 800c172:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_RX_Start_2 */

  /* USER CODE END TST_RX_Start_2 */
}
 800c176:	4618      	mov	r0, r3
 800c178:	3764      	adds	r7, #100	; 0x64
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd90      	pop	{r4, r7, pc}
 800c17e:	bf00      	nop
 800c180:	2000101c 	.word	0x2000101c
 800c184:	20001038 	.word	0x20001038
 800c188:	0800c1d5 	.word	0x0800c1d5
 800c18c:	0800c1ed 	.word	0x0800c1ed
 800c190:	0800c235 	.word	0x0800c235
 800c194:	0800c24d 	.word	0x0800c24d
 800c198:	0800c265 	.word	0x0800c265
 800c19c:	080232e4 	.word	0x080232e4
 800c1a0:	2000005c 	.word	0x2000005c
 800c1a4:	080224d4 	.word	0x080224d4
 800c1a8:	20001028 	.word	0x20001028
 800c1ac:	20001034 	.word	0x20001034
 800c1b0:	20001036 	.word	0x20001036
 800c1b4:	08022524 	.word	0x08022524
 800c1b8:	08022530 	.word	0x08022530
 800c1bc:	08022550 	.word	0x08022550
 800c1c0:	2000102c 	.word	0x2000102c
 800c1c4:	08022574 	.word	0x08022574
 800c1c8:	20001030 	.word	0x20001030
 800c1cc:	08022518 	.word	0x08022518
 800c1d0:	08022584 	.word	0x08022584

0800c1d4 <OnTxDone>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

void OnTxDone(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
  /* Set TxDone flag */
  RadioTxDone_flag = 1;
 800c1d8:	4b03      	ldr	r3, [pc, #12]	; (800c1e8 <OnTxDone+0x14>)
 800c1da:	2201      	movs	r2, #1
 800c1dc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c1de:	2001      	movs	r0, #1
 800c1e0:	f012 ff84 	bl	801f0ec <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 800c1e4:	bf00      	nop
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20001020 	.word	0x20001020

0800c1ec <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	817b      	strh	r3, [r7, #10]
 800c1fe:	460b      	mov	r3, r1
 800c200:	813b      	strh	r3, [r7, #8]
 800c202:	4613      	mov	r3, r2
 800c204:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone_1 */

  /* USER CODE END OnRxDone_1 */
  last_rx_rssi = rssi;
 800c206:	4a08      	ldr	r2, [pc, #32]	; (800c228 <OnRxDone+0x3c>)
 800c208:	893b      	ldrh	r3, [r7, #8]
 800c20a:	8013      	strh	r3, [r2, #0]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 800c20c:	4a07      	ldr	r2, [pc, #28]	; (800c22c <OnRxDone+0x40>)
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	7013      	strb	r3, [r2, #0]

  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 800c212:	4b07      	ldr	r3, [pc, #28]	; (800c230 <OnRxDone+0x44>)
 800c214:	2201      	movs	r2, #1
 800c216:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c218:	2001      	movs	r0, #1
 800c21a:	f012 ff67 	bl	801f0ec <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20001034 	.word	0x20001034
 800c22c:	20001036 	.word	0x20001036
 800c230:	20001028 	.word	0x20001028

0800c234 <OnTxTimeout>:

void OnTxTimeout(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
  /* Set timeout flag */
  RadioTxTimeout_flag = 1;
 800c238:	4b03      	ldr	r3, [pc, #12]	; (800c248 <OnTxTimeout+0x14>)
 800c23a:	2201      	movs	r2, #1
 800c23c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c23e:	2001      	movs	r0, #1
 800c240:	f012 ff54 	bl	801f0ec <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 800c244:	bf00      	nop
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20001024 	.word	0x20001024

0800c24c <OnRxTimeout>:

void OnRxTimeout(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  /* Set timeout flag */
  RadioRxTimeout_flag = 1;
 800c250:	4b03      	ldr	r3, [pc, #12]	; (800c260 <OnRxTimeout+0x14>)
 800c252:	2201      	movs	r2, #1
 800c254:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c256:	2001      	movs	r0, #1
 800c258:	f012 ff48 	bl	801f0ec <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 800c25c:	bf00      	nop
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	2000102c 	.word	0x2000102c

0800c264 <OnRxError>:

void OnRxError(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  /* Set error flag */
  RadioError_flag = 1;
 800c268:	4b03      	ldr	r3, [pc, #12]	; (800c278 <OnRxError+0x14>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c26e:	2001      	movs	r0, #1
 800c270:	f012 ff3c 	bl	801f0ec <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 800c274:	bf00      	nop
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20001030 	.word	0x20001030

0800c27c <Prbs9_generator>:

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
 800c288:	2302      	movs	r3, #2
 800c28a:	82fb      	strh	r3, [r7, #22]
  /*init payload to 0*/
  UTIL_MEM_set_8(payload, 0, len);
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	461a      	mov	r2, r3
 800c292:	2100      	movs	r1, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f012 fddc 	bl	801ee52 <UTIL_MEM_set_8>

  for (int32_t i = 0; i < len * 8; i++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	613b      	str	r3, [r7, #16]
 800c29e:	e033      	b.n	800c308 <Prbs9_generator+0x8c>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 800c2a0:	8afb      	ldrh	r3, [r7, #22]
 800c2a2:	0a1b      	lsrs	r3, r3, #8
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	8afb      	ldrh	r3, [r7, #22]
 800c2a8:	091b      	lsrs	r3, r3, #4
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	4053      	eors	r3, r2
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 800c2b6:	8afb      	ldrh	r3, [r7, #22]
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	b21a      	sxth	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	b21b      	sxth	r3, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b21b      	sxth	r3, r3
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ca:	82fb      	strh	r3, [r7, #22]
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da00      	bge.n	800c2d4 <Prbs9_generator+0x58>
 800c2d2:	3307      	adds	r3, #7
 800c2d4:	10db      	asrs	r3, r3, #3
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	4602      	mov	r2, r0
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4413      	add	r3, r2
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	b25a      	sxtb	r2, r3
 800c2e2:	8afb      	ldrh	r3, [r7, #22]
 800c2e4:	f003 0101 	and.w	r1, r3, #1
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f003 0307 	and.w	r3, r3, #7
 800c2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f2:	b25b      	sxtb	r3, r3
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	b25a      	sxtb	r2, r3
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	440b      	add	r3, r1
 800c2fe:	b2d2      	uxtb	r2, r2
 800c300:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < len * 8; i++)
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	3301      	adds	r3, #1
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	78fb      	ldrb	r3, [r7, #3]
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	429a      	cmp	r2, r3
 800c310:	dbc6      	blt.n	800c2a0 <Prbs9_generator+0x24>
  }
  return 0;
 800c312:	2300      	movs	r3, #0
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800c320:	f7f6 f872 	bl	8002408 <BSP_RADIO_Init>
 800c324:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c326:	4618      	mov	r0, r3
 800c328:	bd80      	pop	{r7, pc}

0800c32a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	4603      	mov	r3, r0
 800c332:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	4618      	mov	r0, r3
 800c338:	f7f6 f89a 	bl	8002470 <BSP_RADIO_ConfigRFSwitch>
 800c33c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800c34a:	f7f6 f8df 	bl	800250c <BSP_RADIO_GetTxConfig>
 800c34e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c350:	4618      	mov	r0, r3
 800c352:	bd80      	pop	{r7, pc}

0800c354 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800c358:	f7f6 f8df 	bl	800251a <BSP_RADIO_IsTCXO>
 800c35c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c35e:	4618      	mov	r0, r3
 800c360:	bd80      	pop	{r7, pc}

0800c362 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800c366:	f7f6 f8df 	bl	8002528 <BSP_RADIO_IsDCDC>
 800c36a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c37e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c382:	2b84      	cmp	r3, #132	; 0x84
 800c384:	d005      	beq.n	800c392 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	4413      	add	r3, r2
 800c38e:	3303      	adds	r3, #3
 800c390:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c392:	68fb      	ldr	r3, [r7, #12]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	bc80      	pop	{r7}
 800c39c:	4770      	bx	lr

0800c39e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3a2:	f000 fad9 	bl	800c958 <vTaskStartScheduler>
  
  return osOK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ae:	b089      	sub	sp, #36	; 0x24
 800c3b0:	af04      	add	r7, sp, #16
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d020      	beq.n	800c400 <osThreadCreate+0x54>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d01c      	beq.n	800c400 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685c      	ldr	r4, [r3, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691e      	ldr	r6, [r3, #16]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7ff ffc9 	bl	800c370 <makeFreeRtosPriority>
 800c3de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3e8:	9202      	str	r2, [sp, #8]
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	9100      	str	r1, [sp, #0]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	4632      	mov	r2, r6
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f000 f8e8 	bl	800c5ca <xTaskCreateStatic>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e01c      	b.n	800c43a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685c      	ldr	r4, [r3, #4]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c40c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffab 	bl	800c370 <makeFreeRtosPriority>
 800c41a:	4602      	mov	r2, r0
 800c41c:	f107 030c 	add.w	r3, r7, #12
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	9200      	str	r2, [sp, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	4632      	mov	r2, r6
 800c428:	4629      	mov	r1, r5
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f92a 	bl	800c684 <xTaskCreate>
 800c430:	4603      	mov	r3, r0
 800c432:	2b01      	cmp	r3, #1
 800c434:	d001      	beq.n	800c43a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	e000      	b.n	800c43c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c43a:	68fb      	ldr	r3, [r7, #12]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c444 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <osDelay+0x16>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	e000      	b.n	800c45c <osDelay+0x18>
 800c45a:	2301      	movs	r3, #1
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fa47 	bl	800c8f0 <vTaskDelay>
  
  return osOK;
 800c462:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f103 0208 	add.w	r2, r3, #8
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f04f 32ff 	mov.w	r2, #4294967295
 800c484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f103 0208 	add.w	r2, r3, #8
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f103 0208 	add.w	r2, r3, #8
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr

0800c4aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b083      	sub	sp, #12
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr

0800c4c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4c2:	b480      	push	{r7}
 800c4c4:	b085      	sub	sp, #20
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	601a      	str	r2, [r3, #0]
}
 800c4fe:	bf00      	nop
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	bc80      	pop	{r7}
 800c506:	4770      	bx	lr

0800c508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d103      	bne.n	800c528 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e00c      	b.n	800c542 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3308      	adds	r3, #8
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	e002      	b.n	800c536 <vListInsert+0x2e>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d2f6      	bcs.n	800c530 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	601a      	str	r2, [r3, #0]
}
 800c56e:	bf00      	nop
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	bc80      	pop	{r7}
 800c576:	4770      	bx	lr

0800c578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	6892      	ldr	r2, [r2, #8]
 800c58e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6852      	ldr	r2, [r2, #4]
 800c598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d103      	bne.n	800c5ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bc80      	pop	{r7}
 800c5c8:	4770      	bx	lr

0800c5ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b08e      	sub	sp, #56	; 0x38
 800c5ce:	af04      	add	r7, sp, #16
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10a      	bne.n	800c610 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	61fb      	str	r3, [r7, #28]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c610:	2354      	movs	r3, #84	; 0x54
 800c612:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2b54      	cmp	r3, #84	; 0x54
 800c618:	d00a      	beq.n	800c630 <xTaskCreateStatic+0x66>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	61bb      	str	r3, [r7, #24]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c630:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	2b00      	cmp	r3, #0
 800c636:	d01e      	beq.n	800c676 <xTaskCreateStatic+0xac>
 800c638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d01b      	beq.n	800c676 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c646:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c650:	2300      	movs	r3, #0
 800c652:	9303      	str	r3, [sp, #12]
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	9302      	str	r3, [sp, #8]
 800c658:	f107 0314 	add.w	r3, r7, #20
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f850 	bl	800c70e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c66e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c670:	f000 f8d4 	bl	800c81c <prvAddNewTaskToReadyList>
 800c674:	e001      	b.n	800c67a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c67a:	697b      	ldr	r3, [r7, #20]
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3728      	adds	r7, #40	; 0x28
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08c      	sub	sp, #48	; 0x30
 800c688:	af04      	add	r7, sp, #16
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	4613      	mov	r3, r2
 800c692:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4618      	mov	r0, r3
 800c69a:	f001 f81f 	bl	800d6dc <pvPortMalloc>
 800c69e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00e      	beq.n	800c6c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6a6:	2054      	movs	r0, #84	; 0x54
 800c6a8:	f001 f818 	bl	800d6dc <pvPortMalloc>
 800c6ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	631a      	str	r2, [r3, #48]	; 0x30
 800c6ba:	e005      	b.n	800c6c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6bc:	6978      	ldr	r0, [r7, #20]
 800c6be:	f001 f8d1 	bl	800d864 <vPortFree>
 800c6c2:	e001      	b.n	800c6c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d017      	beq.n	800c6fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6d6:	88fa      	ldrh	r2, [r7, #6]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	9303      	str	r3, [sp, #12]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	9302      	str	r3, [sp, #8]
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f000 f80e 	bl	800c70e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6f2:	69f8      	ldr	r0, [r7, #28]
 800c6f4:	f000 f892 	bl	800c81c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	e002      	b.n	800c704 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c702:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c704:	69bb      	ldr	r3, [r7, #24]
	}
 800c706:	4618      	mov	r0, r3
 800c708:	3720      	adds	r7, #32
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b088      	sub	sp, #32
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	60b9      	str	r1, [r7, #8]
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c726:	3b01      	subs	r3, #1
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	f023 0307 	bic.w	r3, r3, #7
 800c734:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00a      	beq.n	800c756 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	617b      	str	r3, [r7, #20]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01f      	beq.n	800c79c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c75c:	2300      	movs	r3, #0
 800c75e:	61fb      	str	r3, [r7, #28]
 800c760:	e012      	b.n	800c788 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	4413      	add	r3, r2
 800c768:	7819      	ldrb	r1, [r3, #0]
 800c76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	4413      	add	r3, r2
 800c770:	3334      	adds	r3, #52	; 0x34
 800c772:	460a      	mov	r2, r1
 800c774:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	4413      	add	r3, r2
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d006      	beq.n	800c790 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	3301      	adds	r3, #1
 800c786:	61fb      	str	r3, [r7, #28]
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	2b0f      	cmp	r3, #15
 800c78c:	d9e9      	bls.n	800c762 <prvInitialiseNewTask+0x54>
 800c78e:	e000      	b.n	800c792 <prvInitialiseNewTask+0x84>
			{
				break;
 800c790:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c79a:	e003      	b.n	800c7a4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	2b06      	cmp	r3, #6
 800c7a8:	d901      	bls.n	800c7ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7aa:	2306      	movs	r3, #6
 800c7ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	2200      	movs	r2, #0
 800c7be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7ff fe70 	bl	800c4aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	3318      	adds	r3, #24
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fe6b 	bl	800c4aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	f1c3 0207 	rsb	r2, r3, #7
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	68f9      	ldr	r1, [r7, #12]
 800c7fc:	69b8      	ldr	r0, [r7, #24]
 800c7fe:	f000 fcd7 	bl	800d1b0 <pxPortInitialiseStack>
 800c802:	4602      	mov	r2, r0
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c812:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c814:	bf00      	nop
 800c816:	3720      	adds	r7, #32
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c824:	f000 fdb2 	bl	800d38c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c828:	4b2a      	ldr	r3, [pc, #168]	; (800c8d4 <prvAddNewTaskToReadyList+0xb8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3301      	adds	r3, #1
 800c82e:	4a29      	ldr	r2, [pc, #164]	; (800c8d4 <prvAddNewTaskToReadyList+0xb8>)
 800c830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c832:	4b29      	ldr	r3, [pc, #164]	; (800c8d8 <prvAddNewTaskToReadyList+0xbc>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d109      	bne.n	800c84e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c83a:	4a27      	ldr	r2, [pc, #156]	; (800c8d8 <prvAddNewTaskToReadyList+0xbc>)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c840:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <prvAddNewTaskToReadyList+0xb8>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d110      	bne.n	800c86a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c848:	f000 fb70 	bl	800cf2c <prvInitialiseTaskLists>
 800c84c:	e00d      	b.n	800c86a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c84e:	4b23      	ldr	r3, [pc, #140]	; (800c8dc <prvAddNewTaskToReadyList+0xc0>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d109      	bne.n	800c86a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c856:	4b20      	ldr	r3, [pc, #128]	; (800c8d8 <prvAddNewTaskToReadyList+0xbc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	429a      	cmp	r2, r3
 800c862:	d802      	bhi.n	800c86a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c864:	4a1c      	ldr	r2, [pc, #112]	; (800c8d8 <prvAddNewTaskToReadyList+0xbc>)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c86a:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <prvAddNewTaskToReadyList+0xc4>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	4a1b      	ldr	r2, [pc, #108]	; (800c8e0 <prvAddNewTaskToReadyList+0xc4>)
 800c872:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	2201      	movs	r2, #1
 800c87a:	409a      	lsls	r2, r3
 800c87c:	4b19      	ldr	r3, [pc, #100]	; (800c8e4 <prvAddNewTaskToReadyList+0xc8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4313      	orrs	r3, r2
 800c882:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <prvAddNewTaskToReadyList+0xc8>)
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvAddNewTaskToReadyList+0xcc>)
 800c894:	441a      	add	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3304      	adds	r3, #4
 800c89a:	4619      	mov	r1, r3
 800c89c:	4610      	mov	r0, r2
 800c89e:	f7ff fe10 	bl	800c4c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8a2:	f000 fda3 	bl	800d3ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <prvAddNewTaskToReadyList+0xc0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00e      	beq.n	800c8cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8ae:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <prvAddNewTaskToReadyList+0xbc>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d207      	bcs.n	800c8cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <prvAddNewTaskToReadyList+0xd0>)
 800c8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c2:	601a      	str	r2, [r3, #0]
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20001254 	.word	0x20001254
 800c8d8:	20001154 	.word	0x20001154
 800c8dc:	20001260 	.word	0x20001260
 800c8e0:	20001270 	.word	0x20001270
 800c8e4:	2000125c 	.word	0x2000125c
 800c8e8:	20001158 	.word	0x20001158
 800c8ec:	e000ed04 	.word	0xe000ed04

0800c8f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d017      	beq.n	800c932 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c902:	4b13      	ldr	r3, [pc, #76]	; (800c950 <vTaskDelay+0x60>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <vTaskDelay+0x30>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	60bb      	str	r3, [r7, #8]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c920:	f000 f87a 	bl	800ca18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c924:	2100      	movs	r1, #0
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fbdc 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c92c:	f000 f8bc 	bl	800caa8 <xTaskResumeAll>
 800c930:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d107      	bne.n	800c948 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <vTaskDelay+0x64>)
 800c93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	2000127c 	.word	0x2000127c
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08a      	sub	sp, #40	; 0x28
 800c95c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c962:	2300      	movs	r3, #0
 800c964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c966:	463a      	mov	r2, r7
 800c968:	1d39      	adds	r1, r7, #4
 800c96a:	f107 0308 	add.w	r3, r7, #8
 800c96e:	4618      	mov	r0, r3
 800c970:	f7f4 fad6 	bl	8000f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	9202      	str	r2, [sp, #8]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	2300      	movs	r3, #0
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	2300      	movs	r3, #0
 800c984:	460a      	mov	r2, r1
 800c986:	491e      	ldr	r1, [pc, #120]	; (800ca00 <vTaskStartScheduler+0xa8>)
 800c988:	481e      	ldr	r0, [pc, #120]	; (800ca04 <vTaskStartScheduler+0xac>)
 800c98a:	f7ff fe1e 	bl	800c5ca <xTaskCreateStatic>
 800c98e:	4603      	mov	r3, r0
 800c990:	4a1d      	ldr	r2, [pc, #116]	; (800ca08 <vTaskStartScheduler+0xb0>)
 800c992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c994:	4b1c      	ldr	r3, [pc, #112]	; (800ca08 <vTaskStartScheduler+0xb0>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c99c:	2301      	movs	r3, #1
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e001      	b.n	800c9a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d116      	bne.n	800c9da <vTaskStartScheduler+0x82>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	613b      	str	r3, [r7, #16]
}
 800c9be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9c0:	4b12      	ldr	r3, [pc, #72]	; (800ca0c <vTaskStartScheduler+0xb4>)
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9c8:	4b11      	ldr	r3, [pc, #68]	; (800ca10 <vTaskStartScheduler+0xb8>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9ce:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <vTaskStartScheduler+0xbc>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9d4:	f000 fc68 	bl	800d2a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9d8:	e00e      	b.n	800c9f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e0:	d10a      	bne.n	800c9f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	60fb      	str	r3, [r7, #12]
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <vTaskStartScheduler+0x9e>
}
 800c9f8:	bf00      	nop
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	080225a4 	.word	0x080225a4
 800ca04:	0800ce51 	.word	0x0800ce51
 800ca08:	20001278 	.word	0x20001278
 800ca0c:	20001274 	.word	0x20001274
 800ca10:	20001260 	.word	0x20001260
 800ca14:	20001258 	.word	0x20001258

0800ca18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca1c:	4b04      	ldr	r3, [pc, #16]	; (800ca30 <vTaskSuspendAll+0x18>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3301      	adds	r3, #1
 800ca22:	4a03      	ldr	r2, [pc, #12]	; (800ca30 <vTaskSuspendAll+0x18>)
 800ca24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca26:	bf00      	nop
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bc80      	pop	{r7}
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	2000127c 	.word	0x2000127c

0800ca34 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800ca42:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <prvGetExpectedIdleTime+0x60>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d201      	bcs.n	800ca50 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ca50:	4b11      	ldr	r3, [pc, #68]	; (800ca98 <prvGetExpectedIdleTime+0x64>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e012      	b.n	800ca86 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ca60:	4b0e      	ldr	r3, [pc, #56]	; (800ca9c <prvGetExpectedIdleTime+0x68>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d902      	bls.n	800ca6e <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	e00b      	b.n	800ca86 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e005      	b.n	800ca86 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ca7a:	4b09      	ldr	r3, [pc, #36]	; (800caa0 <prvGetExpectedIdleTime+0x6c>)
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <prvGetExpectedIdleTime+0x70>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ca86:	68fb      	ldr	r3, [r7, #12]
	}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bc80      	pop	{r7}
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	2000125c 	.word	0x2000125c
 800ca98:	20001154 	.word	0x20001154
 800ca9c:	20001158 	.word	0x20001158
 800caa0:	20001274 	.word	0x20001274
 800caa4:	20001258 	.word	0x20001258

0800caa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cab6:	4b41      	ldr	r3, [pc, #260]	; (800cbbc <xTaskResumeAll+0x114>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	603b      	str	r3, [r7, #0]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cad4:	f000 fc5a 	bl	800d38c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cad8:	4b38      	ldr	r3, [pc, #224]	; (800cbbc <xTaskResumeAll+0x114>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3b01      	subs	r3, #1
 800cade:	4a37      	ldr	r2, [pc, #220]	; (800cbbc <xTaskResumeAll+0x114>)
 800cae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cae2:	4b36      	ldr	r3, [pc, #216]	; (800cbbc <xTaskResumeAll+0x114>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d161      	bne.n	800cbae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800caea:	4b35      	ldr	r3, [pc, #212]	; (800cbc0 <xTaskResumeAll+0x118>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d05d      	beq.n	800cbae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caf2:	e02e      	b.n	800cb52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf4:	4b33      	ldr	r3, [pc, #204]	; (800cbc4 <xTaskResumeAll+0x11c>)
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	3318      	adds	r3, #24
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff fd39 	bl	800c578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3304      	adds	r3, #4
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff fd34 	bl	800c578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	2201      	movs	r2, #1
 800cb16:	409a      	lsls	r2, r3
 800cb18:	4b2b      	ldr	r3, [pc, #172]	; (800cbc8 <xTaskResumeAll+0x120>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	4a2a      	ldr	r2, [pc, #168]	; (800cbc8 <xTaskResumeAll+0x120>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a27      	ldr	r2, [pc, #156]	; (800cbcc <xTaskResumeAll+0x124>)
 800cb30:	441a      	add	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3304      	adds	r3, #4
 800cb36:	4619      	mov	r1, r3
 800cb38:	4610      	mov	r0, r2
 800cb3a:	f7ff fcc2 	bl	800c4c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <xTaskResumeAll+0x128>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d302      	bcc.n	800cb52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cb4c:	4b21      	ldr	r3, [pc, #132]	; (800cbd4 <xTaskResumeAll+0x12c>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb52:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <xTaskResumeAll+0x11c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1cc      	bne.n	800caf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb60:	f000 fa82 	bl	800d068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb64:	4b1c      	ldr	r3, [pc, #112]	; (800cbd8 <xTaskResumeAll+0x130>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d010      	beq.n	800cb92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb70:	f000 f85c 	bl	800cc2c <xTaskIncrementTick>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cb7a:	4b16      	ldr	r3, [pc, #88]	; (800cbd4 <xTaskResumeAll+0x12c>)
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1f1      	bne.n	800cb70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800cb8c:	4b12      	ldr	r3, [pc, #72]	; (800cbd8 <xTaskResumeAll+0x130>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb92:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <xTaskResumeAll+0x12c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <xTaskResumeAll+0x134>)
 800cba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbae:	f000 fc1d 	bl	800d3ec <vPortExitCritical>

	return xAlreadyYielded;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	2000127c 	.word	0x2000127c
 800cbc0:	20001254 	.word	0x20001254
 800cbc4:	20001214 	.word	0x20001214
 800cbc8:	2000125c 	.word	0x2000125c
 800cbcc:	20001158 	.word	0x20001158
 800cbd0:	20001154 	.word	0x20001154
 800cbd4:	20001268 	.word	0x20001268
 800cbd8:	20001264 	.word	0x20001264
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <vTaskStepTick+0x44>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	441a      	add	r2, r3
 800cbf0:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <vTaskStepTick+0x48>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d90a      	bls.n	800cc0e <vTaskStepTick+0x2e>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60fb      	str	r3, [r7, #12]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800cc0e:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <vTaskStepTick+0x44>)
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4413      	add	r3, r2
 800cc16:	4a03      	ldr	r2, [pc, #12]	; (800cc24 <vTaskStepTick+0x44>)
 800cc18:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr
 800cc24:	20001258 	.word	0x20001258
 800cc28:	20001274 	.word	0x20001274

0800cc2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc36:	4b4e      	ldr	r3, [pc, #312]	; (800cd70 <xTaskIncrementTick+0x144>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f040 8088 	bne.w	800cd50 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc40:	4b4c      	ldr	r3, [pc, #304]	; (800cd74 <xTaskIncrementTick+0x148>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	3301      	adds	r3, #1
 800cc46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc48:	4a4a      	ldr	r2, [pc, #296]	; (800cd74 <xTaskIncrementTick+0x148>)
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d120      	bne.n	800cc96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc54:	4b48      	ldr	r3, [pc, #288]	; (800cd78 <xTaskIncrementTick+0x14c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00a      	beq.n	800cc74 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	603b      	str	r3, [r7, #0]
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <xTaskIncrementTick+0x46>
 800cc74:	4b40      	ldr	r3, [pc, #256]	; (800cd78 <xTaskIncrementTick+0x14c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	4b40      	ldr	r3, [pc, #256]	; (800cd7c <xTaskIncrementTick+0x150>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a3e      	ldr	r2, [pc, #248]	; (800cd78 <xTaskIncrementTick+0x14c>)
 800cc80:	6013      	str	r3, [r2, #0]
 800cc82:	4a3e      	ldr	r2, [pc, #248]	; (800cd7c <xTaskIncrementTick+0x150>)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	4b3d      	ldr	r3, [pc, #244]	; (800cd80 <xTaskIncrementTick+0x154>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	4a3c      	ldr	r2, [pc, #240]	; (800cd80 <xTaskIncrementTick+0x154>)
 800cc90:	6013      	str	r3, [r2, #0]
 800cc92:	f000 f9e9 	bl	800d068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc96:	4b3b      	ldr	r3, [pc, #236]	; (800cd84 <xTaskIncrementTick+0x158>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d348      	bcc.n	800cd32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca0:	4b35      	ldr	r3, [pc, #212]	; (800cd78 <xTaskIncrementTick+0x14c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d104      	bne.n	800ccb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccaa:	4b36      	ldr	r3, [pc, #216]	; (800cd84 <xTaskIncrementTick+0x158>)
 800ccac:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb0:	601a      	str	r2, [r3, #0]
					break;
 800ccb2:	e03e      	b.n	800cd32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb4:	4b30      	ldr	r3, [pc, #192]	; (800cd78 <xTaskIncrementTick+0x14c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d203      	bcs.n	800ccd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cccc:	4a2d      	ldr	r2, [pc, #180]	; (800cd84 <xTaskIncrementTick+0x158>)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccd2:	e02e      	b.n	800cd32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fc4d 	bl	800c578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	3318      	adds	r3, #24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7ff fc44 	bl	800c578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	409a      	lsls	r2, r3
 800ccf8:	4b23      	ldr	r3, [pc, #140]	; (800cd88 <xTaskIncrementTick+0x15c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	4a22      	ldr	r2, [pc, #136]	; (800cd88 <xTaskIncrementTick+0x15c>)
 800cd00:	6013      	str	r3, [r2, #0]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4a1f      	ldr	r2, [pc, #124]	; (800cd8c <xTaskIncrementTick+0x160>)
 800cd10:	441a      	add	r2, r3
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	3304      	adds	r3, #4
 800cd16:	4619      	mov	r1, r3
 800cd18:	4610      	mov	r0, r2
 800cd1a:	f7ff fbd2 	bl	800c4c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	4b1b      	ldr	r3, [pc, #108]	; (800cd90 <xTaskIncrementTick+0x164>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d3b9      	bcc.n	800cca0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd30:	e7b6      	b.n	800cca0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd32:	4b17      	ldr	r3, [pc, #92]	; (800cd90 <xTaskIncrementTick+0x164>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd38:	4914      	ldr	r1, [pc, #80]	; (800cd8c <xTaskIncrementTick+0x160>)
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d907      	bls.n	800cd5a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	e004      	b.n	800cd5a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd50:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <xTaskIncrementTick+0x168>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <xTaskIncrementTick+0x168>)
 800cd58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <xTaskIncrementTick+0x16c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800cd62:	2301      	movs	r3, #1
 800cd64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd66:	697b      	ldr	r3, [r7, #20]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	2000127c 	.word	0x2000127c
 800cd74:	20001258 	.word	0x20001258
 800cd78:	2000120c 	.word	0x2000120c
 800cd7c:	20001210 	.word	0x20001210
 800cd80:	2000126c 	.word	0x2000126c
 800cd84:	20001274 	.word	0x20001274
 800cd88:	2000125c 	.word	0x2000125c
 800cd8c:	20001158 	.word	0x20001158
 800cd90:	20001154 	.word	0x20001154
 800cd94:	20001264 	.word	0x20001264
 800cd98:	20001268 	.word	0x20001268

0800cd9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cda2:	4b26      	ldr	r3, [pc, #152]	; (800ce3c <vTaskSwitchContext+0xa0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdaa:	4b25      	ldr	r3, [pc, #148]	; (800ce40 <vTaskSwitchContext+0xa4>)
 800cdac:	2201      	movs	r2, #1
 800cdae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdb0:	e03f      	b.n	800ce32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cdb2:	4b23      	ldr	r3, [pc, #140]	; (800ce40 <vTaskSwitchContext+0xa4>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb8:	4b22      	ldr	r3, [pc, #136]	; (800ce44 <vTaskSwitchContext+0xa8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	fab3 f383 	clz	r3, r3
 800cdc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdc6:	7afb      	ldrb	r3, [r7, #11]
 800cdc8:	f1c3 031f 	rsb	r3, r3, #31
 800cdcc:	617b      	str	r3, [r7, #20]
 800cdce:	491e      	ldr	r1, [pc, #120]	; (800ce48 <vTaskSwitchContext+0xac>)
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	440b      	add	r3, r1
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10a      	bne.n	800cdf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	607b      	str	r3, [r7, #4]
}
 800cdf4:	bf00      	nop
 800cdf6:	e7fe      	b.n	800cdf6 <vTaskSwitchContext+0x5a>
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4a11      	ldr	r2, [pc, #68]	; (800ce48 <vTaskSwitchContext+0xac>)
 800ce04:	4413      	add	r3, r2
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d104      	bne.n	800ce28 <vTaskSwitchContext+0x8c>
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	605a      	str	r2, [r3, #4]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	4a07      	ldr	r2, [pc, #28]	; (800ce4c <vTaskSwitchContext+0xb0>)
 800ce30:	6013      	str	r3, [r2, #0]
}
 800ce32:	bf00      	nop
 800ce34:	371c      	adds	r7, #28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bc80      	pop	{r7}
 800ce3a:	4770      	bx	lr
 800ce3c:	2000127c 	.word	0x2000127c
 800ce40:	20001268 	.word	0x20001268
 800ce44:	2000125c 	.word	0x2000125c
 800ce48:	20001158 	.word	0x20001158
 800ce4c:	20001154 	.word	0x20001154

0800ce50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce58:	f000 f8a8 	bl	800cfac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce5c:	4b18      	ldr	r3, [pc, #96]	; (800cec0 <prvIdleTask+0x70>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d907      	bls.n	800ce74 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ce64:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <prvIdleTask+0x74>)
 800ce66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ce74:	f7ff fdde 	bl	800ca34 <prvGetExpectedIdleTime>
 800ce78:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d9eb      	bls.n	800ce58 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ce80:	f7ff fdca 	bl	800ca18 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ce84:	4b10      	ldr	r3, [pc, #64]	; (800cec8 <prvIdleTask+0x78>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	4b10      	ldr	r3, [pc, #64]	; (800cecc <prvIdleTask+0x7c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d20a      	bcs.n	800cea6 <prvIdleTask+0x56>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	60bb      	str	r3, [r7, #8]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800cea6:	f7ff fdc5 	bl	800ca34 <prvGetExpectedIdleTime>
 800ceaa:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d902      	bls.n	800ceb8 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f000 fb0a 	bl	800d4cc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800ceb8:	f7ff fdf6 	bl	800caa8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800cebc:	e7cc      	b.n	800ce58 <prvIdleTask+0x8>
 800cebe:	bf00      	nop
 800cec0:	20001158 	.word	0x20001158
 800cec4:	e000ed04 	.word	0xe000ed04
 800cec8:	20001274 	.word	0x20001274
 800cecc:	20001258 	.word	0x20001258

0800ced0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800ced6:	2301      	movs	r3, #1
 800ced8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800ceda:	2301      	movs	r3, #1
 800cedc:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800cede:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <eTaskConfirmSleepModeStatus+0x4c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800cee6:	2300      	movs	r3, #0
 800cee8:	71fb      	strb	r3, [r7, #7]
 800ceea:	e010      	b.n	800cf0e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800ceec:	4b0c      	ldr	r3, [pc, #48]	; (800cf20 <eTaskConfirmSleepModeStatus+0x50>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800cef4:	2300      	movs	r3, #0
 800cef6:	71fb      	strb	r3, [r7, #7]
 800cef8:	e009      	b.n	800cf0e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800cefa:	4b0a      	ldr	r3, [pc, #40]	; (800cf24 <eTaskConfirmSleepModeStatus+0x54>)
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <eTaskConfirmSleepModeStatus+0x58>)
 800cf00:	6819      	ldr	r1, [r3, #0]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	1acb      	subs	r3, r1, r3
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d101      	bne.n	800cf0e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
	}
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bc80      	pop	{r7}
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	20001214 	.word	0x20001214
 800cf20:	20001268 	.word	0x20001268
 800cf24:	20001240 	.word	0x20001240
 800cf28:	20001254 	.word	0x20001254

0800cf2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
 800cf36:	e00c      	b.n	800cf52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4a12      	ldr	r2, [pc, #72]	; (800cf8c <prvInitialiseTaskLists+0x60>)
 800cf44:	4413      	add	r3, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fa90 	bl	800c46c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	607b      	str	r3, [r7, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b06      	cmp	r3, #6
 800cf56:	d9ef      	bls.n	800cf38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf58:	480d      	ldr	r0, [pc, #52]	; (800cf90 <prvInitialiseTaskLists+0x64>)
 800cf5a:	f7ff fa87 	bl	800c46c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf5e:	480d      	ldr	r0, [pc, #52]	; (800cf94 <prvInitialiseTaskLists+0x68>)
 800cf60:	f7ff fa84 	bl	800c46c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf64:	480c      	ldr	r0, [pc, #48]	; (800cf98 <prvInitialiseTaskLists+0x6c>)
 800cf66:	f7ff fa81 	bl	800c46c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf6a:	480c      	ldr	r0, [pc, #48]	; (800cf9c <prvInitialiseTaskLists+0x70>)
 800cf6c:	f7ff fa7e 	bl	800c46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf70:	480b      	ldr	r0, [pc, #44]	; (800cfa0 <prvInitialiseTaskLists+0x74>)
 800cf72:	f7ff fa7b 	bl	800c46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <prvInitialiseTaskLists+0x78>)
 800cf78:	4a05      	ldr	r2, [pc, #20]	; (800cf90 <prvInitialiseTaskLists+0x64>)
 800cf7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <prvInitialiseTaskLists+0x7c>)
 800cf7e:	4a05      	ldr	r2, [pc, #20]	; (800cf94 <prvInitialiseTaskLists+0x68>)
 800cf80:	601a      	str	r2, [r3, #0]
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20001158 	.word	0x20001158
 800cf90:	200011e4 	.word	0x200011e4
 800cf94:	200011f8 	.word	0x200011f8
 800cf98:	20001214 	.word	0x20001214
 800cf9c:	20001228 	.word	0x20001228
 800cfa0:	20001240 	.word	0x20001240
 800cfa4:	2000120c 	.word	0x2000120c
 800cfa8:	20001210 	.word	0x20001210

0800cfac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfb2:	e019      	b.n	800cfe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfb4:	f000 f9ea 	bl	800d38c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb8:	4b10      	ldr	r3, [pc, #64]	; (800cffc <prvCheckTasksWaitingTermination+0x50>)
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff fad7 	bl	800c578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cfca:	4b0d      	ldr	r3, [pc, #52]	; (800d000 <prvCheckTasksWaitingTermination+0x54>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	4a0b      	ldr	r2, [pc, #44]	; (800d000 <prvCheckTasksWaitingTermination+0x54>)
 800cfd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cfd4:	4b0b      	ldr	r3, [pc, #44]	; (800d004 <prvCheckTasksWaitingTermination+0x58>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	4a0a      	ldr	r2, [pc, #40]	; (800d004 <prvCheckTasksWaitingTermination+0x58>)
 800cfdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cfde:	f000 fa05 	bl	800d3ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f810 	bl	800d008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <prvCheckTasksWaitingTermination+0x58>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e1      	bne.n	800cfb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20001228 	.word	0x20001228
 800d000:	20001254 	.word	0x20001254
 800d004:	2000123c 	.word	0x2000123c

0800d008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d016:	2b00      	cmp	r3, #0
 800d018:	d108      	bne.n	800d02c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 fc20 	bl	800d864 <vPortFree>
				vPortFree( pxTCB );
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fc1d 	bl	800d864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d02a:	e018      	b.n	800d05e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d032:	2b01      	cmp	r3, #1
 800d034:	d103      	bne.n	800d03e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fc14 	bl	800d864 <vPortFree>
	}
 800d03c:	e00f      	b.n	800d05e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d044:	2b02      	cmp	r3, #2
 800d046:	d00a      	beq.n	800d05e <prvDeleteTCB+0x56>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	60fb      	str	r3, [r7, #12]
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <prvDeleteTCB+0x54>
	}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d06e:	4b0c      	ldr	r3, [pc, #48]	; (800d0a0 <prvResetNextTaskUnblockTime+0x38>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d104      	bne.n	800d082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d07a:	f04f 32ff 	mov.w	r2, #4294967295
 800d07e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d080:	e008      	b.n	800d094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d082:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <prvResetNextTaskUnblockTime+0x38>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	4a04      	ldr	r2, [pc, #16]	; (800d0a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d092:	6013      	str	r3, [r2, #0]
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	bc80      	pop	{r7}
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	2000120c 	.word	0x2000120c
 800d0a4:	20001274 	.word	0x20001274

0800d0a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0ae:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <xTaskGetSchedulerState+0x34>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d102      	bne.n	800d0bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	607b      	str	r3, [r7, #4]
 800d0ba:	e008      	b.n	800d0ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0bc:	4b08      	ldr	r3, [pc, #32]	; (800d0e0 <xTaskGetSchedulerState+0x38>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	607b      	str	r3, [r7, #4]
 800d0c8:	e001      	b.n	800d0ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0ce:	687b      	ldr	r3, [r7, #4]
	}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bc80      	pop	{r7}
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	20001260 	.word	0x20001260
 800d0e0:	2000127c 	.word	0x2000127c

0800d0e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ee:	4b29      	ldr	r3, [pc, #164]	; (800d194 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f4:	4b28      	ldr	r3, [pc, #160]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff fa3c 	bl	800c578 <uxListRemove>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10b      	bne.n	800d11e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d106:	4b24      	ldr	r3, [pc, #144]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	2201      	movs	r2, #1
 800d10e:	fa02 f303 	lsl.w	r3, r2, r3
 800d112:	43da      	mvns	r2, r3
 800d114:	4b21      	ldr	r3, [pc, #132]	; (800d19c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4013      	ands	r3, r2
 800d11a:	4a20      	ldr	r2, [pc, #128]	; (800d19c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d11c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d124:	d10a      	bne.n	800d13c <prvAddCurrentTaskToDelayedList+0x58>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d007      	beq.n	800d13c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d12c:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3304      	adds	r3, #4
 800d132:	4619      	mov	r1, r3
 800d134:	481a      	ldr	r0, [pc, #104]	; (800d1a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d136:	f7ff f9c4 	bl	800c4c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d13a:	e026      	b.n	800d18a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d144:	4b14      	ldr	r3, [pc, #80]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	429a      	cmp	r2, r3
 800d152:	d209      	bcs.n	800d168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d154:	4b13      	ldr	r3, [pc, #76]	; (800d1a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7ff f9d1 	bl	800c508 <vListInsert>
}
 800d166:	e010      	b.n	800d18a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3304      	adds	r3, #4
 800d172:	4619      	mov	r1, r3
 800d174:	4610      	mov	r0, r2
 800d176:	f7ff f9c7 	bl	800c508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d17a:	4b0c      	ldr	r3, [pc, #48]	; (800d1ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	429a      	cmp	r2, r3
 800d182:	d202      	bcs.n	800d18a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d184:	4a09      	ldr	r2, [pc, #36]	; (800d1ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6013      	str	r3, [r2, #0]
}
 800d18a:	bf00      	nop
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	20001258 	.word	0x20001258
 800d198:	20001154 	.word	0x20001154
 800d19c:	2000125c 	.word	0x2000125c
 800d1a0:	20001240 	.word	0x20001240
 800d1a4:	20001210 	.word	0x20001210
 800d1a8:	2000120c 	.word	0x2000120c
 800d1ac:	20001274 	.word	0x20001274

0800d1b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3b04      	subs	r3, #4
 800d1c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d1c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3b04      	subs	r3, #4
 800d1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	f023 0201 	bic.w	r2, r3, #1
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3b04      	subs	r3, #4
 800d1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1e0:	4a08      	ldr	r2, [pc, #32]	; (800d204 <pxPortInitialiseStack+0x54>)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3b14      	subs	r3, #20
 800d1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3b20      	subs	r3, #32
 800d1f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bc80      	pop	{r7}
 800d202:	4770      	bx	lr
 800d204:	0800d209 	.word	0x0800d209

0800d208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d20e:	2300      	movs	r3, #0
 800d210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d212:	4b12      	ldr	r3, [pc, #72]	; (800d25c <prvTaskExitError+0x54>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d00a      	beq.n	800d232 <prvTaskExitError+0x2a>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	60fb      	str	r3, [r7, #12]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <prvTaskExitError+0x28>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	60bb      	str	r3, [r7, #8]
}
 800d244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d246:	bf00      	nop
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0fc      	beq.n	800d248 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d24e:	bf00      	nop
 800d250:	bf00      	nop
 800d252:	3714      	adds	r7, #20
 800d254:	46bd      	mov	sp, r7
 800d256:	bc80      	pop	{r7}
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	2000008c 	.word	0x2000008c

0800d260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <pxCurrentTCBConst2>)
 800d262:	6819      	ldr	r1, [r3, #0]
 800d264:	6808      	ldr	r0, [r1, #0]
 800d266:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d26a:	f380 8809 	msr	PSP, r0
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f380 8811 	msr	BASEPRI, r0
 800d27a:	f04e 0e0d 	orr.w	lr, lr, #13
 800d27e:	4770      	bx	lr

0800d280 <pxCurrentTCBConst2>:
 800d280:	20001154 	.word	0x20001154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop

0800d288 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d288:	4806      	ldr	r0, [pc, #24]	; (800d2a4 <prvPortStartFirstTask+0x1c>)
 800d28a:	6800      	ldr	r0, [r0, #0]
 800d28c:	6800      	ldr	r0, [r0, #0]
 800d28e:	f380 8808 	msr	MSP, r0
 800d292:	b662      	cpsie	i
 800d294:	b661      	cpsie	f
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	df00      	svc	0
 800d2a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2a2:	bf00      	nop
 800d2a4:	e000ed08 	.word	0xe000ed08

0800d2a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2ae:	4b32      	ldr	r3, [pc, #200]	; (800d378 <xPortStartScheduler+0xd0>)
 800d2b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	22ff      	movs	r2, #255	; 0xff
 800d2be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	4b2a      	ldr	r3, [pc, #168]	; (800d37c <xPortStartScheduler+0xd4>)
 800d2d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2d6:	4b2a      	ldr	r3, [pc, #168]	; (800d380 <xPortStartScheduler+0xd8>)
 800d2d8:	2207      	movs	r2, #7
 800d2da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2dc:	e009      	b.n	800d2f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d2de:	4b28      	ldr	r3, [pc, #160]	; (800d380 <xPortStartScheduler+0xd8>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	4a26      	ldr	r2, [pc, #152]	; (800d380 <xPortStartScheduler+0xd8>)
 800d2e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fa:	2b80      	cmp	r3, #128	; 0x80
 800d2fc:	d0ef      	beq.n	800d2de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2fe:	4b20      	ldr	r3, [pc, #128]	; (800d380 <xPortStartScheduler+0xd8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f1c3 0307 	rsb	r3, r3, #7
 800d306:	2b04      	cmp	r3, #4
 800d308:	d00a      	beq.n	800d320 <xPortStartScheduler+0x78>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	60bb      	str	r3, [r7, #8]
}
 800d31c:	bf00      	nop
 800d31e:	e7fe      	b.n	800d31e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d320:	4b17      	ldr	r3, [pc, #92]	; (800d380 <xPortStartScheduler+0xd8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	021b      	lsls	r3, r3, #8
 800d326:	4a16      	ldr	r2, [pc, #88]	; (800d380 <xPortStartScheduler+0xd8>)
 800d328:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d32a:	4b15      	ldr	r3, [pc, #84]	; (800d380 <xPortStartScheduler+0xd8>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d332:	4a13      	ldr	r2, [pc, #76]	; (800d380 <xPortStartScheduler+0xd8>)
 800d334:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d33e:	4b11      	ldr	r3, [pc, #68]	; (800d384 <xPortStartScheduler+0xdc>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a10      	ldr	r2, [pc, #64]	; (800d384 <xPortStartScheduler+0xdc>)
 800d344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d348:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d34a:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <xPortStartScheduler+0xdc>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a0d      	ldr	r2, [pc, #52]	; (800d384 <xPortStartScheduler+0xdc>)
 800d350:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d354:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d356:	f000 f985 	bl	800d664 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d35a:	4b0b      	ldr	r3, [pc, #44]	; (800d388 <xPortStartScheduler+0xe0>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d360:	f7ff ff92 	bl	800d288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d364:	f7ff fd1a 	bl	800cd9c <vTaskSwitchContext>
	prvTaskExitError();
 800d368:	f7ff ff4e 	bl	800d208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	e000e400 	.word	0xe000e400
 800d37c:	2000128c 	.word	0x2000128c
 800d380:	20001290 	.word	0x20001290
 800d384:	e000ed20 	.word	0xe000ed20
 800d388:	2000008c 	.word	0x2000008c

0800d38c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3a6:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <vPortEnterCritical+0x58>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	4a0d      	ldr	r2, [pc, #52]	; (800d3e4 <vPortEnterCritical+0x58>)
 800d3ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3b0:	4b0c      	ldr	r3, [pc, #48]	; (800d3e4 <vPortEnterCritical+0x58>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d10f      	bne.n	800d3d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3b8:	4b0b      	ldr	r3, [pc, #44]	; (800d3e8 <vPortEnterCritical+0x5c>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00a      	beq.n	800d3d8 <vPortEnterCritical+0x4c>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	603b      	str	r3, [r7, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <vPortEnterCritical+0x4a>
	}
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bc80      	pop	{r7}
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	2000008c 	.word	0x2000008c
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3f2:	4b11      	ldr	r3, [pc, #68]	; (800d438 <vPortExitCritical+0x4c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10a      	bne.n	800d410 <vPortExitCritical+0x24>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	607b      	str	r3, [r7, #4]
}
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <vPortExitCritical+0x4c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3b01      	subs	r3, #1
 800d416:	4a08      	ldr	r2, [pc, #32]	; (800d438 <vPortExitCritical+0x4c>)
 800d418:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d41a:	4b07      	ldr	r3, [pc, #28]	; (800d438 <vPortExitCritical+0x4c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d105      	bne.n	800d42e <vPortExitCritical+0x42>
 800d422:	2300      	movs	r3, #0
 800d424:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d42c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d42e:	bf00      	nop
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	bc80      	pop	{r7}
 800d436:	4770      	bx	lr
 800d438:	2000008c 	.word	0x2000008c
 800d43c:	00000000 	.word	0x00000000

0800d440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d440:	f3ef 8009 	mrs	r0, PSP
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	4b0d      	ldr	r3, [pc, #52]	; (800d480 <pxCurrentTCBConst>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d450:	6010      	str	r0, [r2, #0]
 800d452:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d456:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d45a:	f380 8811 	msr	BASEPRI, r0
 800d45e:	f7ff fc9d 	bl	800cd9c <vTaskSwitchContext>
 800d462:	f04f 0000 	mov.w	r0, #0
 800d466:	f380 8811 	msr	BASEPRI, r0
 800d46a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d46e:	6819      	ldr	r1, [r3, #0]
 800d470:	6808      	ldr	r0, [r1, #0]
 800d472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d476:	f380 8809 	msr	PSP, r0
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	4770      	bx	lr

0800d480 <pxCurrentTCBConst>:
 800d480:	20001154 	.word	0x20001154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop

0800d488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4a2:	f7ff fbc3 	bl	800cc2c <xTaskIncrementTick>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d003      	beq.n	800d4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4ac:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <xPortSysTickHandler+0x40>)
 800d4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	f383 8811 	msr	BASEPRI, r3
}
 800d4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	e000ed04 	.word	0xe000ed04

0800d4cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	4b5d      	ldr	r3, [pc, #372]	; (800d64c <vPortSuppressTicksAndSleep+0x180>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d902      	bls.n	800d4e4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800d4de:	4b5b      	ldr	r3, [pc, #364]	; (800d64c <vPortSuppressTicksAndSleep+0x180>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800d4e4:	4b5a      	ldr	r3, [pc, #360]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a59      	ldr	r2, [pc, #356]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d4ea:	f023 0301 	bic.w	r3, r3, #1
 800d4ee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800d4f0:	4b58      	ldr	r3, [pc, #352]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	4957      	ldr	r1, [pc, #348]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d4fa:	6809      	ldr	r1, [r1, #0]
 800d4fc:	fb01 f303 	mul.w	r3, r1, r3
 800d500:	4413      	add	r3, r2
 800d502:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800d504:	4b55      	ldr	r3, [pc, #340]	; (800d65c <vPortSuppressTicksAndSleep+0x190>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d904      	bls.n	800d518 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800d50e:	4b53      	ldr	r3, [pc, #332]	; (800d65c <vPortSuppressTicksAndSleep+0x190>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	69fa      	ldr	r2, [r7, #28]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800d518:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800d51a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800d51e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800d522:	f7ff fcd5 	bl	800ced0 <eTaskConfirmSleepModeStatus>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d110      	bne.n	800d54e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d52c:	4b49      	ldr	r3, [pc, #292]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d52e:	4a4c      	ldr	r2, [pc, #304]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d534:	4b46      	ldr	r3, [pc, #280]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a45      	ldr	r2, [pc, #276]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d53a:	f043 0301 	orr.w	r3, r3, #1
 800d53e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d540:	4b45      	ldr	r3, [pc, #276]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a46      	ldr	r2, [pc, #280]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d546:	3b01      	subs	r3, #1
 800d548:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800d54a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800d54c:	e07a      	b.n	800d644 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800d54e:	4a44      	ldr	r2, [pc, #272]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d554:	4b3f      	ldr	r3, [pc, #252]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d556:	2200      	movs	r2, #0
 800d558:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d55a:	4b3d      	ldr	r3, [pc, #244]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a3c      	ldr	r2, [pc, #240]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d560:	f043 0301 	orr.w	r3, r3, #1
 800d564:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800d56a:	f107 030c 	add.w	r3, r7, #12
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f3 fca8 	bl	8000ec4 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800d57a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800d57e:	bf30      	wfi
				__asm volatile( "isb" );
 800d580:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800d584:	1d3b      	adds	r3, r7, #4
 800d586:	4618      	mov	r0, r3
 800d588:	f7f3 fcba 	bl	8000f00 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800d58c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800d58e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d592:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800d596:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800d598:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d59c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800d5a0:	4b2b      	ldr	r3, [pc, #172]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d5a2:	2206      	movs	r2, #6
 800d5a4:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800d5a6:	4b2a      	ldr	r3, [pc, #168]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d01d      	beq.n	800d5ee <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800d5b2:	4b29      	ldr	r3, [pc, #164]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	4b27      	ldr	r3, [pc, #156]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	1acb      	subs	r3, r1, r3
 800d5be:	4413      	add	r3, r2
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800d5c4:	4b25      	ldr	r3, [pc, #148]	; (800d65c <vPortSuppressTicksAndSleep+0x190>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d304      	bcc.n	800d5d8 <vPortSuppressTicksAndSleep+0x10c>
 800d5ce:	4b22      	ldr	r3, [pc, #136]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d903      	bls.n	800d5e0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800d5d8:	4b1f      	ldr	r3, [pc, #124]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800d5e0:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	61bb      	str	r3, [r7, #24]
 800d5ec:	e018      	b.n	800d620 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a19      	ldr	r2, [pc, #100]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d5f2:	6812      	ldr	r2, [r2, #0]
 800d5f4:	fb03 f202 	mul.w	r2, r3, r2
 800d5f8:	4b16      	ldr	r3, [pc, #88]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800d600:	4b15      	ldr	r3, [pc, #84]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	fbb2 f3f3 	udiv	r3, r2, r3
 800d60a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	3301      	adds	r3, #1
 800d610:	4a11      	ldr	r2, [pc, #68]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d612:	6812      	ldr	r2, [r2, #0]
 800d614:	fb03 f202 	mul.w	r2, r3, r2
 800d618:	4911      	ldr	r1, [pc, #68]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d620:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <vPortSuppressTicksAndSleep+0x188>)
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d626:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a09      	ldr	r2, [pc, #36]	; (800d650 <vPortSuppressTicksAndSleep+0x184>)
 800d62c:	f043 0301 	orr.w	r3, r3, #1
 800d630:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800d632:	69b8      	ldr	r0, [r7, #24]
 800d634:	f7ff fad4 	bl	800cbe0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d638:	4b07      	ldr	r3, [pc, #28]	; (800d658 <vPortSuppressTicksAndSleep+0x18c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a08      	ldr	r2, [pc, #32]	; (800d660 <vPortSuppressTicksAndSleep+0x194>)
 800d63e:	3b01      	subs	r3, #1
 800d640:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800d642:	b662      	cpsie	i
	}
 800d644:	bf00      	nop
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20001284 	.word	0x20001284
 800d650:	e000e010 	.word	0xe000e010
 800d654:	e000e018 	.word	0xe000e018
 800d658:	20001280 	.word	0x20001280
 800d65c:	20001288 	.word	0x20001288
 800d660:	e000e014 	.word	0xe000e014

0800d664 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d664:	b480      	push	{r7}
 800d666:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800d668:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <vPortSetupTimerInterrupt+0x58>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a14      	ldr	r2, [pc, #80]	; (800d6c0 <vPortSetupTimerInterrupt+0x5c>)
 800d66e:	fba2 2303 	umull	r2, r3, r2, r3
 800d672:	099b      	lsrs	r3, r3, #6
 800d674:	4a13      	ldr	r2, [pc, #76]	; (800d6c4 <vPortSetupTimerInterrupt+0x60>)
 800d676:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800d678:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <vPortSetupTimerInterrupt+0x60>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d680:	fbb2 f3f3 	udiv	r3, r2, r3
 800d684:	4a10      	ldr	r2, [pc, #64]	; (800d6c8 <vPortSetupTimerInterrupt+0x64>)
 800d686:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800d688:	4b10      	ldr	r3, [pc, #64]	; (800d6cc <vPortSetupTimerInterrupt+0x68>)
 800d68a:	222d      	movs	r2, #45	; 0x2d
 800d68c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d68e:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <vPortSetupTimerInterrupt+0x6c>)
 800d690:	2200      	movs	r2, #0
 800d692:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d694:	4b0f      	ldr	r3, [pc, #60]	; (800d6d4 <vPortSetupTimerInterrupt+0x70>)
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d69a:	4b08      	ldr	r3, [pc, #32]	; (800d6bc <vPortSetupTimerInterrupt+0x58>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <vPortSetupTimerInterrupt+0x5c>)
 800d6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a4:	099b      	lsrs	r3, r3, #6
 800d6a6:	4a0c      	ldr	r2, [pc, #48]	; (800d6d8 <vPortSetupTimerInterrupt+0x74>)
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ac:	4b08      	ldr	r3, [pc, #32]	; (800d6d0 <vPortSetupTimerInterrupt+0x6c>)
 800d6ae:	2207      	movs	r2, #7
 800d6b0:	601a      	str	r2, [r3, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bc80      	pop	{r7}
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	20000000 	.word	0x20000000
 800d6c0:	10624dd3 	.word	0x10624dd3
 800d6c4:	20001280 	.word	0x20001280
 800d6c8:	20001284 	.word	0x20001284
 800d6cc:	20001288 	.word	0x20001288
 800d6d0:	e000e010 	.word	0xe000e010
 800d6d4:	e000e018 	.word	0xe000e018
 800d6d8:	e000e014 	.word	0xe000e014

0800d6dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b08a      	sub	sp, #40	; 0x28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6e8:	f7ff f996 	bl	800ca18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6ec:	4b58      	ldr	r3, [pc, #352]	; (800d850 <pvPortMalloc+0x174>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6f4:	f000 f910 	bl	800d918 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6f8:	4b56      	ldr	r3, [pc, #344]	; (800d854 <pvPortMalloc+0x178>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4013      	ands	r3, r2
 800d700:	2b00      	cmp	r3, #0
 800d702:	f040 808e 	bne.w	800d822 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d01d      	beq.n	800d748 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d70c:	2208      	movs	r2, #8
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4413      	add	r3, r2
 800d712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d014      	beq.n	800d748 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f023 0307 	bic.w	r3, r3, #7
 800d724:	3308      	adds	r3, #8
 800d726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f003 0307 	and.w	r3, r3, #7
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <pvPortMalloc+0x6c>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	617b      	str	r3, [r7, #20]
}
 800d744:	bf00      	nop
 800d746:	e7fe      	b.n	800d746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d069      	beq.n	800d822 <pvPortMalloc+0x146>
 800d74e:	4b42      	ldr	r3, [pc, #264]	; (800d858 <pvPortMalloc+0x17c>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	429a      	cmp	r2, r3
 800d756:	d864      	bhi.n	800d822 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d758:	4b40      	ldr	r3, [pc, #256]	; (800d85c <pvPortMalloc+0x180>)
 800d75a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d75c:	4b3f      	ldr	r3, [pc, #252]	; (800d85c <pvPortMalloc+0x180>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d762:	e004      	b.n	800d76e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	429a      	cmp	r2, r3
 800d776:	d903      	bls.n	800d780 <pvPortMalloc+0xa4>
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1f1      	bne.n	800d764 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d780:	4b33      	ldr	r3, [pc, #204]	; (800d850 <pvPortMalloc+0x174>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d786:	429a      	cmp	r2, r3
 800d788:	d04b      	beq.n	800d822 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2208      	movs	r2, #8
 800d790:	4413      	add	r3, r2
 800d792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	6a3b      	ldr	r3, [r7, #32]
 800d79a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	1ad2      	subs	r2, r2, r3
 800d7a4:	2308      	movs	r3, #8
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d91f      	bls.n	800d7ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <pvPortMalloc+0xf8>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	613b      	str	r3, [r7, #16]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	1ad2      	subs	r2, r2, r3
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7e6:	69b8      	ldr	r0, [r7, #24]
 800d7e8:	f000 f8f8 	bl	800d9dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <pvPortMalloc+0x17c>)
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	4a18      	ldr	r2, [pc, #96]	; (800d858 <pvPortMalloc+0x17c>)
 800d7f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7fa:	4b17      	ldr	r3, [pc, #92]	; (800d858 <pvPortMalloc+0x17c>)
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	4b18      	ldr	r3, [pc, #96]	; (800d860 <pvPortMalloc+0x184>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	d203      	bcs.n	800d80e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d806:	4b14      	ldr	r3, [pc, #80]	; (800d858 <pvPortMalloc+0x17c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a15      	ldr	r2, [pc, #84]	; (800d860 <pvPortMalloc+0x184>)
 800d80c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	4b10      	ldr	r3, [pc, #64]	; (800d854 <pvPortMalloc+0x178>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	431a      	orrs	r2, r3
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d822:	f7ff f941 	bl	800caa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	f003 0307 	and.w	r3, r3, #7
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00a      	beq.n	800d846 <pvPortMalloc+0x16a>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	60fb      	str	r3, [r7, #12]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <pvPortMalloc+0x168>
	return pvReturn;
 800d846:	69fb      	ldr	r3, [r7, #28]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3728      	adds	r7, #40	; 0x28
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20003254 	.word	0x20003254
 800d854:	20003260 	.word	0x20003260
 800d858:	20003258 	.word	0x20003258
 800d85c:	2000324c 	.word	0x2000324c
 800d860:	2000325c 	.word	0x2000325c

0800d864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d048      	beq.n	800d908 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d876:	2308      	movs	r3, #8
 800d878:	425b      	negs	r3, r3
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	4413      	add	r3, r2
 800d87e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	4b21      	ldr	r3, [pc, #132]	; (800d910 <vPortFree+0xac>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4013      	ands	r3, r2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10a      	bne.n	800d8a8 <vPortFree+0x44>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	60fb      	str	r3, [r7, #12]
}
 800d8a4:	bf00      	nop
 800d8a6:	e7fe      	b.n	800d8a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00a      	beq.n	800d8c6 <vPortFree+0x62>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	60bb      	str	r3, [r7, #8]
}
 800d8c2:	bf00      	nop
 800d8c4:	e7fe      	b.n	800d8c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	4b11      	ldr	r3, [pc, #68]	; (800d910 <vPortFree+0xac>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d019      	beq.n	800d908 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d115      	bne.n	800d908 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	685a      	ldr	r2, [r3, #4]
 800d8e0:	4b0b      	ldr	r3, [pc, #44]	; (800d910 <vPortFree+0xac>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	401a      	ands	r2, r3
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8ec:	f7ff f894 	bl	800ca18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	4b07      	ldr	r3, [pc, #28]	; (800d914 <vPortFree+0xb0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4a06      	ldr	r2, [pc, #24]	; (800d914 <vPortFree+0xb0>)
 800d8fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8fe:	6938      	ldr	r0, [r7, #16]
 800d900:	f000 f86c 	bl	800d9dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d904:	f7ff f8d0 	bl	800caa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d908:	bf00      	nop
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20003260 	.word	0x20003260
 800d914:	20003258 	.word	0x20003258

0800d918 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d91e:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800d922:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d924:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <prvHeapInit+0xac>)
 800d926:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f003 0307 	and.w	r3, r3, #7
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00c      	beq.n	800d94c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3307      	adds	r3, #7
 800d936:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	4a1f      	ldr	r2, [pc, #124]	; (800d9c4 <prvHeapInit+0xac>)
 800d948:	4413      	add	r3, r2
 800d94a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d950:	4a1d      	ldr	r2, [pc, #116]	; (800d9c8 <prvHeapInit+0xb0>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d956:	4b1c      	ldr	r3, [pc, #112]	; (800d9c8 <prvHeapInit+0xb0>)
 800d958:	2200      	movs	r2, #0
 800d95a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d964:	2208      	movs	r2, #8
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	1a9b      	subs	r3, r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0307 	bic.w	r3, r3, #7
 800d972:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <prvHeapInit+0xb4>)
 800d978:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d97a:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <prvHeapInit+0xb4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2200      	movs	r2, #0
 800d980:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d982:	4b12      	ldr	r3, [pc, #72]	; (800d9cc <prvHeapInit+0xb4>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d998:	4b0c      	ldr	r3, [pc, #48]	; (800d9cc <prvHeapInit+0xb4>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	4a0a      	ldr	r2, [pc, #40]	; (800d9d0 <prvHeapInit+0xb8>)
 800d9a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	4a09      	ldr	r2, [pc, #36]	; (800d9d4 <prvHeapInit+0xbc>)
 800d9ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9b0:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <prvHeapInit+0xc0>)
 800d9b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9b6:	601a      	str	r2, [r3, #0]
}
 800d9b8:	bf00      	nop
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bc80      	pop	{r7}
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	20001294 	.word	0x20001294
 800d9c8:	2000324c 	.word	0x2000324c
 800d9cc:	20003254 	.word	0x20003254
 800d9d0:	2000325c 	.word	0x2000325c
 800d9d4:	20003258 	.word	0x20003258
 800d9d8:	20003260 	.word	0x20003260

0800d9dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9e4:	4b27      	ldr	r3, [pc, #156]	; (800da84 <prvInsertBlockIntoFreeList+0xa8>)
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	e002      	b.n	800d9f0 <prvInsertBlockIntoFreeList+0x14>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d8f7      	bhi.n	800d9ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	4413      	add	r3, r2
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d108      	bne.n	800da1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	441a      	add	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	441a      	add	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d118      	bne.n	800da64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <prvInsertBlockIntoFreeList+0xac>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d00d      	beq.n	800da5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	441a      	add	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	e008      	b.n	800da6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da5a:	4b0b      	ldr	r3, [pc, #44]	; (800da88 <prvInsertBlockIntoFreeList+0xac>)
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	e003      	b.n	800da6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	429a      	cmp	r2, r3
 800da72:	d002      	beq.n	800da7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da7a:	bf00      	nop
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	bc80      	pop	{r7}
 800da82:	4770      	bx	lr
 800da84:	2000324c 	.word	0x2000324c
 800da88:	20003254 	.word	0x20003254

0800da8c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	33f1      	adds	r3, #241	; 0xf1
 800da98:	2210      	movs	r2, #16
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f00d fd9b 	bl	801b5d8 <memset1>
    ctx->M_n = 0;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	22f0      	movs	r2, #240	; 0xf0
 800daae:	2100      	movs	r1, #0
 800dab0:	4618      	mov	r0, r3
 800dab2:	f00d fd91 	bl	801b5d8 <memset1>
}
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	461a      	mov	r2, r3
 800dacc:	2110      	movs	r1, #16
 800dace:	6838      	ldr	r0, [r7, #0]
 800dad0:	f000 fe5c 	bl	800e78c <lorawan_aes_set_key>
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b08c      	sub	sp, #48	; 0x30
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 80a1 	beq.w	800dc36 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dafa:	f1c3 0310 	rsb	r3, r3, #16
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	4293      	cmp	r3, r2
 800db02:	bf28      	it	cs
 800db04:	4613      	movcs	r3, r2
 800db06:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db14:	4413      	add	r3, r2
 800db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db18:	b292      	uxth	r2, r2
 800db1a:	68b9      	ldr	r1, [r7, #8]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f00d fd20 	bl	801b562 <memcpy1>
        ctx->M_n += mlen;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	441a      	add	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db38:	2b0f      	cmp	r3, #15
 800db3a:	f240 808d 	bls.w	800dc58 <AES_CMAC_Update+0x17c>
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	429a      	cmp	r2, r3
 800db44:	f000 8088 	beq.w	800dc58 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800db48:	2300      	movs	r3, #0
 800db4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db4c:	e015      	b.n	800db7a <AES_CMAC_Update+0x9e>
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	4413      	add	r3, r2
 800db54:	33f1      	adds	r3, #241	; 0xf1
 800db56:	781a      	ldrb	r2, [r3, #0]
 800db58:	68f9      	ldr	r1, [r7, #12]
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	440b      	add	r3, r1
 800db5e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	4053      	eors	r3, r2
 800db66:	b2d9      	uxtb	r1, r3
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6c:	4413      	add	r3, r2
 800db6e:	33f1      	adds	r3, #241	; 0xf1
 800db70:	460a      	mov	r2, r1
 800db72:	701a      	strb	r2, [r3, #0]
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	3301      	adds	r3, #1
 800db78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	2b0f      	cmp	r3, #15
 800db7e:	dde6      	ble.n	800db4e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800db86:	f107 0314 	add.w	r3, r7, #20
 800db8a:	2210      	movs	r2, #16
 800db8c:	4618      	mov	r0, r3
 800db8e:	f00d fce8 	bl	801b562 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	f107 0114 	add.w	r1, r7, #20
 800db98:	f107 0314 	add.w	r3, r7, #20
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 fed3 	bl	800e948 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	33f1      	adds	r3, #241	; 0xf1
 800dba6:	f107 0114 	add.w	r1, r7, #20
 800dbaa:	2210      	movs	r2, #16
 800dbac:	4618      	mov	r0, r3
 800dbae:	f00d fcd8 	bl	801b562 <memcpy1>

        data += mlen;
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	4413      	add	r3, r2
 800dbb8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dbc2:	e038      	b.n	800dc36 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbc8:	e013      	b.n	800dbf2 <AES_CMAC_Update+0x116>
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	4413      	add	r3, r2
 800dbd0:	33f1      	adds	r3, #241	; 0xf1
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	68b9      	ldr	r1, [r7, #8]
 800dbd8:	440b      	add	r3, r1
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	4053      	eors	r3, r2
 800dbde:	b2d9      	uxtb	r1, r3
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	4413      	add	r3, r2
 800dbe6:	33f1      	adds	r3, #241	; 0xf1
 800dbe8:	460a      	mov	r2, r1
 800dbea:	701a      	strb	r2, [r3, #0]
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	3301      	adds	r3, #1
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	2b0f      	cmp	r3, #15
 800dbf6:	dde8      	ble.n	800dbca <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dbfe:	f107 0314 	add.w	r3, r7, #20
 800dc02:	2210      	movs	r2, #16
 800dc04:	4618      	mov	r0, r3
 800dc06:	f00d fcac 	bl	801b562 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	f107 0114 	add.w	r1, r7, #20
 800dc10:	f107 0314 	add.w	r3, r7, #20
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 fe97 	bl	800e948 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	33f1      	adds	r3, #241	; 0xf1
 800dc1e:	f107 0114 	add.w	r1, r7, #20
 800dc22:	2210      	movs	r2, #16
 800dc24:	4618      	mov	r0, r3
 800dc26:	f00d fc9c 	bl	801b562 <memcpy1>

        data += 16;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	3310      	adds	r3, #16
 800dc2e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3b10      	subs	r3, #16
 800dc34:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b10      	cmp	r3, #16
 800dc3a:	d8c3      	bhi.n	800dbc4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	b292      	uxth	r2, r2
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f00d fc8a 	bl	801b562 <memcpy1>
    ctx->M_n = len;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dc56:	e000      	b.n	800dc5a <AES_CMAC_Update+0x17e>
            return;
 800dc58:	bf00      	nop
}
 800dc5a:	3730      	adds	r7, #48	; 0x30
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b092      	sub	sp, #72	; 0x48
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800dc6a:	f107 031c 	add.w	r3, r7, #28
 800dc6e:	2210      	movs	r2, #16
 800dc70:	2100      	movs	r1, #0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f00d fcb0 	bl	801b5d8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	f107 011c 	add.w	r1, r7, #28
 800dc7e:	f107 031c 	add.w	r3, r7, #28
 800dc82:	4618      	mov	r0, r3
 800dc84:	f000 fe60 	bl	800e948 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800dc88:	7f3b      	ldrb	r3, [r7, #28]
 800dc8a:	b25b      	sxtb	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	da30      	bge.n	800dcf2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800dc90:	2300      	movs	r3, #0
 800dc92:	647b      	str	r3, [r7, #68]	; 0x44
 800dc94:	e01b      	b.n	800dcce <AES_CMAC_Final+0x6e>
 800dc96:	f107 021c 	add.w	r2, r7, #28
 800dc9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc9c:	4413      	add	r3, r2
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	b25a      	sxtb	r2, r3
 800dca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dca6:	3301      	adds	r3, #1
 800dca8:	3348      	adds	r3, #72	; 0x48
 800dcaa:	443b      	add	r3, r7
 800dcac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dcb0:	09db      	lsrs	r3, r3, #7
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	b25b      	sxtb	r3, r3
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	b25b      	sxtb	r3, r3
 800dcba:	b2d9      	uxtb	r1, r3
 800dcbc:	f107 021c 	add.w	r2, r7, #28
 800dcc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc2:	4413      	add	r3, r2
 800dcc4:	460a      	mov	r2, r1
 800dcc6:	701a      	strb	r2, [r3, #0]
 800dcc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcca:	3301      	adds	r3, #1
 800dccc:	647b      	str	r3, [r7, #68]	; 0x44
 800dcce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd0:	2b0e      	cmp	r3, #14
 800dcd2:	dde0      	ble.n	800dc96 <AES_CMAC_Final+0x36>
 800dcd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dce4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dce8:	43db      	mvns	r3, r3
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dcf0:	e027      	b.n	800dd42 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	643b      	str	r3, [r7, #64]	; 0x40
 800dcf6:	e01b      	b.n	800dd30 <AES_CMAC_Final+0xd0>
 800dcf8:	f107 021c 	add.w	r2, r7, #28
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	b25a      	sxtb	r2, r3
 800dd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd08:	3301      	adds	r3, #1
 800dd0a:	3348      	adds	r3, #72	; 0x48
 800dd0c:	443b      	add	r3, r7
 800dd0e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dd12:	09db      	lsrs	r3, r3, #7
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	b25b      	sxtb	r3, r3
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	b25b      	sxtb	r3, r3
 800dd1c:	b2d9      	uxtb	r1, r3
 800dd1e:	f107 021c 	add.w	r2, r7, #28
 800dd22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd24:	4413      	add	r3, r2
 800dd26:	460a      	mov	r2, r1
 800dd28:	701a      	strb	r2, [r3, #0]
 800dd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd32:	2b0e      	cmp	r3, #14
 800dd34:	dde0      	ble.n	800dcf8 <AES_CMAC_Final+0x98>
 800dd36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd48:	2b10      	cmp	r3, #16
 800dd4a:	d11d      	bne.n	800dd88 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd50:	e016      	b.n	800dd80 <AES_CMAC_Final+0x120>
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd56:	4413      	add	r3, r2
 800dd58:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd5c:	781a      	ldrb	r2, [r3, #0]
 800dd5e:	f107 011c 	add.w	r1, r7, #28
 800dd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd64:	440b      	add	r3, r1
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	4053      	eors	r3, r2
 800dd6a:	b2d9      	uxtb	r1, r3
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd70:	4413      	add	r3, r2
 800dd72:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd76:	460a      	mov	r2, r1
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd82:	2b0f      	cmp	r3, #15
 800dd84:	dde5      	ble.n	800dd52 <AES_CMAC_Final+0xf2>
 800dd86:	e096      	b.n	800deb6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800dd88:	7f3b      	ldrb	r3, [r7, #28]
 800dd8a:	b25b      	sxtb	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	da30      	bge.n	800ddf2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800dd90:	2300      	movs	r3, #0
 800dd92:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd94:	e01b      	b.n	800ddce <AES_CMAC_Final+0x16e>
 800dd96:	f107 021c 	add.w	r2, r7, #28
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9c:	4413      	add	r3, r2
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	b25a      	sxtb	r2, r3
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	3301      	adds	r3, #1
 800dda8:	3348      	adds	r3, #72	; 0x48
 800ddaa:	443b      	add	r3, r7
 800ddac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ddb0:	09db      	lsrs	r3, r3, #7
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	b25b      	sxtb	r3, r3
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	b25b      	sxtb	r3, r3
 800ddba:	b2d9      	uxtb	r1, r3
 800ddbc:	f107 021c 	add.w	r2, r7, #28
 800ddc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc2:	4413      	add	r3, r2
 800ddc4:	460a      	mov	r2, r1
 800ddc6:	701a      	strb	r2, [r3, #0]
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	3301      	adds	r3, #1
 800ddcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd0:	2b0e      	cmp	r3, #14
 800ddd2:	dde0      	ble.n	800dd96 <AES_CMAC_Final+0x136>
 800ddd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800dde0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dde4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dde8:	43db      	mvns	r3, r3
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddf0:	e027      	b.n	800de42 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	637b      	str	r3, [r7, #52]	; 0x34
 800ddf6:	e01b      	b.n	800de30 <AES_CMAC_Final+0x1d0>
 800ddf8:	f107 021c 	add.w	r2, r7, #28
 800ddfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddfe:	4413      	add	r3, r2
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	005b      	lsls	r3, r3, #1
 800de04:	b25a      	sxtb	r2, r3
 800de06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de08:	3301      	adds	r3, #1
 800de0a:	3348      	adds	r3, #72	; 0x48
 800de0c:	443b      	add	r3, r7
 800de0e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800de12:	09db      	lsrs	r3, r3, #7
 800de14:	b2db      	uxtb	r3, r3
 800de16:	b25b      	sxtb	r3, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	b25b      	sxtb	r3, r3
 800de1c:	b2d9      	uxtb	r1, r3
 800de1e:	f107 021c 	add.w	r2, r7, #28
 800de22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de24:	4413      	add	r3, r2
 800de26:	460a      	mov	r2, r1
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2c:	3301      	adds	r3, #1
 800de2e:	637b      	str	r3, [r7, #52]	; 0x34
 800de30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de32:	2b0e      	cmp	r3, #14
 800de34:	dde0      	ble.n	800ddf8 <AES_CMAC_Final+0x198>
 800de36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	4413      	add	r3, r2
 800de4c:	2280      	movs	r2, #128	; 0x80
 800de4e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800de52:	e007      	b.n	800de64 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	4413      	add	r3, r2
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de78:	2b0f      	cmp	r3, #15
 800de7a:	d9eb      	bls.n	800de54 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800de7c:	2300      	movs	r3, #0
 800de7e:	633b      	str	r3, [r7, #48]	; 0x30
 800de80:	e016      	b.n	800deb0 <AES_CMAC_Final+0x250>
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	4413      	add	r3, r2
 800de88:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de8c:	781a      	ldrb	r2, [r3, #0]
 800de8e:	f107 011c 	add.w	r1, r7, #28
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	440b      	add	r3, r1
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	4053      	eors	r3, r2
 800de9a:	b2d9      	uxtb	r1, r3
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea0:	4413      	add	r3, r2
 800dea2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dea6:	460a      	mov	r2, r1
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	3301      	adds	r3, #1
 800deae:	633b      	str	r3, [r7, #48]	; 0x30
 800deb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb2:	2b0f      	cmp	r3, #15
 800deb4:	dde5      	ble.n	800de82 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800deb6:	2300      	movs	r3, #0
 800deb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deba:	e015      	b.n	800dee8 <AES_CMAC_Final+0x288>
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	4413      	add	r3, r2
 800dec2:	33f1      	adds	r3, #241	; 0xf1
 800dec4:	781a      	ldrb	r2, [r3, #0]
 800dec6:	6839      	ldr	r1, [r7, #0]
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	440b      	add	r3, r1
 800decc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	4053      	eors	r3, r2
 800ded4:	b2d9      	uxtb	r1, r3
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deda:	4413      	add	r3, r2
 800dedc:	33f1      	adds	r3, #241	; 0xf1
 800dede:	460a      	mov	r2, r1
 800dee0:	701a      	strb	r2, [r3, #0]
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	3301      	adds	r3, #1
 800dee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	2b0f      	cmp	r3, #15
 800deec:	dde6      	ble.n	800debc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800def4:	f107 030c 	add.w	r3, r7, #12
 800def8:	2210      	movs	r2, #16
 800defa:	4618      	mov	r0, r3
 800defc:	f00d fb31 	bl	801b562 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	f107 030c 	add.w	r3, r7, #12
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 fd1d 	bl	800e948 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800df0e:	f107 031c 	add.w	r3, r7, #28
 800df12:	2210      	movs	r2, #16
 800df14:	2100      	movs	r1, #0
 800df16:	4618      	mov	r0, r3
 800df18:	f00d fb5e 	bl	801b5d8 <memset1>
}
 800df1c:	bf00      	nop
 800df1e:	3748      	adds	r7, #72	; 0x48
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	3301      	adds	r3, #1
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	7852      	ldrb	r2, [r2, #1]
 800df3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	3302      	adds	r3, #2
 800df44:	683a      	ldr	r2, [r7, #0]
 800df46:	7892      	ldrb	r2, [r2, #2]
 800df48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3303      	adds	r3, #3
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	78d2      	ldrb	r2, [r2, #3]
 800df52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3304      	adds	r3, #4
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	7912      	ldrb	r2, [r2, #4]
 800df5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3305      	adds	r3, #5
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	7952      	ldrb	r2, [r2, #5]
 800df66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3306      	adds	r3, #6
 800df6c:	683a      	ldr	r2, [r7, #0]
 800df6e:	7992      	ldrb	r2, [r2, #6]
 800df70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3307      	adds	r3, #7
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	79d2      	ldrb	r2, [r2, #7]
 800df7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	3308      	adds	r3, #8
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	7a12      	ldrb	r2, [r2, #8]
 800df84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	3309      	adds	r3, #9
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	7a52      	ldrb	r2, [r2, #9]
 800df8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	330a      	adds	r3, #10
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	7a92      	ldrb	r2, [r2, #10]
 800df98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	330b      	adds	r3, #11
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	7ad2      	ldrb	r2, [r2, #11]
 800dfa2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	330c      	adds	r3, #12
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	7b12      	ldrb	r2, [r2, #12]
 800dfac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	330d      	adds	r3, #13
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	7b52      	ldrb	r2, [r2, #13]
 800dfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	330e      	adds	r3, #14
 800dfbc:	683a      	ldr	r2, [r7, #0]
 800dfbe:	7b92      	ldrb	r2, [r2, #14]
 800dfc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	330f      	adds	r3, #15
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	7bd2      	ldrb	r2, [r2, #15]
 800dfca:	701a      	strb	r2, [r3, #0]
#endif
}
 800dfcc:	bf00      	nop
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bc80      	pop	{r7}
 800dfd4:	4770      	bx	lr

0800dfd6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b085      	sub	sp, #20
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800dfe4:	e007      	b.n	800dff6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	1c53      	adds	r3, r2, #1
 800dfea:	60bb      	str	r3, [r7, #8]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	1c59      	adds	r1, r3, #1
 800dff0:	60f9      	str	r1, [r7, #12]
 800dff2:	7812      	ldrb	r2, [r2, #0]
 800dff4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	1e5a      	subs	r2, r3, #1
 800dffa:	71fa      	strb	r2, [r7, #7]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1f2      	bne.n	800dfe6 <copy_block_nn+0x10>
}
 800e000:	bf00      	nop
 800e002:	bf00      	nop
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	bc80      	pop	{r7}
 800e00a:	4770      	bx	lr

0800e00c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	4053      	eors	r3, r2
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	3301      	adds	r3, #1
 800e02a:	7819      	ldrb	r1, [r3, #0]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	3301      	adds	r3, #1
 800e030:	781a      	ldrb	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	3301      	adds	r3, #1
 800e036:	404a      	eors	r2, r1
 800e038:	b2d2      	uxtb	r2, r2
 800e03a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3302      	adds	r3, #2
 800e040:	7819      	ldrb	r1, [r3, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	3302      	adds	r3, #2
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	3302      	adds	r3, #2
 800e04c:	404a      	eors	r2, r1
 800e04e:	b2d2      	uxtb	r2, r2
 800e050:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	3303      	adds	r3, #3
 800e056:	7819      	ldrb	r1, [r3, #0]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	3303      	adds	r3, #3
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	3303      	adds	r3, #3
 800e062:	404a      	eors	r2, r1
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	3304      	adds	r3, #4
 800e06c:	7819      	ldrb	r1, [r3, #0]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	3304      	adds	r3, #4
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3304      	adds	r3, #4
 800e078:	404a      	eors	r2, r1
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	3305      	adds	r3, #5
 800e082:	7819      	ldrb	r1, [r3, #0]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	3305      	adds	r3, #5
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3305      	adds	r3, #5
 800e08e:	404a      	eors	r2, r1
 800e090:	b2d2      	uxtb	r2, r2
 800e092:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3306      	adds	r3, #6
 800e098:	7819      	ldrb	r1, [r3, #0]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	3306      	adds	r3, #6
 800e09e:	781a      	ldrb	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	3306      	adds	r3, #6
 800e0a4:	404a      	eors	r2, r1
 800e0a6:	b2d2      	uxtb	r2, r2
 800e0a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3307      	adds	r3, #7
 800e0ae:	7819      	ldrb	r1, [r3, #0]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	3307      	adds	r3, #7
 800e0b4:	781a      	ldrb	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	3307      	adds	r3, #7
 800e0ba:	404a      	eors	r2, r1
 800e0bc:	b2d2      	uxtb	r2, r2
 800e0be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	7819      	ldrb	r1, [r3, #0]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	404a      	eors	r2, r1
 800e0d2:	b2d2      	uxtb	r2, r2
 800e0d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3309      	adds	r3, #9
 800e0da:	7819      	ldrb	r1, [r3, #0]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	3309      	adds	r3, #9
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	3309      	adds	r3, #9
 800e0e6:	404a      	eors	r2, r1
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	330a      	adds	r3, #10
 800e0f0:	7819      	ldrb	r1, [r3, #0]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	330a      	adds	r3, #10
 800e0f6:	781a      	ldrb	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	330a      	adds	r3, #10
 800e0fc:	404a      	eors	r2, r1
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	330b      	adds	r3, #11
 800e106:	7819      	ldrb	r1, [r3, #0]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	330b      	adds	r3, #11
 800e10c:	781a      	ldrb	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	330b      	adds	r3, #11
 800e112:	404a      	eors	r2, r1
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	330c      	adds	r3, #12
 800e11c:	7819      	ldrb	r1, [r3, #0]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	330c      	adds	r3, #12
 800e122:	781a      	ldrb	r2, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	330c      	adds	r3, #12
 800e128:	404a      	eors	r2, r1
 800e12a:	b2d2      	uxtb	r2, r2
 800e12c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	330d      	adds	r3, #13
 800e132:	7819      	ldrb	r1, [r3, #0]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	330d      	adds	r3, #13
 800e138:	781a      	ldrb	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	330d      	adds	r3, #13
 800e13e:	404a      	eors	r2, r1
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	330e      	adds	r3, #14
 800e148:	7819      	ldrb	r1, [r3, #0]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	330e      	adds	r3, #14
 800e14e:	781a      	ldrb	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	330e      	adds	r3, #14
 800e154:	404a      	eors	r2, r1
 800e156:	b2d2      	uxtb	r2, r2
 800e158:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	330f      	adds	r3, #15
 800e15e:	7819      	ldrb	r1, [r3, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	330f      	adds	r3, #15
 800e164:	781a      	ldrb	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	330f      	adds	r3, #15
 800e16a:	404a      	eors	r2, r1
 800e16c:	b2d2      	uxtb	r2, r2
 800e16e:	701a      	strb	r2, [r3, #0]
#endif
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	bc80      	pop	{r7}
 800e178:	4770      	bx	lr

0800e17a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e17a:	b480      	push	{r7}
 800e17c:	b085      	sub	sp, #20
 800e17e:	af00      	add	r7, sp, #0
 800e180:	60f8      	str	r0, [r7, #12]
 800e182:	60b9      	str	r1, [r7, #8]
 800e184:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	781a      	ldrb	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	4053      	eors	r3, r2
 800e190:	b2da      	uxtb	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	3301      	adds	r3, #1
 800e19a:	7819      	ldrb	r1, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	781a      	ldrb	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	404a      	eors	r2, r1
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	7819      	ldrb	r1, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3302      	adds	r3, #2
 800e1b6:	781a      	ldrb	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	404a      	eors	r2, r1
 800e1be:	b2d2      	uxtb	r2, r2
 800e1c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	3303      	adds	r3, #3
 800e1c6:	7819      	ldrb	r1, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3303      	adds	r3, #3
 800e1cc:	781a      	ldrb	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3303      	adds	r3, #3
 800e1d2:	404a      	eors	r2, r1
 800e1d4:	b2d2      	uxtb	r2, r2
 800e1d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	3304      	adds	r3, #4
 800e1dc:	7819      	ldrb	r1, [r3, #0]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	781a      	ldrb	r2, [r3, #0]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	404a      	eors	r2, r1
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	3305      	adds	r3, #5
 800e1f2:	7819      	ldrb	r1, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3305      	adds	r3, #5
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3305      	adds	r3, #5
 800e1fe:	404a      	eors	r2, r1
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	3306      	adds	r3, #6
 800e208:	7819      	ldrb	r1, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3306      	adds	r3, #6
 800e20e:	781a      	ldrb	r2, [r3, #0]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3306      	adds	r3, #6
 800e214:	404a      	eors	r2, r1
 800e216:	b2d2      	uxtb	r2, r2
 800e218:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	3307      	adds	r3, #7
 800e21e:	7819      	ldrb	r1, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3307      	adds	r3, #7
 800e224:	781a      	ldrb	r2, [r3, #0]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3307      	adds	r3, #7
 800e22a:	404a      	eors	r2, r1
 800e22c:	b2d2      	uxtb	r2, r2
 800e22e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	3308      	adds	r3, #8
 800e234:	7819      	ldrb	r1, [r3, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3308      	adds	r3, #8
 800e23a:	781a      	ldrb	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	3308      	adds	r3, #8
 800e240:	404a      	eors	r2, r1
 800e242:	b2d2      	uxtb	r2, r2
 800e244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	3309      	adds	r3, #9
 800e24a:	7819      	ldrb	r1, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3309      	adds	r3, #9
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3309      	adds	r3, #9
 800e256:	404a      	eors	r2, r1
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	330a      	adds	r3, #10
 800e260:	7819      	ldrb	r1, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	330a      	adds	r3, #10
 800e266:	781a      	ldrb	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	330a      	adds	r3, #10
 800e26c:	404a      	eors	r2, r1
 800e26e:	b2d2      	uxtb	r2, r2
 800e270:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	330b      	adds	r3, #11
 800e276:	7819      	ldrb	r1, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	330b      	adds	r3, #11
 800e27c:	781a      	ldrb	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	330b      	adds	r3, #11
 800e282:	404a      	eors	r2, r1
 800e284:	b2d2      	uxtb	r2, r2
 800e286:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	330c      	adds	r3, #12
 800e28c:	7819      	ldrb	r1, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	330c      	adds	r3, #12
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	330c      	adds	r3, #12
 800e298:	404a      	eors	r2, r1
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	330d      	adds	r3, #13
 800e2a2:	7819      	ldrb	r1, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	330d      	adds	r3, #13
 800e2a8:	781a      	ldrb	r2, [r3, #0]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	330d      	adds	r3, #13
 800e2ae:	404a      	eors	r2, r1
 800e2b0:	b2d2      	uxtb	r2, r2
 800e2b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	330e      	adds	r3, #14
 800e2b8:	7819      	ldrb	r1, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	330e      	adds	r3, #14
 800e2be:	781a      	ldrb	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	330e      	adds	r3, #14
 800e2c4:	404a      	eors	r2, r1
 800e2c6:	b2d2      	uxtb	r2, r2
 800e2c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	330f      	adds	r3, #15
 800e2ce:	7819      	ldrb	r1, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	330f      	adds	r3, #15
 800e2d4:	781a      	ldrb	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	330f      	adds	r3, #15
 800e2da:	404a      	eors	r2, r1
 800e2dc:	b2d2      	uxtb	r2, r2
 800e2de:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e2e0:	bf00      	nop
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bc80      	pop	{r7}
 800e2e8:	4770      	bx	lr

0800e2ea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff fe88 	bl	800e00c <xor_block>
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	461a      	mov	r2, r3
 800e312:	4b48      	ldr	r3, [pc, #288]	; (800e434 <shift_sub_rows+0x130>)
 800e314:	5c9a      	ldrb	r2, [r3, r2]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	3304      	adds	r3, #4
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	4619      	mov	r1, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3304      	adds	r3, #4
 800e326:	4a43      	ldr	r2, [pc, #268]	; (800e434 <shift_sub_rows+0x130>)
 800e328:	5c52      	ldrb	r2, [r2, r1]
 800e32a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3308      	adds	r3, #8
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	4619      	mov	r1, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3308      	adds	r3, #8
 800e338:	4a3e      	ldr	r2, [pc, #248]	; (800e434 <shift_sub_rows+0x130>)
 800e33a:	5c52      	ldrb	r2, [r2, r1]
 800e33c:	701a      	strb	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	330c      	adds	r3, #12
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	4619      	mov	r1, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	330c      	adds	r3, #12
 800e34a:	4a3a      	ldr	r2, [pc, #232]	; (800e434 <shift_sub_rows+0x130>)
 800e34c:	5c52      	ldrb	r2, [r2, r1]
 800e34e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	73fb      	strb	r3, [r7, #15]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3305      	adds	r3, #5
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	4619      	mov	r1, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3301      	adds	r3, #1
 800e362:	4a34      	ldr	r2, [pc, #208]	; (800e434 <shift_sub_rows+0x130>)
 800e364:	5c52      	ldrb	r2, [r2, r1]
 800e366:	701a      	strb	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3309      	adds	r3, #9
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	4619      	mov	r1, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3305      	adds	r3, #5
 800e374:	4a2f      	ldr	r2, [pc, #188]	; (800e434 <shift_sub_rows+0x130>)
 800e376:	5c52      	ldrb	r2, [r2, r1]
 800e378:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	330d      	adds	r3, #13
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	4619      	mov	r1, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	3309      	adds	r3, #9
 800e386:	4a2b      	ldr	r2, [pc, #172]	; (800e434 <shift_sub_rows+0x130>)
 800e388:	5c52      	ldrb	r2, [r2, r1]
 800e38a:	701a      	strb	r2, [r3, #0]
 800e38c:	7bfa      	ldrb	r2, [r7, #15]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	330d      	adds	r3, #13
 800e392:	4928      	ldr	r1, [pc, #160]	; (800e434 <shift_sub_rows+0x130>)
 800e394:	5c8a      	ldrb	r2, [r1, r2]
 800e396:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	789b      	ldrb	r3, [r3, #2]
 800e39c:	73fb      	strb	r3, [r7, #15]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	330a      	adds	r3, #10
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3302      	adds	r3, #2
 800e3aa:	4a22      	ldr	r2, [pc, #136]	; (800e434 <shift_sub_rows+0x130>)
 800e3ac:	5c52      	ldrb	r2, [r2, r1]
 800e3ae:	701a      	strb	r2, [r3, #0]
 800e3b0:	7bfa      	ldrb	r2, [r7, #15]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	330a      	adds	r3, #10
 800e3b6:	491f      	ldr	r1, [pc, #124]	; (800e434 <shift_sub_rows+0x130>)
 800e3b8:	5c8a      	ldrb	r2, [r1, r2]
 800e3ba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	799b      	ldrb	r3, [r3, #6]
 800e3c0:	73fb      	strb	r3, [r7, #15]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	330e      	adds	r3, #14
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3306      	adds	r3, #6
 800e3ce:	4a19      	ldr	r2, [pc, #100]	; (800e434 <shift_sub_rows+0x130>)
 800e3d0:	5c52      	ldrb	r2, [r2, r1]
 800e3d2:	701a      	strb	r2, [r3, #0]
 800e3d4:	7bfa      	ldrb	r2, [r7, #15]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	330e      	adds	r3, #14
 800e3da:	4916      	ldr	r1, [pc, #88]	; (800e434 <shift_sub_rows+0x130>)
 800e3dc:	5c8a      	ldrb	r2, [r1, r2]
 800e3de:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7bdb      	ldrb	r3, [r3, #15]
 800e3e4:	73fb      	strb	r3, [r7, #15]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	330b      	adds	r3, #11
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	330f      	adds	r3, #15
 800e3f2:	4a10      	ldr	r2, [pc, #64]	; (800e434 <shift_sub_rows+0x130>)
 800e3f4:	5c52      	ldrb	r2, [r2, r1]
 800e3f6:	701a      	strb	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3307      	adds	r3, #7
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	4619      	mov	r1, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	330b      	adds	r3, #11
 800e404:	4a0b      	ldr	r2, [pc, #44]	; (800e434 <shift_sub_rows+0x130>)
 800e406:	5c52      	ldrb	r2, [r2, r1]
 800e408:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3303      	adds	r3, #3
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	4619      	mov	r1, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	3307      	adds	r3, #7
 800e416:	4a07      	ldr	r2, [pc, #28]	; (800e434 <shift_sub_rows+0x130>)
 800e418:	5c52      	ldrb	r2, [r2, r1]
 800e41a:	701a      	strb	r2, [r3, #0]
 800e41c:	7bfa      	ldrb	r2, [r7, #15]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	3303      	adds	r3, #3
 800e422:	4904      	ldr	r1, [pc, #16]	; (800e434 <shift_sub_rows+0x130>)
 800e424:	5c8a      	ldrb	r2, [r1, r2]
 800e426:	701a      	strb	r2, [r3, #0]
}
 800e428:	bf00      	nop
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bc80      	pop	{r7}
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	08022f18 	.word	0x08022f18

0800e438 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e440:	f107 0308 	add.w	r3, r7, #8
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fd6c 	bl	800df24 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e44c:	7a3b      	ldrb	r3, [r7, #8]
 800e44e:	461a      	mov	r2, r3
 800e450:	4b9a      	ldr	r3, [pc, #616]	; (800e6bc <mix_sub_columns+0x284>)
 800e452:	5c9a      	ldrb	r2, [r3, r2]
 800e454:	7b7b      	ldrb	r3, [r7, #13]
 800e456:	4619      	mov	r1, r3
 800e458:	4b99      	ldr	r3, [pc, #612]	; (800e6c0 <mix_sub_columns+0x288>)
 800e45a:	5c5b      	ldrb	r3, [r3, r1]
 800e45c:	4053      	eors	r3, r2
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	7cbb      	ldrb	r3, [r7, #18]
 800e462:	4619      	mov	r1, r3
 800e464:	4b97      	ldr	r3, [pc, #604]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e466:	5c5b      	ldrb	r3, [r3, r1]
 800e468:	4053      	eors	r3, r2
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
 800e46e:	4619      	mov	r1, r3
 800e470:	4b94      	ldr	r3, [pc, #592]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e472:	5c5b      	ldrb	r3, [r3, r1]
 800e474:	4053      	eors	r3, r2
 800e476:	b2da      	uxtb	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e47c:	7a3b      	ldrb	r3, [r7, #8]
 800e47e:	461a      	mov	r2, r3
 800e480:	4b90      	ldr	r3, [pc, #576]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e482:	5c9a      	ldrb	r2, [r3, r2]
 800e484:	7b7b      	ldrb	r3, [r7, #13]
 800e486:	4619      	mov	r1, r3
 800e488:	4b8c      	ldr	r3, [pc, #560]	; (800e6bc <mix_sub_columns+0x284>)
 800e48a:	5c5b      	ldrb	r3, [r3, r1]
 800e48c:	4053      	eors	r3, r2
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	7cbb      	ldrb	r3, [r7, #18]
 800e492:	4619      	mov	r1, r3
 800e494:	4b8a      	ldr	r3, [pc, #552]	; (800e6c0 <mix_sub_columns+0x288>)
 800e496:	5c5b      	ldrb	r3, [r3, r1]
 800e498:	4053      	eors	r3, r2
 800e49a:	b2d9      	uxtb	r1, r3
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	4b88      	ldr	r3, [pc, #544]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e4a2:	5c9a      	ldrb	r2, [r3, r2]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	404a      	eors	r2, r1
 800e4aa:	b2d2      	uxtb	r2, r2
 800e4ac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e4ae:	7a3b      	ldrb	r3, [r7, #8]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	4b84      	ldr	r3, [pc, #528]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e4b4:	5c9a      	ldrb	r2, [r3, r2]
 800e4b6:	7b7b      	ldrb	r3, [r7, #13]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4b82      	ldr	r3, [pc, #520]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e4bc:	5c5b      	ldrb	r3, [r3, r1]
 800e4be:	4053      	eors	r3, r2
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	7cbb      	ldrb	r3, [r7, #18]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4b7d      	ldr	r3, [pc, #500]	; (800e6bc <mix_sub_columns+0x284>)
 800e4c8:	5c5b      	ldrb	r3, [r3, r1]
 800e4ca:	4053      	eors	r3, r2
 800e4cc:	b2d9      	uxtb	r1, r3
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	4b7b      	ldr	r3, [pc, #492]	; (800e6c0 <mix_sub_columns+0x288>)
 800e4d4:	5c9a      	ldrb	r2, [r3, r2]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3302      	adds	r3, #2
 800e4da:	404a      	eors	r2, r1
 800e4dc:	b2d2      	uxtb	r2, r2
 800e4de:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e4e0:	7a3b      	ldrb	r3, [r7, #8]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4b76      	ldr	r3, [pc, #472]	; (800e6c0 <mix_sub_columns+0x288>)
 800e4e6:	5c9a      	ldrb	r2, [r3, r2]
 800e4e8:	7b7b      	ldrb	r3, [r7, #13]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4b75      	ldr	r3, [pc, #468]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e4ee:	5c5b      	ldrb	r3, [r3, r1]
 800e4f0:	4053      	eors	r3, r2
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	7cbb      	ldrb	r3, [r7, #18]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	4b72      	ldr	r3, [pc, #456]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e4fa:	5c5b      	ldrb	r3, [r3, r1]
 800e4fc:	4053      	eors	r3, r2
 800e4fe:	b2d9      	uxtb	r1, r3
 800e500:	7dfb      	ldrb	r3, [r7, #23]
 800e502:	461a      	mov	r2, r3
 800e504:	4b6d      	ldr	r3, [pc, #436]	; (800e6bc <mix_sub_columns+0x284>)
 800e506:	5c9a      	ldrb	r2, [r3, r2]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3303      	adds	r3, #3
 800e50c:	404a      	eors	r2, r1
 800e50e:	b2d2      	uxtb	r2, r2
 800e510:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e512:	7b3b      	ldrb	r3, [r7, #12]
 800e514:	461a      	mov	r2, r3
 800e516:	4b69      	ldr	r3, [pc, #420]	; (800e6bc <mix_sub_columns+0x284>)
 800e518:	5c9a      	ldrb	r2, [r3, r2]
 800e51a:	7c7b      	ldrb	r3, [r7, #17]
 800e51c:	4619      	mov	r1, r3
 800e51e:	4b68      	ldr	r3, [pc, #416]	; (800e6c0 <mix_sub_columns+0x288>)
 800e520:	5c5b      	ldrb	r3, [r3, r1]
 800e522:	4053      	eors	r3, r2
 800e524:	b2da      	uxtb	r2, r3
 800e526:	7dbb      	ldrb	r3, [r7, #22]
 800e528:	4619      	mov	r1, r3
 800e52a:	4b66      	ldr	r3, [pc, #408]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e52c:	5c5b      	ldrb	r3, [r3, r1]
 800e52e:	4053      	eors	r3, r2
 800e530:	b2d9      	uxtb	r1, r3
 800e532:	7afb      	ldrb	r3, [r7, #11]
 800e534:	461a      	mov	r2, r3
 800e536:	4b63      	ldr	r3, [pc, #396]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e538:	5c9a      	ldrb	r2, [r3, r2]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	3304      	adds	r3, #4
 800e53e:	404a      	eors	r2, r1
 800e540:	b2d2      	uxtb	r2, r2
 800e542:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e544:	7b3b      	ldrb	r3, [r7, #12]
 800e546:	461a      	mov	r2, r3
 800e548:	4b5e      	ldr	r3, [pc, #376]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e54a:	5c9a      	ldrb	r2, [r3, r2]
 800e54c:	7c7b      	ldrb	r3, [r7, #17]
 800e54e:	4619      	mov	r1, r3
 800e550:	4b5a      	ldr	r3, [pc, #360]	; (800e6bc <mix_sub_columns+0x284>)
 800e552:	5c5b      	ldrb	r3, [r3, r1]
 800e554:	4053      	eors	r3, r2
 800e556:	b2da      	uxtb	r2, r3
 800e558:	7dbb      	ldrb	r3, [r7, #22]
 800e55a:	4619      	mov	r1, r3
 800e55c:	4b58      	ldr	r3, [pc, #352]	; (800e6c0 <mix_sub_columns+0x288>)
 800e55e:	5c5b      	ldrb	r3, [r3, r1]
 800e560:	4053      	eors	r3, r2
 800e562:	b2d9      	uxtb	r1, r3
 800e564:	7afb      	ldrb	r3, [r7, #11]
 800e566:	461a      	mov	r2, r3
 800e568:	4b56      	ldr	r3, [pc, #344]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e56a:	5c9a      	ldrb	r2, [r3, r2]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3305      	adds	r3, #5
 800e570:	404a      	eors	r2, r1
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e576:	7b3b      	ldrb	r3, [r7, #12]
 800e578:	461a      	mov	r2, r3
 800e57a:	4b52      	ldr	r3, [pc, #328]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e57c:	5c9a      	ldrb	r2, [r3, r2]
 800e57e:	7c7b      	ldrb	r3, [r7, #17]
 800e580:	4619      	mov	r1, r3
 800e582:	4b50      	ldr	r3, [pc, #320]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e584:	5c5b      	ldrb	r3, [r3, r1]
 800e586:	4053      	eors	r3, r2
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	7dbb      	ldrb	r3, [r7, #22]
 800e58c:	4619      	mov	r1, r3
 800e58e:	4b4b      	ldr	r3, [pc, #300]	; (800e6bc <mix_sub_columns+0x284>)
 800e590:	5c5b      	ldrb	r3, [r3, r1]
 800e592:	4053      	eors	r3, r2
 800e594:	b2d9      	uxtb	r1, r3
 800e596:	7afb      	ldrb	r3, [r7, #11]
 800e598:	461a      	mov	r2, r3
 800e59a:	4b49      	ldr	r3, [pc, #292]	; (800e6c0 <mix_sub_columns+0x288>)
 800e59c:	5c9a      	ldrb	r2, [r3, r2]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3306      	adds	r3, #6
 800e5a2:	404a      	eors	r2, r1
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e5a8:	7b3b      	ldrb	r3, [r7, #12]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	4b44      	ldr	r3, [pc, #272]	; (800e6c0 <mix_sub_columns+0x288>)
 800e5ae:	5c9a      	ldrb	r2, [r3, r2]
 800e5b0:	7c7b      	ldrb	r3, [r7, #17]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4b43      	ldr	r3, [pc, #268]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e5b6:	5c5b      	ldrb	r3, [r3, r1]
 800e5b8:	4053      	eors	r3, r2
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	7dbb      	ldrb	r3, [r7, #22]
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4b40      	ldr	r3, [pc, #256]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e5c2:	5c5b      	ldrb	r3, [r3, r1]
 800e5c4:	4053      	eors	r3, r2
 800e5c6:	b2d9      	uxtb	r1, r3
 800e5c8:	7afb      	ldrb	r3, [r7, #11]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	4b3b      	ldr	r3, [pc, #236]	; (800e6bc <mix_sub_columns+0x284>)
 800e5ce:	5c9a      	ldrb	r2, [r3, r2]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3307      	adds	r3, #7
 800e5d4:	404a      	eors	r2, r1
 800e5d6:	b2d2      	uxtb	r2, r2
 800e5d8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e5da:	7c3b      	ldrb	r3, [r7, #16]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4b37      	ldr	r3, [pc, #220]	; (800e6bc <mix_sub_columns+0x284>)
 800e5e0:	5c9a      	ldrb	r2, [r3, r2]
 800e5e2:	7d7b      	ldrb	r3, [r7, #21]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4b36      	ldr	r3, [pc, #216]	; (800e6c0 <mix_sub_columns+0x288>)
 800e5e8:	5c5b      	ldrb	r3, [r3, r1]
 800e5ea:	4053      	eors	r3, r2
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	7abb      	ldrb	r3, [r7, #10]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4b34      	ldr	r3, [pc, #208]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e5f4:	5c5b      	ldrb	r3, [r3, r1]
 800e5f6:	4053      	eors	r3, r2
 800e5f8:	b2d9      	uxtb	r1, r3
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	4b31      	ldr	r3, [pc, #196]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e600:	5c9a      	ldrb	r2, [r3, r2]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3308      	adds	r3, #8
 800e606:	404a      	eors	r2, r1
 800e608:	b2d2      	uxtb	r2, r2
 800e60a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e60c:	7c3b      	ldrb	r3, [r7, #16]
 800e60e:	461a      	mov	r2, r3
 800e610:	4b2c      	ldr	r3, [pc, #176]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e612:	5c9a      	ldrb	r2, [r3, r2]
 800e614:	7d7b      	ldrb	r3, [r7, #21]
 800e616:	4619      	mov	r1, r3
 800e618:	4b28      	ldr	r3, [pc, #160]	; (800e6bc <mix_sub_columns+0x284>)
 800e61a:	5c5b      	ldrb	r3, [r3, r1]
 800e61c:	4053      	eors	r3, r2
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	7abb      	ldrb	r3, [r7, #10]
 800e622:	4619      	mov	r1, r3
 800e624:	4b26      	ldr	r3, [pc, #152]	; (800e6c0 <mix_sub_columns+0x288>)
 800e626:	5c5b      	ldrb	r3, [r3, r1]
 800e628:	4053      	eors	r3, r2
 800e62a:	b2d9      	uxtb	r1, r3
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	461a      	mov	r2, r3
 800e630:	4b24      	ldr	r3, [pc, #144]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e632:	5c9a      	ldrb	r2, [r3, r2]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3309      	adds	r3, #9
 800e638:	404a      	eors	r2, r1
 800e63a:	b2d2      	uxtb	r2, r2
 800e63c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e63e:	7c3b      	ldrb	r3, [r7, #16]
 800e640:	461a      	mov	r2, r3
 800e642:	4b20      	ldr	r3, [pc, #128]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e644:	5c9a      	ldrb	r2, [r3, r2]
 800e646:	7d7b      	ldrb	r3, [r7, #21]
 800e648:	4619      	mov	r1, r3
 800e64a:	4b1e      	ldr	r3, [pc, #120]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e64c:	5c5b      	ldrb	r3, [r3, r1]
 800e64e:	4053      	eors	r3, r2
 800e650:	b2da      	uxtb	r2, r3
 800e652:	7abb      	ldrb	r3, [r7, #10]
 800e654:	4619      	mov	r1, r3
 800e656:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <mix_sub_columns+0x284>)
 800e658:	5c5b      	ldrb	r3, [r3, r1]
 800e65a:	4053      	eors	r3, r2
 800e65c:	b2d9      	uxtb	r1, r3
 800e65e:	7bfb      	ldrb	r3, [r7, #15]
 800e660:	461a      	mov	r2, r3
 800e662:	4b17      	ldr	r3, [pc, #92]	; (800e6c0 <mix_sub_columns+0x288>)
 800e664:	5c9a      	ldrb	r2, [r3, r2]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	330a      	adds	r3, #10
 800e66a:	404a      	eors	r2, r1
 800e66c:	b2d2      	uxtb	r2, r2
 800e66e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e670:	7c3b      	ldrb	r3, [r7, #16]
 800e672:	461a      	mov	r2, r3
 800e674:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <mix_sub_columns+0x288>)
 800e676:	5c9a      	ldrb	r2, [r3, r2]
 800e678:	7d7b      	ldrb	r3, [r7, #21]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e67e:	5c5b      	ldrb	r3, [r3, r1]
 800e680:	4053      	eors	r3, r2
 800e682:	b2da      	uxtb	r2, r3
 800e684:	7abb      	ldrb	r3, [r7, #10]
 800e686:	4619      	mov	r1, r3
 800e688:	4b0e      	ldr	r3, [pc, #56]	; (800e6c4 <mix_sub_columns+0x28c>)
 800e68a:	5c5b      	ldrb	r3, [r3, r1]
 800e68c:	4053      	eors	r3, r2
 800e68e:	b2d9      	uxtb	r1, r3
 800e690:	7bfb      	ldrb	r3, [r7, #15]
 800e692:	461a      	mov	r2, r3
 800e694:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <mix_sub_columns+0x284>)
 800e696:	5c9a      	ldrb	r2, [r3, r2]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	330b      	adds	r3, #11
 800e69c:	404a      	eors	r2, r1
 800e69e:	b2d2      	uxtb	r2, r2
 800e6a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e6a2:	7d3b      	ldrb	r3, [r7, #20]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4b05      	ldr	r3, [pc, #20]	; (800e6bc <mix_sub_columns+0x284>)
 800e6a8:	5c9a      	ldrb	r2, [r3, r2]
 800e6aa:	7a7b      	ldrb	r3, [r7, #9]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4b04      	ldr	r3, [pc, #16]	; (800e6c0 <mix_sub_columns+0x288>)
 800e6b0:	5c5b      	ldrb	r3, [r3, r1]
 800e6b2:	4053      	eors	r3, r2
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	7bbb      	ldrb	r3, [r7, #14]
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	e005      	b.n	800e6c8 <mix_sub_columns+0x290>
 800e6bc:	08023018 	.word	0x08023018
 800e6c0:	08023118 	.word	0x08023118
 800e6c4:	08022f18 	.word	0x08022f18
 800e6c8:	4b2d      	ldr	r3, [pc, #180]	; (800e780 <mix_sub_columns+0x348>)
 800e6ca:	5c5b      	ldrb	r3, [r3, r1]
 800e6cc:	4053      	eors	r3, r2
 800e6ce:	b2d9      	uxtb	r1, r3
 800e6d0:	7cfb      	ldrb	r3, [r7, #19]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	4b2a      	ldr	r3, [pc, #168]	; (800e780 <mix_sub_columns+0x348>)
 800e6d6:	5c9a      	ldrb	r2, [r3, r2]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	330c      	adds	r3, #12
 800e6dc:	404a      	eors	r2, r1
 800e6de:	b2d2      	uxtb	r2, r2
 800e6e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e6e2:	7d3b      	ldrb	r3, [r7, #20]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	4b26      	ldr	r3, [pc, #152]	; (800e780 <mix_sub_columns+0x348>)
 800e6e8:	5c9a      	ldrb	r2, [r3, r2]
 800e6ea:	7a7b      	ldrb	r3, [r7, #9]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4b25      	ldr	r3, [pc, #148]	; (800e784 <mix_sub_columns+0x34c>)
 800e6f0:	5c5b      	ldrb	r3, [r3, r1]
 800e6f2:	4053      	eors	r3, r2
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	7bbb      	ldrb	r3, [r7, #14]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4b23      	ldr	r3, [pc, #140]	; (800e788 <mix_sub_columns+0x350>)
 800e6fc:	5c5b      	ldrb	r3, [r3, r1]
 800e6fe:	4053      	eors	r3, r2
 800e700:	b2d9      	uxtb	r1, r3
 800e702:	7cfb      	ldrb	r3, [r7, #19]
 800e704:	461a      	mov	r2, r3
 800e706:	4b1e      	ldr	r3, [pc, #120]	; (800e780 <mix_sub_columns+0x348>)
 800e708:	5c9a      	ldrb	r2, [r3, r2]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	330d      	adds	r3, #13
 800e70e:	404a      	eors	r2, r1
 800e710:	b2d2      	uxtb	r2, r2
 800e712:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e714:	7d3b      	ldrb	r3, [r7, #20]
 800e716:	461a      	mov	r2, r3
 800e718:	4b19      	ldr	r3, [pc, #100]	; (800e780 <mix_sub_columns+0x348>)
 800e71a:	5c9a      	ldrb	r2, [r3, r2]
 800e71c:	7a7b      	ldrb	r3, [r7, #9]
 800e71e:	4619      	mov	r1, r3
 800e720:	4b17      	ldr	r3, [pc, #92]	; (800e780 <mix_sub_columns+0x348>)
 800e722:	5c5b      	ldrb	r3, [r3, r1]
 800e724:	4053      	eors	r3, r2
 800e726:	b2da      	uxtb	r2, r3
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	4619      	mov	r1, r3
 800e72c:	4b15      	ldr	r3, [pc, #84]	; (800e784 <mix_sub_columns+0x34c>)
 800e72e:	5c5b      	ldrb	r3, [r3, r1]
 800e730:	4053      	eors	r3, r2
 800e732:	b2d9      	uxtb	r1, r3
 800e734:	7cfb      	ldrb	r3, [r7, #19]
 800e736:	461a      	mov	r2, r3
 800e738:	4b13      	ldr	r3, [pc, #76]	; (800e788 <mix_sub_columns+0x350>)
 800e73a:	5c9a      	ldrb	r2, [r3, r2]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	330e      	adds	r3, #14
 800e740:	404a      	eors	r2, r1
 800e742:	b2d2      	uxtb	r2, r2
 800e744:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e746:	7d3b      	ldrb	r3, [r7, #20]
 800e748:	461a      	mov	r2, r3
 800e74a:	4b0f      	ldr	r3, [pc, #60]	; (800e788 <mix_sub_columns+0x350>)
 800e74c:	5c9a      	ldrb	r2, [r3, r2]
 800e74e:	7a7b      	ldrb	r3, [r7, #9]
 800e750:	4619      	mov	r1, r3
 800e752:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <mix_sub_columns+0x348>)
 800e754:	5c5b      	ldrb	r3, [r3, r1]
 800e756:	4053      	eors	r3, r2
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
 800e75c:	4619      	mov	r1, r3
 800e75e:	4b08      	ldr	r3, [pc, #32]	; (800e780 <mix_sub_columns+0x348>)
 800e760:	5c5b      	ldrb	r3, [r3, r1]
 800e762:	4053      	eors	r3, r2
 800e764:	b2d9      	uxtb	r1, r3
 800e766:	7cfb      	ldrb	r3, [r7, #19]
 800e768:	461a      	mov	r2, r3
 800e76a:	4b06      	ldr	r3, [pc, #24]	; (800e784 <mix_sub_columns+0x34c>)
 800e76c:	5c9a      	ldrb	r2, [r3, r2]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	330f      	adds	r3, #15
 800e772:	404a      	eors	r2, r1
 800e774:	b2d2      	uxtb	r2, r2
 800e776:	701a      	strb	r2, [r3, #0]
  }
 800e778:	bf00      	nop
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	08022f18 	.word	0x08022f18
 800e784:	08023018 	.word	0x08023018
 800e788:	08023118 	.word	0x08023118

0800e78c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	460b      	mov	r3, r1
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	3b10      	subs	r3, #16
 800e79e:	2b10      	cmp	r3, #16
 800e7a0:	bf8c      	ite	hi
 800e7a2:	2201      	movhi	r2, #1
 800e7a4:	2200      	movls	r2, #0
 800e7a6:	b2d2      	uxtb	r2, r2
 800e7a8:	2a00      	cmp	r2, #0
 800e7aa:	d10b      	bne.n	800e7c4 <lorawan_aes_set_key+0x38>
 800e7ac:	4a64      	ldr	r2, [pc, #400]	; (800e940 <lorawan_aes_set_key+0x1b4>)
 800e7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	bf14      	ite	ne
 800e7ba:	2301      	movne	r3, #1
 800e7bc:	2300      	moveq	r3, #0
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d105      	bne.n	800e7d0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e7cc:	23ff      	movs	r3, #255	; 0xff
 800e7ce:	e0b2      	b.n	800e936 <lorawan_aes_set_key+0x1aa>
        break;
 800e7d0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	7afa      	ldrb	r2, [r7, #11]
 800e7d6:	68f9      	ldr	r1, [r7, #12]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fbfc 	bl	800dfd6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e7de:	7afb      	ldrb	r3, [r7, #11]
 800e7e0:	331c      	adds	r3, #28
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e7e8:	7c7b      	ldrb	r3, [r7, #17]
 800e7ea:	091b      	lsrs	r3, r3, #4
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	75fb      	strb	r3, [r7, #23]
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	75bb      	strb	r3, [r7, #22]
 800e800:	e093      	b.n	800e92a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e802:	7dfb      	ldrb	r3, [r7, #23]
 800e804:	3b04      	subs	r3, #4
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	5cd3      	ldrb	r3, [r2, r3]
 800e80a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	3b03      	subs	r3, #3
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	5cd3      	ldrb	r3, [r2, r3]
 800e814:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e816:	7dfb      	ldrb	r3, [r7, #23]
 800e818:	3b02      	subs	r3, #2
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	5cd3      	ldrb	r3, [r2, r3]
 800e81e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	3b01      	subs	r3, #1
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	5cd3      	ldrb	r3, [r2, r3]
 800e828:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	7afa      	ldrb	r2, [r7, #11]
 800e82e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e832:	fb01 f202 	mul.w	r2, r1, r2
 800e836:	1a9b      	subs	r3, r3, r2
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d127      	bne.n	800e88e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e83e:	7d7b      	ldrb	r3, [r7, #21]
 800e840:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e842:	7d3b      	ldrb	r3, [r7, #20]
 800e844:	4a3f      	ldr	r2, [pc, #252]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e846:	5cd2      	ldrb	r2, [r2, r3]
 800e848:	7dbb      	ldrb	r3, [r7, #22]
 800e84a:	4053      	eors	r3, r2
 800e84c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e84e:	7cfb      	ldrb	r3, [r7, #19]
 800e850:	4a3c      	ldr	r2, [pc, #240]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e852:	5cd3      	ldrb	r3, [r2, r3]
 800e854:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e856:	7cbb      	ldrb	r3, [r7, #18]
 800e858:	4a3a      	ldr	r2, [pc, #232]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e85a:	5cd3      	ldrb	r3, [r2, r3]
 800e85c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e85e:	7c3b      	ldrb	r3, [r7, #16]
 800e860:	4a38      	ldr	r2, [pc, #224]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e862:	5cd3      	ldrb	r3, [r2, r3]
 800e864:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e866:	7dbb      	ldrb	r3, [r7, #22]
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	b25a      	sxtb	r2, r3
 800e86c:	7dbb      	ldrb	r3, [r7, #22]
 800e86e:	09db      	lsrs	r3, r3, #7
 800e870:	b2db      	uxtb	r3, r3
 800e872:	4619      	mov	r1, r3
 800e874:	0049      	lsls	r1, r1, #1
 800e876:	440b      	add	r3, r1
 800e878:	4619      	mov	r1, r3
 800e87a:	00c8      	lsls	r0, r1, #3
 800e87c:	4619      	mov	r1, r3
 800e87e:	4603      	mov	r3, r0
 800e880:	440b      	add	r3, r1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	b25b      	sxtb	r3, r3
 800e886:	4053      	eors	r3, r2
 800e888:	b25b      	sxtb	r3, r3
 800e88a:	75bb      	strb	r3, [r7, #22]
 800e88c:	e01c      	b.n	800e8c8 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e88e:	7afb      	ldrb	r3, [r7, #11]
 800e890:	2b18      	cmp	r3, #24
 800e892:	d919      	bls.n	800e8c8 <lorawan_aes_set_key+0x13c>
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	7afa      	ldrb	r2, [r7, #11]
 800e898:	fbb3 f1f2 	udiv	r1, r3, r2
 800e89c:	fb01 f202 	mul.w	r2, r1, r2
 800e8a0:	1a9b      	subs	r3, r3, r2
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b10      	cmp	r3, #16
 800e8a6:	d10f      	bne.n	800e8c8 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e8a8:	7d7b      	ldrb	r3, [r7, #21]
 800e8aa:	4a26      	ldr	r2, [pc, #152]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e8ac:	5cd3      	ldrb	r3, [r2, r3]
 800e8ae:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e8b0:	7d3b      	ldrb	r3, [r7, #20]
 800e8b2:	4a24      	ldr	r2, [pc, #144]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e8b4:	5cd3      	ldrb	r3, [r2, r3]
 800e8b6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e8b8:	7cfb      	ldrb	r3, [r7, #19]
 800e8ba:	4a22      	ldr	r2, [pc, #136]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e8bc:	5cd3      	ldrb	r3, [r2, r3]
 800e8be:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e8c0:	7cbb      	ldrb	r3, [r7, #18]
 800e8c2:	4a20      	ldr	r2, [pc, #128]	; (800e944 <lorawan_aes_set_key+0x1b8>)
 800e8c4:	5cd3      	ldrb	r3, [r2, r3]
 800e8c6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e8c8:	7dfa      	ldrb	r2, [r7, #23]
 800e8ca:	7afb      	ldrb	r3, [r7, #11]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e8d0:	7c3b      	ldrb	r3, [r7, #16]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	5cd1      	ldrb	r1, [r2, r3]
 800e8d6:	7dfb      	ldrb	r3, [r7, #23]
 800e8d8:	7d7a      	ldrb	r2, [r7, #21]
 800e8da:	404a      	eors	r2, r1
 800e8dc:	b2d1      	uxtb	r1, r2
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e8e2:	7c3b      	ldrb	r3, [r7, #16]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	5cd1      	ldrb	r1, [r2, r3]
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	7d3a      	ldrb	r2, [r7, #20]
 800e8f0:	404a      	eors	r2, r1
 800e8f2:	b2d1      	uxtb	r1, r2
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e8f8:	7c3b      	ldrb	r3, [r7, #16]
 800e8fa:	3302      	adds	r3, #2
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	5cd1      	ldrb	r1, [r2, r3]
 800e900:	7dfb      	ldrb	r3, [r7, #23]
 800e902:	3302      	adds	r3, #2
 800e904:	7cfa      	ldrb	r2, [r7, #19]
 800e906:	404a      	eors	r2, r1
 800e908:	b2d1      	uxtb	r1, r2
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e90e:	7c3b      	ldrb	r3, [r7, #16]
 800e910:	3303      	adds	r3, #3
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	5cd1      	ldrb	r1, [r2, r3]
 800e916:	7dfb      	ldrb	r3, [r7, #23]
 800e918:	3303      	adds	r3, #3
 800e91a:	7cba      	ldrb	r2, [r7, #18]
 800e91c:	404a      	eors	r2, r1
 800e91e:	b2d1      	uxtb	r1, r2
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e924:	7dfb      	ldrb	r3, [r7, #23]
 800e926:	3304      	adds	r3, #4
 800e928:	75fb      	strb	r3, [r7, #23]
 800e92a:	7dfa      	ldrb	r2, [r7, #23]
 800e92c:	7c7b      	ldrb	r3, [r7, #17]
 800e92e:	429a      	cmp	r2, r3
 800e930:	f4ff af67 	bcc.w	800e802 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	00010101 	.word	0x00010101
 800e944:	08022f18 	.word	0x08022f18

0800e948 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08a      	sub	sp, #40	; 0x28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d038      	beq.n	800e9d0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	f107 0314 	add.w	r3, r7, #20
 800e964:	68f9      	ldr	r1, [r7, #12]
 800e966:	4618      	mov	r0, r3
 800e968:	f7ff fc07 	bl	800e17a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e96c:	2301      	movs	r3, #1
 800e96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e972:	e014      	b.n	800e99e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e974:	f107 0314 	add.w	r3, r7, #20
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fd5d 	bl	800e438 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e984:	0112      	lsls	r2, r2, #4
 800e986:	441a      	add	r2, r3
 800e988:	f107 0314 	add.w	r3, r7, #20
 800e98c:	4611      	mov	r1, r2
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fcab 	bl	800e2ea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e998:	3301      	adds	r3, #1
 800e99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e9a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d3e3      	bcc.n	800e974 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e9ac:	f107 0314 	add.w	r3, r7, #20
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff fca7 	bl	800e304 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9bc:	0112      	lsls	r2, r2, #4
 800e9be:	441a      	add	r2, r3
 800e9c0:	f107 0314 	add.w	r3, r7, #20
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	68b8      	ldr	r0, [r7, #8]
 800e9c8:	f7ff fbd7 	bl	800e17a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	e000      	b.n	800e9d2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e9d0:	23ff      	movs	r3, #255	; 0xff
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3728      	adds	r7, #40	; 0x28
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800e9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9de:	b09d      	sub	sp, #116	; 0x74
 800e9e0:	af10      	add	r7, sp, #64	; 0x40
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e9e8:	2306      	movs	r3, #6
 800e9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800e9ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fa19 	bl	800ee30 <SecureElementGetKeyByID>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ea04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f040 80b0 	bne.w	800eb6e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800ea0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ea16:	4b58      	ldr	r3, [pc, #352]	; (800eb78 <PrintKey+0x19c>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	2002      	movs	r0, #2
 800ea1e:	f00f ff07 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea22:	e056      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800ea24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d106      	bne.n	800ea3a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ea2c:	4b53      	ldr	r3, [pc, #332]	; (800eb7c <PrintKey+0x1a0>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	2100      	movs	r1, #0
 800ea32:	2002      	movs	r0, #2
 800ea34:	f00f fefc 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea38:	e04b      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ea3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d106      	bne.n	800ea50 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ea42:	4b4f      	ldr	r3, [pc, #316]	; (800eb80 <PrintKey+0x1a4>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	2100      	movs	r1, #0
 800ea48:	2002      	movs	r0, #2
 800ea4a:	f00f fef1 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea4e:	e040      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d106      	bne.n	800ea66 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ea58:	4b4a      	ldr	r3, [pc, #296]	; (800eb84 <PrintKey+0x1a8>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	2002      	movs	r0, #2
 800ea60:	f00f fee6 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea64:	e035      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ea66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d106      	bne.n	800ea7c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ea6e:	4b46      	ldr	r3, [pc, #280]	; (800eb88 <PrintKey+0x1ac>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	2100      	movs	r1, #0
 800ea74:	2002      	movs	r0, #2
 800ea76:	f00f fedb 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea7a:	e02a      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ea7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea80:	2b7f      	cmp	r3, #127	; 0x7f
 800ea82:	d106      	bne.n	800ea92 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ea84:	4b41      	ldr	r3, [pc, #260]	; (800eb8c <PrintKey+0x1b0>)
 800ea86:	2200      	movs	r2, #0
 800ea88:	2100      	movs	r1, #0
 800ea8a:	2002      	movs	r0, #2
 800ea8c:	f00f fed0 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800ea90:	e01f      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ea92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea96:	2b80      	cmp	r3, #128	; 0x80
 800ea98:	d106      	bne.n	800eaa8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ea9a:	4b3d      	ldr	r3, [pc, #244]	; (800eb90 <PrintKey+0x1b4>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	2002      	movs	r0, #2
 800eaa2:	f00f fec5 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800eaa6:	e014      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800eaa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaac:	2b81      	cmp	r3, #129	; 0x81
 800eaae:	d106      	bne.n	800eabe <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800eab0:	4b38      	ldr	r3, [pc, #224]	; (800eb94 <PrintKey+0x1b8>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	2100      	movs	r1, #0
 800eab6:	2002      	movs	r0, #2
 800eab8:	f00f feba 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 800eabc:	e009      	b.n	800ead2 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800eabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac2:	2b82      	cmp	r3, #130	; 0x82
 800eac4:	d105      	bne.n	800ead2 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800eac6:	4b34      	ldr	r3, [pc, #208]	; (800eb98 <PrintKey+0x1bc>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	2100      	movs	r1, #0
 800eacc:	2002      	movs	r0, #2
 800eace:	f00f feaf 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ead2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead4:	785b      	ldrb	r3, [r3, #1]
 800ead6:	4618      	mov	r0, r3
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	789b      	ldrb	r3, [r3, #2]
 800eadc:	461c      	mov	r4, r3
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	78db      	ldrb	r3, [r3, #3]
 800eae2:	461d      	mov	r5, r3
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	791b      	ldrb	r3, [r3, #4]
 800eae8:	461e      	mov	r6, r3
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	795b      	ldrb	r3, [r3, #5]
 800eaee:	623b      	str	r3, [r7, #32]
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	799b      	ldrb	r3, [r3, #6]
 800eaf4:	61fb      	str	r3, [r7, #28]
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	79db      	ldrb	r3, [r3, #7]
 800eafa:	61bb      	str	r3, [r7, #24]
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	7a1b      	ldrb	r3, [r3, #8]
 800eb00:	617b      	str	r3, [r7, #20]
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	7a5b      	ldrb	r3, [r3, #9]
 800eb06:	613b      	str	r3, [r7, #16]
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	7a9b      	ldrb	r3, [r3, #10]
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	7adb      	ldrb	r3, [r3, #11]
 800eb12:	60bb      	str	r3, [r7, #8]
 800eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb16:	7b1b      	ldrb	r3, [r3, #12]
 800eb18:	607b      	str	r3, [r7, #4]
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	7b5b      	ldrb	r3, [r3, #13]
 800eb1e:	603b      	str	r3, [r7, #0]
 800eb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb22:	7b9b      	ldrb	r3, [r3, #14]
 800eb24:	4619      	mov	r1, r3
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	7bdb      	ldrb	r3, [r3, #15]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	7c1b      	ldrb	r3, [r3, #16]
 800eb30:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb32:	920e      	str	r2, [sp, #56]	; 0x38
 800eb34:	910d      	str	r1, [sp, #52]	; 0x34
 800eb36:	683a      	ldr	r2, [r7, #0]
 800eb38:	920c      	str	r2, [sp, #48]	; 0x30
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	920a      	str	r2, [sp, #40]	; 0x28
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	9209      	str	r2, [sp, #36]	; 0x24
 800eb46:	693a      	ldr	r2, [r7, #16]
 800eb48:	9208      	str	r2, [sp, #32]
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	9207      	str	r2, [sp, #28]
 800eb4e:	69ba      	ldr	r2, [r7, #24]
 800eb50:	9206      	str	r2, [sp, #24]
 800eb52:	69fa      	ldr	r2, [r7, #28]
 800eb54:	9205      	str	r2, [sp, #20]
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	9304      	str	r3, [sp, #16]
 800eb5a:	9603      	str	r6, [sp, #12]
 800eb5c:	9502      	str	r5, [sp, #8]
 800eb5e:	9401      	str	r4, [sp, #4]
 800eb60:	9000      	str	r0, [sp, #0]
 800eb62:	4b0e      	ldr	r3, [pc, #56]	; (800eb9c <PrintKey+0x1c0>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	2100      	movs	r1, #0
 800eb68:	2002      	movs	r0, #2
 800eb6a:	f00f fe61 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800eb6e:	bf00      	nop
 800eb70:	3734      	adds	r7, #52	; 0x34
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb76:	bf00      	nop
 800eb78:	080225ac 	.word	0x080225ac
 800eb7c:	080225c4 	.word	0x080225c4
 800eb80:	080225dc 	.word	0x080225dc
 800eb84:	080225f4 	.word	0x080225f4
 800eb88:	0802260c 	.word	0x0802260c
 800eb8c:	08022624 	.word	0x08022624
 800eb90:	0802263c 	.word	0x0802263c
 800eb94:	08022654 	.word	0x08022654
 800eb98:	0802266c 	.word	0x0802266c
 800eb9c:	08022684 	.word	0x08022684

0800eba0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	6039      	str	r1, [r7, #0]
 800ebaa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebac:	2300      	movs	r3, #0
 800ebae:	73fb      	strb	r3, [r7, #15]
 800ebb0:	e01a      	b.n	800ebe8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ebb2:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <GetKeyByID+0x5c>)
 800ebb4:	6819      	ldr	r1, [r3, #0]
 800ebb6:	7bfa      	ldrb	r2, [r7, #15]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	011b      	lsls	r3, r3, #4
 800ebbc:	4413      	add	r3, r2
 800ebbe:	440b      	add	r3, r1
 800ebc0:	3310      	adds	r3, #16
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	79fa      	ldrb	r2, [r7, #7]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d10b      	bne.n	800ebe2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ebca:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <GetKeyByID+0x5c>)
 800ebcc:	6819      	ldr	r1, [r3, #0]
 800ebce:	7bfa      	ldrb	r2, [r7, #15]
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3310      	adds	r3, #16
 800ebd8:	18ca      	adds	r2, r1, r3
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e006      	b.n	800ebf0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	73fb      	strb	r3, [r7, #15]
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	2b09      	cmp	r3, #9
 800ebec:	d9e1      	bls.n	800ebb2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ebee:	2303      	movs	r3, #3
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bc80      	pop	{r7}
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	20003264 	.word	0x20003264

0800ec00 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b0d1      	sub	sp, #324	; 0x144
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ec0a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ec0e:	6020      	str	r0, [r4, #0]
 800ec10:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ec14:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ec18:	6001      	str	r1, [r0, #0]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec20:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ec24:	801a      	strh	r2, [r3, #0]
 800ec26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec2a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ec2e:	460a      	mov	r2, r1
 800ec30:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ec32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d003      	beq.n	800ec48 <ComputeCmac+0x48>
 800ec40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	e05c      	b.n	800ed06 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ec4c:	f107 0314 	add.w	r3, r7, #20
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fe ff1b 	bl	800da8c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ec56:	f107 0210 	add.w	r2, r7, #16
 800ec5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec5e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff ff9a 	bl	800eba0 <GetKeyByID>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ec72:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d143      	bne.n	800ed02 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ec7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	f107 0314 	add.w	r3, r7, #20
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe ff16 	bl	800dabe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ec92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d009      	beq.n	800ecb4 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800eca0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eca8:	f107 0014 	add.w	r0, r7, #20
 800ecac:	2210      	movs	r2, #16
 800ecae:	6819      	ldr	r1, [r3, #0]
 800ecb0:	f7fe ff14 	bl	800dadc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ecb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecb8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ecbc:	881a      	ldrh	r2, [r3, #0]
 800ecbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ecc6:	f107 0014 	add.w	r0, r7, #20
 800ecca:	6819      	ldr	r1, [r3, #0]
 800eccc:	f7fe ff06 	bl	800dadc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ecd0:	f107 0214 	add.w	r2, r7, #20
 800ecd4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ecd8:	4611      	mov	r1, r2
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe ffc0 	bl	800dc60 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ece0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ece4:	061a      	lsls	r2, r3, #24
 800ece6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ecea:	041b      	lsls	r3, r3, #16
 800ecec:	431a      	orrs	r2, r3
 800ecee:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ecf2:	021b      	lsls	r3, r3, #8
 800ecf4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ecf6:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ed00:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ed02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd90      	pop	{r4, r7, pc}

0800ed10 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ed10:	b5b0      	push	{r4, r5, r7, lr}
 800ed12:	b0b2      	sub	sp, #200	; 0xc8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800ed1a:	f107 0308 	add.w	r3, r7, #8
 800ed1e:	22c0      	movs	r2, #192	; 0xc0
 800ed20:	2100      	movs	r1, #0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f011 fe86 	bl	8020a34 <memset>
 800ed28:	4a3b      	ldr	r2, [pc, #236]	; (800ee18 <SecureElementInit+0x108>)
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed32:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed36:	4a39      	ldr	r2, [pc, #228]	; (800ee1c <SecureElementInit+0x10c>)
 800ed38:	f107 0310 	add.w	r3, r7, #16
 800ed3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed40:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed44:	4b36      	ldr	r3, [pc, #216]	; (800ee20 <SecureElementInit+0x110>)
 800ed46:	f107 0419 	add.w	r4, r7, #25
 800ed4a:	461d      	mov	r5, r3
 800ed4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed4e:	6020      	str	r0, [r4, #0]
 800ed50:	6061      	str	r1, [r4, #4]
 800ed52:	60a2      	str	r2, [r4, #8]
 800ed54:	60e3      	str	r3, [r4, #12]
 800ed56:	2301      	movs	r3, #1
 800ed58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ed5c:	4b30      	ldr	r3, [pc, #192]	; (800ee20 <SecureElementInit+0x110>)
 800ed5e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800ed62:	461d      	mov	r5, r3
 800ed64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed66:	6020      	str	r0, [r4, #0]
 800ed68:	6061      	str	r1, [r4, #4]
 800ed6a:	60a2      	str	r2, [r4, #8]
 800ed6c:	60e3      	str	r3, [r4, #12]
 800ed6e:	2302      	movs	r3, #2
 800ed70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800ed74:	4b2a      	ldr	r3, [pc, #168]	; (800ee20 <SecureElementInit+0x110>)
 800ed76:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800ed7a:	461d      	mov	r5, r3
 800ed7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed7e:	6020      	str	r0, [r4, #0]
 800ed80:	6061      	str	r1, [r4, #4]
 800ed82:	60a2      	str	r2, [r4, #8]
 800ed84:	60e3      	str	r3, [r4, #12]
 800ed86:	2303      	movs	r3, #3
 800ed88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ed8c:	4b24      	ldr	r3, [pc, #144]	; (800ee20 <SecureElementInit+0x110>)
 800ed8e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ed92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ed98:	2304      	movs	r3, #4
 800ed9a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800ed9e:	237f      	movs	r3, #127	; 0x7f
 800eda0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800eda4:	2380      	movs	r3, #128	; 0x80
 800eda6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800edaa:	2381      	movs	r3, #129	; 0x81
 800edac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800edb0:	2382      	movs	r3, #130	; 0x82
 800edb2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800edb6:	2383      	movs	r3, #131	; 0x83
 800edb8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800edc2:	2302      	movs	r3, #2
 800edc4:	e023      	b.n	800ee0e <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800edc6:	4a17      	ldr	r2, [pc, #92]	; (800ee24 <SecureElementInit+0x114>)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800edcc:	4b15      	ldr	r3, [pc, #84]	; (800ee24 <SecureElementInit+0x114>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f107 0108 	add.w	r1, r7, #8
 800edd4:	22c0      	movs	r2, #192	; 0xc0
 800edd6:	4618      	mov	r0, r3
 800edd8:	f00c fbc3 	bl	801b562 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800eddc:	4b12      	ldr	r3, [pc, #72]	; (800ee28 <SecureElementInit+0x118>)
 800edde:	2200      	movs	r2, #0
 800ede0:	2100      	movs	r1, #0
 800ede2:	2002      	movs	r0, #2
 800ede4:	f00f fd24 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ede8:	2000      	movs	r0, #0
 800edea:	f7ff fdf7 	bl	800e9dc <PrintKey>
    PrintKey(NWK_KEY);
 800edee:	2001      	movs	r0, #1
 800edf0:	f7ff fdf4 	bl	800e9dc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800edf4:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <SecureElementInit+0x11c>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	2100      	movs	r1, #0
 800edfa:	2002      	movs	r0, #2
 800edfc:	f00f fd18 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ee00:	2003      	movs	r0, #3
 800ee02:	f7ff fdeb 	bl	800e9dc <PrintKey>
    PrintKey(NWK_S_KEY);
 800ee06:	2002      	movs	r0, #2
 800ee08:	f7ff fde8 	bl	800e9dc <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	37c8      	adds	r7, #200	; 0xc8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bdb0      	pop	{r4, r5, r7, pc}
 800ee16:	bf00      	nop
 800ee18:	08022708 	.word	0x08022708
 800ee1c:	08022710 	.word	0x08022710
 800ee20:	08022718 	.word	0x08022718
 800ee24:	20003264 	.word	0x20003264
 800ee28:	080226d8 	.word	0x080226d8
 800ee2c:	080226f0 	.word	0x080226f0

0800ee30 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	4603      	mov	r3, r0
 800ee38:	6039      	str	r1, [r7, #0]
 800ee3a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	73fb      	strb	r3, [r7, #15]
 800ee40:	e01a      	b.n	800ee78 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ee42:	4b12      	ldr	r3, [pc, #72]	; (800ee8c <SecureElementGetKeyByID+0x5c>)
 800ee44:	6819      	ldr	r1, [r3, #0]
 800ee46:	7bfa      	ldrb	r2, [r7, #15]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	440b      	add	r3, r1
 800ee50:	3310      	adds	r3, #16
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	79fa      	ldrb	r2, [r7, #7]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d10b      	bne.n	800ee72 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ee5a:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <SecureElementGetKeyByID+0x5c>)
 800ee5c:	6819      	ldr	r1, [r3, #0]
 800ee5e:	7bfa      	ldrb	r2, [r7, #15]
 800ee60:	4613      	mov	r3, r2
 800ee62:	011b      	lsls	r3, r3, #4
 800ee64:	4413      	add	r3, r2
 800ee66:	3310      	adds	r3, #16
 800ee68:	18ca      	adds	r2, r1, r3
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e006      	b.n	800ee80 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	3301      	adds	r3, #1
 800ee76:	73fb      	strb	r3, [r7, #15]
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	2b09      	cmp	r3, #9
 800ee7c:	d9e1      	bls.n	800ee42 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee7e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3714      	adds	r7, #20
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bc80      	pop	{r7}
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	20003264 	.word	0x20003264

0800ee90 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b088      	sub	sp, #32
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	6039      	str	r1, [r7, #0]
 800ee9a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eea2:	2302      	movs	r3, #2
 800eea4:	e04c      	b.n	800ef40 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eea6:	2300      	movs	r3, #0
 800eea8:	77fb      	strb	r3, [r7, #31]
 800eeaa:	e045      	b.n	800ef38 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eeac:	4b26      	ldr	r3, [pc, #152]	; (800ef48 <SecureElementSetKey+0xb8>)
 800eeae:	6819      	ldr	r1, [r3, #0]
 800eeb0:	7ffa      	ldrb	r2, [r7, #31]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	011b      	lsls	r3, r3, #4
 800eeb6:	4413      	add	r3, r2
 800eeb8:	440b      	add	r3, r1
 800eeba:	3310      	adds	r3, #16
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	79fa      	ldrb	r2, [r7, #7]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d136      	bne.n	800ef32 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	2b80      	cmp	r3, #128	; 0x80
 800eec8:	d123      	bne.n	800ef12 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800eeca:	2306      	movs	r3, #6
 800eecc:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
 800eed2:	f107 0310 	add.w	r3, r7, #16
 800eed6:	2200      	movs	r2, #0
 800eed8:	601a      	str	r2, [r3, #0]
 800eeda:	605a      	str	r2, [r3, #4]
 800eedc:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800eede:	f107 030c 	add.w	r3, r7, #12
 800eee2:	227f      	movs	r2, #127	; 0x7f
 800eee4:	2110      	movs	r1, #16
 800eee6:	6838      	ldr	r0, [r7, #0]
 800eee8:	f000 f87d 	bl	800efe6 <SecureElementAesEncrypt>
 800eeec:	4603      	mov	r3, r0
 800eeee:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800eef0:	4b15      	ldr	r3, [pc, #84]	; (800ef48 <SecureElementSetKey+0xb8>)
 800eef2:	6819      	ldr	r1, [r3, #0]
 800eef4:	7ffa      	ldrb	r2, [r7, #31]
 800eef6:	4613      	mov	r3, r2
 800eef8:	011b      	lsls	r3, r3, #4
 800eefa:	4413      	add	r3, r2
 800eefc:	3310      	adds	r3, #16
 800eefe:	440b      	add	r3, r1
 800ef00:	3301      	adds	r3, #1
 800ef02:	f107 010c 	add.w	r1, r7, #12
 800ef06:	2210      	movs	r2, #16
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f00c fb2a 	bl	801b562 <memcpy1>
                return retval;
 800ef0e:	7fbb      	ldrb	r3, [r7, #30]
 800ef10:	e016      	b.n	800ef40 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ef12:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <SecureElementSetKey+0xb8>)
 800ef14:	6819      	ldr	r1, [r3, #0]
 800ef16:	7ffa      	ldrb	r2, [r7, #31]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	011b      	lsls	r3, r3, #4
 800ef1c:	4413      	add	r3, r2
 800ef1e:	3310      	adds	r3, #16
 800ef20:	440b      	add	r3, r1
 800ef22:	3301      	adds	r3, #1
 800ef24:	2210      	movs	r2, #16
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f00c fb1a 	bl	801b562 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e006      	b.n	800ef40 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef32:	7ffb      	ldrb	r3, [r7, #31]
 800ef34:	3301      	adds	r3, #1
 800ef36:	77fb      	strb	r3, [r7, #31]
 800ef38:	7ffb      	ldrb	r3, [r7, #31]
 800ef3a:	2b09      	cmp	r3, #9
 800ef3c:	d9b6      	bls.n	800eeac <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef3e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3720      	adds	r7, #32
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	20003264 	.word	0x20003264

0800ef4c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af02      	add	r7, sp, #8
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4611      	mov	r1, r2
 800ef58:	461a      	mov	r2, r3
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	80fb      	strh	r3, [r7, #6]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ef62:	797b      	ldrb	r3, [r7, #5]
 800ef64:	2b7e      	cmp	r3, #126	; 0x7e
 800ef66:	d901      	bls.n	800ef6c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	e009      	b.n	800ef80 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ef6c:	7979      	ldrb	r1, [r7, #5]
 800ef6e:	88fa      	ldrh	r2, [r7, #6]
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	460b      	mov	r3, r1
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff fe41 	bl	800ec00 <ComputeCmac>
 800ef7e:	4603      	mov	r3, r0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3710      	adds	r7, #16
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b088      	sub	sp, #32
 800ef8c:	af02      	add	r7, sp, #8
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	607a      	str	r2, [r7, #4]
 800ef92:	461a      	mov	r2, r3
 800ef94:	460b      	mov	r3, r1
 800ef96:	817b      	strh	r3, [r7, #10]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efa2:	2302      	movs	r3, #2
 800efa4:	e01b      	b.n	800efde <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800efa6:	2306      	movs	r3, #6
 800efa8:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800efae:	7a79      	ldrb	r1, [r7, #9]
 800efb0:	897a      	ldrh	r2, [r7, #10]
 800efb2:	f107 0310 	add.w	r3, r7, #16
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	460b      	mov	r3, r1
 800efba:	68f9      	ldr	r1, [r7, #12]
 800efbc:	2000      	movs	r0, #0
 800efbe:	f7ff fe1f 	bl	800ec00 <ComputeCmac>
 800efc2:	4603      	mov	r3, r0
 800efc4:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800efc6:	7dfb      	ldrb	r3, [r7, #23]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	e006      	b.n	800efde <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d001      	beq.n	800efdc <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800efd8:	2301      	movs	r3, #1
 800efda:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800efdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b0c2      	sub	sp, #264	; 0x108
 800efea:	af00      	add	r7, sp, #0
 800efec:	60f8      	str	r0, [r7, #12]
 800efee:	4608      	mov	r0, r1
 800eff0:	4611      	mov	r1, r2
 800eff2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800eff6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800effa:	6013      	str	r3, [r2, #0]
 800effc:	4603      	mov	r3, r0
 800effe:	817b      	strh	r3, [r7, #10]
 800f000:	460b      	mov	r3, r1
 800f002:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d006      	beq.n	800f018 <SecureElementAesEncrypt+0x32>
 800f00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f00e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f018:	2302      	movs	r3, #2
 800f01a:	e046      	b.n	800f0aa <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f01c:	897b      	ldrh	r3, [r7, #10]
 800f01e:	f003 030f 	and.w	r3, r3, #15
 800f022:	b29b      	uxth	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f028:	2305      	movs	r3, #5
 800f02a:	e03e      	b.n	800f0aa <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f02c:	f107 0314 	add.w	r3, r7, #20
 800f030:	22f0      	movs	r2, #240	; 0xf0
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f00c facf 	bl	801b5d8 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f03a:	f107 0210 	add.w	r2, r7, #16
 800f03e:	7a7b      	ldrb	r3, [r7, #9]
 800f040:	4611      	mov	r1, r2
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fdac 	bl	800eba0 <GetKeyByID>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f04e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f052:	2b00      	cmp	r3, #0
 800f054:	d127      	bne.n	800f0a6 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	3301      	adds	r3, #1
 800f05a:	f107 0214 	add.w	r2, r7, #20
 800f05e:	2110      	movs	r1, #16
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff fb93 	bl	800e78c <lorawan_aes_set_key>

        uint8_t block = 0;
 800f066:	2300      	movs	r3, #0
 800f068:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f06c:	e018      	b.n	800f0a0 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800f06e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	18d0      	adds	r0, r2, r3
 800f076:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f07a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f07e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f082:	6812      	ldr	r2, [r2, #0]
 800f084:	4413      	add	r3, r2
 800f086:	f107 0214 	add.w	r2, r7, #20
 800f08a:	4619      	mov	r1, r3
 800f08c:	f7ff fc5c 	bl	800e948 <lorawan_aes_encrypt>
            block = block + 16;
 800f090:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f094:	3310      	adds	r3, #16
 800f096:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f09a:	897b      	ldrh	r3, [r7, #10]
 800f09c:	3b10      	subs	r3, #16
 800f09e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800f0a0:	897b      	ldrh	r3, [r7, #10]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1e3      	bne.n	800f06e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f0a6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	e02e      	b.n	800f12c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f0ce:	2306      	movs	r3, #6
 800f0d0:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f0d2:	78bb      	ldrb	r3, [r7, #2]
 800f0d4:	2b7f      	cmp	r3, #127	; 0x7f
 800f0d6:	d104      	bne.n	800f0e2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	2b04      	cmp	r3, #4
 800f0dc:	d001      	beq.n	800f0e2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e024      	b.n	800f12c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	f107 0310 	add.w	r3, r7, #16
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]
 800f0ee:	605a      	str	r2, [r3, #4]
 800f0f0:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f0f2:	f107 030c 	add.w	r3, r7, #12
 800f0f6:	78fa      	ldrb	r2, [r7, #3]
 800f0f8:	2110      	movs	r1, #16
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7ff ff73 	bl	800efe6 <SecureElementAesEncrypt>
 800f100:	4603      	mov	r3, r0
 800f102:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f104:	7ffb      	ldrb	r3, [r7, #31]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f10a:	7ffb      	ldrb	r3, [r7, #31]
 800f10c:	e00e      	b.n	800f12c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f10e:	f107 020c 	add.w	r2, r7, #12
 800f112:	78bb      	ldrb	r3, [r7, #2]
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff feba 	bl	800ee90 <SecureElementSetKey>
 800f11c:	4603      	mov	r3, r0
 800f11e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f120:	7ffb      	ldrb	r3, [r7, #31]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f126:	7ffb      	ldrb	r3, [r7, #31]
 800f128:	e000      	b.n	800f12c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f12a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3720      	adds	r7, #32
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60b9      	str	r1, [r7, #8]
 800f13c:	607b      	str	r3, [r7, #4]
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	4613      	mov	r3, r2
 800f144:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <SecureElementProcessJoinAccept+0x24>
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <SecureElementProcessJoinAccept+0x24>
 800f152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f158:	2302      	movs	r3, #2
 800f15a:	e064      	b.n	800f226 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f15c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f160:	2b21      	cmp	r3, #33	; 0x21
 800f162:	d901      	bls.n	800f168 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f164:	2305      	movs	r3, #5
 800f166:	e05e      	b.n	800f226 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f168:	2301      	movs	r3, #1
 800f16a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f16c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f170:	b29b      	uxth	r3, r3
 800f172:	461a      	mov	r2, r3
 800f174:	6879      	ldr	r1, [r7, #4]
 800f176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f178:	f00c f9f3 	bl	801b562 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	1c58      	adds	r0, r3, #1
 800f180:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f184:	b29b      	uxth	r3, r3
 800f186:	3b01      	subs	r3, #1
 800f188:	b299      	uxth	r1, r3
 800f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18c:	3301      	adds	r3, #1
 800f18e:	7dfa      	ldrb	r2, [r7, #23]
 800f190:	f7ff ff29 	bl	800efe6 <SecureElementAesEncrypt>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f19a:	2307      	movs	r3, #7
 800f19c:	e043      	b.n	800f226 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	330b      	adds	r3, #11
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	09db      	lsrs	r3, r3, #7
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f1b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1b4:	3b04      	subs	r3, #4
 800f1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b8:	4413      	add	r3, r2
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f1be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1c2:	3b03      	subs	r3, #3
 800f1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c6:	4413      	add	r3, r2
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	021b      	lsls	r3, r3, #8
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f1d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1d6:	3b02      	subs	r3, #2
 800f1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1da:	4413      	add	r3, r2
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	041b      	lsls	r3, r3, #16
 800f1e0:	693a      	ldr	r2, [r7, #16]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f1e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ee:	4413      	add	r3, r2
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	061b      	lsls	r3, r3, #24
 800f1f4:	693a      	ldr	r2, [r7, #16]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10e      	bne.n	800f220 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f202:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f206:	b29b      	uxth	r3, r3
 800f208:	3b04      	subs	r3, #4
 800f20a:	b299      	uxth	r1, r3
 800f20c:	2301      	movs	r3, #1
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f212:	f7ff feb9 	bl	800ef88 <SecureElementVerifyAesCmac>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f21c:	2301      	movs	r3, #1
 800f21e:	e002      	b.n	800f226 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f220:	2304      	movs	r3, #4
 800f222:	e000      	b.n	800f226 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f23e:	2302      	movs	r3, #2
 800f240:	e006      	b.n	800f250 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f242:	4b05      	ldr	r3, [pc, #20]	; (800f258 <SecureElementRandomNumber+0x28>)
 800f244:	695b      	ldr	r3, [r3, #20]
 800f246:	4798      	blx	r3
 800f248:	4602      	mov	r2, r0
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f24e:	2300      	movs	r3, #0
}
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	080232e4 	.word	0x080232e4

0800f25c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d101      	bne.n	800f26e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f26a:	2302      	movs	r3, #2
 800f26c:	e007      	b.n	800f27e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <SecureElementSetDevEui+0x2c>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2208      	movs	r2, #8
 800f274:	6879      	ldr	r1, [r7, #4]
 800f276:	4618      	mov	r0, r3
 800f278:	f00c f973 	bl	801b562 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	20003264 	.word	0x20003264

0800f28c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800f290:	4b02      	ldr	r3, [pc, #8]	; (800f29c <SecureElementGetDevEui+0x10>)
 800f292:	681b      	ldr	r3, [r3, #0]
}
 800f294:	4618      	mov	r0, r3
 800f296:	46bd      	mov	sp, r7
 800f298:	bc80      	pop	{r7}
 800f29a:	4770      	bx	lr
 800f29c:	20003264 	.word	0x20003264

0800f2a0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	e008      	b.n	800f2c4 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f2b2:	4b06      	ldr	r3, [pc, #24]	; (800f2cc <SecureElementSetJoinEui+0x2c>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	2208      	movs	r2, #8
 800f2ba:	6879      	ldr	r1, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f00c f950 	bl	801b562 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20003264 	.word	0x20003264

0800f2d0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800f2d4:	4b03      	ldr	r3, [pc, #12]	; (800f2e4 <SecureElementGetJoinEui+0x14>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	3308      	adds	r3, #8
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bc80      	pop	{r7}
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	20003264 	.word	0x20003264

0800f2e8 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800f2f0:	4a1a      	ldr	r2, [pc, #104]	; (800f35c <LmHandlerInit+0x74>)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f2f6:	4b1a      	ldr	r3, [pc, #104]	; (800f360 <LmHandlerInit+0x78>)
 800f2f8:	4a1a      	ldr	r2, [pc, #104]	; (800f364 <LmHandlerInit+0x7c>)
 800f2fa:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f2fc:	4b18      	ldr	r3, [pc, #96]	; (800f360 <LmHandlerInit+0x78>)
 800f2fe:	4a1a      	ldr	r2, [pc, #104]	; (800f368 <LmHandlerInit+0x80>)
 800f300:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f302:	4b17      	ldr	r3, [pc, #92]	; (800f360 <LmHandlerInit+0x78>)
 800f304:	4a19      	ldr	r2, [pc, #100]	; (800f36c <LmHandlerInit+0x84>)
 800f306:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f308:	4b15      	ldr	r3, [pc, #84]	; (800f360 <LmHandlerInit+0x78>)
 800f30a:	4a19      	ldr	r2, [pc, #100]	; (800f370 <LmHandlerInit+0x88>)
 800f30c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f30e:	4b13      	ldr	r3, [pc, #76]	; (800f35c <LmHandlerInit+0x74>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a17      	ldr	r2, [pc, #92]	; (800f374 <LmHandlerInit+0x8c>)
 800f316:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f318:	4b10      	ldr	r3, [pc, #64]	; (800f35c <LmHandlerInit+0x74>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	4a15      	ldr	r2, [pc, #84]	; (800f374 <LmHandlerInit+0x8c>)
 800f320:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f322:	4b0e      	ldr	r3, [pc, #56]	; (800f35c <LmHandlerInit+0x74>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	689b      	ldr	r3, [r3, #8]
 800f328:	4a12      	ldr	r2, [pc, #72]	; (800f374 <LmHandlerInit+0x8c>)
 800f32a:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f32c:	4b11      	ldr	r3, [pc, #68]	; (800f374 <LmHandlerInit+0x8c>)
 800f32e:	4a12      	ldr	r2, [pc, #72]	; (800f378 <LmHandlerInit+0x90>)
 800f330:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f332:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <LmHandlerInit+0x74>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	4a0e      	ldr	r2, [pc, #56]	; (800f374 <LmHandlerInit+0x8c>)
 800f33a:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800f33c:	490f      	ldr	r1, [pc, #60]	; (800f37c <LmHandlerInit+0x94>)
 800f33e:	2000      	movs	r0, #0
 800f340:	f000 fd28 	bl	800fd94 <LmHandlerPackageRegister>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800f34a:	f04f 33ff 	mov.w	r3, #4294967295
 800f34e:	e000      	b.n	800f352 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3708      	adds	r7, #8
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	2000328c 	.word	0x2000328c
 800f360:	20003290 	.word	0x20003290
 800f364:	0800fae9 	.word	0x0800fae9
 800f368:	0800fb51 	.word	0x0800fb51
 800f36c:	0800fc31 	.word	0x0800fc31
 800f370:	0800fcf5 	.word	0x0800fcf5
 800f374:	200032a0 	.word	0x200032a0
 800f378:	08010815 	.word	0x08010815
 800f37c:	200000a8 	.word	0x200000a8

0800f380 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f382:	b099      	sub	sp, #100	; 0x64
 800f384:	af08      	add	r7, sp, #32
 800f386:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800f38c:	2210      	movs	r2, #16
 800f38e:	6879      	ldr	r1, [r7, #4]
 800f390:	4882      	ldr	r0, [pc, #520]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f392:	f00f fd3f 	bl	801ee14 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800f396:	f7fc fb61 	bl	800ba5c <LoraInfo_GetPtr>
 800f39a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800f39c:	4b7f      	ldr	r3, [pc, #508]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	4093      	lsls	r3, r2
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00c      	beq.n	800f3cc <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800f3b2:	4b7a      	ldr	r3, [pc, #488]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4979      	ldr	r1, [pc, #484]	; (800f5a0 <LmHandlerConfigure+0x220>)
 800f3ba:	487a      	ldr	r0, [pc, #488]	; (800f5a4 <LmHandlerConfigure+0x224>)
 800f3bc:	f004 ff4c 	bl	8014258 <LoRaMacInitialization>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d009      	beq.n	800f3da <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800f3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ca:	e0e2      	b.n	800f592 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800f3cc:	4b76      	ldr	r3, [pc, #472]	; (800f5a8 <LmHandlerConfigure+0x228>)
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	f00f fa2c 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800f3d8:	e7fe      	b.n	800f3d8 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800f3da:	f001 fa2c 	bl	8010836 <NvmDataMgmtRestore>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800f3e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800f3e8:	4b70      	ldr	r3, [pc, #448]	; (800f5ac <LmHandlerConfigure+0x22c>)
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	701a      	strb	r2, [r3, #0]
 800f3ee:	e002      	b.n	800f3f6 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800f3f0:	4b6e      	ldr	r3, [pc, #440]	; (800f5ac <LmHandlerConfigure+0x22c>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f3fa:	f107 0314 	add.w	r3, r7, #20
 800f3fe:	4618      	mov	r0, r3
 800f400:	f005 fa74 	bl	80148ec <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	2208      	movs	r2, #8
 800f408:	4619      	mov	r1, r3
 800f40a:	4869      	ldr	r0, [pc, #420]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f40c:	f00c f8a9 	bl	801b562 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800f410:	2303      	movs	r3, #3
 800f412:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f414:	f107 0314 	add.w	r3, r7, #20
 800f418:	4618      	mov	r0, r3
 800f41a:	f005 fa67 	bl	80148ec <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	2208      	movs	r2, #8
 800f422:	4619      	mov	r1, r3
 800f424:	4863      	ldr	r0, [pc, #396]	; (800f5b4 <LmHandlerConfigure+0x234>)
 800f426:	f00c f89c 	bl	801b562 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800f42a:	4b63      	ldr	r3, [pc, #396]	; (800f5b8 <LmHandlerConfigure+0x238>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	4798      	blx	r3
 800f432:	4603      	mov	r3, r0
 800f434:	4a5e      	ldr	r2, [pc, #376]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f436:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800f438:	2306      	movs	r3, #6
 800f43a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800f43c:	4b5c      	ldr	r3, [pc, #368]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f43e:	695b      	ldr	r3, [r3, #20]
 800f440:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f442:	f107 0314 	add.w	r3, r7, #20
 800f446:	4618      	mov	r0, r3
 800f448:	f005 fbae 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f44c:	4b58      	ldr	r3, [pc, #352]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	4b57      	ldr	r3, [pc, #348]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f454:	785b      	ldrb	r3, [r3, #1]
 800f456:	4619      	mov	r1, r3
 800f458:	4b55      	ldr	r3, [pc, #340]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f45a:	789b      	ldrb	r3, [r3, #2]
 800f45c:	4618      	mov	r0, r3
 800f45e:	4b54      	ldr	r3, [pc, #336]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f460:	78db      	ldrb	r3, [r3, #3]
 800f462:	461c      	mov	r4, r3
 800f464:	4b52      	ldr	r3, [pc, #328]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f466:	791b      	ldrb	r3, [r3, #4]
 800f468:	461d      	mov	r5, r3
 800f46a:	4b51      	ldr	r3, [pc, #324]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f46c:	795b      	ldrb	r3, [r3, #5]
 800f46e:	461e      	mov	r6, r3
 800f470:	4b4f      	ldr	r3, [pc, #316]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f472:	799b      	ldrb	r3, [r3, #6]
 800f474:	603b      	str	r3, [r7, #0]
 800f476:	4b4e      	ldr	r3, [pc, #312]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f478:	79db      	ldrb	r3, [r3, #7]
 800f47a:	9307      	str	r3, [sp, #28]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	9306      	str	r3, [sp, #24]
 800f480:	9605      	str	r6, [sp, #20]
 800f482:	9504      	str	r5, [sp, #16]
 800f484:	9403      	str	r4, [sp, #12]
 800f486:	9002      	str	r0, [sp, #8]
 800f488:	9101      	str	r1, [sp, #4]
 800f48a:	9200      	str	r2, [sp, #0]
 800f48c:	4b4b      	ldr	r3, [pc, #300]	; (800f5bc <LmHandlerConfigure+0x23c>)
 800f48e:	2200      	movs	r2, #0
 800f490:	2100      	movs	r1, #0
 800f492:	2002      	movs	r0, #2
 800f494:	f00f f9cc 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f498:	4b45      	ldr	r3, [pc, #276]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f49a:	7a1b      	ldrb	r3, [r3, #8]
 800f49c:	461a      	mov	r2, r3
 800f49e:	4b44      	ldr	r3, [pc, #272]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4a0:	7a5b      	ldrb	r3, [r3, #9]
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4b42      	ldr	r3, [pc, #264]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4a6:	7a9b      	ldrb	r3, [r3, #10]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	4b41      	ldr	r3, [pc, #260]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4ac:	7adb      	ldrb	r3, [r3, #11]
 800f4ae:	461c      	mov	r4, r3
 800f4b0:	4b3f      	ldr	r3, [pc, #252]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4b2:	7b1b      	ldrb	r3, [r3, #12]
 800f4b4:	461d      	mov	r5, r3
 800f4b6:	4b3e      	ldr	r3, [pc, #248]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4b8:	7b5b      	ldrb	r3, [r3, #13]
 800f4ba:	461e      	mov	r6, r3
 800f4bc:	4b3c      	ldr	r3, [pc, #240]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4be:	7b9b      	ldrb	r3, [r3, #14]
 800f4c0:	603b      	str	r3, [r7, #0]
 800f4c2:	4b3b      	ldr	r3, [pc, #236]	; (800f5b0 <LmHandlerConfigure+0x230>)
 800f4c4:	7bdb      	ldrb	r3, [r3, #15]
 800f4c6:	9307      	str	r3, [sp, #28]
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	9306      	str	r3, [sp, #24]
 800f4cc:	9605      	str	r6, [sp, #20]
 800f4ce:	9504      	str	r5, [sp, #16]
 800f4d0:	9403      	str	r4, [sp, #12]
 800f4d2:	9002      	str	r0, [sp, #8]
 800f4d4:	9101      	str	r1, [sp, #4]
 800f4d6:	9200      	str	r2, [sp, #0]
 800f4d8:	4b39      	ldr	r3, [pc, #228]	; (800f5c0 <LmHandlerConfigure+0x240>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	2100      	movs	r1, #0
 800f4de:	2002      	movs	r0, #2
 800f4e0:	f00f f9a6 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800f4e4:	4b37      	ldr	r3, [pc, #220]	; (800f5c4 <LmHandlerConfigure+0x244>)
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b37      	ldr	r3, [pc, #220]	; (800f5c8 <LmHandlerConfigure+0x248>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4b36      	ldr	r3, [pc, #216]	; (800f5cc <LmHandlerConfigure+0x24c>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	4b36      	ldr	r3, [pc, #216]	; (800f5d0 <LmHandlerConfigure+0x250>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	9303      	str	r3, [sp, #12]
 800f4fc:	9002      	str	r0, [sp, #8]
 800f4fe:	9101      	str	r1, [sp, #4]
 800f500:	9200      	str	r2, [sp, #0]
 800f502:	4b34      	ldr	r3, [pc, #208]	; (800f5d4 <LmHandlerConfigure+0x254>)
 800f504:	2200      	movs	r2, #0
 800f506:	2100      	movs	r1, #0
 800f508:	2002      	movs	r0, #2
 800f50a:	f00f f991 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f50e:	230f      	movs	r3, #15
 800f510:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f512:	2301      	movs	r3, #1
 800f514:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f516:	f107 0314 	add.w	r3, r7, #20
 800f51a:	4618      	mov	r0, r3
 800f51c:	f005 fb44 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800f520:	2305      	movs	r3, #5
 800f522:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f524:	2300      	movs	r3, #0
 800f526:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f528:	f107 0314 	add.w	r3, r7, #20
 800f52c:	4618      	mov	r0, r3
 800f52e:	f005 fb3b 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f532:	2310      	movs	r3, #16
 800f534:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f536:	2300      	movs	r3, #0
 800f538:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f53a:	f107 0314 	add.w	r3, r7, #20
 800f53e:	4618      	mov	r0, r3
 800f540:	f005 fb32 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f544:	2304      	movs	r3, #4
 800f546:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f548:	4b14      	ldr	r3, [pc, #80]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f54a:	789b      	ldrb	r3, [r3, #2]
 800f54c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f54e:	f107 0314 	add.w	r3, r7, #20
 800f552:	4618      	mov	r0, r3
 800f554:	f005 fb28 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f558:	230f      	movs	r3, #15
 800f55a:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f55c:	4b0f      	ldr	r3, [pc, #60]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f107 020c 	add.w	r2, r7, #12
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f008 f92f 	bl	80177ca <RegionGetPhyParam>
 800f56c:	4603      	mov	r3, r0
 800f56e:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	2b00      	cmp	r3, #0
 800f574:	bf14      	ite	ne
 800f576:	2301      	movne	r3, #1
 800f578:	2300      	moveq	r3, #0
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	4b07      	ldr	r3, [pc, #28]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f57e:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800f580:	2014      	movs	r0, #20
 800f582:	f000 fa99 	bl	800fab8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f586:	4b05      	ldr	r3, [pc, #20]	; (800f59c <LmHandlerConfigure+0x21c>)
 800f588:	795b      	ldrb	r3, [r3, #5]
 800f58a:	4618      	mov	r0, r3
 800f58c:	f006 f880 	bl	8015690 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3744      	adds	r7, #68	; 0x44
 800f596:	46bd      	mov	sp, r7
 800f598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2000327c 	.word	0x2000327c
 800f5a0:	200032a0 	.word	0x200032a0
 800f5a4:	20003290 	.word	0x20003290
 800f5a8:	08022728 	.word	0x08022728
 800f5ac:	200033be 	.word	0x200033be
 800f5b0:	20000090 	.word	0x20000090
 800f5b4:	20000098 	.word	0x20000098
 800f5b8:	2000328c 	.word	0x2000328c
 800f5bc:	08022774 	.word	0x08022774
 800f5c0:	080227b0 	.word	0x080227b0
 800f5c4:	200000a7 	.word	0x200000a7
 800f5c8:	200000a6 	.word	0x200000a6
 800f5cc:	200000a5 	.word	0x200000a5
 800f5d0:	200000a4 	.word	0x200000a4
 800f5d4:	080227ec 	.word	0x080227ec

0800f5d8 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800f5dc:	f002 fdea 	bl	80121b4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800f5e0:	f000 fcc2 	bl	800ff68 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800f5e4:	f001 f920 	bl	8010828 <NvmDataMgmtStore>
}
 800f5e8:	bf00      	nop
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b090      	sub	sp, #64	; 0x40
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d111      	bne.n	800f620 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f5fc:	4b23      	ldr	r3, [pc, #140]	; (800f68c <LmHandlerJoin+0xa0>)
 800f5fe:	2202      	movs	r2, #2
 800f600:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800f602:	f005 f8dd 	bl	80147c0 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800f606:	2301      	movs	r3, #1
 800f608:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f60a:	4b21      	ldr	r3, [pc, #132]	; (800f690 <LmHandlerJoin+0xa4>)
 800f60c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f610:	b2db      	uxtb	r3, r3
 800f612:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800f614:	f107 0308 	add.w	r3, r7, #8
 800f618:	4618      	mov	r0, r3
 800f61a:	f005 fe03 	bl	8015224 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800f61e:	e030      	b.n	800f682 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f620:	4b1a      	ldr	r3, [pc, #104]	; (800f68c <LmHandlerJoin+0xa0>)
 800f622:	2201      	movs	r2, #1
 800f624:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f626:	4b1a      	ldr	r3, [pc, #104]	; (800f690 <LmHandlerJoin+0xa4>)
 800f628:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f62c:	4b17      	ldr	r3, [pc, #92]	; (800f68c <LmHandlerJoin+0xa0>)
 800f62e:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f630:	4b16      	ldr	r3, [pc, #88]	; (800f68c <LmHandlerJoin+0xa0>)
 800f632:	2200      	movs	r2, #0
 800f634:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800f636:	4b17      	ldr	r3, [pc, #92]	; (800f694 <LmHandlerJoin+0xa8>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	f083 0301 	eor.w	r3, r3, #1
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b00      	cmp	r3, #0
 800f642:	d008      	beq.n	800f656 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f644:	2327      	movs	r3, #39	; 0x27
 800f646:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f648:	4b13      	ldr	r3, [pc, #76]	; (800f698 <LmHandlerJoin+0xac>)
 800f64a:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800f64c:	f107 031c 	add.w	r3, r7, #28
 800f650:	4618      	mov	r0, r3
 800f652:	f005 faa9 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f656:	f005 f8b3 	bl	80147c0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f65a:	2301      	movs	r3, #1
 800f65c:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f65e:	2301      	movs	r3, #1
 800f660:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f664:	f107 031c 	add.w	r3, r7, #28
 800f668:	4618      	mov	r0, r3
 800f66a:	f005 fa9d 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f66e:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <LmHandlerJoin+0xb0>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	69db      	ldr	r3, [r3, #28]
 800f674:	4805      	ldr	r0, [pc, #20]	; (800f68c <LmHandlerJoin+0xa0>)
 800f676:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800f678:	4b05      	ldr	r3, [pc, #20]	; (800f690 <LmHandlerJoin+0xa4>)
 800f67a:	785b      	ldrb	r3, [r3, #1]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f000 f92d 	bl	800f8dc <LmHandlerRequestClass>
}
 800f682:	bf00      	nop
 800f684:	3740      	adds	r7, #64	; 0x40
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	200000b4 	.word	0x200000b4
 800f690:	2000327c 	.word	0x2000327c
 800f694:	200033be 	.word	0x200033be
 800f698:	01000300 	.word	0x01000300
 800f69c:	2000328c 	.word	0x2000328c

0800f6a0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08a      	sub	sp, #40	; 0x28
 800f6a4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f6aa:	463b      	mov	r3, r7
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f005 f91d 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800f6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f6c0:	793b      	ldrb	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d101      	bne.n	800f6ca <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e002      	b.n	800f6d0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e000      	b.n	800f6d0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f6ce:	2300      	movs	r3, #0
    }
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3728      	adds	r7, #40	; 0x28
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b08c      	sub	sp, #48	; 0x30
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	607a      	str	r2, [r7, #4]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	72fb      	strb	r3, [r7, #11]
 800f6e8:	4613      	mov	r3, r2
 800f6ea:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6ec:	23ff      	movs	r3, #255	; 0xff
 800f6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800f6f2:	f002 fac9 	bl	8011c88 <LoRaMacIsBusy>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f6fc:	f06f 0301 	mvn.w	r3, #1
 800f700:	e0b4      	b.n	800f86c <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f702:	f7ff ffcd 	bl	800f6a0 <LmHandlerJoinStatus>
 800f706:	4603      	mov	r3, r0
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d007      	beq.n	800f71c <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800f70c:	4b59      	ldr	r3, [pc, #356]	; (800f874 <LmHandlerSend+0x19c>)
 800f70e:	789b      	ldrb	r3, [r3, #2]
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff ff6b 	bl	800f5ec <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f716:	f06f 0302 	mvn.w	r3, #2
 800f71a:	e0a7      	b.n	800f86c <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f71c:	4b56      	ldr	r3, [pc, #344]	; (800f878 <LmHandlerSend+0x1a0>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	4798      	blx	r3
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00d      	beq.n	800f746 <LmHandlerSend+0x6e>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	781a      	ldrb	r2, [r3, #0]
 800f72e:	4b52      	ldr	r3, [pc, #328]	; (800f878 <LmHandlerSend+0x1a0>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d006      	beq.n	800f746 <LmHandlerSend+0x6e>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d002      	beq.n	800f746 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f740:	f06f 0303 	mvn.w	r3, #3
 800f744:	e092      	b.n	800f86c <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f746:	4b4d      	ldr	r3, [pc, #308]	; (800f87c <LmHandlerSend+0x1a4>)
 800f748:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f74c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	785b      	ldrb	r3, [r3, #1]
 800f754:	f107 0214 	add.w	r2, r7, #20
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f005 f83e 	bl	80147dc <LoRaMacQueryTxPossible>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d009      	beq.n	800f77a <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f766:	4b46      	ldr	r3, [pc, #280]	; (800f880 <LmHandlerSend+0x1a8>)
 800f768:	2200      	movs	r2, #0
 800f76a:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f76c:	2300      	movs	r3, #0
 800f76e:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f770:	2300      	movs	r3, #0
 800f772:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f778:	e017      	b.n	800f7aa <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800f77a:	4a41      	ldr	r2, [pc, #260]	; (800f880 <LmHandlerSend+0x1a8>)
 800f77c:	7afb      	ldrb	r3, [r7, #11]
 800f77e:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	785b      	ldrb	r3, [r3, #1]
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d102      	bne.n	800f7a0 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800f79a:	2300      	movs	r3, #0
 800f79c:	763b      	strb	r3, [r7, #24]
 800f79e:	e004      	b.n	800f7aa <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800f7aa:	4b35      	ldr	r3, [pc, #212]	; (800f880 <LmHandlerSend+0x1a8>)
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	330c      	adds	r3, #12
 800f7b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7b4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f7b8:	4b30      	ldr	r3, [pc, #192]	; (800f87c <LmHandlerSend+0x1a4>)
 800f7ba:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f7be:	4b30      	ldr	r3, [pc, #192]	; (800f880 <LmHandlerSend+0x1a8>)
 800f7c0:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800f7c2:	7aba      	ldrb	r2, [r7, #10]
 800f7c4:	f107 0318 	add.w	r3, r7, #24
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f005 fe6a 	bl	80154a4 <LoRaMacMcpsRequest>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800f7e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f7e6:	2b11      	cmp	r3, #17
 800f7e8:	d83a      	bhi.n	800f860 <LmHandlerSend+0x188>
 800f7ea:	a201      	add	r2, pc, #4	; (adr r2, 800f7f0 <LmHandlerSend+0x118>)
 800f7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f0:	0800f839 	.word	0x0800f839
 800f7f4:	0800f841 	.word	0x0800f841
 800f7f8:	0800f861 	.word	0x0800f861
 800f7fc:	0800f861 	.word	0x0800f861
 800f800:	0800f861 	.word	0x0800f861
 800f804:	0800f861 	.word	0x0800f861
 800f808:	0800f861 	.word	0x0800f861
 800f80c:	0800f849 	.word	0x0800f849
 800f810:	0800f861 	.word	0x0800f861
 800f814:	0800f861 	.word	0x0800f861
 800f818:	0800f861 	.word	0x0800f861
 800f81c:	0800f859 	.word	0x0800f859
 800f820:	0800f861 	.word	0x0800f861
 800f824:	0800f861 	.word	0x0800f861
 800f828:	0800f841 	.word	0x0800f841
 800f82c:	0800f841 	.word	0x0800f841
 800f830:	0800f841 	.word	0x0800f841
 800f834:	0800f851 	.word	0x0800f851
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f838:	2300      	movs	r3, #0
 800f83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f83e:	e013      	b.n	800f868 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f840:	23fe      	movs	r3, #254	; 0xfe
 800f842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f846:	e00f      	b.n	800f868 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f848:	23fd      	movs	r3, #253	; 0xfd
 800f84a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f84e:	e00b      	b.n	800f868 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f850:	23fb      	movs	r3, #251	; 0xfb
 800f852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f856:	e007      	b.n	800f868 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f858:	23fa      	movs	r3, #250	; 0xfa
 800f85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f85e:	e003      	b.n	800f868 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f860:	23ff      	movs	r3, #255	; 0xff
 800f862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f866:	bf00      	nop
    }

    return lmhStatus;
 800f868:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3730      	adds	r7, #48	; 0x30
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	200000b4 	.word	0x200000b4
 800f878:	20003268 	.word	0x20003268
 800f87c:	2000327c 	.word	0x2000327c
 800f880:	200032b4 	.word	0x200032b4

0800f884 <LmHandlerLinkCheckReq>:

LmHandlerErrorStatus_t LmHandlerLinkCheckReq( void )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_LINK_CHECK;
 800f88a:	2304      	movs	r3, #4
 800f88c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f88e:	463b      	mov	r3, r7
 800f890:	4618      	mov	r0, r3
 800f892:	f005 fcc7 	bl	8015224 <LoRaMacMlmeRequest>
 800f896:	4603      	mov	r3, r0
 800f898:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <LmHandlerLinkCheckReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	e001      	b.n	800f8a8 <LmHandlerLinkCheckReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f8a4:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f8b6:	230a      	movs	r3, #10
 800f8b8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f8ba:	463b      	mov	r3, r7
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f005 fcb1 	bl	8015224 <LoRaMacMlmeRequest>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800f8c6:	7dfb      	ldrb	r3, [r7, #23]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d101      	bne.n	800f8d0 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	e001      	b.n	800f8d4 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f8d0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08c      	sub	sp, #48	; 0x30
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800f8ec:	f002 f9cc 	bl	8011c88 <LoRaMacIsBusy>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f8f6:	f06f 0301 	mvn.w	r3, #1
 800f8fa:	e079      	b.n	800f9f0 <LmHandlerRequestClass+0x114>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800f8fc:	f7ff fed0 	bl	800f6a0 <LmHandlerJoinStatus>
 800f900:	4603      	mov	r3, r0
 800f902:	2b01      	cmp	r3, #1
 800f904:	d002      	beq.n	800f90c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f906:	f06f 0302 	mvn.w	r3, #2
 800f90a:	e071      	b.n	800f9f0 <LmHandlerRequestClass+0x114>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f90c:	2300      	movs	r3, #0
 800f90e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f910:	f107 0308 	add.w	r3, r7, #8
 800f914:	4618      	mov	r0, r3
 800f916:	f004 ffe9 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f920:	f04f 33ff 	mov.w	r3, #4294967295
 800f924:	e064      	b.n	800f9f0 <LmHandlerRequestClass+0x114>
    }
    currentClass = mibReq.Param.Class;
 800f926:	7b3b      	ldrb	r3, [r7, #12]
 800f928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800f92c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f930:	79fb      	ldrb	r3, [r7, #7]
 800f932:	429a      	cmp	r2, r3
 800f934:	d05a      	beq.n	800f9ec <LmHandlerRequestClass+0x110>
    {
        switch( newClass )
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d02c      	beq.n	800f996 <LmHandlerRequestClass+0xba>
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	dc50      	bgt.n	800f9e2 <LmHandlerRequestClass+0x106>
 800f940:	2b00      	cmp	r3, #0
 800f942:	d002      	beq.n	800f94a <LmHandlerRequestClass+0x6e>
 800f944:	2b01      	cmp	r3, #1
 800f946:	d022      	beq.n	800f98e <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800f948:	e04b      	b.n	800f9e2 <LmHandlerRequestClass+0x106>
                if( currentClass != CLASS_A )
 800f94a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d049      	beq.n	800f9e6 <LmHandlerRequestClass+0x10a>
                    mibReq.Param.Class = newClass;
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f956:	f107 0308 	add.w	r3, r7, #8
 800f95a:	4618      	mov	r0, r3
 800f95c:	f005 f924 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d10f      	bne.n	800f986 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800f966:	79fb      	ldrb	r3, [r7, #7]
 800f968:	4618      	mov	r0, r3
 800f96a:	f000 ff3b 	bl	80107e4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f96e:	4b22      	ldr	r3, [pc, #136]	; (800f9f8 <LmHandlerRequestClass+0x11c>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f974:	2b00      	cmp	r3, #0
 800f976:	d036      	beq.n	800f9e6 <LmHandlerRequestClass+0x10a>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f978:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <LmHandlerRequestClass+0x11c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97e:	79fa      	ldrb	r2, [r7, #7]
 800f980:	4610      	mov	r0, r2
 800f982:	4798      	blx	r3
            break;
 800f984:	e02f      	b.n	800f9e6 <LmHandlerRequestClass+0x10a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f986:	23ff      	movs	r3, #255	; 0xff
 800f988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f98c:	e02b      	b.n	800f9e6 <LmHandlerRequestClass+0x10a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800f98e:	23ff      	movs	r3, #255	; 0xff
 800f990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f994:	e02a      	b.n	800f9ec <LmHandlerRequestClass+0x110>
                if( currentClass != CLASS_A )
 800f996:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f99e:	23ff      	movs	r3, #255	; 0xff
 800f9a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9a4:	e021      	b.n	800f9ea <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f9aa:	f107 0308 	add.w	r3, r7, #8
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f005 f8fa 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10f      	bne.n	800f9da <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f000 ff11 	bl	80107e4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f9c2:	4b0d      	ldr	r3, [pc, #52]	; (800f9f8 <LmHandlerRequestClass+0x11c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00e      	beq.n	800f9ea <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	; (800f9f8 <LmHandlerRequestClass+0x11c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d2:	79fa      	ldrb	r2, [r7, #7]
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	4798      	blx	r3
            break;
 800f9d8:	e007      	b.n	800f9ea <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f9da:	23ff      	movs	r3, #255	; 0xff
 800f9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9e0:	e003      	b.n	800f9ea <LmHandlerRequestClass+0x10e>
            break;
 800f9e2:	bf00      	nop
 800f9e4:	e002      	b.n	800f9ec <LmHandlerRequestClass+0x110>
            break;
 800f9e6:	bf00      	nop
 800f9e8:	e000      	b.n	800f9ec <LmHandlerRequestClass+0x110>
            break;
 800f9ea:	bf00      	nop
        }
    }
    return errorStatus;
 800f9ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3730      	adds	r7, #48	; 0x30
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	2000328c 	.word	0x2000328c

0800f9fc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b08c      	sub	sp, #48	; 0x30
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa0e:	e010      	b.n	800fa32 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fa10:	2300      	movs	r3, #0
 800fa12:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800fa14:	f107 030c 	add.w	r3, r7, #12
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f004 ff67 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	e003      	b.n	800fa32 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fa2a:	7c3a      	ldrb	r2, [r7, #16]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3730      	adds	r7, #48	; 0x30
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b08c      	sub	sp, #48	; 0x30
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d102      	bne.n	800fa50 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4e:	e016      	b.n	800fa7e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fa50:	231f      	movs	r3, #31
 800fa52:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800fa54:	f107 030c 	add.w	r3, r7, #12
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f004 ff47 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa64:	f04f 33ff 	mov.w	r3, #4294967295
 800fa68:	e009      	b.n	800fa7e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fa6a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f993 2000 	ldrsb.w	r2, [r3]
 800fa78:	4b03      	ldr	r3, [pc, #12]	; (800fa88 <LmHandlerGetTxDatarate+0x4c>)
 800fa7a:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3730      	adds	r7, #48	; 0x30
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	2000327c 	.word	0x2000327c

0800fa8c <LmHandlerGetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerGetActiveRegion( LoRaMacRegion_t *region )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
    if (region == NULL)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d102      	bne.n	800faa0 <LmHandlerGetActiveRegion+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa9e:	e004      	b.n	800faaa <LmHandlerGetActiveRegion+0x1e>
    }

    *region = LmHandlerParams.ActiveRegion;
 800faa0:	4b04      	ldr	r3, [pc, #16]	; (800fab4 <LmHandlerGetActiveRegion+0x28>)
 800faa2:	781a      	ldrb	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	370c      	adds	r7, #12
 800faae:	46bd      	mov	sp, r7
 800fab0:	bc80      	pop	{r7}
 800fab2:	4770      	bx	lr
 800fab4:	2000327c 	.word	0x2000327c

0800fab8 <LmHandlerSetSystemMaxRxError>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08c      	sub	sp, #48	; 0x30
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fac0:	2322      	movs	r3, #34	; 0x22
 800fac2:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fac8:	f107 030c 	add.w	r3, r7, #12
 800facc:	4618      	mov	r0, r3
 800face:	f005 f86b 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fad8:	f04f 33ff 	mov.w	r3, #4294967295
 800fadc:	e000      	b.n	800fae0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3730      	adds	r7, #48	; 0x30
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800faf0:	4b15      	ldr	r3, [pc, #84]	; (800fb48 <McpsConfirm+0x60>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	785a      	ldrb	r2, [r3, #1]
 800fafa:	4b13      	ldr	r3, [pc, #76]	; (800fb48 <McpsConfirm+0x60>)
 800fafc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	789b      	ldrb	r3, [r3, #2]
 800fb02:	b25a      	sxtb	r2, r3
 800fb04:	4b10      	ldr	r3, [pc, #64]	; (800fb48 <McpsConfirm+0x60>)
 800fb06:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	4a0e      	ldr	r2, [pc, #56]	; (800fb48 <McpsConfirm+0x60>)
 800fb0e:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fb16:	4b0c      	ldr	r3, [pc, #48]	; (800fb48 <McpsConfirm+0x60>)
 800fb18:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	691b      	ldr	r3, [r3, #16]
 800fb1e:	b2da      	uxtb	r2, r3
 800fb20:	4b09      	ldr	r3, [pc, #36]	; (800fb48 <McpsConfirm+0x60>)
 800fb22:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	791b      	ldrb	r3, [r3, #4]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <McpsConfirm+0x60>)
 800fb2c:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800fb2e:	4b07      	ldr	r3, [pc, #28]	; (800fb4c <McpsConfirm+0x64>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6a1b      	ldr	r3, [r3, #32]
 800fb34:	4804      	ldr	r0, [pc, #16]	; (800fb48 <McpsConfirm+0x60>)
 800fb36:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	f000 f99a 	bl	800fe74 <LmHandlerPackagesNotify>
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	200032b4 	.word	0x200032b4
 800fb4c:	2000328c 	.word	0x2000328c

0800fb50 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b088      	sub	sp, #32
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800fb5e:	4b32      	ldr	r3, [pc, #200]	; (800fc28 <McpsIndication+0xd8>)
 800fb60:	2201      	movs	r2, #1
 800fb62:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	785a      	ldrb	r2, [r3, #1]
 800fb68:	4b2f      	ldr	r3, [pc, #188]	; (800fc28 <McpsIndication+0xd8>)
 800fb6a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fb6c:	4b2e      	ldr	r3, [pc, #184]	; (800fc28 <McpsIndication+0xd8>)
 800fb6e:	785b      	ldrb	r3, [r3, #1]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d154      	bne.n	800fc1e <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	791b      	ldrb	r3, [r3, #4]
 800fb78:	b25a      	sxtb	r2, r3
 800fb7a:	4b2b      	ldr	r3, [pc, #172]	; (800fc28 <McpsIndication+0xd8>)
 800fb7c:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb84:	b25a      	sxtb	r2, r3
 800fb86:	4b28      	ldr	r3, [pc, #160]	; (800fc28 <McpsIndication+0xd8>)
 800fb88:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fb90:	4b25      	ldr	r3, [pc, #148]	; (800fc28 <McpsIndication+0xd8>)
 800fb92:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	78db      	ldrb	r3, [r3, #3]
 800fb98:	b25a      	sxtb	r2, r3
 800fb9a:	4b23      	ldr	r3, [pc, #140]	; (800fc28 <McpsIndication+0xd8>)
 800fb9c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	4a21      	ldr	r2, [pc, #132]	; (800fc28 <McpsIndication+0xd8>)
 800fba4:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	78db      	ldrb	r3, [r3, #3]
 800fbaa:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	7b1b      	ldrb	r3, [r3, #12]
 800fbb0:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800fbb8:	4b1c      	ldr	r3, [pc, #112]	; (800fc2c <McpsIndication+0xdc>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbe:	f107 0218 	add.w	r2, r7, #24
 800fbc2:	4919      	ldr	r1, [pc, #100]	; (800fc28 <McpsIndication+0xd8>)
 800fbc4:	4610      	mov	r0, r2
 800fbc6:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800fbc8:	4b18      	ldr	r3, [pc, #96]	; (800fc2c <McpsIndication+0xdc>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d007      	beq.n	800fbe2 <McpsIndication+0x92>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7e1b      	ldrb	r3, [r3, #24]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d003      	beq.n	800fbe2 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fbda:	4b14      	ldr	r3, [pc, #80]	; (800fc2c <McpsIndication+0xdc>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe0:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	f000 f945 	bl	800fe74 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800fbea:	f107 0317 	add.w	r3, r7, #23
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff ff04 	bl	800f9fc <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	795b      	ldrb	r3, [r3, #5]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d111      	bne.n	800fc20 <McpsIndication+0xd0>
 800fbfc:	7dfb      	ldrb	r3, [r7, #23]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10e      	bne.n	800fc20 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800fc02:	2300      	movs	r3, #0
 800fc04:	733b      	strb	r3, [r7, #12]
 800fc06:	2300      	movs	r3, #0
 800fc08:	737b      	strb	r3, [r7, #13]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800fc0e:	f107 000c 	add.w	r0, r7, #12
 800fc12:	2301      	movs	r3, #1
 800fc14:	2200      	movs	r2, #0
 800fc16:	2100      	movs	r1, #0
 800fc18:	f7ff fd5e 	bl	800f6d8 <LmHandlerSend>
 800fc1c:	e000      	b.n	800fc20 <McpsIndication+0xd0>
        return;
 800fc1e:	bf00      	nop
    }
}
 800fc20:	3720      	adds	r7, #32
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200000b8 	.word	0x200000b8
 800fc2c:	2000328c 	.word	0x2000328c

0800fc30 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08c      	sub	sp, #48	; 0x30
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fc38:	4b28      	ldr	r3, [pc, #160]	; (800fcdc <MlmeConfirm+0xac>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	785a      	ldrb	r2, [r3, #1]
 800fc42:	4b26      	ldr	r3, [pc, #152]	; (800fcdc <MlmeConfirm+0xac>)
 800fc44:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800fc46:	4b26      	ldr	r3, [pc, #152]	; (800fce0 <MlmeConfirm+0xb0>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	4823      	ldr	r0, [pc, #140]	; (800fcdc <MlmeConfirm+0xac>)
 800fc4e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	2002      	movs	r0, #2
 800fc54:	f000 f90e 	bl	800fe74 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	2b0a      	cmp	r3, #10
 800fc5e:	d035      	beq.n	800fccc <MlmeConfirm+0x9c>
 800fc60:	2b0a      	cmp	r3, #10
 800fc62:	dc35      	bgt.n	800fcd0 <MlmeConfirm+0xa0>
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d002      	beq.n	800fc6e <MlmeConfirm+0x3e>
 800fc68:	2b04      	cmp	r3, #4
 800fc6a:	d023      	beq.n	800fcb4 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800fc6c:	e030      	b.n	800fcd0 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800fc6e:	2306      	movs	r3, #6
 800fc70:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fc72:	f107 030c 	add.w	r3, r7, #12
 800fc76:	4618      	mov	r0, r3
 800fc78:	f004 fe38 	bl	80148ec <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	4a19      	ldr	r2, [pc, #100]	; (800fce4 <MlmeConfirm+0xb4>)
 800fc80:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fc82:	4819      	ldr	r0, [pc, #100]	; (800fce8 <MlmeConfirm+0xb8>)
 800fc84:	f7ff feda 	bl	800fa3c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	785b      	ldrb	r3, [r3, #1]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d108      	bne.n	800fca2 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fc90:	4b15      	ldr	r3, [pc, #84]	; (800fce8 <MlmeConfirm+0xb8>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800fc96:	4b15      	ldr	r3, [pc, #84]	; (800fcec <MlmeConfirm+0xbc>)
 800fc98:	785b      	ldrb	r3, [r3, #1]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff fe1e 	bl	800f8dc <LmHandlerRequestClass>
 800fca0:	e002      	b.n	800fca8 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fca2:	4b11      	ldr	r3, [pc, #68]	; (800fce8 <MlmeConfirm+0xb8>)
 800fca4:	22ff      	movs	r2, #255	; 0xff
 800fca6:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fca8:	4b0d      	ldr	r3, [pc, #52]	; (800fce0 <MlmeConfirm+0xb0>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	480e      	ldr	r0, [pc, #56]	; (800fce8 <MlmeConfirm+0xb8>)
 800fcb0:	4798      	blx	r3
        break;
 800fcb2:	e00e      	b.n	800fcd2 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800fcb4:	4b0e      	ldr	r3, [pc, #56]	; (800fcf0 <MlmeConfirm+0xc0>)
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	7a1a      	ldrb	r2, [r3, #8]
 800fcbe:	4b0c      	ldr	r3, [pc, #48]	; (800fcf0 <MlmeConfirm+0xc0>)
 800fcc0:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7a5a      	ldrb	r2, [r3, #9]
 800fcc6:	4b0a      	ldr	r3, [pc, #40]	; (800fcf0 <MlmeConfirm+0xc0>)
 800fcc8:	73da      	strb	r2, [r3, #15]
        break;
 800fcca:	e002      	b.n	800fcd2 <MlmeConfirm+0xa2>
        break;
 800fccc:	bf00      	nop
 800fcce:	e000      	b.n	800fcd2 <MlmeConfirm+0xa2>
        break;
 800fcd0:	bf00      	nop
    }
}
 800fcd2:	bf00      	nop
 800fcd4:	3730      	adds	r7, #48	; 0x30
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	200032b4 	.word	0x200032b4
 800fce0:	2000328c 	.word	0x2000328c
 800fce4:	20000090 	.word	0x20000090
 800fce8:	200000b4 	.word	0x200000b4
 800fcec:	2000327c 	.word	0x2000327c
 800fcf0:	200000b8 	.word	0x200000b8

0800fcf4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fcfe:	4b22      	ldr	r3, [pc, #136]	; (800fd88 <MlmeIndication+0x94>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	785a      	ldrb	r2, [r3, #1]
 800fd08:	4b1f      	ldr	r3, [pc, #124]	; (800fd88 <MlmeIndication+0x94>)
 800fd0a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd12:	b25a      	sxtb	r2, r3
 800fd14:	4b1c      	ldr	r3, [pc, #112]	; (800fd88 <MlmeIndication+0x94>)
 800fd16:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fd1e:	4b1a      	ldr	r3, [pc, #104]	; (800fd88 <MlmeIndication+0x94>)
 800fd20:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	78db      	ldrb	r3, [r3, #3]
 800fd26:	b25a      	sxtb	r2, r3
 800fd28:	4b17      	ldr	r3, [pc, #92]	; (800fd88 <MlmeIndication+0x94>)
 800fd2a:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800fd2c:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <MlmeIndication+0x94>)
 800fd2e:	785b      	ldrb	r3, [r3, #1]
 800fd30:	2b0e      	cmp	r3, #14
 800fd32:	d005      	beq.n	800fd40 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fd34:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <MlmeIndication+0x98>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3a:	4913      	ldr	r1, [pc, #76]	; (800fd88 <MlmeIndication+0x94>)
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b07      	cmp	r3, #7
 800fd46:	d117      	bne.n	800fd78 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800fd48:	2300      	movs	r3, #0
 800fd4a:	723b      	strb	r3, [r7, #8]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	727b      	strb	r3, [r7, #9]
 800fd50:	2300      	movs	r3, #0
 800fd52:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <MlmeIndication+0x9c>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	4798      	blx	r3
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f083 0301 	eor.w	r3, r3, #1
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d009      	beq.n	800fd7c <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800fd68:	f107 0008 	add.w	r0, r7, #8
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2100      	movs	r1, #0
 800fd72:	f7ff fcb1 	bl	800f6d8 <LmHandlerSend>
            }
        }
        break;
 800fd76:	e001      	b.n	800fd7c <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800fd78:	bf00      	nop
 800fd7a:	e000      	b.n	800fd7e <MlmeIndication+0x8a>
        break;
 800fd7c:	bf00      	nop
    }
}
 800fd7e:	bf00      	nop
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	200000b8 	.word	0x200000b8
 800fd8c:	2000328c 	.word	0x2000328c
 800fd90:	20003268 	.word	0x20003268

0800fd94 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	6039      	str	r1, [r7, #0]
 800fd9e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fda0:	2300      	movs	r3, #0
 800fda2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d103      	bne.n	800fdb2 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800fdaa:	f000 fd4b 	bl	8010844 <LmhpCompliancePackageFactory>
 800fdae:	60f8      	str	r0, [r7, #12]
            break;
 800fdb0:	e000      	b.n	800fdb4 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800fdb2:	bf00      	nop
        }
    }
    if( package != NULL )
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d02b      	beq.n	800fe12 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	4918      	ldr	r1, [pc, #96]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fdc4:	79fb      	ldrb	r3, [r7, #7]
 800fdc6:	4a16      	ldr	r2, [pc, #88]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdcc:	4a15      	ldr	r2, [pc, #84]	; (800fe24 <LmHandlerPackageRegister+0x90>)
 800fdce:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	4a13      	ldr	r2, [pc, #76]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdd8:	4a13      	ldr	r2, [pc, #76]	; (800fe28 <LmHandlerPackageRegister+0x94>)
 800fdda:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	4a10      	ldr	r2, [pc, #64]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde4:	4a11      	ldr	r2, [pc, #68]	; (800fe2c <LmHandlerPackageRegister+0x98>)
 800fde6:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fde8:	4b11      	ldr	r3, [pc, #68]	; (800fe30 <LmHandlerPackageRegister+0x9c>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	490c      	ldr	r1, [pc, #48]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fdf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fdf4:	6912      	ldr	r2, [r2, #16]
 800fdf6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fdf8:	79fb      	ldrb	r3, [r7, #7]
 800fdfa:	4a09      	ldr	r2, [pc, #36]	; (800fe20 <LmHandlerPackageRegister+0x8c>)
 800fdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	4a0c      	ldr	r2, [pc, #48]	; (800fe34 <LmHandlerPackageRegister+0xa0>)
 800fe04:	6851      	ldr	r1, [r2, #4]
 800fe06:	4a0b      	ldr	r2, [pc, #44]	; (800fe34 <LmHandlerPackageRegister+0xa0>)
 800fe08:	7852      	ldrb	r2, [r2, #1]
 800fe0a:	6838      	ldr	r0, [r7, #0]
 800fe0c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e001      	b.n	800fe16 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fe12:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	20003268 	.word	0x20003268
 800fe24:	0800f5ed 	.word	0x0800f5ed
 800fe28:	0800f6d9 	.word	0x0800f6d9
 800fe2c:	0800f8b1 	.word	0x0800f8b1
 800fe30:	2000328c 	.word	0x2000328c
 800fe34:	200000c8 	.word	0x200000c8

0800fe38 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	4603      	mov	r3, r0
 800fe40:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800fe42:	79fb      	ldrb	r3, [r7, #7]
 800fe44:	2b04      	cmp	r3, #4
 800fe46:	d80e      	bhi.n	800fe66 <LmHandlerPackageIsInitialized+0x2e>
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <LmHandlerPackageIsInitialized+0x38>)
 800fe4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d007      	beq.n	800fe66 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	4a05      	ldr	r2, [pc, #20]	; (800fe70 <LmHandlerPackageIsInitialized+0x38>)
 800fe5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	4798      	blx	r3
 800fe62:	4603      	mov	r3, r0
 800fe64:	e000      	b.n	800fe68 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fe66:	2300      	movs	r3, #0
    }
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	20003268 	.word	0x20003268

0800fe74 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe80:	2300      	movs	r3, #0
 800fe82:	73fb      	strb	r3, [r7, #15]
 800fe84:	e065      	b.n	800ff52 <LmHandlerPackagesNotify+0xde>
    {
        if( LmHandlerPackages[i] != NULL )
 800fe86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe8a:	4a36      	ldr	r2, [pc, #216]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800fe8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d058      	beq.n	800ff46 <LmHandlerPackagesNotify+0xd2>
        {
            switch( notifyType )
 800fe94:	79fb      	ldrb	r3, [r7, #7]
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d03d      	beq.n	800ff16 <LmHandlerPackagesNotify+0xa2>
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	dc4c      	bgt.n	800ff38 <LmHandlerPackagesNotify+0xc4>
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d002      	beq.n	800fea8 <LmHandlerPackagesNotify+0x34>
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d011      	beq.n	800feca <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800fea6:	e047      	b.n	800ff38 <LmHandlerPackagesNotify+0xc4>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feac:	4a2d      	ldr	r2, [pc, #180]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800feae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb2:	699b      	ldr	r3, [r3, #24]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d041      	beq.n	800ff3c <LmHandlerPackagesNotify+0xc8>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800feb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febc:	4a29      	ldr	r2, [pc, #164]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800febe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	6838      	ldr	r0, [r7, #0]
 800fec6:	4798      	blx	r3
                    break;
 800fec8:	e038      	b.n	800ff3c <LmHandlerPackagesNotify+0xc8>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800feca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fece:	4a25      	ldr	r2, [pc, #148]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800fed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d032      	beq.n	800ff40 <LmHandlerPackagesNotify+0xcc>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800feda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fede:	4a21      	ldr	r2, [pc, #132]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800fee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee4:	781a      	ldrb	r2, [r3, #0]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800feea:	429a      	cmp	r2, r3
 800feec:	d00a      	beq.n	800ff04 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800feee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d124      	bne.n	800ff40 <LmHandlerPackagesNotify+0xcc>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800fef6:	4b1b      	ldr	r3, [pc, #108]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	4798      	blx	r3
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d01d      	beq.n	800ff40 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ff04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff08:	4a16      	ldr	r2, [pc, #88]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800ff0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff0e:	69db      	ldr	r3, [r3, #28]
 800ff10:	6838      	ldr	r0, [r7, #0]
 800ff12:	4798      	blx	r3
                    break;
 800ff14:	e014      	b.n	800ff40 <LmHandlerPackagesNotify+0xcc>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ff16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff1a:	4a12      	ldr	r2, [pc, #72]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800ff1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00e      	beq.n	800ff44 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ff26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2a:	4a0e      	ldr	r2, [pc, #56]	; (800ff64 <LmHandlerPackagesNotify+0xf0>)
 800ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	6838      	ldr	r0, [r7, #0]
 800ff34:	4798      	blx	r3
                    break;
 800ff36:	e005      	b.n	800ff44 <LmHandlerPackagesNotify+0xd0>
                    break;
 800ff38:	bf00      	nop
 800ff3a:	e004      	b.n	800ff46 <LmHandlerPackagesNotify+0xd2>
                    break;
 800ff3c:	bf00      	nop
 800ff3e:	e002      	b.n	800ff46 <LmHandlerPackagesNotify+0xd2>
                    break;
 800ff40:	bf00      	nop
 800ff42:	e000      	b.n	800ff46 <LmHandlerPackagesNotify+0xd2>
                    break;
 800ff44:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	73fb      	strb	r3, [r7, #15]
 800ff52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff56:	2b04      	cmp	r3, #4
 800ff58:	dd95      	ble.n	800fe86 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800ff5a:	bf00      	nop
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	20003268 	.word	0x20003268

0800ff68 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff6e:	2300      	movs	r3, #0
 800ff70:	71fb      	strb	r3, [r7, #7]
 800ff72:	e022      	b.n	800ffba <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff78:	4a14      	ldr	r2, [pc, #80]	; (800ffcc <LmHandlerPackagesProcess+0x64>)
 800ff7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d015      	beq.n	800ffae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff86:	4a11      	ldr	r2, [pc, #68]	; (800ffcc <LmHandlerPackagesProcess+0x64>)
 800ff88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff8c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00d      	beq.n	800ffae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff ff4f 	bl	800fe38 <LmHandlerPackageIsInitialized>
 800ff9a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d006      	beq.n	800ffae <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ffa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa4:	4a09      	ldr	r2, [pc, #36]	; (800ffcc <LmHandlerPackagesProcess+0x64>)
 800ffa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	71fb      	strb	r3, [r7, #7]
 800ffba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	ddd8      	ble.n	800ff74 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ffc2:	bf00      	nop
 800ffc4:	bf00      	nop
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	20003268 	.word	0x20003268

0800ffd0 <LmHandlerGetDevEUI>:

LmHandlerErrorStatus_t LmHandlerGetDevEUI(uint8_t *devEUI)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b08c      	sub	sp, #48	; 0x30
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (devEUI == NULL)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d102      	bne.n	800ffe4 <LmHandlerGetDevEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ffde:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe2:	e013      	b.n	801000c <LmHandlerGetDevEUI+0x3c>
    }

    mibReq.Type = MIB_DEV_EUI;
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ffe8:	f107 030c 	add.w	r3, r7, #12
 800ffec:	4618      	mov	r0, r3
 800ffee:	f004 fc7d 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <LmHandlerGetDevEUI+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fff8:	f04f 33ff 	mov.w	r3, #4294967295
 800fffc:	e006      	b.n	801000c <LmHandlerGetDevEUI+0x3c>
    }
    UTIL_MEM_cpy_8(devEUI, mibReq.Param.DevEui, SE_EUI_SIZE);
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	2208      	movs	r2, #8
 8010002:	4619      	mov	r1, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f00e ff05 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3730      	adds	r7, #48	; 0x30
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <LmHandlerSetDevEUI>:

LmHandlerErrorStatus_t LmHandlerSetDevEUI(uint8_t *devEUI)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
    }
#else /* STATIC_DEVICE_EUI == 1 */
    return LORAMAC_HANDLER_ERROR;
 801001c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* STATIC_DEVICE_EUI */
}
 8010020:	4618      	mov	r0, r3
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	bc80      	pop	{r7}
 8010028:	4770      	bx	lr

0801002a <LmHandlerGetAppEUI>:

LmHandlerErrorStatus_t LmHandlerGetAppEUI(uint8_t *appEUI)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b08c      	sub	sp, #48	; 0x30
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (appEUI == NULL)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d102      	bne.n	801003e <LmHandlerGetAppEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010038:	f04f 33ff 	mov.w	r3, #4294967295
 801003c:	e013      	b.n	8010066 <LmHandlerGetAppEUI+0x3c>
    }

    mibReq.Type = MIB_JOIN_EUI;
 801003e:	2303      	movs	r3, #3
 8010040:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010042:	f107 030c 	add.w	r3, r7, #12
 8010046:	4618      	mov	r0, r3
 8010048:	f004 fc50 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d002      	beq.n	8010058 <LmHandlerGetAppEUI+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010052:	f04f 33ff 	mov.w	r3, #4294967295
 8010056:	e006      	b.n	8010066 <LmHandlerGetAppEUI+0x3c>
    }
    UTIL_MEM_cpy_8(appEUI, mibReq.Param.JoinEui, SE_EUI_SIZE);
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	2208      	movs	r2, #8
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f00e fed8 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3730      	adds	r7, #48	; 0x30
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <LmHandlerSetAppEUI>:

LmHandlerErrorStatus_t LmHandlerSetAppEUI(uint8_t *appEUI)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b08c      	sub	sp, #48	; 0x30
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8010076:	f7ff fb13 	bl	800f6a0 <LmHandlerJoinStatus>
 801007a:	4603      	mov	r3, r0
 801007c:	2b01      	cmp	r3, #1
 801007e:	d010      	beq.n	80100a2 <LmHandlerSetAppEUI+0x34>
    {
        mibReq.Type = MIB_JOIN_EUI;
 8010080:	2303      	movs	r3, #3
 8010082:	733b      	strb	r3, [r7, #12]
        mibReq.Param.JoinEui = appEUI;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010088:	f107 030c 	add.w	r3, r7, #12
 801008c:	4618      	mov	r0, r3
 801008e:	f004 fd8b 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <LmHandlerSetAppEUI+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010098:	f04f 33ff 	mov.w	r3, #4294967295
 801009c:	e003      	b.n	80100a6 <LmHandlerSetAppEUI+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 801009e:	2300      	movs	r3, #0
 80100a0:	e001      	b.n	80100a6 <LmHandlerSetAppEUI+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 80100a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3730      	adds	r7, #48	; 0x30
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <LmHandlerGetNetworkID>:

LmHandlerErrorStatus_t LmHandlerGetNetworkID(uint32_t *networkId)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b08c      	sub	sp, #48	; 0x30
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (networkId == NULL)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d102      	bne.n	80100c2 <LmHandlerGetNetworkID+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80100bc:	f04f 33ff 	mov.w	r3, #4294967295
 80100c0:	e010      	b.n	80100e4 <LmHandlerGetNetworkID+0x36>
    }

    mibReq.Type = MIB_NET_ID;
 80100c2:	2305      	movs	r3, #5
 80100c4:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80100c6:	f107 030c 	add.w	r3, r7, #12
 80100ca:	4618      	mov	r0, r3
 80100cc:	f004 fc0e 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <LmHandlerGetNetworkID+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80100d6:	f04f 33ff 	mov.w	r3, #4294967295
 80100da:	e003      	b.n	80100e4 <LmHandlerGetNetworkID+0x36>
    }
    *networkId = mibReq.Param.NetID;
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3730      	adds	r7, #48	; 0x30
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <LmHandlerSetNetworkID>:

LmHandlerErrorStatus_t LmHandlerSetNetworkID(uint32_t networkId)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08c      	sub	sp, #48	; 0x30
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80100f4:	f7ff fad4 	bl	800f6a0 <LmHandlerJoinStatus>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d010      	beq.n	8010120 <LmHandlerSetNetworkID+0x34>
    {
        mibReq.Type = MIB_NET_ID;
 80100fe:	2305      	movs	r3, #5
 8010100:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetID = networkId;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010106:	f107 030c 	add.w	r3, r7, #12
 801010a:	4618      	mov	r0, r3
 801010c:	f004 fd4c 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d002      	beq.n	801011c <LmHandlerSetNetworkID+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010116:	f04f 33ff 	mov.w	r3, #4294967295
 801011a:	e003      	b.n	8010124 <LmHandlerSetNetworkID+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 801011c:	2300      	movs	r3, #0
 801011e:	e001      	b.n	8010124 <LmHandlerSetNetworkID+0x38>
    }
    else
    {
        /* Cannot change NetworkID in running state */
        return LORAMAC_HANDLER_ERROR;
 8010120:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010124:	4618      	mov	r0, r3
 8010126:	3730      	adds	r7, #48	; 0x30
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <LmHandlerGetDevAddr>:

LmHandlerErrorStatus_t LmHandlerGetDevAddr(uint32_t *devAddr)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b08c      	sub	sp, #48	; 0x30
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (devAddr == NULL)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d102      	bne.n	8010140 <LmHandlerGetDevAddr+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801013a:	f04f 33ff 	mov.w	r3, #4294967295
 801013e:	e010      	b.n	8010162 <LmHandlerGetDevAddr+0x36>
    }

    mibReq.Type = MIB_DEV_ADDR;
 8010140:	2306      	movs	r3, #6
 8010142:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010144:	f107 030c 	add.w	r3, r7, #12
 8010148:	4618      	mov	r0, r3
 801014a:	f004 fbcf 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <LmHandlerGetDevAddr+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010154:	f04f 33ff 	mov.w	r3, #4294967295
 8010158:	e003      	b.n	8010162 <LmHandlerGetDevAddr+0x36>
    }
    *devAddr = mibReq.Param.DevAddr;
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3730      	adds	r7, #48	; 0x30
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <LmHandlerSetDevAddr>:

LmHandlerErrorStatus_t LmHandlerSetDevAddr(uint32_t devAddr)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b08c      	sub	sp, #48	; 0x30
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
#if ( STATIC_DEVICE_ADDRESS != 1 )
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8010172:	f7ff fa95 	bl	800f6a0 <LmHandlerJoinStatus>
 8010176:	4603      	mov	r3, r0
 8010178:	2b01      	cmp	r3, #1
 801017a:	d010      	beq.n	801019e <LmHandlerSetDevAddr+0x34>
    {
        mibReq.Type = MIB_DEV_ADDR;
 801017c:	2306      	movs	r3, #6
 801017e:	733b      	strb	r3, [r7, #12]
        mibReq.Param.DevAddr = devAddr;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010184:	f107 030c 	add.w	r3, r7, #12
 8010188:	4618      	mov	r0, r3
 801018a:	f004 fd0d 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <LmHandlerSetDevAddr+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	e003      	b.n	80101a2 <LmHandlerSetDevAddr+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 801019a:	2300      	movs	r3, #0
 801019c:	e001      	b.n	80101a2 <LmHandlerSetDevAddr+0x38>
    }
    else
    {
        /* Cannot change DevAddr in running state */
        return LORAMAC_HANDLER_ERROR;
 801019e:	f04f 33ff 	mov.w	r3, #4294967295
    }
#else /* STATIC_DEVICE_ADDRESS == 1 */
    return LORAMAC_HANDLER_ERROR;
#endif /* STATIC_DEVICE_ADDRESS */
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3730      	adds	r7, #48	; 0x30
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
	...

080101ac <LmHandlerSetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerSetActiveRegion(LoRaMacRegion_t region)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	4603      	mov	r3, r0
 80101b4:	71fb      	strb	r3, [r7, #7]
    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80101b6:	f7ff fa73 	bl	800f6a0 <LmHandlerJoinStatus>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d007      	beq.n	80101d0 <LmHandlerSetActiveRegion+0x24>
    {
        LmHandlerParams.ActiveRegion = region;
 80101c0:	4a06      	ldr	r2, [pc, #24]	; (80101dc <LmHandlerSetActiveRegion+0x30>)
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	7013      	strb	r3, [r2, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 80101c6:	4805      	ldr	r0, [pc, #20]	; (80101dc <LmHandlerSetActiveRegion+0x30>)
 80101c8:	f7ff f8da 	bl	800f380 <LmHandlerConfigure>
 80101cc:	4603      	mov	r3, r0
 80101ce:	e001      	b.n	80101d4 <LmHandlerSetActiveRegion+0x28>
    }
    else
    {
        /* Cannot change Region in running state */
        return LORAMAC_HANDLER_ERROR;
 80101d0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	2000327c 	.word	0x2000327c

080101e0 <LmHandlerGetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerGetAdrEnable(bool *adrEnable)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    if (adrEnable == NULL)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d102      	bne.n	80101f4 <LmHandlerGetAdrEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80101ee:	f04f 33ff 	mov.w	r3, #4294967295
 80101f2:	e004      	b.n	80101fe <LmHandlerGetAdrEnable+0x1e>
    }

    *adrEnable = LmHandlerParams.AdrEnable;
 80101f4:	4b04      	ldr	r3, [pc, #16]	; (8010208 <LmHandlerGetAdrEnable+0x28>)
 80101f6:	789a      	ldrb	r2, [r3, #2]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	bc80      	pop	{r7}
 8010206:	4770      	bx	lr
 8010208:	2000327c 	.word	0x2000327c

0801020c <LmHandlerSetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerSetAdrEnable(bool adrEnable)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08c      	sub	sp, #48	; 0x30
 8010210:	af00      	add	r7, sp, #0
 8010212:	4603      	mov	r3, r0
 8010214:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_ADR;
 8010216:	2304      	movs	r3, #4
 8010218:	733b      	strb	r3, [r7, #12]
    mibReq.Param.AdrEnable = adrEnable;
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801021e:	f107 030c 	add.w	r3, r7, #12
 8010222:	4618      	mov	r0, r3
 8010224:	f004 fcc0 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d002      	beq.n	8010234 <LmHandlerSetAdrEnable+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 801022e:	f04f 33ff 	mov.w	r3, #4294967295
 8010232:	e003      	b.n	801023c <LmHandlerSetAdrEnable+0x30>
    }
    LmHandlerParams.AdrEnable = adrEnable;
 8010234:	4a03      	ldr	r2, [pc, #12]	; (8010244 <LmHandlerSetAdrEnable+0x38>)
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	7093      	strb	r3, [r2, #2]

    return LORAMAC_HANDLER_SUCCESS;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3730      	adds	r7, #48	; 0x30
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	2000327c 	.word	0x2000327c

08010248 <LmHandlerSetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerSetTxDatarate(int8_t txDatarate)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b08c      	sub	sp, #48	; 0x30
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	71fb      	strb	r3, [r7, #7]
    if (LmHandlerParams.AdrEnable == true)
 8010252:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <LmHandlerSetTxDatarate+0x48>)
 8010254:	789b      	ldrb	r3, [r3, #2]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <LmHandlerSetTxDatarate+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801025a:	f04f 33ff 	mov.w	r3, #4294967295
 801025e:	e012      	b.n	8010286 <LmHandlerSetTxDatarate+0x3e>
    }

    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8010260:	231f      	movs	r3, #31
 8010262:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ChannelsDatarate = txDatarate;
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010268:	f107 030c 	add.w	r3, r7, #12
 801026c:	4618      	mov	r0, r3
 801026e:	f004 fc9b 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <LmHandlerSetTxDatarate+0x36>
    {
        return LORAMAC_HANDLER_ERROR;
 8010278:	f04f 33ff 	mov.w	r3, #4294967295
 801027c:	e003      	b.n	8010286 <LmHandlerSetTxDatarate+0x3e>
    }

    LmHandlerParams.TxDatarate = txDatarate;
 801027e:	4a04      	ldr	r2, [pc, #16]	; (8010290 <LmHandlerSetTxDatarate+0x48>)
 8010280:	79fb      	ldrb	r3, [r7, #7]
 8010282:	70d3      	strb	r3, [r2, #3]

    return LORAMAC_HANDLER_SUCCESS;
 8010284:	2300      	movs	r3, #0
}
 8010286:	4618      	mov	r0, r3
 8010288:	3730      	adds	r7, #48	; 0x30
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	2000327c 	.word	0x2000327c

08010294 <LmHandlerGetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable(bool *dutyCycleEnable)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
    if (dutyCycleEnable == NULL)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <LmHandlerGetDutyCycleEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
 80102a6:	e004      	b.n	80102b2 <LmHandlerGetDutyCycleEnable+0x1e>
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 80102a8:	4b04      	ldr	r3, [pc, #16]	; (80102bc <LmHandlerGetDutyCycleEnable+0x28>)
 80102aa:	795a      	ldrb	r2, [r3, #5]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80102b0:	2300      	movs	r3, #0
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bc80      	pop	{r7}
 80102ba:	4770      	bx	lr
 80102bc:	2000327c 	.word	0x2000327c

080102c0 <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable(bool dutyCycleEnable)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 80102ca:	4a06      	ldr	r2, [pc, #24]	; (80102e4 <LmHandlerSetDutyCycleEnable+0x24>)
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	7153      	strb	r3, [r2, #5]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f005 f9dc 	bl	8015690 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	2000327c 	.word	0x2000327c

080102e8 <LmHandlerGetRX2Params>:

LmHandlerErrorStatus_t LmHandlerGetRX2Params(RxChannelParams_t *rxParams)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08c      	sub	sp, #48	; 0x30
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
    if (rxParams == NULL)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d102      	bne.n	80102fc <LmHandlerGetRX2Params+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80102f6:	f04f 33ff 	mov.w	r3, #4294967295
 80102fa:	e013      	b.n	8010324 <LmHandlerGetRX2Params+0x3c>
    }

    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 80102fc:	2312      	movs	r3, #18
 80102fe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010300:	f107 030c 	add.w	r3, r7, #12
 8010304:	4618      	mov	r0, r3
 8010306:	f004 faf1 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <LmHandlerGetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010310:	f04f 33ff 	mov.w	r3, #4294967295
 8010314:	e006      	b.n	8010324 <LmHandlerGetRX2Params+0x3c>
    }

    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 8010316:	693a      	ldr	r2, [r7, #16]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	601a      	str	r2, [r3, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 801031c:	7d3a      	ldrb	r2, [r7, #20]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3730      	adds	r7, #48	; 0x30
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <LmHandlerGetTxPower>:

LmHandlerErrorStatus_t LmHandlerGetTxPower(int8_t *txPower)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b08c      	sub	sp, #48	; 0x30
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (txPower == NULL)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d102      	bne.n	8010340 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801033a:	f04f 33ff 	mov.w	r3, #4294967295
 801033e:	e011      	b.n	8010364 <LmHandlerGetTxPower+0x38>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010340:	2320      	movs	r3, #32
 8010342:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010344:	f107 030c 	add.w	r3, r7, #12
 8010348:	4618      	mov	r0, r3
 801034a:	f004 facf 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010354:	f04f 33ff 	mov.w	r3, #4294967295
 8010358:	e004      	b.n	8010364 <LmHandlerGetTxPower+0x38>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 801035a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3730      	adds	r7, #48	; 0x30
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <LmHandlerGetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx1Delay(uint32_t *rxDelay)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08c      	sub	sp, #48	; 0x30
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d102      	bne.n	8010380 <LmHandlerGetRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801037a:	f04f 33ff 	mov.w	r3, #4294967295
 801037e:	e010      	b.n	80103a2 <LmHandlerGetRx1Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8010380:	231a      	movs	r3, #26
 8010382:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010384:	f107 030c 	add.w	r3, r7, #12
 8010388:	4618      	mov	r0, r3
 801038a:	f004 faaf 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <LmHandlerGetRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010394:	f04f 33ff 	mov.w	r3, #4294967295
 8010398:	e003      	b.n	80103a2 <LmHandlerGetRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay1;
 801039a:	693a      	ldr	r2, [r7, #16]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80103a0:	2300      	movs	r3, #0
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3730      	adds	r7, #48	; 0x30
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <LmHandlerGetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx2Delay(uint32_t *rxDelay)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b08c      	sub	sp, #48	; 0x30
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d102      	bne.n	80103be <LmHandlerGetRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80103b8:	f04f 33ff 	mov.w	r3, #4294967295
 80103bc:	e010      	b.n	80103e0 <LmHandlerGetRx2Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80103be:	231b      	movs	r3, #27
 80103c0:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80103c2:	f107 030c 	add.w	r3, r7, #12
 80103c6:	4618      	mov	r0, r3
 80103c8:	f004 fa90 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d002      	beq.n	80103d8 <LmHandlerGetRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80103d2:	f04f 33ff 	mov.w	r3, #4294967295
 80103d6:	e003      	b.n	80103e0 <LmHandlerGetRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay2;
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3730      	adds	r7, #48	; 0x30
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <LmHandlerGetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx1Delay(uint32_t *rxDelay)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08c      	sub	sp, #48	; 0x30
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d102      	bne.n	80103fc <LmHandlerGetJoinRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80103f6:	f04f 33ff 	mov.w	r3, #4294967295
 80103fa:	e010      	b.n	801041e <LmHandlerGetJoinRx1Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 80103fc:	231c      	movs	r3, #28
 80103fe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010400:	f107 030c 	add.w	r3, r7, #12
 8010404:	4618      	mov	r0, r3
 8010406:	f004 fa71 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <LmHandlerGetJoinRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010410:	f04f 33ff 	mov.w	r3, #4294967295
 8010414:	e003      	b.n	801041e <LmHandlerGetJoinRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3730      	adds	r7, #48	; 0x30
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <LmHandlerGetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx2Delay(uint32_t *rxDelay)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b08c      	sub	sp, #48	; 0x30
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d102      	bne.n	801043a <LmHandlerGetJoinRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010434:	f04f 33ff 	mov.w	r3, #4294967295
 8010438:	e010      	b.n	801045c <LmHandlerGetJoinRx2Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 801043a:	231d      	movs	r3, #29
 801043c:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801043e:	f107 030c 	add.w	r3, r7, #12
 8010442:	4618      	mov	r0, r3
 8010444:	f004 fa52 	bl	80148ec <LoRaMacMibGetRequestConfirm>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <LmHandlerGetJoinRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801044e:	f04f 33ff 	mov.w	r3, #4294967295
 8010452:	e003      	b.n	801045c <LmHandlerGetJoinRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3730      	adds	r7, #48	; 0x30
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <LmHandlerSetTxPower>:

LmHandlerErrorStatus_t LmHandlerSetTxPower(int8_t txPower)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b08c      	sub	sp, #48	; 0x30
 8010468:	af00      	add	r7, sp, #0
 801046a:	4603      	mov	r3, r0
 801046c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 801046e:	2320      	movs	r3, #32
 8010470:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ChannelsTxPower = txPower;
 8010472:	79fb      	ldrb	r3, [r7, #7]
 8010474:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010476:	f107 030c 	add.w	r3, r7, #12
 801047a:	4618      	mov	r0, r3
 801047c:	f004 fb94 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d002      	beq.n	801048c <LmHandlerSetTxPower+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 8010486:	f04f 33ff 	mov.w	r3, #4294967295
 801048a:	e000      	b.n	801048e <LmHandlerSetTxPower+0x2a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 801048c:	2300      	movs	r3, #0
}
 801048e:	4618      	mov	r0, r3
 8010490:	3730      	adds	r7, #48	; 0x30
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <LmHandlerSetRX2Params>:

LmHandlerErrorStatus_t LmHandlerSetRX2Params(RxChannelParams_t *rxParams)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b08c      	sub	sp, #48	; 0x30
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 801049e:	2312      	movs	r3, #18
 80104a0:	733b      	strb	r3, [r7, #12]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	613b      	str	r3, [r7, #16]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	791b      	ldrb	r3, [r3, #4]
 80104ac:	753b      	strb	r3, [r7, #20]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80104ae:	f107 030c 	add.w	r3, r7, #12
 80104b2:	4618      	mov	r0, r3
 80104b4:	f004 fb78 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <LmHandlerSetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80104be:	f04f 33ff 	mov.w	r3, #4294967295
 80104c2:	e000      	b.n	80104c6 <LmHandlerSetRX2Params+0x30>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3730      	adds	r7, #48	; 0x30
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <LmHandlerSetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx1Delay(uint32_t rxDelay)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b08c      	sub	sp, #48	; 0x30
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 80104d6:	231a      	movs	r3, #26
 80104d8:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ReceiveDelay1 = rxDelay;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80104de:	f107 030c 	add.w	r3, r7, #12
 80104e2:	4618      	mov	r0, r3
 80104e4:	f004 fb60 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <LmHandlerSetRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 80104ee:	f04f 33ff 	mov.w	r3, #4294967295
 80104f2:	e000      	b.n	80104f6 <LmHandlerSetRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3730      	adds	r7, #48	; 0x30
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <LmHandlerSetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx2Delay(uint32_t rxDelay)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b08c      	sub	sp, #48	; 0x30
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8010506:	231b      	movs	r3, #27
 8010508:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ReceiveDelay2 = rxDelay;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801050e:	f107 030c 	add.w	r3, r7, #12
 8010512:	4618      	mov	r0, r3
 8010514:	f004 fb48 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d002      	beq.n	8010524 <LmHandlerSetRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801051e:	f04f 33ff 	mov.w	r3, #4294967295
 8010522:	e000      	b.n	8010526 <LmHandlerSetRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3730      	adds	r7, #48	; 0x30
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <LmHandlerSetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx1Delay(uint32_t rxDelay)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b08c      	sub	sp, #48	; 0x30
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8010536:	231c      	movs	r3, #28
 8010538:	733b      	strb	r3, [r7, #12]
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801053e:	f107 030c 	add.w	r3, r7, #12
 8010542:	4618      	mov	r0, r3
 8010544:	f004 fb30 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <LmHandlerSetJoinRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801054e:	f04f 33ff 	mov.w	r3, #4294967295
 8010552:	e000      	b.n	8010556 <LmHandlerSetJoinRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	3730      	adds	r7, #48	; 0x30
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <LmHandlerSetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx2Delay(uint32_t rxDelay)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b08c      	sub	sp, #48	; 0x30
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8010566:	231d      	movs	r3, #29
 8010568:	733b      	strb	r3, [r7, #12]
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801056e:	f107 030c 	add.w	r3, r7, #12
 8010572:	4618      	mov	r0, r3
 8010574:	f004 fb18 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d002      	beq.n	8010584 <LmHandlerSetJoinRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801057e:	f04f 33ff 	mov.w	r3, #4294967295
 8010582:	e000      	b.n	8010586 <LmHandlerSetJoinRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3730      	adds	r7, #48	; 0x30
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <LmHandlerGetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerGetPingPeriodicity(uint8_t *pingPeriodicity)
{
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
    }

    *pingPeriodicity = LmHandlerParams.PingPeriodicity;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 8010596:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801059a:	4618      	mov	r0, r3
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	bc80      	pop	{r7}
 80105a2:	4770      	bx	lr

080105a4 <LmHandlerSetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerSetPingPeriodicity(uint8_t pingPeriodicity)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	71fb      	strb	r3, [r7, #7]
    {
        /* Cannot change Region in running state */
        return LmHandlerPingSlotReq(pingPeriodicity);
    }
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 80105ae:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bc80      	pop	{r7}
 80105ba:	4770      	bx	lr

080105bc <LmHandlerGetBeaconState>:

LmHandlerErrorStatus_t LmHandlerGetBeaconState(BeaconState_t *beaconState)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
    *beaconState =  mibReq.Param.BeaconState;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 80105c4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bc80      	pop	{r7}
 80105d0:	4770      	bx	lr

080105d2 <LmHandlerGetNwkKey>:

LmHandlerErrorStatus_t LmHandlerGetNwkKey( uint8_t *nwkKey )
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b084      	sub	sp, #16
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (nwkKey == NULL)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d102      	bne.n	80105e6 <LmHandlerGetNwkKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80105e0:	f04f 33ff 	mov.w	r3, #4294967295
 80105e4:	e013      	b.n	801060e <LmHandlerGetNwkKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_KEY, &keyItem))
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	4619      	mov	r1, r3
 80105ec:	2001      	movs	r0, #1
 80105ee:	f7fe fc1f 	bl	800ee30 <SecureElementGetKeyByID>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <LmHandlerGetNwkKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 80105f8:	f04f 33ff 	mov.w	r3, #4294967295
 80105fc:	e007      	b.n	801060e <LmHandlerGetNwkKey+0x3c>
    }
    UTIL_MEM_cpy_8( nwkKey, keyItem->KeyValue, 16 );
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3301      	adds	r3, #1
 8010602:	2210      	movs	r2, #16
 8010604:	4619      	mov	r1, r3
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f00e fc04 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <LmHandlerSetNwkKey>:

LmHandlerErrorStatus_t LmHandlerSetNwkKey( uint8_t *nwkKey )
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b08c      	sub	sp, #48	; 0x30
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 801061e:	f7ff f83f 	bl	800f6a0 <LmHandlerJoinStatus>
 8010622:	4603      	mov	r3, r0
 8010624:	2b01      	cmp	r3, #1
 8010626:	d010      	beq.n	801064a <LmHandlerSetNwkKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_NWK_KEY;
 8010628:	2308      	movs	r3, #8
 801062a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NwkKey = nwkKey;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010630:	f107 030c 	add.w	r3, r7, #12
 8010634:	4618      	mov	r0, r3
 8010636:	f004 fab7 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <LmHandlerSetNwkKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010640:	f04f 33ff 	mov.w	r3, #4294967295
 8010644:	e003      	b.n	801064e <LmHandlerSetNwkKey+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8010646:	2300      	movs	r3, #0
 8010648:	e001      	b.n	801064e <LmHandlerSetNwkKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 801064a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801064e:	4618      	mov	r0, r3
 8010650:	3730      	adds	r7, #48	; 0x30
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <LmHandlerGetAppKey>:

LmHandlerErrorStatus_t LmHandlerGetAppKey( uint8_t *appKey )
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (appKey == NULL)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d102      	bne.n	801066a <LmHandlerGetAppKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010664:	f04f 33ff 	mov.w	r3, #4294967295
 8010668:	e013      	b.n	8010692 <LmHandlerGetAppKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_KEY, &keyItem))
 801066a:	f107 030c 	add.w	r3, r7, #12
 801066e:	4619      	mov	r1, r3
 8010670:	2000      	movs	r0, #0
 8010672:	f7fe fbdd 	bl	800ee30 <SecureElementGetKeyByID>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <LmHandlerGetAppKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 801067c:	f04f 33ff 	mov.w	r3, #4294967295
 8010680:	e007      	b.n	8010692 <LmHandlerGetAppKey+0x3c>
    }
    UTIL_MEM_cpy_8( appKey, keyItem->KeyValue, 16 );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3301      	adds	r3, #1
 8010686:	2210      	movs	r2, #16
 8010688:	4619      	mov	r1, r3
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f00e fbc2 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010690:	2300      	movs	r3, #0
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <LmHandlerSetAppKey>:

LmHandlerErrorStatus_t LmHandlerSetAppKey( uint8_t *appKey )
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b08c      	sub	sp, #48	; 0x30
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80106a2:	f7fe fffd 	bl	800f6a0 <LmHandlerJoinStatus>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d010      	beq.n	80106ce <LmHandlerSetAppKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_APP_KEY;
 80106ac:	2307      	movs	r3, #7
 80106ae:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AppKey = appKey;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80106b4:	f107 030c 	add.w	r3, r7, #12
 80106b8:	4618      	mov	r0, r3
 80106ba:	f004 fa75 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d002      	beq.n	80106ca <LmHandlerSetAppKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 80106c4:	f04f 33ff 	mov.w	r3, #4294967295
 80106c8:	e003      	b.n	80106d2 <LmHandlerSetAppKey+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 80106ca:	2300      	movs	r3, #0
 80106cc:	e001      	b.n	80106d2 <LmHandlerSetAppKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 80106ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3730      	adds	r7, #48	; 0x30
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <LmHandlerGetNwkSKey>:

LmHandlerErrorStatus_t LmHandlerGetNwkSKey( uint8_t *nwkSKey )
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b084      	sub	sp, #16
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (nwkSKey == NULL)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d102      	bne.n	80106ee <LmHandlerGetNwkSKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80106e8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ec:	e013      	b.n	8010716 <LmHandlerGetNwkSKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_S_KEY, &keyItem))
 80106ee:	f107 030c 	add.w	r3, r7, #12
 80106f2:	4619      	mov	r1, r3
 80106f4:	2002      	movs	r0, #2
 80106f6:	f7fe fb9b 	bl	800ee30 <SecureElementGetKeyByID>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <LmHandlerGetNwkSKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 8010700:	f04f 33ff 	mov.w	r3, #4294967295
 8010704:	e007      	b.n	8010716 <LmHandlerGetNwkSKey+0x3c>
    }
    UTIL_MEM_cpy_8( nwkSKey, keyItem->KeyValue, 16 );
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	3301      	adds	r3, #1
 801070a:	2210      	movs	r2, #16
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f00e fb80 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <LmHandlerSetNwkSKey>:

LmHandlerErrorStatus_t LmHandlerSetNwkSKey( uint8_t *nwkSKey )
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b08c      	sub	sp, #48	; 0x30
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010726:	f7fe ffbb 	bl	800f6a0 <LmHandlerJoinStatus>
 801072a:	4603      	mov	r3, r0
 801072c:	2b01      	cmp	r3, #1
 801072e:	d010      	beq.n	8010752 <LmHandlerSetNwkSKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_NWK_S_KEY;
 8010730:	2309      	movs	r3, #9
 8010732:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NwkSKey = nwkSKey;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010738:	f107 030c 	add.w	r3, r7, #12
 801073c:	4618      	mov	r0, r3
 801073e:	f004 fa33 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <LmHandlerSetNwkSKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010748:	f04f 33ff 	mov.w	r3, #4294967295
 801074c:	e003      	b.n	8010756 <LmHandlerSetNwkSKey+0x38>
        }

        return LORAMAC_HANDLER_SUCCESS;
 801074e:	2300      	movs	r3, #0
 8010750:	e001      	b.n	8010756 <LmHandlerSetNwkSKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 8010752:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010756:	4618      	mov	r0, r3
 8010758:	3730      	adds	r7, #48	; 0x30
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <LmHandlerGetAppSKey>:

LmHandlerErrorStatus_t LmHandlerGetAppSKey( uint8_t *appSKey )
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b084      	sub	sp, #16
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (appSKey == NULL)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <LmHandlerGetAppSKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801076c:	f04f 33ff 	mov.w	r3, #4294967295
 8010770:	e013      	b.n	801079a <LmHandlerGetAppSKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_S_KEY, &keyItem))
 8010772:	f107 030c 	add.w	r3, r7, #12
 8010776:	4619      	mov	r1, r3
 8010778:	2003      	movs	r0, #3
 801077a:	f7fe fb59 	bl	800ee30 <SecureElementGetKeyByID>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <LmHandlerGetAppSKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295
 8010788:	e007      	b.n	801079a <LmHandlerGetAppSKey+0x3c>
    }
    UTIL_MEM_cpy_8( appSKey, keyItem->KeyValue, 16 );
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	3301      	adds	r3, #1
 801078e:	2210      	movs	r2, #16
 8010790:	4619      	mov	r1, r3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f00e fb3e 	bl	801ee14 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <LmHandlerSetAppSKey>:

LmHandlerErrorStatus_t LmHandlerSetAppSKey( uint8_t *appSKey )
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b08c      	sub	sp, #48	; 0x30
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80107aa:	f7fe ff79 	bl	800f6a0 <LmHandlerJoinStatus>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d010      	beq.n	80107d6 <LmHandlerSetAppSKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_APP_S_KEY;
 80107b4:	230a      	movs	r3, #10
 80107b6:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AppSKey = appSKey;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80107bc:	f107 030c 	add.w	r3, r7, #12
 80107c0:	4618      	mov	r0, r3
 80107c2:	f004 f9f1 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <LmHandlerSetAppSKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 80107cc:	f04f 33ff 	mov.w	r3, #4294967295
 80107d0:	e003      	b.n	80107da <LmHandlerSetAppSKey+0x38>
        }

        return LORAMAC_HANDLER_SUCCESS;
 80107d2:	2300      	movs	r3, #0
 80107d4:	e001      	b.n	80107da <LmHandlerSetAppSKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 80107d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3730      	adds	r7, #48	; 0x30
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
	...

080107e4 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af02      	add	r7, sp, #8
 80107ea:	4603      	mov	r3, r0
 80107ec:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	4a06      	ldr	r2, [pc, #24]	; (801080c <DisplayClassUpdate+0x28>)
 80107f2:	5cd3      	ldrb	r3, [r2, r3]
 80107f4:	9300      	str	r3, [sp, #0]
 80107f6:	4b06      	ldr	r3, [pc, #24]	; (8010810 <DisplayClassUpdate+0x2c>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	2002      	movs	r0, #2
 80107fe:	f00e f817 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8010802:	bf00      	nop
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	08022830 	.word	0x08022830
 8010810:	08022814 	.word	0x08022814

08010814 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801081e:	bf00      	nop
 8010820:	370c      	adds	r7, #12
 8010822:	46bd      	mov	sp, r7
 8010824:	bc80      	pop	{r7}
 8010826:	4770      	bx	lr

08010828 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 8010828:	b480      	push	{r7}
 801082a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 801082c:	2300      	movs	r3, #0
#endif
}
 801082e:	4618      	mov	r0, r3
 8010830:	46bd      	mov	sp, r7
 8010832:	bc80      	pop	{r7}
 8010834:	4770      	bx	lr

08010836 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 8010836:	b480      	push	{r7}
 8010838:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	46bd      	mov	sp, r7
 8010840:	bc80      	pop	{r7}
 8010842:	4770      	bx	lr

08010844 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010844:	b480      	push	{r7}
 8010846:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010848:	4b02      	ldr	r3, [pc, #8]	; (8010854 <LmhpCompliancePackageFactory+0x10>)
}
 801084a:	4618      	mov	r0, r3
 801084c:	46bd      	mov	sp, r7
 801084e:	bc80      	pop	{r7}
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	200000d0 	.word	0x200000d0

08010858 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	4613      	mov	r3, r2
 8010864:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00f      	beq.n	801088c <LmhpComplianceInit+0x34>
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00c      	beq.n	801088c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8010872:	4a0c      	ldr	r2, [pc, #48]	; (80108a4 <LmhpComplianceInit+0x4c>)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010878:	4a0b      	ldr	r2, [pc, #44]	; (80108a8 <LmhpComplianceInit+0x50>)
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 801087e:	4a0a      	ldr	r2, [pc, #40]	; (80108a8 <LmhpComplianceInit+0x50>)
 8010880:	79fb      	ldrb	r3, [r7, #7]
 8010882:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010884:	4b08      	ldr	r3, [pc, #32]	; (80108a8 <LmhpComplianceInit+0x50>)
 8010886:	2201      	movs	r2, #1
 8010888:	701a      	strb	r2, [r3, #0]
 801088a:	e006      	b.n	801089a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 801088c:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <LmhpComplianceInit+0x4c>)
 801088e:	2200      	movs	r2, #0
 8010890:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010892:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <LmhpComplianceInit+0x50>)
 8010894:	2200      	movs	r2, #0
 8010896:	701a      	strb	r2, [r3, #0]
    }
}
 8010898:	bf00      	nop
 801089a:	bf00      	nop
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	bc80      	pop	{r7}
 80108a2:	4770      	bx	lr
 80108a4:	200033ec 	.word	0x200033ec
 80108a8:	200033d8 	.word	0x200033d8

080108ac <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80108ac:	b480      	push	{r7}
 80108ae:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80108b0:	4b02      	ldr	r3, [pc, #8]	; (80108bc <LmhpComplianceIsInitialized+0x10>)
 80108b2:	781b      	ldrb	r3, [r3, #0]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bc80      	pop	{r7}
 80108ba:	4770      	bx	lr
 80108bc:	200033d8 	.word	0x200033d8

080108c0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80108c0:	b480      	push	{r7}
 80108c2:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80108c4:	4b07      	ldr	r3, [pc, #28]	; (80108e4 <LmhpComplianceIsRunning+0x24>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	f083 0301 	eor.w	r3, r3, #1
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80108d2:	2300      	movs	r3, #0
 80108d4:	e001      	b.n	80108da <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80108d6:	4b03      	ldr	r3, [pc, #12]	; (80108e4 <LmhpComplianceIsRunning+0x24>)
 80108d8:	785b      	ldrb	r3, [r3, #1]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	46bd      	mov	sp, r7
 80108de:	bc80      	pop	{r7}
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	200033d8 	.word	0x200033d8

080108e8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 80108f0:	4b0f      	ldr	r3, [pc, #60]	; (8010930 <LmhpComplianceOnMcpsConfirm+0x48>)
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	f083 0301 	eor.w	r3, r3, #1
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d112      	bne.n	8010924 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80108fe:	4b0c      	ldr	r3, [pc, #48]	; (8010930 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010900:	785b      	ldrb	r3, [r3, #1]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00f      	beq.n	8010926 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 801090a:	2b01      	cmp	r3, #1
 801090c:	d10b      	bne.n	8010926 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010912:	2b00      	cmp	r3, #0
 8010914:	d007      	beq.n	8010926 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010916:	4b06      	ldr	r3, [pc, #24]	; (8010930 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010918:	899b      	ldrh	r3, [r3, #12]
 801091a:	3301      	adds	r3, #1
 801091c:	b29a      	uxth	r2, r3
 801091e:	4b04      	ldr	r3, [pc, #16]	; (8010930 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010920:	819a      	strh	r2, [r3, #12]
 8010922:	e000      	b.n	8010926 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010924:	bf00      	nop
    }
}
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	bc80      	pop	{r7}
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	200033d8 	.word	0x200033d8

08010934 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 801093c:	4b12      	ldr	r3, [pc, #72]	; (8010988 <LmhpComplianceOnMlmeConfirm+0x54>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f083 0301 	eor.w	r3, r3, #1
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d116      	bne.n	8010978 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 801094a:	4b0f      	ldr	r3, [pc, #60]	; (8010988 <LmhpComplianceOnMlmeConfirm+0x54>)
 801094c:	785b      	ldrb	r3, [r3, #1]
 801094e:	f083 0301 	eor.w	r3, r3, #1
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d111      	bne.n	801097c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	2b04      	cmp	r3, #4
 801095e:	d10e      	bne.n	801097e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010960:	4b09      	ldr	r3, [pc, #36]	; (8010988 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010962:	2201      	movs	r2, #1
 8010964:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	7a1a      	ldrb	r2, [r3, #8]
 801096a:	4b07      	ldr	r3, [pc, #28]	; (8010988 <LmhpComplianceOnMlmeConfirm+0x54>)
 801096c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	7a5a      	ldrb	r2, [r3, #9]
 8010972:	4b05      	ldr	r3, [pc, #20]	; (8010988 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010974:	741a      	strb	r2, [r3, #16]
 8010976:	e002      	b.n	801097e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010978:	bf00      	nop
 801097a:	e000      	b.n	801097e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 801097c:	bf00      	nop
    }
}
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	bc80      	pop	{r7}
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	200033d8 	.word	0x200033d8

0801098c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 801098c:	b590      	push	{r4, r7, lr}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010992:	4b33      	ldr	r3, [pc, #204]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	f083 0301 	eor.w	r3, r3, #1
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295
 80109a4:	e058      	b.n	8010a58 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 80109a6:	4b2e      	ldr	r3, [pc, #184]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109a8:	785b      	ldrb	r3, [r3, #1]
 80109aa:	f083 0301 	eor.w	r3, r3, #1
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e04f      	b.n	8010a58 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 80109b8:	4b29      	ldr	r3, [pc, #164]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109ba:	7b9b      	ldrb	r3, [r3, #14]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d019      	beq.n	80109f4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80109c0:	4b27      	ldr	r3, [pc, #156]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80109c6:	4b26      	ldr	r3, [pc, #152]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109c8:	2203      	movs	r2, #3
 80109ca:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80109cc:	4b24      	ldr	r3, [pc, #144]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	2205      	movs	r2, #5
 80109d2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80109d4:	4b22      	ldr	r3, [pc, #136]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	3301      	adds	r3, #1
 80109da:	4a21      	ldr	r2, [pc, #132]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109dc:	7bd2      	ldrb	r2, [r2, #15]
 80109de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80109e0:	4b1f      	ldr	r3, [pc, #124]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	3302      	adds	r3, #2
 80109e6:	4a1e      	ldr	r2, [pc, #120]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109e8:	7c12      	ldrb	r2, [r2, #16]
 80109ea:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80109ec:	4b1c      	ldr	r3, [pc, #112]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109ee:	2201      	movs	r2, #1
 80109f0:	709a      	strb	r2, [r3, #2]
 80109f2:	e01c      	b.n	8010a2e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80109f4:	4b1a      	ldr	r3, [pc, #104]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 80109f6:	789b      	ldrb	r3, [r3, #2]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d005      	beq.n	8010a08 <LmhpComplianceTxProcess+0x7c>
 80109fc:	2b04      	cmp	r3, #4
 80109fe:	d116      	bne.n	8010a2e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8010a00:	4b17      	ldr	r3, [pc, #92]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a02:	2201      	movs	r2, #1
 8010a04:	709a      	strb	r2, [r3, #2]
            break;
 8010a06:	e012      	b.n	8010a2e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8010a08:	4b15      	ldr	r3, [pc, #84]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010a0e:	4b14      	ldr	r3, [pc, #80]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a10:	899b      	ldrh	r3, [r3, #12]
 8010a12:	0a1b      	lsrs	r3, r3, #8
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	4b12      	ldr	r3, [pc, #72]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	b2d2      	uxtb	r2, r2
 8010a1c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010a1e:	4b10      	ldr	r3, [pc, #64]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a20:	899a      	ldrh	r2, [r3, #12]
 8010a22:	4b0f      	ldr	r3, [pc, #60]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	3301      	adds	r3, #1
 8010a28:	b2d2      	uxtb	r2, r2
 8010a2a:	701a      	strb	r2, [r3, #0]
            break;
 8010a2c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010a2e:	23e0      	movs	r3, #224	; 0xe0
 8010a30:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010a32:	4b0b      	ldr	r3, [pc, #44]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a34:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010a36:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010a38:	4b09      	ldr	r3, [pc, #36]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a3a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010a3c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8010a3e:	4809      	ldr	r0, [pc, #36]	; (8010a64 <LmhpComplianceTxProcess+0xd8>)
 8010a40:	f00e ff60 	bl	801f904 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8010a44:	4b08      	ldr	r3, [pc, #32]	; (8010a68 <LmhpComplianceTxProcess+0xdc>)
 8010a46:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8010a48:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <LmhpComplianceTxProcess+0xd4>)
 8010a4a:	78db      	ldrb	r3, [r3, #3]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	4638      	mov	r0, r7
 8010a50:	2301      	movs	r3, #1
 8010a52:	2200      	movs	r2, #0
 8010a54:	47a0      	blx	r4
 8010a56:	4603      	mov	r3, r0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd90      	pop	{r4, r7, pc}
 8010a60:	200033d8 	.word	0x200033d8
 8010a64:	200033c0 	.word	0x200033c0
 8010a68:	200000d0 	.word	0x200000d0

08010a6c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b0a2      	sub	sp, #136	; 0x88
 8010a70:	af02      	add	r7, sp, #8
 8010a72:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010a74:	4ba2      	ldr	r3, [pc, #648]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f083 0301 	eor.w	r3, r3, #1
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f040 81c0 	bne.w	8010e04 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	7b5b      	ldrb	r3, [r3, #13]
 8010a88:	f083 0301 	eor.w	r3, r3, #1
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f040 81ba 	bne.w	8010e08 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010a94:	4b9a      	ldr	r3, [pc, #616]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010a96:	785b      	ldrb	r3, [r3, #1]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00c      	beq.n	8010ab6 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	7b9b      	ldrb	r3, [r3, #14]
 8010aa0:	f083 0301 	eor.w	r3, r3, #1
 8010aa4:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d005      	beq.n	8010ab6 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010aaa:	4b95      	ldr	r3, [pc, #596]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010aac:	899b      	ldrh	r3, [r3, #12]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	4b93      	ldr	r3, [pc, #588]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010ab4:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	78db      	ldrb	r3, [r3, #3]
 8010aba:	2be0      	cmp	r3, #224	; 0xe0
 8010abc:	f040 81a6 	bne.w	8010e0c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010ac0:	4b8f      	ldr	r3, [pc, #572]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010ac2:	785b      	ldrb	r3, [r3, #1]
 8010ac4:	f083 0301 	eor.w	r3, r3, #1
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d060      	beq.n	8010b90 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	7b1b      	ldrb	r3, [r3, #12]
 8010ad2:	2b04      	cmp	r3, #4
 8010ad4:	f040 819f 	bne.w	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	f040 8199 	bne.w	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	f040 8192 	bne.w	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	689b      	ldr	r3, [r3, #8]
 8010af6:	3302      	adds	r3, #2
 8010af8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	f040 818b 	bne.w	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	3303      	adds	r3, #3
 8010b06:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	f040 8184 	bne.w	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8010b0e:	4b7c      	ldr	r3, [pc, #496]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b10:	2200      	movs	r2, #0
 8010b12:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010b14:	4b7a      	ldr	r3, [pc, #488]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b16:	22e0      	movs	r2, #224	; 0xe0
 8010b18:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010b1a:	4b79      	ldr	r3, [pc, #484]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b1c:	2202      	movs	r2, #2
 8010b1e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010b20:	4b77      	ldr	r3, [pc, #476]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8010b26:	4b76      	ldr	r3, [pc, #472]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010b2c:	4b74      	ldr	r3, [pc, #464]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8010b32:	4b73      	ldr	r3, [pc, #460]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8010b38:	4b71      	ldr	r3, [pc, #452]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010b3e:	4b70      	ldr	r3, [pc, #448]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b40:	2201      	movs	r2, #1
 8010b42:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 8010b44:	2304      	movs	r3, #4
 8010b46:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b4c:	f107 0308 	add.w	r3, r7, #8
 8010b50:	4618      	mov	r0, r3
 8010b52:	f004 f829 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 8010b56:	2000      	movs	r0, #0
 8010b58:	f004 fd9a 	bl	8015690 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010b5c:	4b69      	ldr	r3, [pc, #420]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8010b66:	4b67      	ldr	r3, [pc, #412]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8010b6e:	2300      	movs	r3, #0
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	4b65      	ldr	r3, [pc, #404]	; (8010d08 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	f04f 31ff 	mov.w	r1, #4294967295
 8010b7a:	4864      	ldr	r0, [pc, #400]	; (8010d0c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010b7c:	f00e fe8c 	bl	801f898 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010b80:	f241 3188 	movw	r1, #5000	; 0x1388
 8010b84:	4861      	ldr	r0, [pc, #388]	; (8010d0c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010b86:	f00e ff9b 	bl	801fac0 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 8010b8a:	f7ff feff 	bl	801098c <LmhpComplianceTxProcess>
 8010b8e:	e142      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	781a      	ldrb	r2, [r3, #0]
 8010b96:	4b5a      	ldr	r3, [pc, #360]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b98:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8010b9a:	4b59      	ldr	r3, [pc, #356]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010b9c:	789b      	ldrb	r3, [r3, #2]
 8010b9e:	2b0a      	cmp	r3, #10
 8010ba0:	f200 8136 	bhi.w	8010e10 <LmhpComplianceOnMcpsIndication+0x3a4>
 8010ba4:	a201      	add	r2, pc, #4	; (adr r2, 8010bac <LmhpComplianceOnMcpsIndication+0x140>)
 8010ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010baa:	bf00      	nop
 8010bac:	08010bd9 	.word	0x08010bd9
 8010bb0:	08010c23 	.word	0x08010c23
 8010bb4:	08010c2b 	.word	0x08010c2b
 8010bb8:	08010c39 	.word	0x08010c39
 8010bbc:	08010c47 	.word	0x08010c47
 8010bc0:	08010c9f 	.word	0x08010c9f
 8010bc4:	08010cb1 	.word	0x08010cb1
 8010bc8:	08010d15 	.word	0x08010d15
 8010bcc:	08010dbd 	.word	0x08010dbd
 8010bd0:	08010dcf 	.word	0x08010dcf
 8010bd4:	08010de9 	.word	0x08010de9
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8010bd8:	484c      	ldr	r0, [pc, #304]	; (8010d0c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010bda:	f00e ff01 	bl	801f9e0 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010bde:	4b48      	ldr	r3, [pc, #288]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010be4:	4b46      	ldr	r3, [pc, #280]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 8010bea:	2304      	movs	r3, #4
 8010bec:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010bee:	4b45      	ldr	r3, [pc, #276]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010bf6:	f107 0308 	add.w	r3, r7, #8
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f003 ffd4 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010c00:	4b40      	ldr	r3, [pc, #256]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	785b      	ldrb	r3, [r3, #1]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f004 fd42 	bl	8015690 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010c0c:	4b3d      	ldr	r3, [pc, #244]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	689b      	ldr	r3, [r3, #8]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f000 80fe 	beq.w	8010e14 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010c18:	4b3a      	ldr	r3, [pc, #232]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	689b      	ldr	r3, [r3, #8]
 8010c1e:	4798      	blx	r3
                }
            }
            break;
 8010c20:	e0f8      	b.n	8010e14 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 8010c22:	4b37      	ldr	r3, [pc, #220]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c24:	2202      	movs	r2, #2
 8010c26:	719a      	strb	r2, [r3, #6]
            break;
 8010c28:	e0f5      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8010c2a:	4b35      	ldr	r3, [pc, #212]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c30:	4b33      	ldr	r3, [pc, #204]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c32:	2201      	movs	r2, #1
 8010c34:	709a      	strb	r2, [r3, #2]
            break;
 8010c36:	e0ee      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8010c38:	4b31      	ldr	r3, [pc, #196]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c3e:	4b30      	ldr	r3, [pc, #192]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c40:	2201      	movs	r2, #1
 8010c42:	709a      	strb	r2, [r3, #2]
            break;
 8010c44:	e0e7      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	7b1a      	ldrb	r2, [r3, #12]
 8010c4a:	4b2d      	ldr	r3, [pc, #180]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c4c:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8010c4e:	4b2c      	ldr	r3, [pc, #176]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	2204      	movs	r2, #4
 8010c54:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010c56:	2301      	movs	r3, #1
 8010c58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c5c:	e012      	b.n	8010c84 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	689a      	ldr	r2, [r3, #8]
 8010c62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c66:	4413      	add	r3, r2
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	4b25      	ldr	r3, [pc, #148]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c6c:	6899      	ldr	r1, [r3, #8]
 8010c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c72:	440b      	add	r3, r1
 8010c74:	3201      	adds	r2, #1
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010c7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c7e:	3301      	adds	r3, #1
 8010c80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c84:	4b1e      	ldr	r3, [pc, #120]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c86:	795a      	ldrb	r2, [r3, #5]
 8010c88:	4b1d      	ldr	r3, [pc, #116]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010c8a:	799b      	ldrb	r3, [r3, #6]
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	bf28      	it	cs
 8010c90:	4613      	movcs	r3, r2
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d3e0      	bcc.n	8010c5e <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8010c9c:	e0bb      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8010c9e:	2304      	movs	r3, #4
 8010ca0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 8010ca4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f004 fabb 	bl	8015224 <LoRaMacMlmeRequest>
            }
            break;
 8010cae:	e0b2      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8010cb0:	4816      	ldr	r0, [pc, #88]	; (8010d0c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010cb2:	f00e fe95 	bl	801f9e0 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010cb6:	4b12      	ldr	r3, [pc, #72]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010cbc:	4b10      	ldr	r3, [pc, #64]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x294>)
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 8010cc2:	2304      	movs	r3, #4
 8010cc4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010cc6:	4b0f      	ldr	r3, [pc, #60]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010cce:	f107 0308 	add.w	r3, r7, #8
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f003 ff68 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010cd8:	4b0a      	ldr	r3, [pc, #40]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	785b      	ldrb	r3, [r3, #1]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f004 fcd6 	bl	8015690 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010ce4:	4b07      	ldr	r3, [pc, #28]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d003      	beq.n	8010cf6 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010cee:	4b05      	ldr	r3, [pc, #20]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x298>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8010cf6:	4b06      	ldr	r3, [pc, #24]	; (8010d10 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfa:	2002      	movs	r0, #2
 8010cfc:	4798      	blx	r3
            }
            break;
 8010cfe:	e08a      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
 8010d00:	200033d8 	.word	0x200033d8
 8010d04:	200033ec 	.word	0x200033ec
 8010d08:	08010e2d 	.word	0x08010e2d
 8010d0c:	200033c0 	.word	0x200033c0
 8010d10:	200000d0 	.word	0x200000d0
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	7b1b      	ldrb	r3, [r3, #12]
 8010d18:	2b03      	cmp	r3, #3
 8010d1a:	d113      	bne.n	8010d44 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010d1c:	2305      	movs	r3, #5
 8010d1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	3301      	adds	r3, #1
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	021b      	lsls	r3, r3, #8
 8010d2c:	b21a      	sxth	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	689b      	ldr	r3, [r3, #8]
 8010d32:	3302      	adds	r3, #2
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	b21b      	sxth	r3, r3
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	b21b      	sxth	r3, r3
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010d42:	e032      	b.n	8010daa <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	7b1b      	ldrb	r3, [r3, #12]
 8010d48:	2b07      	cmp	r3, #7
 8010d4a:	d12e      	bne.n	8010daa <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8010d4c:	2306      	movs	r3, #6
 8010d4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	3301      	adds	r3, #1
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	021b      	lsls	r3, r3, #8
 8010d5c:	b21a      	sxth	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	3302      	adds	r3, #2
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	b21b      	sxth	r3, r3
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	b21b      	sxth	r3, r3
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	3303      	adds	r3, #3
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	041a      	lsls	r2, r3, #16
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	3304      	adds	r3, #4
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	021b      	lsls	r3, r3, #8
 8010d86:	4313      	orrs	r3, r2
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	6892      	ldr	r2, [r2, #8]
 8010d8c:	3205      	adds	r2, #5
 8010d8e:	7812      	ldrb	r2, [r2, #0]
 8010d90:	4313      	orrs	r3, r2
 8010d92:	461a      	mov	r2, r3
 8010d94:	2364      	movs	r3, #100	; 0x64
 8010d96:	fb02 f303 	mul.w	r3, r2, r3
 8010d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	689b      	ldr	r3, [r3, #8]
 8010da0:	3306      	adds	r3, #6
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8010daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010dae:	4618      	mov	r0, r3
 8010db0:	f004 fa38 	bl	8015224 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8010db4:	4b19      	ldr	r3, [pc, #100]	; (8010e1c <LmhpComplianceOnMcpsIndication+0x3b0>)
 8010db6:	2201      	movs	r2, #1
 8010db8:	709a      	strb	r2, [r3, #2]
            }
            break;
 8010dba:	e02c      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8010dbc:	230a      	movs	r3, #10
 8010dbe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 8010dc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f004 fa2c 	bl	8015224 <LoRaMacMlmeRequest>
            }
            break;
 8010dcc:	e023      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010ddc:	f107 0308 	add.w	r3, r7, #8
 8010de0:	4618      	mov	r0, r3
 8010de2:	f003 fee1 	bl	8014ba8 <LoRaMacMibSetRequestConfirm>
            }
            break;
 8010de6:	e016      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010de8:	230d      	movs	r3, #13
 8010dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	785b      	ldrb	r3, [r3, #1]
 8010df4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8010df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f004 fa11 	bl	8015224 <LoRaMacMlmeRequest>
            }
            break;
 8010e02:	e008      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e04:	bf00      	nop
 8010e06:	e006      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e08:	bf00      	nop
 8010e0a:	e004      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e0c:	bf00      	nop
 8010e0e:	e002      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 8010e10:	bf00      	nop
 8010e12:	e000      	b.n	8010e16 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 8010e14:	bf00      	nop
        }
    }
}
 8010e16:	3780      	adds	r7, #128	; 0x80
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	200033d8 	.word	0x200033d8

08010e20 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010e20:	b480      	push	{r7}
 8010e22:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010e24:	bf00      	nop
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bc80      	pop	{r7}
 8010e2a:	4770      	bx	lr

08010e2c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010e34:	f7ff fdaa 	bl	801098c <LmhpComplianceTxProcess>
}
 8010e38:	bf00      	nop
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010e46:	f00e fee5 	bl	801fc14 <UTIL_TIMER_GetCurrentTime>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	4a16      	ldr	r2, [pc, #88]	; (8010ea8 <OnRadioTxDone+0x68>)
 8010e4e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010e50:	4c16      	ldr	r4, [pc, #88]	; (8010eac <OnRadioTxDone+0x6c>)
 8010e52:	463b      	mov	r3, r7
 8010e54:	4618      	mov	r0, r3
 8010e56:	f00e fa9b 	bl	801f390 <SysTimeGet>
 8010e5a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010e5e:	463a      	mov	r2, r7
 8010e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e64:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010e68:	4a11      	ldr	r2, [pc, #68]	; (8010eb0 <OnRadioTxDone+0x70>)
 8010e6a:	7813      	ldrb	r3, [r2, #0]
 8010e6c:	f043 0310 	orr.w	r3, r3, #16
 8010e70:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010e72:	4b0e      	ldr	r3, [pc, #56]	; (8010eac <OnRadioTxDone+0x6c>)
 8010e74:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <OnRadioTxDone+0x52>
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <OnRadioTxDone+0x6c>)
 8010e7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d004      	beq.n	8010e92 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010e88:	4b08      	ldr	r3, [pc, #32]	; (8010eac <OnRadioTxDone+0x6c>)
 8010e8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010e92:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <OnRadioTxDone+0x74>)
 8010e94:	2201      	movs	r2, #1
 8010e96:	2100      	movs	r1, #0
 8010e98:	2002      	movs	r0, #2
 8010e9a:	f00d fcc9 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8010e9e:	bf00      	nop
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd90      	pop	{r4, r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20003f0c 	.word	0x20003f0c
 8010eac:	200033f0 	.word	0x200033f0
 8010eb0:	20003f08 	.word	0x20003f08
 8010eb4:	08022834 	.word	0x08022834

08010eb8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	817b      	strh	r3, [r7, #10]
 8010eca:	460b      	mov	r3, r1
 8010ecc:	813b      	strh	r3, [r7, #8]
 8010ece:	4613      	mov	r3, r2
 8010ed0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010ed2:	f00e fe9f 	bl	801fc14 <UTIL_TIMER_GetCurrentTime>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	4a16      	ldr	r2, [pc, #88]	; (8010f34 <OnRadioRxDone+0x7c>)
 8010eda:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010edc:	4a15      	ldr	r2, [pc, #84]	; (8010f34 <OnRadioRxDone+0x7c>)
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010ee2:	4a14      	ldr	r2, [pc, #80]	; (8010f34 <OnRadioRxDone+0x7c>)
 8010ee4:	897b      	ldrh	r3, [r7, #10]
 8010ee6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010ee8:	4a12      	ldr	r2, [pc, #72]	; (8010f34 <OnRadioRxDone+0x7c>)
 8010eea:	893b      	ldrh	r3, [r7, #8]
 8010eec:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010eee:	4a11      	ldr	r2, [pc, #68]	; (8010f34 <OnRadioRxDone+0x7c>)
 8010ef0:	79fb      	ldrb	r3, [r7, #7]
 8010ef2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010ef4:	4a10      	ldr	r2, [pc, #64]	; (8010f38 <OnRadioRxDone+0x80>)
 8010ef6:	7813      	ldrb	r3, [r2, #0]
 8010ef8:	f043 0308 	orr.w	r3, r3, #8
 8010efc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010efe:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <OnRadioRxDone+0x84>)
 8010f00:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00a      	beq.n	8010f1e <OnRadioRxDone+0x66>
 8010f08:	4b0c      	ldr	r3, [pc, #48]	; (8010f3c <OnRadioRxDone+0x84>)
 8010f0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f0e:	691b      	ldr	r3, [r3, #16]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d004      	beq.n	8010f1e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010f14:	4b09      	ldr	r3, [pc, #36]	; (8010f3c <OnRadioRxDone+0x84>)
 8010f16:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010f1e:	4b08      	ldr	r3, [pc, #32]	; (8010f40 <OnRadioRxDone+0x88>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	2100      	movs	r1, #0
 8010f24:	2002      	movs	r0, #2
 8010f26:	f00d fc83 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8010f2a:	bf00      	nop
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20003f10 	.word	0x20003f10
 8010f38:	20003f08 	.word	0x20003f08
 8010f3c:	200033f0 	.word	0x200033f0
 8010f40:	08022844 	.word	0x08022844

08010f44 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010f48:	4a0e      	ldr	r2, [pc, #56]	; (8010f84 <OnRadioTxTimeout+0x40>)
 8010f4a:	7813      	ldrb	r3, [r2, #0]
 8010f4c:	f043 0304 	orr.w	r3, r3, #4
 8010f50:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f52:	4b0d      	ldr	r3, [pc, #52]	; (8010f88 <OnRadioTxTimeout+0x44>)
 8010f54:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00a      	beq.n	8010f72 <OnRadioTxTimeout+0x2e>
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	; (8010f88 <OnRadioTxTimeout+0x44>)
 8010f5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d004      	beq.n	8010f72 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010f68:	4b07      	ldr	r3, [pc, #28]	; (8010f88 <OnRadioTxTimeout+0x44>)
 8010f6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010f72:	4b06      	ldr	r3, [pc, #24]	; (8010f8c <OnRadioTxTimeout+0x48>)
 8010f74:	2201      	movs	r2, #1
 8010f76:	2100      	movs	r1, #0
 8010f78:	2002      	movs	r0, #2
 8010f7a:	f00d fc59 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8010f7e:	bf00      	nop
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	20003f08 	.word	0x20003f08
 8010f88:	200033f0 	.word	0x200033f0
 8010f8c:	08022854 	.word	0x08022854

08010f90 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010f94:	4a0b      	ldr	r2, [pc, #44]	; (8010fc4 <OnRadioRxError+0x34>)
 8010f96:	7813      	ldrb	r3, [r2, #0]
 8010f98:	f043 0302 	orr.w	r3, r3, #2
 8010f9c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f9e:	4b0a      	ldr	r3, [pc, #40]	; (8010fc8 <OnRadioRxError+0x38>)
 8010fa0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00a      	beq.n	8010fbe <OnRadioRxError+0x2e>
 8010fa8:	4b07      	ldr	r3, [pc, #28]	; (8010fc8 <OnRadioRxError+0x38>)
 8010faa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d004      	beq.n	8010fbe <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010fb4:	4b04      	ldr	r3, [pc, #16]	; (8010fc8 <OnRadioRxError+0x38>)
 8010fb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	4798      	blx	r3
    }
}
 8010fbe:	bf00      	nop
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20003f08 	.word	0x20003f08
 8010fc8:	200033f0 	.word	0x200033f0

08010fcc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010fd0:	4a0e      	ldr	r2, [pc, #56]	; (801100c <OnRadioRxTimeout+0x40>)
 8010fd2:	7813      	ldrb	r3, [r2, #0]
 8010fd4:	f043 0301 	orr.w	r3, r3, #1
 8010fd8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010fda:	4b0d      	ldr	r3, [pc, #52]	; (8011010 <OnRadioRxTimeout+0x44>)
 8010fdc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00a      	beq.n	8010ffa <OnRadioRxTimeout+0x2e>
 8010fe4:	4b0a      	ldr	r3, [pc, #40]	; (8011010 <OnRadioRxTimeout+0x44>)
 8010fe6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d004      	beq.n	8010ffa <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010ff0:	4b07      	ldr	r3, [pc, #28]	; (8011010 <OnRadioRxTimeout+0x44>)
 8010ff2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010ffa:	4b06      	ldr	r3, [pc, #24]	; (8011014 <OnRadioRxTimeout+0x48>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	2100      	movs	r1, #0
 8011000:	2002      	movs	r0, #2
 8011002:	f00d fc15 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8011006:	bf00      	nop
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	20003f08 	.word	0x20003f08
 8011010:	200033f0 	.word	0x200033f0
 8011014:	08022864 	.word	0x08022864

08011018 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8011018:	b480      	push	{r7}
 801101a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801101c:	4b08      	ldr	r3, [pc, #32]	; (8011040 <UpdateRxSlotIdleState+0x28>)
 801101e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011022:	2b02      	cmp	r3, #2
 8011024:	d004      	beq.n	8011030 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8011026:	4b07      	ldr	r3, [pc, #28]	; (8011044 <UpdateRxSlotIdleState+0x2c>)
 8011028:	2206      	movs	r2, #6
 801102a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 801102e:	e003      	b.n	8011038 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011030:	4b04      	ldr	r3, [pc, #16]	; (8011044 <UpdateRxSlotIdleState+0x2c>)
 8011032:	2202      	movs	r2, #2
 8011034:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8011038:	bf00      	nop
 801103a:	46bd      	mov	sp, r7
 801103c:	bc80      	pop	{r7}
 801103e:	4770      	bx	lr
 8011040:	200038f8 	.word	0x200038f8
 8011044:	200033f0 	.word	0x200033f0

08011048 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b08e      	sub	sp, #56	; 0x38
 801104c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801104e:	4b44      	ldr	r3, [pc, #272]	; (8011160 <ProcessRadioTxDone+0x118>)
 8011050:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011054:	2b02      	cmp	r3, #2
 8011056:	d002      	beq.n	801105e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8011058:	4b42      	ldr	r3, [pc, #264]	; (8011164 <ProcessRadioTxDone+0x11c>)
 801105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801105c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 801105e:	4b42      	ldr	r3, [pc, #264]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011060:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8011064:	4619      	mov	r1, r3
 8011066:	4841      	ldr	r0, [pc, #260]	; (801116c <ProcessRadioTxDone+0x124>)
 8011068:	f00e fd2a 	bl	801fac0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 801106c:	483f      	ldr	r0, [pc, #252]	; (801116c <ProcessRadioTxDone+0x124>)
 801106e:	f00e fc49 	bl	801f904 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8011072:	4b3d      	ldr	r3, [pc, #244]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011074:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011078:	4619      	mov	r1, r3
 801107a:	483d      	ldr	r0, [pc, #244]	; (8011170 <ProcessRadioTxDone+0x128>)
 801107c:	f00e fd20 	bl	801fac0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8011080:	483b      	ldr	r0, [pc, #236]	; (8011170 <ProcessRadioTxDone+0x128>)
 8011082:	f00e fc3f 	bl	801f904 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8011086:	4b36      	ldr	r3, [pc, #216]	; (8011160 <ProcessRadioTxDone+0x118>)
 8011088:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801108c:	2b02      	cmp	r3, #2
 801108e:	d004      	beq.n	801109a <ProcessRadioTxDone+0x52>
 8011090:	4b35      	ldr	r3, [pc, #212]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011092:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011096:	2b00      	cmp	r3, #0
 8011098:	d019      	beq.n	80110ce <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 801109a:	2316      	movs	r3, #22
 801109c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110a0:	4b2f      	ldr	r3, [pc, #188]	; (8011160 <ProcessRadioTxDone+0x118>)
 80110a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110a6:	f107 0220 	add.w	r2, r7, #32
 80110aa:	4611      	mov	r1, r2
 80110ac:	4618      	mov	r0, r3
 80110ae:	f006 fb8c 	bl	80177ca <RegionGetPhyParam>
 80110b2:	4603      	mov	r3, r0
 80110b4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80110b6:	4b2c      	ldr	r3, [pc, #176]	; (8011168 <ProcessRadioTxDone+0x120>)
 80110b8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	4413      	add	r3, r2
 80110c0:	4619      	mov	r1, r3
 80110c2:	482c      	ldr	r0, [pc, #176]	; (8011174 <ProcessRadioTxDone+0x12c>)
 80110c4:	f00e fcfc 	bl	801fac0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80110c8:	482a      	ldr	r0, [pc, #168]	; (8011174 <ProcessRadioTxDone+0x12c>)
 80110ca:	f00e fc1b 	bl	801f904 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80110ce:	4b2a      	ldr	r3, [pc, #168]	; (8011178 <ProcessRadioTxDone+0x130>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4a23      	ldr	r2, [pc, #140]	; (8011160 <ProcessRadioTxDone+0x118>)
 80110d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80110d6:	4b24      	ldr	r3, [pc, #144]	; (8011168 <ProcessRadioTxDone+0x120>)
 80110d8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80110dc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80110de:	4b26      	ldr	r3, [pc, #152]	; (8011178 <ProcessRadioTxDone+0x130>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80110e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00e f989 	bl	801f400 <SysTimeGetMcuTime>
 80110ee:	4638      	mov	r0, r7
 80110f0:	4b1b      	ldr	r3, [pc, #108]	; (8011160 <ProcessRadioTxDone+0x118>)
 80110f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80110f6:	9200      	str	r2, [sp, #0]
 80110f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80110fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011100:	ca06      	ldmia	r2, {r1, r2}
 8011102:	f00e f8de 	bl	801f2c2 <SysTimeSub>
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	463a      	mov	r2, r7
 801110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011110:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8011114:	4b14      	ldr	r3, [pc, #80]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011116:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801111a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 801111c:	2301      	movs	r3, #1
 801111e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011120:	4b0f      	ldr	r3, [pc, #60]	; (8011160 <ProcessRadioTxDone+0x118>)
 8011122:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 801112a:	2300      	movs	r3, #0
 801112c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 801112e:	4b0c      	ldr	r3, [pc, #48]	; (8011160 <ProcessRadioTxDone+0x118>)
 8011130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011134:	f107 0208 	add.w	r2, r7, #8
 8011138:	4611      	mov	r1, r2
 801113a:	4618      	mov	r0, r3
 801113c:	f006 fb66 	bl	801780c <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 8011140:	4b09      	ldr	r3, [pc, #36]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011142:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011146:	f083 0301 	eor.w	r3, r3, #1
 801114a:	b2db      	uxtb	r3, r3
 801114c:	2b00      	cmp	r3, #0
 801114e:	d003      	beq.n	8011158 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011150:	4b05      	ldr	r3, [pc, #20]	; (8011168 <ProcessRadioTxDone+0x120>)
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 8011158:	bf00      	nop
 801115a:	3730      	adds	r7, #48	; 0x30
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	200038f8 	.word	0x200038f8
 8011164:	080232e4 	.word	0x080232e4
 8011168:	200033f0 	.word	0x200033f0
 801116c:	20003770 	.word	0x20003770
 8011170:	20003788 	.word	0x20003788
 8011174:	200037e8 	.word	0x200037e8
 8011178:	20003f0c 	.word	0x20003f0c

0801117c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8011180:	4b10      	ldr	r3, [pc, #64]	; (80111c4 <PrepareRxDoneAbort+0x48>)
 8011182:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801118a:	4a0e      	ldr	r2, [pc, #56]	; (80111c4 <PrepareRxDoneAbort+0x48>)
 801118c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8011190:	4b0c      	ldr	r3, [pc, #48]	; (80111c4 <PrepareRxDoneAbort+0x48>)
 8011192:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011196:	2b00      	cmp	r3, #0
 8011198:	d002      	beq.n	80111a0 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 801119a:	2000      	movs	r0, #0
 801119c:	f001 f8f8 	bl	8012390 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 80111a0:	4a08      	ldr	r2, [pc, #32]	; (80111c4 <PrepareRxDoneAbort+0x48>)
 80111a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80111a6:	f043 0302 	orr.w	r3, r3, #2
 80111aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 80111ae:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <PrepareRxDoneAbort+0x48>)
 80111b0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80111b4:	f043 0320 	orr.w	r3, r3, #32
 80111b8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 80111bc:	f7ff ff2c 	bl	8011018 <UpdateRxSlotIdleState>
}
 80111c0:	bf00      	nop
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	200033f0 	.word	0x200033f0

080111c8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 80111c8:	b5b0      	push	{r4, r5, r7, lr}
 80111ca:	b0a6      	sub	sp, #152	; 0x98
 80111cc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80111ce:	2313      	movs	r3, #19
 80111d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80111d4:	4bb9      	ldr	r3, [pc, #740]	; (80114bc <ProcessRadioRxDone+0x2f4>)
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 80111da:	4bb8      	ldr	r3, [pc, #736]	; (80114bc <ProcessRadioRxDone+0x2f4>)
 80111dc:	891b      	ldrh	r3, [r3, #8]
 80111de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 80111e2:	4bb6      	ldr	r3, [pc, #728]	; (80114bc <ProcessRadioRxDone+0x2f4>)
 80111e4:	895b      	ldrh	r3, [r3, #10]
 80111e6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 80111ea:	4bb4      	ldr	r3, [pc, #720]	; (80114bc <ProcessRadioRxDone+0x2f4>)
 80111ec:	7b1b      	ldrb	r3, [r3, #12]
 80111ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 80111f2:	2300      	movs	r3, #0
 80111f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 80111f8:	2300      	movs	r3, #0
 80111fa:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80111fc:	4bb0      	ldr	r3, [pc, #704]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80111fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 8011206:	2300      	movs	r3, #0
 8011208:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 801120c:	2301      	movs	r3, #1
 801120e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 8011212:	4bac      	ldr	r3, [pc, #688]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011214:	2200      	movs	r2, #0
 8011216:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 801121a:	4aaa      	ldr	r2, [pc, #680]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801121c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011220:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8011224:	4aa7      	ldr	r2, [pc, #668]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011226:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801122a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 801122e:	4ba5      	ldr	r3, [pc, #660]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011230:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8011234:	4ba3      	ldr	r3, [pc, #652]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011236:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 801123a:	4ba2      	ldr	r3, [pc, #648]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801123c:	2200      	movs	r2, #0
 801123e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8011242:	4ba0      	ldr	r3, [pc, #640]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011244:	2200      	movs	r2, #0
 8011246:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 801124a:	4b9e      	ldr	r3, [pc, #632]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801124c:	2200      	movs	r2, #0
 801124e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8011252:	4b9c      	ldr	r3, [pc, #624]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011254:	2200      	movs	r2, #0
 8011256:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 801125a:	4b9a      	ldr	r3, [pc, #616]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801125c:	2200      	movs	r2, #0
 801125e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8011262:	4b98      	ldr	r3, [pc, #608]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011264:	2200      	movs	r2, #0
 8011266:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 801126a:	4b96      	ldr	r3, [pc, #600]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801126c:	2200      	movs	r2, #0
 801126e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8011272:	4b94      	ldr	r3, [pc, #592]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011274:	2200      	movs	r2, #0
 8011276:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801127a:	4b92      	ldr	r3, [pc, #584]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801127c:	2200      	movs	r2, #0
 801127e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8011282:	4b90      	ldr	r3, [pc, #576]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011284:	2200      	movs	r2, #0
 8011286:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801128a:	4b8e      	ldr	r3, [pc, #568]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 801128c:	2200      	movs	r2, #0
 801128e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 8011292:	4b8d      	ldr	r3, [pc, #564]	; (80114c8 <ProcessRadioRxDone+0x300>)
 8011294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011296:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011298:	488c      	ldr	r0, [pc, #560]	; (80114cc <ProcessRadioRxDone+0x304>)
 801129a:	f00e fba1 	bl	801f9e0 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801129e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80112a2:	4619      	mov	r1, r3
 80112a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80112a6:	f004 fb28 	bl	80158fa <LoRaMacClassBRxBeacon>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00a      	beq.n	80112c6 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80112b0:	4a84      	ldr	r2, [pc, #528]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 80112b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80112b6:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80112ba:	4a82      	ldr	r2, [pc, #520]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 80112bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112c0:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 80112c4:	e3bf      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80112c6:	4b7e      	ldr	r3, [pc, #504]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80112c8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d11e      	bne.n	801130e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80112d0:	f004 fb26 	bl	8015920 <LoRaMacClassBIsPingExpected>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00a      	beq.n	80112f0 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80112da:	2000      	movs	r0, #0
 80112dc:	f004 fad7 	bl	801588e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80112e0:	2000      	movs	r0, #0
 80112e2:	f004 faf8 	bl	80158d6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80112e6:	4b77      	ldr	r3, [pc, #476]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 80112e8:	2204      	movs	r2, #4
 80112ea:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80112ee:	e00e      	b.n	801130e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80112f0:	f004 fb1d 	bl	801592e <LoRaMacClassBIsMulticastExpected>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d009      	beq.n	801130e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80112fa:	2000      	movs	r0, #0
 80112fc:	f004 fad1 	bl	80158a2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011300:	2000      	movs	r0, #0
 8011302:	f004 faf1 	bl	80158e8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011306:	4b6f      	ldr	r3, [pc, #444]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011308:	2205      	movs	r2, #5
 801130a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 801130e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011312:	1c5a      	adds	r2, r3, #1
 8011314:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8011318:	461a      	mov	r2, r3
 801131a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801131c:	4413      	add	r3, r2
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 8011324:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011328:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801132c:	b2db      	uxtb	r3, r3
 801132e:	3b01      	subs	r3, #1
 8011330:	2b06      	cmp	r3, #6
 8011332:	f200 8362 	bhi.w	80119fa <ProcessRadioRxDone+0x832>
 8011336:	a201      	add	r2, pc, #4	; (adr r2, 801133c <ProcessRadioRxDone+0x174>)
 8011338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801133c:	08011359 	.word	0x08011359
 8011340:	080119fb 	.word	0x080119fb
 8011344:	080114d9 	.word	0x080114d9
 8011348:	080119fb 	.word	0x080119fb
 801134c:	080114d1 	.word	0x080114d1
 8011350:	080119fb 	.word	0x080119fb
 8011354:	080119a1 	.word	0x080119a1
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011358:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801135c:	2b10      	cmp	r3, #16
 801135e:	d806      	bhi.n	801136e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011360:	4b58      	ldr	r3, [pc, #352]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011362:	2201      	movs	r2, #1
 8011364:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011368:	f7ff ff08 	bl	801117c <PrepareRxDoneAbort>
                return;
 801136c:	e36b      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 801136e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011370:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 8011372:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011376:	b2db      	uxtb	r3, r3
 8011378:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801137a:	4b51      	ldr	r3, [pc, #324]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801137c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011380:	2b00      	cmp	r3, #0
 8011382:	d006      	beq.n	8011392 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011384:	4b4f      	ldr	r3, [pc, #316]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 8011386:	2201      	movs	r2, #1
 8011388:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 801138c:	f7ff fef6 	bl	801117c <PrepareRxDoneAbort>
                return;
 8011390:	e359      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8011392:	f7fd ff9d 	bl	800f2d0 <SecureElementGetJoinEui>
 8011396:	4601      	mov	r1, r0
 8011398:	f107 0308 	add.w	r3, r7, #8
 801139c:	461a      	mov	r2, r3
 801139e:	20ff      	movs	r0, #255	; 0xff
 80113a0:	f005 fc92 	bl	8016cc8 <LoRaMacCryptoHandleJoinAccept>
 80113a4:	4603      	mov	r3, r0
 80113a6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80113aa:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d172      	bne.n	8011498 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80113b2:	7c7b      	ldrb	r3, [r7, #17]
 80113b4:	461a      	mov	r2, r3
 80113b6:	4b42      	ldr	r3, [pc, #264]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80113bc:	4b40      	ldr	r3, [pc, #256]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80113c2:	7cbb      	ldrb	r3, [r7, #18]
 80113c4:	021b      	lsls	r3, r3, #8
 80113c6:	4313      	orrs	r3, r2
 80113c8:	4a3d      	ldr	r2, [pc, #244]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113ca:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80113ce:	4b3c      	ldr	r3, [pc, #240]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80113d4:	7cfb      	ldrb	r3, [r7, #19]
 80113d6:	041b      	lsls	r3, r3, #16
 80113d8:	4313      	orrs	r3, r2
 80113da:	4a39      	ldr	r2, [pc, #228]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113dc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	4a37      	ldr	r2, [pc, #220]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113e4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80113e8:	7e3b      	ldrb	r3, [r7, #24]
 80113ea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	461a      	mov	r2, r3
 80113f2:	4b33      	ldr	r3, [pc, #204]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 80113f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80113f8:	7e3b      	ldrb	r3, [r7, #24]
 80113fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	461a      	mov	r2, r3
 8011402:	4b2f      	ldr	r3, [pc, #188]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011404:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011408:	7e3b      	ldrb	r3, [r7, #24]
 801140a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801140e:	b2db      	uxtb	r3, r3
 8011410:	461a      	mov	r2, r3
 8011412:	4b2b      	ldr	r3, [pc, #172]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011418:	7e7b      	ldrb	r3, [r7, #25]
 801141a:	461a      	mov	r2, r3
 801141c:	4b28      	ldr	r3, [pc, #160]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801141e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011420:	4b27      	ldr	r3, [pc, #156]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011424:	2b00      	cmp	r3, #0
 8011426:	d102      	bne.n	801142e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011428:	4b25      	ldr	r3, [pc, #148]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801142a:	2201      	movs	r2, #1
 801142c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 801142e:	4b24      	ldr	r3, [pc, #144]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011436:	fb02 f303 	mul.w	r3, r2, r3
 801143a:	4a21      	ldr	r2, [pc, #132]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801143c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801143e:	4b20      	ldr	r3, [pc, #128]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011442:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011446:	4a1e      	ldr	r2, [pc, #120]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 8011448:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801144a:	4b1d      	ldr	r3, [pc, #116]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801144c:	2200      	movs	r2, #0
 801144e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011452:	f107 0308 	add.w	r3, r7, #8
 8011456:	3312      	adds	r3, #18
 8011458:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 801145a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801145e:	b2db      	uxtb	r3, r3
 8011460:	3b11      	subs	r3, #17
 8011462:	b2db      	uxtb	r3, r3
 8011464:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011468:	4b15      	ldr	r3, [pc, #84]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801146a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801146e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011472:	4611      	mov	r1, r2
 8011474:	4618      	mov	r0, r3
 8011476:	f006 fa17 	bl	80178a8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801147a:	4b11      	ldr	r3, [pc, #68]	; (80114c0 <ProcessRadioRxDone+0x2f8>)
 801147c:	2202      	movs	r2, #2
 801147e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011482:	2001      	movs	r0, #1
 8011484:	f004 ff18 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00e      	beq.n	80114ac <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 801148e:	2101      	movs	r1, #1
 8011490:	2000      	movs	r0, #0
 8011492:	f004 fe85 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
 8011496:	e009      	b.n	80114ac <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011498:	2001      	movs	r0, #1
 801149a:	f004 ff0d 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d003      	beq.n	80114ac <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80114a4:	2101      	movs	r1, #1
 80114a6:	2007      	movs	r0, #7
 80114a8:	f004 fe7a 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80114ac:	4a05      	ldr	r2, [pc, #20]	; (80114c4 <ProcessRadioRxDone+0x2fc>)
 80114ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80114b2:	f043 0308 	orr.w	r3, r3, #8
 80114b6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80114ba:	e2a5      	b.n	8011a08 <ProcessRadioRxDone+0x840>
 80114bc:	20003f10 	.word	0x20003f10
 80114c0:	200038f8 	.word	0x200038f8
 80114c4:	200033f0 	.word	0x200033f0
 80114c8:	080232e4 	.word	0x080232e4
 80114cc:	20003788 	.word	0x20003788
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80114d0:	4bae      	ldr	r3, [pc, #696]	; (801178c <ProcessRadioRxDone+0x5c4>)
 80114d2:	2201      	movs	r2, #1
 80114d4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114d8:	4bad      	ldr	r3, [pc, #692]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80114da:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80114e2:	4baa      	ldr	r3, [pc, #680]	; (801178c <ProcessRadioRxDone+0x5c4>)
 80114e4:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80114e8:	b25b      	sxtb	r3, r3
 80114ea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80114ee:	230d      	movs	r3, #13
 80114f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80114f4:	4ba6      	ldr	r3, [pc, #664]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80114f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80114fe:	230e      	movs	r3, #14
 8011500:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011504:	4ba2      	ldr	r3, [pc, #648]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 8011506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801150a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f006 f95a 	bl	80177ca <RegionGetPhyParam>
 8011516:	4603      	mov	r3, r0
 8011518:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 801151a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801151e:	3b0d      	subs	r3, #13
 8011520:	b29b      	uxth	r3, r3
 8011522:	b21b      	sxth	r3, r3
 8011524:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011528:	b21a      	sxth	r2, r3
 801152a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801152c:	b21b      	sxth	r3, r3
 801152e:	429a      	cmp	r2, r3
 8011530:	dc03      	bgt.n	801153a <ProcessRadioRxDone+0x372>
 8011532:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011536:	2b0b      	cmp	r3, #11
 8011538:	d806      	bhi.n	8011548 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801153a:	4b94      	ldr	r3, [pc, #592]	; (801178c <ProcessRadioRxDone+0x5c4>)
 801153c:	2201      	movs	r2, #1
 801153e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011542:	f7ff fe1b 	bl	801117c <PrepareRxDoneAbort>
                return;
 8011546:	e27e      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 8011548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801154a:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 801154c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011550:	b2db      	uxtb	r3, r3
 8011552:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011556:	4b8f      	ldr	r3, [pc, #572]	; (8011794 <ProcessRadioRxDone+0x5cc>)
 8011558:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801155a:	23ff      	movs	r3, #255	; 0xff
 801155c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011564:	4618      	mov	r0, r3
 8011566:	f005 feae 	bl	80172c6 <LoRaMacParserData>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d006      	beq.n	801157e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011570:	4b86      	ldr	r3, [pc, #536]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011572:	2201      	movs	r2, #1
 8011574:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011578:	f7ff fe00 	bl	801117c <PrepareRxDoneAbort>
                return;
 801157c:	e263      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801157e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011580:	4a82      	ldr	r2, [pc, #520]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011582:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011586:	1cba      	adds	r2, r7, #2
 8011588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801158c:	4611      	mov	r1, r2
 801158e:	4618      	mov	r0, r3
 8011590:	f002 fcde 	bl	8013f50 <DetermineFrameType>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d006      	beq.n	80115a8 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801159a:	4b7c      	ldr	r3, [pc, #496]	; (801178c <ProcessRadioRxDone+0x5c4>)
 801159c:	2201      	movs	r2, #1
 801159e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80115a2:	f7ff fdeb 	bl	801117c <PrepareRxDoneAbort>
                return;
 80115a6:	e24e      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 80115a8:	2300      	movs	r3, #0
 80115aa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115b2:	2300      	movs	r3, #0
 80115b4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80115b8:	e049      	b.n	801164e <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80115ba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115be:	4a74      	ldr	r2, [pc, #464]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80115c0:	212c      	movs	r1, #44	; 0x2c
 80115c2:	fb01 f303 	mul.w	r3, r1, r3
 80115c6:	4413      	add	r3, r2
 80115c8:	33d4      	adds	r3, #212	; 0xd4
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d138      	bne.n	8011644 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80115d2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115d6:	4a6e      	ldr	r2, [pc, #440]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80115d8:	212c      	movs	r1, #44	; 0x2c
 80115da:	fb01 f303 	mul.w	r3, r1, r3
 80115de:	4413      	add	r3, r2
 80115e0:	33d2      	adds	r3, #210	; 0xd2
 80115e2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d02d      	beq.n	8011644 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 80115e8:	2301      	movs	r3, #1
 80115ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80115ee:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115f2:	4a67      	ldr	r2, [pc, #412]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80115f4:	212c      	movs	r1, #44	; 0x2c
 80115f6:	fb01 f303 	mul.w	r3, r1, r3
 80115fa:	4413      	add	r3, r2
 80115fc:	33d3      	adds	r3, #211	; 0xd3
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011604:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011608:	4a61      	ldr	r2, [pc, #388]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 801160a:	212c      	movs	r1, #44	; 0x2c
 801160c:	fb01 f303 	mul.w	r3, r1, r3
 8011610:	4413      	add	r3, r2
 8011612:	33f0      	adds	r3, #240	; 0xf0
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801161a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801161e:	4a5c      	ldr	r2, [pc, #368]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 8011620:	212c      	movs	r1, #44	; 0x2c
 8011622:	fb01 f303 	mul.w	r3, r1, r3
 8011626:	4413      	add	r3, r2
 8011628:	33d4      	adds	r3, #212	; 0xd4
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011630:	4b57      	ldr	r3, [pc, #348]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 8011632:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011636:	2b02      	cmp	r3, #2
 8011638:	d10e      	bne.n	8011658 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801163a:	4b54      	ldr	r3, [pc, #336]	; (801178c <ProcessRadioRxDone+0x5c4>)
 801163c:	2203      	movs	r2, #3
 801163e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 8011642:	e009      	b.n	8011658 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011644:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011648:	3301      	adds	r3, #1
 801164a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 801164e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011652:	2b00      	cmp	r3, #0
 8011654:	d0b1      	beq.n	80115ba <ProcessRadioRxDone+0x3f2>
 8011656:	e000      	b.n	801165a <ProcessRadioRxDone+0x492>
                    break;
 8011658:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801165a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801165e:	2b01      	cmp	r3, #1
 8011660:	d117      	bne.n	8011692 <ProcessRadioRxDone+0x4ca>
 8011662:	78bb      	ldrb	r3, [r7, #2]
 8011664:	2b03      	cmp	r3, #3
 8011666:	d10d      	bne.n	8011684 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011668:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801166c:	f003 0320 	and.w	r3, r3, #32
 8011670:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011672:	2b00      	cmp	r3, #0
 8011674:	d106      	bne.n	8011684 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011676:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801167a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801167e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011680:	2b00      	cmp	r3, #0
 8011682:	d006      	beq.n	8011692 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011684:	4b41      	ldr	r3, [pc, #260]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011686:	2201      	movs	r2, #1
 8011688:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 801168c:	f7ff fd76 	bl	801117c <PrepareRxDoneAbort>
                return;
 8011690:	e1d9      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011692:	2315      	movs	r3, #21
 8011694:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011698:	4b3d      	ldr	r3, [pc, #244]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 801169a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801169e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80116a2:	4611      	mov	r1, r2
 80116a4:	4618      	mov	r0, r3
 80116a6:	f006 f890 	bl	80177ca <RegionGetPhyParam>
 80116aa:	4603      	mov	r3, r0
 80116ac:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80116ae:	78b9      	ldrb	r1, [r7, #2]
 80116b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	4d36      	ldr	r5, [pc, #216]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80116b6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80116ba:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 80116be:	1d3a      	adds	r2, r7, #4
 80116c0:	9202      	str	r2, [sp, #8]
 80116c2:	1cfa      	adds	r2, r7, #3
 80116c4:	9201      	str	r2, [sp, #4]
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80116cc:	4622      	mov	r2, r4
 80116ce:	f000 fe95 	bl	80123fc <GetFCntDown>
 80116d2:	4603      	mov	r3, r0
 80116d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80116d8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d031      	beq.n	8011744 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80116e0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80116e4:	2b07      	cmp	r3, #7
 80116e6:	d119      	bne.n	801171c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80116e8:	4b28      	ldr	r3, [pc, #160]	; (801178c <ProcessRadioRxDone+0x5c4>)
 80116ea:	2208      	movs	r2, #8
 80116ec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80116f0:	4b27      	ldr	r3, [pc, #156]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 80116f2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d11d      	bne.n	8011736 <ProcessRadioRxDone+0x56e>
 80116fa:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80116fe:	f023 031f 	bic.w	r3, r3, #31
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2ba0      	cmp	r3, #160	; 0xa0
 8011706:	d116      	bne.n	8011736 <ProcessRadioRxDone+0x56e>
 8011708:	4b21      	ldr	r3, [pc, #132]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 801170a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801170c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801170e:	429a      	cmp	r2, r3
 8011710:	d111      	bne.n	8011736 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8011712:	4b1f      	ldr	r3, [pc, #124]	; (8011790 <ProcessRadioRxDone+0x5c8>)
 8011714:	2201      	movs	r2, #1
 8011716:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 801171a:	e00c      	b.n	8011736 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 801171c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011720:	2b08      	cmp	r3, #8
 8011722:	d104      	bne.n	801172e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011724:	4b19      	ldr	r3, [pc, #100]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011726:	220a      	movs	r2, #10
 8011728:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 801172c:	e003      	b.n	8011736 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801172e:	4b17      	ldr	r3, [pc, #92]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011730:	2201      	movs	r2, #1
 8011732:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a14      	ldr	r2, [pc, #80]	; (801178c <ProcessRadioRxDone+0x5c4>)
 801173a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 801173e:	f7ff fd1d 	bl	801117c <PrepareRxDoneAbort>
                return;
 8011742:	e180      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011744:	78fa      	ldrb	r2, [r7, #3]
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 801174c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	460b      	mov	r3, r1
 8011754:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011758:	f005 fc02 	bl	8016f60 <LoRaMacCryptoUnsecureMessage>
 801175c:	4603      	mov	r3, r0
 801175e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011762:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011766:	2b00      	cmp	r3, #0
 8011768:	d016      	beq.n	8011798 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801176a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801176e:	2b02      	cmp	r3, #2
 8011770:	d104      	bne.n	801177c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011772:	4b06      	ldr	r3, [pc, #24]	; (801178c <ProcessRadioRxDone+0x5c4>)
 8011774:	220b      	movs	r2, #11
 8011776:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 801177a:	e003      	b.n	8011784 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801177c:	4b03      	ldr	r3, [pc, #12]	; (801178c <ProcessRadioRxDone+0x5c4>)
 801177e:	220c      	movs	r2, #12
 8011780:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 8011784:	f7ff fcfa 	bl	801117c <PrepareRxDoneAbort>
                return;
 8011788:	e15d      	b.n	8011a46 <ProcessRadioRxDone+0x87e>
 801178a:	bf00      	nop
 801178c:	200033f0 	.word	0x200033f0
 8011790:	200038f8 	.word	0x200038f8
 8011794:	20003628 	.word	0x20003628
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011798:	4bac      	ldr	r3, [pc, #688]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801179a:	2200      	movs	r2, #0
 801179c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80117a0:	4aaa      	ldr	r2, [pc, #680]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80117a6:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80117aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	461a      	mov	r2, r3
 80117b6:	4ba5      	ldr	r3, [pc, #660]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117b8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80117bc:	4ba3      	ldr	r3, [pc, #652]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117be:	2200      	movs	r2, #0
 80117c0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 80117c4:	4ba1      	ldr	r3, [pc, #644]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4a9f      	ldr	r2, [pc, #636]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117d0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80117d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	2b00      	cmp	r3, #0
 80117e0:	bf14      	ite	ne
 80117e2:	2301      	movne	r3, #1
 80117e4:	2300      	moveq	r3, #0
 80117e6:	b2da      	uxtb	r2, r3
 80117e8:	4b98      	ldr	r3, [pc, #608]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117ea:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117ee:	4b97      	ldr	r3, [pc, #604]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80117f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	bf14      	ite	ne
 8011804:	2301      	movne	r3, #1
 8011806:	2300      	moveq	r3, #0
 8011808:	b2da      	uxtb	r2, r3
 801180a:	4b90      	ldr	r3, [pc, #576]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801180c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011810:	4b8e      	ldr	r3, [pc, #568]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011812:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011816:	2b00      	cmp	r3, #0
 8011818:	d004      	beq.n	8011824 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801181a:	4b8c      	ldr	r3, [pc, #560]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801181c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011820:	2b01      	cmp	r3, #1
 8011822:	d102      	bne.n	801182a <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011824:	4b8a      	ldr	r3, [pc, #552]	; (8011a50 <ProcessRadioRxDone+0x888>)
 8011826:	2200      	movs	r2, #0
 8011828:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801182a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801182e:	2b01      	cmp	r3, #1
 8011830:	d104      	bne.n	801183c <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011832:	4b86      	ldr	r3, [pc, #536]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011834:	2202      	movs	r2, #2
 8011836:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 801183a:	e01f      	b.n	801187c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801183c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011840:	f023 031f 	bic.w	r3, r3, #31
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2ba0      	cmp	r3, #160	; 0xa0
 8011848:	d110      	bne.n	801186c <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801184a:	4b81      	ldr	r3, [pc, #516]	; (8011a50 <ProcessRadioRxDone+0x888>)
 801184c:	2201      	movs	r2, #1
 801184e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011852:	4b7f      	ldr	r3, [pc, #508]	; (8011a50 <ProcessRadioRxDone+0x888>)
 8011854:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8011858:	2b00      	cmp	r3, #0
 801185a:	d102      	bne.n	8011862 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801185e:	4a7c      	ldr	r2, [pc, #496]	; (8011a50 <ProcessRadioRxDone+0x888>)
 8011860:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011862:	4b7a      	ldr	r3, [pc, #488]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011864:	2201      	movs	r2, #1
 8011866:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 801186a:	e007      	b.n	801187c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 801186c:	4b78      	ldr	r3, [pc, #480]	; (8011a50 <ProcessRadioRxDone+0x888>)
 801186e:	2200      	movs	r2, #0
 8011870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011874:	4b75      	ldr	r3, [pc, #468]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011876:	2200      	movs	r2, #0
 8011878:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801187c:	4b73      	ldr	r3, [pc, #460]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801187e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011882:	4a72      	ldr	r2, [pc, #456]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011884:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8011888:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 801188c:	4618      	mov	r0, r3
 801188e:	f001 ff0d 	bl	80136ac <RemoveMacCommands>

            switch( fType )
 8011892:	78bb      	ldrb	r3, [r7, #2]
 8011894:	2b03      	cmp	r3, #3
 8011896:	d874      	bhi.n	8011982 <ProcessRadioRxDone+0x7ba>
 8011898:	a201      	add	r2, pc, #4	; (adr r2, 80118a0 <ProcessRadioRxDone+0x6d8>)
 801189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801189e:	bf00      	nop
 80118a0:	080118b1 	.word	0x080118b1
 80118a4:	08011901 	.word	0x08011901
 80118a8:	08011937 	.word	0x08011937
 80118ac:	0801195d 	.word	0x0801195d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80118b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80118b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	461c      	mov	r4, r3
 80118bc:	4b63      	ldr	r3, [pc, #396]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80118be:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80118c2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80118c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80118ca:	f102 0010 	add.w	r0, r2, #16
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	460b      	mov	r3, r1
 80118d2:	4622      	mov	r2, r4
 80118d4:	2100      	movs	r1, #0
 80118d6:	f000 ff03 	bl	80126e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80118da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80118de:	4b5b      	ldr	r3, [pc, #364]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80118e0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80118e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118e6:	4a59      	ldr	r2, [pc, #356]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80118e8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80118ec:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80118f0:	4b56      	ldr	r3, [pc, #344]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80118f2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80118f6:	4b55      	ldr	r3, [pc, #340]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80118f8:	2201      	movs	r2, #1
 80118fa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80118fe:	e047      	b.n	8011990 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011900:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011904:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011908:	b2db      	uxtb	r3, r3
 801190a:	461c      	mov	r4, r3
 801190c:	4b4f      	ldr	r3, [pc, #316]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801190e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011912:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011916:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801191a:	f102 0010 	add.w	r0, r2, #16
 801191e:	9300      	str	r3, [sp, #0]
 8011920:	460b      	mov	r3, r1
 8011922:	4622      	mov	r2, r4
 8011924:	2100      	movs	r1, #0
 8011926:	f000 fedb 	bl	80126e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801192a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801192e:	4b47      	ldr	r3, [pc, #284]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011930:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011934:	e02c      	b.n	8011990 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011936:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011938:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801193c:	4b43      	ldr	r3, [pc, #268]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801193e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011942:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011946:	9300      	str	r3, [sp, #0]
 8011948:	460b      	mov	r3, r1
 801194a:	2100      	movs	r1, #0
 801194c:	f000 fec8 	bl	80126e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011950:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011954:	4b3d      	ldr	r3, [pc, #244]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011956:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 801195a:	e019      	b.n	8011990 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801195c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011960:	4b3a      	ldr	r3, [pc, #232]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011962:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011968:	4a38      	ldr	r2, [pc, #224]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801196a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801196e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011972:	4b36      	ldr	r3, [pc, #216]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011974:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011978:	4b34      	ldr	r3, [pc, #208]	; (8011a4c <ProcessRadioRxDone+0x884>)
 801197a:	2201      	movs	r2, #1
 801197c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011980:	e006      	b.n	8011990 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011982:	4b32      	ldr	r3, [pc, #200]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011984:	2201      	movs	r2, #1
 8011986:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 801198a:	f7ff fbf7 	bl	801117c <PrepareRxDoneAbort>
                    break;
 801198e:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011990:	4a2e      	ldr	r2, [pc, #184]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011992:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011996:	f043 0302 	orr.w	r3, r3, #2
 801199a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 801199e:	e033      	b.n	8011a08 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80119a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80119a6:	18d1      	adds	r1, r2, r3
 80119a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	461a      	mov	r2, r3
 80119b8:	4826      	ldr	r0, [pc, #152]	; (8011a54 <ProcessRadioRxDone+0x88c>)
 80119ba:	f009 fdd2 	bl	801b562 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80119be:	4b23      	ldr	r3, [pc, #140]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119c0:	2203      	movs	r2, #3
 80119c2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80119c6:	4b21      	ldr	r3, [pc, #132]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80119ce:	4b1f      	ldr	r3, [pc, #124]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119d0:	4a20      	ldr	r2, [pc, #128]	; (8011a54 <ProcessRadioRxDone+0x88c>)
 80119d2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80119d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119e0:	1ad3      	subs	r3, r2, r3
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	4b19      	ldr	r3, [pc, #100]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119e6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80119ea:	4a18      	ldr	r2, [pc, #96]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119f0:	f043 0302 	orr.w	r3, r3, #2
 80119f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80119f8:	e006      	b.n	8011a08 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119fa:	4b14      	ldr	r3, [pc, #80]	; (8011a4c <ProcessRadioRxDone+0x884>)
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8011a02:	f7ff fbbb 	bl	801117c <PrepareRxDoneAbort>
            break;
 8011a06:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011a08:	4b10      	ldr	r3, [pc, #64]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011a0a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d008      	beq.n	8011a24 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011a12:	4b0e      	ldr	r3, [pc, #56]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011a14:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00b      	beq.n	8011a34 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	f000 fcb7 	bl	8012390 <OnAckTimeoutTimerEvent>
 8011a22:	e007      	b.n	8011a34 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011a24:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <ProcessRadioRxDone+0x888>)
 8011a26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d102      	bne.n	8011a34 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a2e:	2000      	movs	r0, #0
 8011a30:	f000 fcae 	bl	8012390 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011a34:	4a05      	ldr	r2, [pc, #20]	; (8011a4c <ProcessRadioRxDone+0x884>)
 8011a36:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a3a:	f043 0320 	orr.w	r3, r3, #32
 8011a3e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8011a42:	f7ff fae9 	bl	8011018 <UpdateRxSlotIdleState>
}
 8011a46:	3788      	adds	r7, #136	; 0x88
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8011a4c:	200033f0 	.word	0x200033f0
 8011a50:	200038f8 	.word	0x200038f8
 8011a54:	20003628 	.word	0x20003628

08011a58 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011a5c:	4b11      	ldr	r3, [pc, #68]	; (8011aa4 <ProcessRadioTxTimeout+0x4c>)
 8011a5e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d002      	beq.n	8011a6c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011a66:	4b10      	ldr	r3, [pc, #64]	; (8011aa8 <ProcessRadioTxTimeout+0x50>)
 8011a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011a6c:	f7ff fad4 	bl	8011018 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011a70:	4b0e      	ldr	r3, [pc, #56]	; (8011aac <ProcessRadioTxTimeout+0x54>)
 8011a72:	2202      	movs	r2, #2
 8011a74:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011a78:	2002      	movs	r0, #2
 8011a7a:	f004 fbe9 	bl	8016250 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011a7e:	4b0b      	ldr	r3, [pc, #44]	; (8011aac <ProcessRadioTxTimeout+0x54>)
 8011a80:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d003      	beq.n	8011a90 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 8011a88:	4b08      	ldr	r3, [pc, #32]	; (8011aac <ProcessRadioTxTimeout+0x54>)
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011a90:	4a06      	ldr	r2, [pc, #24]	; (8011aac <ProcessRadioTxTimeout+0x54>)
 8011a92:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a96:	f043 0320 	orr.w	r3, r3, #32
 8011a9a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8011a9e:	bf00      	nop
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	200038f8 	.word	0x200038f8
 8011aa8:	080232e4 	.word	0x080232e4
 8011aac:	200033f0 	.word	0x200033f0

08011ab0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	460a      	mov	r2, r1
 8011aba:	71fb      	strb	r3, [r7, #7]
 8011abc:	4613      	mov	r3, r2
 8011abe:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011ac4:	4b40      	ldr	r3, [pc, #256]	; (8011bc8 <HandleRadioRxErrorTimeout+0x118>)
 8011ac6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011aca:	2b02      	cmp	r3, #2
 8011acc:	d002      	beq.n	8011ad4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011ace:	4b3f      	ldr	r3, [pc, #252]	; (8011bcc <HandleRadioRxErrorTimeout+0x11c>)
 8011ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011ad4:	f003 ff1d 	bl	8015912 <LoRaMacClassBIsBeaconExpected>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d007      	beq.n	8011aee <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011ade:	2002      	movs	r0, #2
 8011ae0:	f003 fecb 	bl	801587a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f003 feed 	bl	80158c4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011aea:	2301      	movs	r3, #1
 8011aec:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011aee:	4b36      	ldr	r3, [pc, #216]	; (8011bc8 <HandleRadioRxErrorTimeout+0x118>)
 8011af0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d119      	bne.n	8011b2c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011af8:	f003 ff12 	bl	8015920 <LoRaMacClassBIsPingExpected>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d007      	beq.n	8011b12 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b02:	2000      	movs	r0, #0
 8011b04:	f003 fec3 	bl	801588e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011b08:	2000      	movs	r0, #0
 8011b0a:	f003 fee4 	bl	80158d6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b12:	f003 ff0c 	bl	801592e <LoRaMacClassBIsMulticastExpected>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d007      	beq.n	8011b2c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f003 fec0 	bl	80158a2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011b22:	2000      	movs	r0, #0
 8011b24:	f003 fee0 	bl	80158e8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011b28:	2301      	movs	r3, #1
 8011b2a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	f083 0301 	eor.w	r3, r3, #1
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d040      	beq.n	8011bba <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011b38:	4b25      	ldr	r3, [pc, #148]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b3a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d122      	bne.n	8011b88 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011b42:	4b23      	ldr	r3, [pc, #140]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b44:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011b4c:	4a20      	ldr	r2, [pc, #128]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f004 fb7a 	bl	8016250 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011b5c:	4b1a      	ldr	r3, [pc, #104]	; (8011bc8 <HandleRadioRxErrorTimeout+0x118>)
 8011b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b60:	4618      	mov	r0, r3
 8011b62:	f00e f869 	bl	801fc38 <UTIL_TIMER_GetElapsedTime>
 8011b66:	4602      	mov	r2, r0
 8011b68:	4b19      	ldr	r3, [pc, #100]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b6a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d323      	bcc.n	8011bba <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011b72:	4818      	ldr	r0, [pc, #96]	; (8011bd4 <HandleRadioRxErrorTimeout+0x124>)
 8011b74:	f00d ff34 	bl	801f9e0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011b78:	4a15      	ldr	r2, [pc, #84]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b7a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b7e:	f043 0320 	orr.w	r3, r3, #32
 8011b82:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011b86:	e018      	b.n	8011bba <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011b88:	4b11      	ldr	r3, [pc, #68]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b8a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011b92:	4a0f      	ldr	r2, [pc, #60]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011b94:	79bb      	ldrb	r3, [r7, #6]
 8011b96:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011b9a:	79bb      	ldrb	r3, [r7, #6]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f004 fb57 	bl	8016250 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011ba2:	4b09      	ldr	r3, [pc, #36]	; (8011bc8 <HandleRadioRxErrorTimeout+0x118>)
 8011ba4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d006      	beq.n	8011bba <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011bac:	4a08      	ldr	r2, [pc, #32]	; (8011bd0 <HandleRadioRxErrorTimeout+0x120>)
 8011bae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bb2:	f043 0320 	orr.w	r3, r3, #32
 8011bb6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 8011bba:	f7ff fa2d 	bl	8011018 <UpdateRxSlotIdleState>
}
 8011bbe:	bf00      	nop
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200038f8 	.word	0x200038f8
 8011bcc:	080232e4 	.word	0x080232e4
 8011bd0:	200033f0 	.word	0x200033f0
 8011bd4:	20003788 	.word	0x20003788

08011bd8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011bdc:	2106      	movs	r1, #6
 8011bde:	2005      	movs	r0, #5
 8011be0:	f7ff ff66 	bl	8011ab0 <HandleRadioRxErrorTimeout>
}
 8011be4:	bf00      	nop
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011bec:	2104      	movs	r1, #4
 8011bee:	2003      	movs	r0, #3
 8011bf0:	f7ff ff5e 	bl	8011ab0 <HandleRadioRxErrorTimeout>
}
 8011bf4:	bf00      	nop
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8011c02:	607b      	str	r3, [r7, #4]
  return(result);
 8011c04:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011c06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c08:	b672      	cpsid	i
}
 8011c0a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011c0c:	4b1d      	ldr	r3, [pc, #116]	; (8011c84 <LoRaMacHandleIrqEvents+0x8c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011c12:	4b1c      	ldr	r3, [pc, #112]	; (8011c84 <LoRaMacHandleIrqEvents+0x8c>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	601a      	str	r2, [r3, #0]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	f383 8810 	msr	PRIMASK, r3
}
 8011c22:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d027      	beq.n	8011c7a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011c2a:	783b      	ldrb	r3, [r7, #0]
 8011c2c:	f003 0310 	and.w	r3, r3, #16
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d001      	beq.n	8011c3a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011c36:	f7ff fa07 	bl	8011048 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011c3a:	783b      	ldrb	r3, [r7, #0]
 8011c3c:	f003 0308 	and.w	r3, r3, #8
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d001      	beq.n	8011c4a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011c46:	f7ff fabf 	bl	80111c8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011c4a:	783b      	ldrb	r3, [r7, #0]
 8011c4c:	f003 0304 	and.w	r3, r3, #4
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d001      	beq.n	8011c5a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011c56:	f7ff feff 	bl	8011a58 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011c5a:	783b      	ldrb	r3, [r7, #0]
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d001      	beq.n	8011c6a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011c66:	f7ff ffb7 	bl	8011bd8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011c6a:	783b      	ldrb	r3, [r7, #0]
 8011c6c:	f003 0301 	and.w	r3, r3, #1
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d001      	beq.n	8011c7a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011c76:	f7ff ffb7 	bl	8011be8 <ProcessRadioRxTimeout>
        }
    }
}
 8011c7a:	bf00      	nop
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	20003f08 	.word	0x20003f08

08011c88 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011c88:	b480      	push	{r7}
 8011c8a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011c8c:	4b08      	ldr	r3, [pc, #32]	; (8011cb0 <LoRaMacIsBusy+0x28>)
 8011c8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d106      	bne.n	8011ca4 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011c96:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <LoRaMacIsBusy+0x28>)
 8011c98:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d101      	bne.n	8011ca4 <LoRaMacIsBusy+0x1c>
    {
        return false;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	e000      	b.n	8011ca6 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8011ca4:	2301      	movs	r3, #1
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bc80      	pop	{r7}
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	200033f0 	.word	0x200033f0

08011cb4 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	4603      	mov	r3, r0
 8011cbc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011cbe:	4a04      	ldr	r2, [pc, #16]	; (8011cd0 <LoRaMacEnableRequests+0x1c>)
 8011cc0:	79fb      	ldrb	r3, [r7, #7]
 8011cc2:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011cc6:	bf00      	nop
 8011cc8:	370c      	adds	r7, #12
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bc80      	pop	{r7}
 8011cce:	4770      	bx	lr
 8011cd0:	200033f0 	.word	0x200033f0

08011cd4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011cda:	4b2c      	ldr	r3, [pc, #176]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011cdc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ce0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011ce2:	4b2a      	ldr	r3, [pc, #168]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011ce4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d14a      	bne.n	8011d82 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011cec:	4b27      	ldr	r3, [pc, #156]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011cee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011cf2:	f003 0301 	and.w	r3, r3, #1
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d006      	beq.n	8011d0a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011cfc:	4a23      	ldr	r2, [pc, #140]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011cfe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d02:	f36f 0300 	bfc	r3, #0, #1
 8011d06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d0a:	4b20      	ldr	r3, [pc, #128]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011d0c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d10:	f003 0304 	and.w	r3, r3, #4
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d006      	beq.n	8011d28 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011d1a:	4a1c      	ldr	r2, [pc, #112]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011d1c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d20:	f36f 0382 	bfc	r3, #2, #1
 8011d24:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011d28:	2001      	movs	r0, #1
 8011d2a:	f7ff ffc3 	bl	8011cb4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011d2e:	793b      	ldrb	r3, [r7, #4]
 8011d30:	f003 0301 	and.w	r3, r3, #1
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d005      	beq.n	8011d46 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011d3a:	4b14      	ldr	r3, [pc, #80]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011d3c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4813      	ldr	r0, [pc, #76]	; (8011d90 <LoRaMacHandleRequestEvents+0xbc>)
 8011d44:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011d46:	793b      	ldrb	r3, [r7, #4]
 8011d48:	f003 0304 	and.w	r3, r3, #4
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00e      	beq.n	8011d70 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011d52:	4810      	ldr	r0, [pc, #64]	; (8011d94 <LoRaMacHandleRequestEvents+0xc0>)
 8011d54:	f004 faca 	bl	80162ec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011d58:	f004 fb14 	bl	8016384 <LoRaMacConfirmQueueGetCnt>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d006      	beq.n	8011d70 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011d62:	4a0a      	ldr	r2, [pc, #40]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011d64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d68:	f043 0304 	orr.w	r3, r3, #4
 8011d6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011d70:	f003 fdfb 	bl	801596a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011d74:	4a05      	ldr	r2, [pc, #20]	; (8011d8c <LoRaMacHandleRequestEvents+0xb8>)
 8011d76:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d7a:	f36f 1345 	bfc	r3, #5, #1
 8011d7e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011d82:	bf00      	nop
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	200033f0 	.word	0x200033f0
 8011d90:	20003828 	.word	0x20003828
 8011d94:	2000383c 	.word	0x2000383c

08011d98 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8011d9e:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 8011da0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d10a      	bne.n	8011dbe <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8011da8:	2300      	movs	r3, #0
 8011daa:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8011dac:	1dfb      	adds	r3, r7, #7
 8011dae:	4618      	mov	r0, r3
 8011db0:	f004 f882 	bl	8015eb8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8011dba:	f000 fc81 	bl	80126c0 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200033f0 	.word	0x200033f0

08011dcc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b088      	sub	sp, #32
 8011dd0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011dd2:	4b25      	ldr	r3, [pc, #148]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011dd4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dd8:	f003 0308 	and.w	r3, r3, #8
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00d      	beq.n	8011dfe <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011de2:	4a21      	ldr	r2, [pc, #132]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011de4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011de8:	f36f 03c3 	bfc	r3, #3, #1
 8011dec:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011df0:	4b1d      	ldr	r3, [pc, #116]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011df2:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	491c      	ldr	r1, [pc, #112]	; (8011e6c <LoRaMacHandleIndicationEvents+0xa0>)
 8011dfa:	481d      	ldr	r0, [pc, #116]	; (8011e70 <LoRaMacHandleIndicationEvents+0xa4>)
 8011dfc:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8011dfe:	4b1a      	ldr	r3, [pc, #104]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e00:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e04:	f003 0310 	and.w	r3, r3, #16
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d012      	beq.n	8011e34 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8011e0e:	2307      	movs	r3, #7
 8011e10:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011e12:	2300      	movs	r3, #0
 8011e14:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8011e16:	4b14      	ldr	r3, [pc, #80]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e18:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	1d3a      	adds	r2, r7, #4
 8011e20:	4912      	ldr	r1, [pc, #72]	; (8011e6c <LoRaMacHandleIndicationEvents+0xa0>)
 8011e22:	4610      	mov	r0, r2
 8011e24:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8011e26:	4a10      	ldr	r2, [pc, #64]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e28:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011e2c:	f36f 1304 	bfc	r3, #4, #1
 8011e30:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011e34:	4b0c      	ldr	r3, [pc, #48]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e36:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e3a:	f003 0302 	and.w	r3, r3, #2
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00d      	beq.n	8011e60 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011e44:	4a08      	ldr	r2, [pc, #32]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e46:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011e4a:	f36f 0341 	bfc	r3, #1, #1
 8011e4e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011e52:	4b05      	ldr	r3, [pc, #20]	; (8011e68 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e54:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4904      	ldr	r1, [pc, #16]	; (8011e6c <LoRaMacHandleIndicationEvents+0xa0>)
 8011e5c:	4805      	ldr	r0, [pc, #20]	; (8011e74 <LoRaMacHandleIndicationEvents+0xa8>)
 8011e5e:	4798      	blx	r3
    }
}
 8011e60:	bf00      	nop
 8011e62:	3720      	adds	r7, #32
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	200033f0 	.word	0x200033f0
 8011e6c:	2000386c 	.word	0x2000386c
 8011e70:	20003850 	.word	0x20003850
 8011e74:	2000380c 	.word	0x2000380c

08011e78 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011e7e:	4b32      	ldr	r3, [pc, #200]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e80:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e84:	f003 0301 	and.w	r3, r3, #1
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d058      	beq.n	8011f40 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011e92:	2300      	movs	r3, #0
 8011e94:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011e96:	4b2c      	ldr	r3, [pc, #176]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e98:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011ea0:	4b29      	ldr	r3, [pc, #164]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ea2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d104      	bne.n	8011eb4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011eaa:	f002 f89f 	bl	8013fec <CheckRetransUnconfirmedUplink>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	71fb      	strb	r3, [r7, #7]
 8011eb2:	e020      	b.n	8011ef6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011eb4:	4b24      	ldr	r3, [pc, #144]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011eb6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d11b      	bne.n	8011ef6 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8011ebe:	4b22      	ldr	r3, [pc, #136]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ec0:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d014      	beq.n	8011ef2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011ec8:	f002 f8bc 	bl	8014044 <CheckRetransConfirmedUplink>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011ed0:	4b1e      	ldr	r3, [pc, #120]	; (8011f4c <LoRaMacHandleMcpsRequest+0xd4>)
 8011ed2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10d      	bne.n	8011ef6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011eda:	79fb      	ldrb	r3, [r7, #7]
 8011edc:	f083 0301 	eor.w	r3, r3, #1
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d002      	beq.n	8011eec <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011ee6:	f002 f929 	bl	801413c <AckTimeoutRetriesProcess>
 8011eea:	e004      	b.n	8011ef6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011eec:	f002 f964 	bl	80141b8 <AckTimeoutRetriesFinalize>
 8011ef0:	e001      	b.n	8011ef6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d00d      	beq.n	8011f18 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011efc:	4814      	ldr	r0, [pc, #80]	; (8011f50 <LoRaMacHandleMcpsRequest+0xd8>)
 8011efe:	f00d fd6f 	bl	801f9e0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011f02:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f08:	f023 0320 	bic.w	r3, r3, #32
 8011f0c:	4a0e      	ldr	r2, [pc, #56]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f0e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011f12:	f002 f8b9 	bl	8014088 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011f16:	e013      	b.n	8011f40 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011f18:	79bb      	ldrb	r3, [r7, #6]
 8011f1a:	f083 0301 	eor.w	r3, r3, #1
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d00d      	beq.n	8011f40 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011f24:	4a08      	ldr	r2, [pc, #32]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f26:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011f2a:	f36f 1345 	bfc	r3, #5, #1
 8011f2e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011f32:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	f000 f97e 	bl	801223c <OnTxDelayedTimerEvent>
}
 8011f40:	bf00      	nop
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	200033f0 	.word	0x200033f0
 8011f4c:	200038f8 	.word	0x200038f8
 8011f50:	20003758 	.word	0x20003758

08011f54 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011f58:	4b1b      	ldr	r3, [pc, #108]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011f5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011f5e:	f003 0304 	and.w	r3, r3, #4
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d02c      	beq.n	8011fc2 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011f68:	2001      	movs	r0, #1
 8011f6a:	f004 f9a5 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d012      	beq.n	8011f9a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011f74:	2001      	movs	r0, #1
 8011f76:	f004 f941 	bl	80161fc <LoRaMacConfirmQueueGetStatus>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d103      	bne.n	8011f88 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011f80:	4b11      	ldr	r3, [pc, #68]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011f88:	4b0f      	ldr	r3, [pc, #60]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011f8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f8e:	f023 0302 	bic.w	r3, r3, #2
 8011f92:	4a0d      	ldr	r2, [pc, #52]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011f94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8011f98:	e013      	b.n	8011fc2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011f9a:	2005      	movs	r0, #5
 8011f9c:	f004 f98c 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011fa6:	2006      	movs	r0, #6
 8011fa8:	f004 f986 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8011fac:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d007      	beq.n	8011fc2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011fb2:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011fb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fb8:	f023 0302 	bic.w	r3, r3, #2
 8011fbc:	4a02      	ldr	r2, [pc, #8]	; (8011fc8 <LoRaMacHandleMlmeRequest+0x74>)
 8011fbe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011fc2:	bf00      	nop
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	200033f0 	.word	0x200033f0

08011fcc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011fd0:	200c      	movs	r0, #12
 8011fd2:	f004 f971 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d019      	beq.n	8012010 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011fdc:	4b0e      	ldr	r3, [pc, #56]	; (8012018 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011fde:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011fe2:	f003 0301 	and.w	r3, r3, #1
 8011fe6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d111      	bne.n	8012010 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011fec:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011fee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ff2:	f003 0304 	and.w	r3, r3, #4
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d009      	beq.n	8012010 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ffc:	4b06      	ldr	r3, [pc, #24]	; (8012018 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011ffe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012002:	f023 0302 	bic.w	r3, r3, #2
 8012006:	4a04      	ldr	r2, [pc, #16]	; (8012018 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8012008:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 801200c:	2301      	movs	r3, #1
 801200e:	e000      	b.n	8012012 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8012010:	2300      	movs	r3, #0
}
 8012012:	4618      	mov	r0, r3
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	200033f0 	.word	0x200033f0

0801201c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 801201c:	b480      	push	{r7}
 801201e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8012020:	4b0d      	ldr	r3, [pc, #52]	; (8012058 <LoRaMacCheckForRxAbort+0x3c>)
 8012022:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00f      	beq.n	801204e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801202e:	4b0a      	ldr	r3, [pc, #40]	; (8012058 <LoRaMacCheckForRxAbort+0x3c>)
 8012030:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012038:	4a07      	ldr	r2, [pc, #28]	; (8012058 <LoRaMacCheckForRxAbort+0x3c>)
 801203a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801203e:	4b06      	ldr	r3, [pc, #24]	; (8012058 <LoRaMacCheckForRxAbort+0x3c>)
 8012040:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012044:	f023 0302 	bic.w	r3, r3, #2
 8012048:	4a03      	ldr	r2, [pc, #12]	; (8012058 <LoRaMacCheckForRxAbort+0x3c>)
 801204a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801204e:	bf00      	nop
 8012050:	46bd      	mov	sp, r7
 8012052:	bc80      	pop	{r7}
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	200033f0 	.word	0x200033f0

0801205c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8012064:	2300      	movs	r3, #0
 8012066:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012068:	2300      	movs	r3, #0
 801206a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801206c:	4b50      	ldr	r3, [pc, #320]	; (80121b0 <LoRaMacHandleNvm+0x154>)
 801206e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012072:	2b00      	cmp	r3, #0
 8012074:	f040 8098 	bne.w	80121a8 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2124      	movs	r1, #36	; 0x24
 801207c:	4618      	mov	r0, r3
 801207e:	f009 fac5 	bl	801b60c <Crc32>
 8012082:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012088:	68ba      	ldr	r2, [r7, #8]
 801208a:	429a      	cmp	r2, r3
 801208c:	d006      	beq.n	801209c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	68ba      	ldr	r2, [r7, #8]
 8012092:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8012094:	89fb      	ldrh	r3, [r7, #14]
 8012096:	f043 0301 	orr.w	r3, r3, #1
 801209a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	3328      	adds	r3, #40	; 0x28
 80120a0:	2114      	movs	r1, #20
 80120a2:	4618      	mov	r0, r3
 80120a4:	f009 fab2 	bl	801b60c <Crc32>
 80120a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d006      	beq.n	80120c2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80120ba:	89fb      	ldrh	r3, [r7, #14]
 80120bc:	f043 0302 	orr.w	r3, r3, #2
 80120c0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	3340      	adds	r3, #64	; 0x40
 80120c6:	21d4      	movs	r1, #212	; 0xd4
 80120c8:	4618      	mov	r0, r3
 80120ca:	f009 fa9f 	bl	801b60c <Crc32>
 80120ce:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d007      	beq.n	80120ec <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	68ba      	ldr	r2, [r7, #8]
 80120e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80120e4:	89fb      	ldrh	r3, [r7, #14]
 80120e6:	f043 0304 	orr.w	r3, r3, #4
 80120ea:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80120f2:	21bc      	movs	r1, #188	; 0xbc
 80120f4:	4618      	mov	r0, r3
 80120f6:	f009 fa89 	bl	801b60c <Crc32>
 80120fa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	429a      	cmp	r2, r3
 8012106:	d007      	beq.n	8012118 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8012110:	89fb      	ldrh	r3, [r7, #14]
 8012112:	f043 0308 	orr.w	r3, r3, #8
 8012116:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801211e:	21a0      	movs	r1, #160	; 0xa0
 8012120:	4618      	mov	r0, r3
 8012122:	f009 fa73 	bl	801b60c <Crc32>
 8012126:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	429a      	cmp	r2, r3
 8012132:	d007      	beq.n	8012144 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	68ba      	ldr	r2, [r7, #8]
 8012138:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801213c:	89fb      	ldrh	r3, [r7, #14]
 801213e:	f043 0310 	orr.w	r3, r3, #16
 8012142:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801214a:	f44f 715e 	mov.w	r1, #888	; 0x378
 801214e:	4618      	mov	r0, r3
 8012150:	f009 fa5c 	bl	801b60c <Crc32>
 8012154:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	429a      	cmp	r2, r3
 8012160:	d007      	beq.n	8012172 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801216a:	89fb      	ldrh	r3, [r7, #14]
 801216c:	f043 0320 	orr.w	r3, r3, #32
 8012170:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8012178:	2114      	movs	r1, #20
 801217a:	4618      	mov	r0, r3
 801217c:	f009 fa46 	bl	801b60c <Crc32>
 8012180:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	429a      	cmp	r2, r3
 801218c:	d007      	beq.n	801219e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8012196:	89fb      	ldrh	r3, [r7, #14]
 8012198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801219c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801219e:	89fb      	ldrh	r3, [r7, #14]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f001 ffad 	bl	8014100 <CallNvmDataChangeCallback>
 80121a6:	e000      	b.n	80121aa <LoRaMacHandleNvm+0x14e>
        return;
 80121a8:	bf00      	nop
}
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	200033f0 	.word	0x200033f0

080121b4 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80121ba:	2300      	movs	r3, #0
 80121bc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80121be:	f7ff fd1b 	bl	8011bf8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80121c2:	f003 fc36 	bl	8015a32 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80121c6:	4b1b      	ldr	r3, [pc, #108]	; (8012234 <LoRaMacProcess+0x80>)
 80121c8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80121cc:	f003 0320 	and.w	r3, r3, #32
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d021      	beq.n	801221a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80121d6:	2000      	movs	r0, #0
 80121d8:	f7ff fd6c 	bl	8011cb4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80121dc:	f7ff ff1e 	bl	801201c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80121e0:	f002 f81e 	bl	8014220 <IsRequestPending>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d006      	beq.n	80121f8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80121ea:	f7ff feef 	bl	8011fcc <LoRaMacCheckForBeaconAcquisition>
 80121ee:	4603      	mov	r3, r0
 80121f0:	461a      	mov	r2, r3
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	4313      	orrs	r3, r2
 80121f6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d103      	bne.n	8012206 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80121fe:	f7ff fea9 	bl	8011f54 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012202:	f7ff fe39 	bl	8011e78 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012206:	f7ff fd65 	bl	8011cd4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801220a:	f7ff fdc5 	bl	8011d98 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 801220e:	480a      	ldr	r0, [pc, #40]	; (8012238 <LoRaMacProcess+0x84>)
 8012210:	f7ff ff24 	bl	801205c <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012214:	2001      	movs	r0, #1
 8012216:	f7ff fd4d 	bl	8011cb4 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 801221a:	f7ff fdd7 	bl	8011dcc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801221e:	4b05      	ldr	r3, [pc, #20]	; (8012234 <LoRaMacProcess+0x80>)
 8012220:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012224:	2b02      	cmp	r3, #2
 8012226:	d101      	bne.n	801222c <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 8012228:	f001 fb7c 	bl	8013924 <OpenContinuousRxCWindow>
    }
}
 801222c:	bf00      	nop
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	200033f0 	.word	0x200033f0
 8012238:	200038f8 	.word	0x200038f8

0801223c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012244:	4817      	ldr	r0, [pc, #92]	; (80122a4 <OnTxDelayedTimerEvent+0x68>)
 8012246:	f00d fbcb 	bl	801f9e0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801224a:	4b17      	ldr	r3, [pc, #92]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 801224c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012250:	f023 0320 	bic.w	r3, r3, #32
 8012254:	4a14      	ldr	r2, [pc, #80]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 8012256:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801225a:	2001      	movs	r0, #1
 801225c:	f001 f8fc 	bl	8013458 <ScheduleTx>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d018      	beq.n	8012298 <OnTxDelayedTimerEvent+0x5c>
 8012266:	2b0b      	cmp	r3, #11
 8012268:	d016      	beq.n	8012298 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801226a:	4b10      	ldr	r3, [pc, #64]	; (80122ac <OnTxDelayedTimerEvent+0x70>)
 801226c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012270:	b2da      	uxtb	r2, r3
 8012272:	4b0d      	ldr	r3, [pc, #52]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 8012274:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012278:	4b0b      	ldr	r3, [pc, #44]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 801227a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801227e:	4b0a      	ldr	r3, [pc, #40]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 8012280:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012284:	4b08      	ldr	r3, [pc, #32]	; (80122a8 <OnTxDelayedTimerEvent+0x6c>)
 8012286:	2209      	movs	r2, #9
 8012288:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801228c:	2009      	movs	r0, #9
 801228e:	f003 ffdf 	bl	8016250 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8012292:	f001 fef9 	bl	8014088 <StopRetransmission>
            break;
 8012296:	e000      	b.n	801229a <OnTxDelayedTimerEvent+0x5e>
            break;
 8012298:	bf00      	nop
        }
    }
}
 801229a:	bf00      	nop
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20003758 	.word	0x20003758
 80122a8:	200033f0 	.word	0x200033f0
 80122ac:	200038f8 	.word	0x200038f8

080122b0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80122b8:	4b14      	ldr	r3, [pc, #80]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122ba:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80122be:	4b13      	ldr	r3, [pc, #76]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122c0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80122c4:	4b12      	ldr	r3, [pc, #72]	; (8012310 <OnRxWindow1TimerEvent+0x60>)
 80122c6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80122ca:	b25a      	sxtb	r2, r3
 80122cc:	4b0f      	ldr	r3, [pc, #60]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122ce:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122d2:	4b0f      	ldr	r3, [pc, #60]	; (8012310 <OnRxWindow1TimerEvent+0x60>)
 80122d4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80122d8:	4b0c      	ldr	r3, [pc, #48]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122da:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80122de:	4b0c      	ldr	r3, [pc, #48]	; (8012310 <OnRxWindow1TimerEvent+0x60>)
 80122e0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80122e4:	4b09      	ldr	r3, [pc, #36]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122e6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80122ea:	4b08      	ldr	r3, [pc, #32]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80122f2:	4b06      	ldr	r3, [pc, #24]	; (801230c <OnRxWindow1TimerEvent+0x5c>)
 80122f4:	2200      	movs	r2, #0
 80122f6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80122fa:	4906      	ldr	r1, [pc, #24]	; (8012314 <OnRxWindow1TimerEvent+0x64>)
 80122fc:	4806      	ldr	r0, [pc, #24]	; (8012318 <OnRxWindow1TimerEvent+0x68>)
 80122fe:	f001 fae3 	bl	80138c8 <RxWindowSetup>
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	200033f0 	.word	0x200033f0
 8012310:	200038f8 	.word	0x200038f8
 8012314:	200037a8 	.word	0x200037a8
 8012318:	20003770 	.word	0x20003770

0801231c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012324:	4b16      	ldr	r3, [pc, #88]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012326:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801232a:	2b00      	cmp	r3, #0
 801232c:	d023      	beq.n	8012376 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801232e:	4b14      	ldr	r3, [pc, #80]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012330:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012334:	4b12      	ldr	r3, [pc, #72]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012336:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801233a:	4b12      	ldr	r3, [pc, #72]	; (8012384 <OnRxWindow2TimerEvent+0x68>)
 801233c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801233e:	4a10      	ldr	r2, [pc, #64]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012340:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012344:	4b0f      	ldr	r3, [pc, #60]	; (8012384 <OnRxWindow2TimerEvent+0x68>)
 8012346:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801234a:	4b0d      	ldr	r3, [pc, #52]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 801234c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8012350:	4b0c      	ldr	r3, [pc, #48]	; (8012384 <OnRxWindow2TimerEvent+0x68>)
 8012352:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012356:	4b0a      	ldr	r3, [pc, #40]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012358:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801235c:	4b08      	ldr	r3, [pc, #32]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 801235e:	2200      	movs	r2, #0
 8012360:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012364:	4b06      	ldr	r3, [pc, #24]	; (8012380 <OnRxWindow2TimerEvent+0x64>)
 8012366:	2201      	movs	r2, #1
 8012368:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801236c:	4906      	ldr	r1, [pc, #24]	; (8012388 <OnRxWindow2TimerEvent+0x6c>)
 801236e:	4807      	ldr	r0, [pc, #28]	; (801238c <OnRxWindow2TimerEvent+0x70>)
 8012370:	f001 faaa 	bl	80138c8 <RxWindowSetup>
 8012374:	e000      	b.n	8012378 <OnRxWindow2TimerEvent+0x5c>
        return;
 8012376:	bf00      	nop
}
 8012378:	3708      	adds	r7, #8
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	200033f0 	.word	0x200033f0
 8012384:	200038f8 	.word	0x200038f8
 8012388:	200037bc 	.word	0x200037bc
 801238c:	20003788 	.word	0x20003788

08012390 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012398:	4815      	ldr	r0, [pc, #84]	; (80123f0 <OnAckTimeoutTimerEvent+0x60>)
 801239a:	f00d fb21 	bl	801f9e0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801239e:	4b15      	ldr	r3, [pc, #84]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123a0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d003      	beq.n	80123b0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80123a8:	4b12      	ldr	r3, [pc, #72]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123aa:	2201      	movs	r2, #1
 80123ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80123b0:	4b11      	ldr	r3, [pc, #68]	; (80123f8 <OnAckTimeoutTimerEvent+0x68>)
 80123b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d106      	bne.n	80123c8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80123ba:	4a0e      	ldr	r2, [pc, #56]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80123c0:	f043 0320 	orr.w	r3, r3, #32
 80123c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80123c8:	4b0a      	ldr	r3, [pc, #40]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00a      	beq.n	80123e8 <OnAckTimeoutTimerEvent+0x58>
 80123d2:	4b08      	ldr	r3, [pc, #32]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d004      	beq.n	80123e8 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80123de:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <OnAckTimeoutTimerEvent+0x64>)
 80123e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	4798      	blx	r3
    }
}
 80123e8:	bf00      	nop
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	200037e8 	.word	0x200037e8
 80123f4:	200033f0 	.word	0x200033f0
 80123f8:	200038f8 	.word	0x200038f8

080123fc <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	60ba      	str	r2, [r7, #8]
 8012404:	607b      	str	r3, [r7, #4]
 8012406:	4603      	mov	r3, r0
 8012408:	73fb      	strb	r3, [r7, #15]
 801240a:	460b      	mov	r3, r1
 801240c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d005      	beq.n	8012420 <GetFCntDown+0x24>
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d002      	beq.n	8012420 <GetFCntDown+0x24>
 801241a:	6a3b      	ldr	r3, [r7, #32]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012420:	230a      	movs	r3, #10
 8012422:	e029      	b.n	8012478 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012424:	7bfb      	ldrb	r3, [r7, #15]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d016      	beq.n	8012458 <GetFCntDown+0x5c>
 801242a:	2b01      	cmp	r3, #1
 801242c:	d118      	bne.n	8012460 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801242e:	79bb      	ldrb	r3, [r7, #6]
 8012430:	2b01      	cmp	r3, #1
 8012432:	d10d      	bne.n	8012450 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012434:	7bbb      	ldrb	r3, [r7, #14]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d002      	beq.n	8012440 <GetFCntDown+0x44>
 801243a:	7bbb      	ldrb	r3, [r7, #14]
 801243c:	2b03      	cmp	r3, #3
 801243e:	d103      	bne.n	8012448 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	2202      	movs	r2, #2
 8012444:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012446:	e00d      	b.n	8012464 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	2201      	movs	r2, #1
 801244c:	701a      	strb	r2, [r3, #0]
            break;
 801244e:	e009      	b.n	8012464 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	2203      	movs	r2, #3
 8012454:	701a      	strb	r2, [r3, #0]
            break;
 8012456:	e005      	b.n	8012464 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	2204      	movs	r2, #4
 801245c:	701a      	strb	r2, [r3, #0]
            break;
 801245e:	e001      	b.n	8012464 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012460:	2305      	movs	r3, #5
 8012462:	e009      	b.n	8012478 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	7818      	ldrb	r0, [r3, #0]
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	89db      	ldrh	r3, [r3, #14]
 801246c:	461a      	mov	r2, r3
 801246e:	8b39      	ldrh	r1, [r7, #24]
 8012470:	6a3b      	ldr	r3, [r7, #32]
 8012472:	f004 fb17 	bl	8016aa4 <LoRaMacCryptoGetFCntDown>
 8012476:	4603      	mov	r3, r0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3710      	adds	r7, #16
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012480:	b5b0      	push	{r4, r5, r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	4603      	mov	r3, r0
 8012488:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801248a:	2303      	movs	r3, #3
 801248c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801248e:	4b61      	ldr	r3, [pc, #388]	; (8012614 <SwitchClass+0x194>)
 8012490:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012494:	2b02      	cmp	r3, #2
 8012496:	f000 80a5 	beq.w	80125e4 <SwitchClass+0x164>
 801249a:	2b02      	cmp	r3, #2
 801249c:	f300 80b4 	bgt.w	8012608 <SwitchClass+0x188>
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <SwitchClass+0x2c>
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	f000 808f 	beq.w	80125c8 <SwitchClass+0x148>
 80124aa:	e0ad      	b.n	8012608 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d107      	bne.n	80124c2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80124b2:	4b58      	ldr	r3, [pc, #352]	; (8012614 <SwitchClass+0x194>)
 80124b4:	4a57      	ldr	r2, [pc, #348]	; (8012614 <SwitchClass+0x194>)
 80124b6:	336c      	adds	r3, #108	; 0x6c
 80124b8:	3264      	adds	r2, #100	; 0x64
 80124ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124be:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80124c2:	79fb      	ldrb	r3, [r7, #7]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d10c      	bne.n	80124e2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80124c8:	79fb      	ldrb	r3, [r7, #7]
 80124ca:	4618      	mov	r0, r3
 80124cc:	f003 fa53 	bl	8015976 <LoRaMacClassBSwitchClass>
 80124d0:	4603      	mov	r3, r0
 80124d2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d103      	bne.n	80124e2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80124da:	4a4e      	ldr	r2, [pc, #312]	; (8012614 <SwitchClass+0x194>)
 80124dc:	79fb      	ldrb	r3, [r7, #7]
 80124de:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 80124e2:	79fb      	ldrb	r3, [r7, #7]
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	f040 808a 	bne.w	80125fe <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80124ea:	4a4a      	ldr	r2, [pc, #296]	; (8012614 <SwitchClass+0x194>)
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80124f2:	4a49      	ldr	r2, [pc, #292]	; (8012618 <SwitchClass+0x198>)
 80124f4:	4b48      	ldr	r3, [pc, #288]	; (8012618 <SwitchClass+0x198>)
 80124f6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80124fa:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80124fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012502:	682b      	ldr	r3, [r5, #0]
 8012504:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012506:	4b44      	ldr	r3, [pc, #272]	; (8012618 <SwitchClass+0x198>)
 8012508:	2202      	movs	r2, #2
 801250a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801250e:	2300      	movs	r3, #0
 8012510:	73bb      	strb	r3, [r7, #14]
 8012512:	e049      	b.n	80125a8 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8012514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012518:	4a3e      	ldr	r2, [pc, #248]	; (8012614 <SwitchClass+0x194>)
 801251a:	212c      	movs	r1, #44	; 0x2c
 801251c:	fb01 f303 	mul.w	r3, r1, r3
 8012520:	4413      	add	r3, r2
 8012522:	33d2      	adds	r3, #210	; 0xd2
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d038      	beq.n	801259c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 801252a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801252e:	4a39      	ldr	r2, [pc, #228]	; (8012614 <SwitchClass+0x194>)
 8012530:	212c      	movs	r1, #44	; 0x2c
 8012532:	fb01 f303 	mul.w	r3, r1, r3
 8012536:	4413      	add	r3, r2
 8012538:	33e8      	adds	r3, #232	; 0xe8
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a35      	ldr	r2, [pc, #212]	; (8012614 <SwitchClass+0x194>)
 801253e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8012540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012544:	4a33      	ldr	r2, [pc, #204]	; (8012614 <SwitchClass+0x194>)
 8012546:	212c      	movs	r1, #44	; 0x2c
 8012548:	fb01 f303 	mul.w	r3, r1, r3
 801254c:	4413      	add	r3, r2
 801254e:	33ec      	adds	r3, #236	; 0xec
 8012550:	f993 3000 	ldrsb.w	r3, [r3]
 8012554:	b2da      	uxtb	r2, r3
 8012556:	4b2f      	ldr	r3, [pc, #188]	; (8012614 <SwitchClass+0x194>)
 8012558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801255c:	4b2e      	ldr	r3, [pc, #184]	; (8012618 <SwitchClass+0x198>)
 801255e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012562:	4b2d      	ldr	r3, [pc, #180]	; (8012618 <SwitchClass+0x198>)
 8012564:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012568:	4b2a      	ldr	r3, [pc, #168]	; (8012614 <SwitchClass+0x194>)
 801256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801256c:	4a2a      	ldr	r2, [pc, #168]	; (8012618 <SwitchClass+0x198>)
 801256e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012572:	4b28      	ldr	r3, [pc, #160]	; (8012614 <SwitchClass+0x194>)
 8012574:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012578:	4b27      	ldr	r3, [pc, #156]	; (8012618 <SwitchClass+0x198>)
 801257a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801257e:	4b25      	ldr	r3, [pc, #148]	; (8012614 <SwitchClass+0x194>)
 8012580:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012584:	4b24      	ldr	r3, [pc, #144]	; (8012618 <SwitchClass+0x198>)
 8012586:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801258a:	4b23      	ldr	r3, [pc, #140]	; (8012618 <SwitchClass+0x198>)
 801258c:	2203      	movs	r2, #3
 801258e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012592:	4b21      	ldr	r3, [pc, #132]	; (8012618 <SwitchClass+0x198>)
 8012594:	2201      	movs	r2, #1
 8012596:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 801259a:	e009      	b.n	80125b0 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801259c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	3301      	adds	r3, #1
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	73bb      	strb	r3, [r7, #14]
 80125a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	ddb1      	ble.n	8012514 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80125b0:	4b19      	ldr	r3, [pc, #100]	; (8012618 <SwitchClass+0x198>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80125b8:	4b18      	ldr	r3, [pc, #96]	; (801261c <SwitchClass+0x19c>)
 80125ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125bc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80125be:	f001 f9b1 	bl	8013924 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80125c6:	e01a      	b.n	80125fe <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80125c8:	79fb      	ldrb	r3, [r7, #7]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f003 f9d3 	bl	8015976 <LoRaMacClassBSwitchClass>
 80125d0:	4603      	mov	r3, r0
 80125d2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80125d4:	7bfb      	ldrb	r3, [r7, #15]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d113      	bne.n	8012602 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80125da:	4a0e      	ldr	r2, [pc, #56]	; (8012614 <SwitchClass+0x194>)
 80125dc:	79fb      	ldrb	r3, [r7, #7]
 80125de:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 80125e2:	e00e      	b.n	8012602 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80125e4:	79fb      	ldrb	r3, [r7, #7]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d10d      	bne.n	8012606 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80125ea:	4a0a      	ldr	r2, [pc, #40]	; (8012614 <SwitchClass+0x194>)
 80125ec:	79fb      	ldrb	r3, [r7, #7]
 80125ee:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80125f2:	4b0a      	ldr	r3, [pc, #40]	; (801261c <SwitchClass+0x19c>)
 80125f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80125f8:	2300      	movs	r3, #0
 80125fa:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80125fc:	e003      	b.n	8012606 <SwitchClass+0x186>
            break;
 80125fe:	bf00      	nop
 8012600:	e002      	b.n	8012608 <SwitchClass+0x188>
            break;
 8012602:	bf00      	nop
 8012604:	e000      	b.n	8012608 <SwitchClass+0x188>
            break;
 8012606:	bf00      	nop
        }
    }

    return status;
 8012608:	7bfb      	ldrb	r3, [r7, #15]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bdb0      	pop	{r4, r5, r7, pc}
 8012612:	bf00      	nop
 8012614:	200038f8 	.word	0x200038f8
 8012618:	200033f0 	.word	0x200033f0
 801261c:	080232e4 	.word	0x080232e4

08012620 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b086      	sub	sp, #24
 8012624:	af00      	add	r7, sp, #0
 8012626:	4603      	mov	r3, r0
 8012628:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801262a:	4b10      	ldr	r3, [pc, #64]	; (801266c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801262c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012630:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8012632:	79fb      	ldrb	r3, [r7, #7]
 8012634:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012636:	230d      	movs	r3, #13
 8012638:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801263a:	4b0c      	ldr	r3, [pc, #48]	; (801266c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801263c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012640:	2b00      	cmp	r3, #0
 8012642:	d001      	beq.n	8012648 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012644:	230e      	movs	r3, #14
 8012646:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012648:	4b08      	ldr	r3, [pc, #32]	; (801266c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801264a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801264e:	f107 0210 	add.w	r2, r7, #16
 8012652:	4611      	mov	r1, r2
 8012654:	4618      	mov	r0, r3
 8012656:	f005 f8b8 	bl	80177ca <RegionGetPhyParam>
 801265a:	4603      	mov	r3, r0
 801265c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	b2db      	uxtb	r3, r3
}
 8012662:	4618      	mov	r0, r3
 8012664:	3718      	adds	r7, #24
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	200038f8 	.word	0x200038f8

08012670 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b084      	sub	sp, #16
 8012674:	af00      	add	r7, sp, #0
 8012676:	4603      	mov	r3, r0
 8012678:	71fb      	strb	r3, [r7, #7]
 801267a:	460b      	mov	r3, r1
 801267c:	71bb      	strb	r3, [r7, #6]
 801267e:	4613      	mov	r3, r2
 8012680:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012686:	2300      	movs	r3, #0
 8012688:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801268a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801268e:	4618      	mov	r0, r3
 8012690:	f7ff ffc6 	bl	8012620 <GetMaxAppPayloadWithoutFOptsLength>
 8012694:	4603      	mov	r3, r0
 8012696:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012698:	79fb      	ldrb	r3, [r7, #7]
 801269a:	b29a      	uxth	r2, r3
 801269c:	797b      	ldrb	r3, [r7, #5]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	4413      	add	r3, r2
 80126a2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80126a4:	89ba      	ldrh	r2, [r7, #12]
 80126a6:	89fb      	ldrh	r3, [r7, #14]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d804      	bhi.n	80126b6 <ValidatePayloadLength+0x46>
 80126ac:	89bb      	ldrh	r3, [r7, #12]
 80126ae:	2bff      	cmp	r3, #255	; 0xff
 80126b0:	d801      	bhi.n	80126b6 <ValidatePayloadLength+0x46>
    {
        return true;
 80126b2:	2301      	movs	r3, #1
 80126b4:	e000      	b.n	80126b8 <ValidatePayloadLength+0x48>
    }
    return false;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3710      	adds	r7, #16
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80126c0:	b480      	push	{r7}
 80126c2:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80126c4:	4a05      	ldr	r2, [pc, #20]	; (80126dc <SetMlmeScheduleUplinkIndication+0x1c>)
 80126c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80126ca:	f043 0310 	orr.w	r3, r3, #16
 80126ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80126d2:	bf00      	nop
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bc80      	pop	{r7}
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	200033f0 	.word	0x200033f0

080126e0 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80126e0:	b590      	push	{r4, r7, lr}
 80126e2:	b0a5      	sub	sp, #148	; 0x94
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	4608      	mov	r0, r1
 80126ea:	4611      	mov	r1, r2
 80126ec:	461a      	mov	r2, r3
 80126ee:	4603      	mov	r3, r0
 80126f0:	70fb      	strb	r3, [r7, #3]
 80126f2:	460b      	mov	r3, r1
 80126f4:	70bb      	strb	r3, [r7, #2]
 80126f6:	4613      	mov	r3, r2
 80126f8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012700:	2300      	movs	r3, #0
 8012702:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012706:	2300      	movs	r3, #0
 8012708:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 801270c:	f000 bc73 	b.w	8012ff6 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012710:	78fb      	ldrb	r3, [r7, #3]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	4413      	add	r3, r2
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	4618      	mov	r0, r3
 801271a:	f003 fbf5 	bl	8015f08 <LoRaMacCommandsGetCmdSize>
 801271e:	4603      	mov	r3, r0
 8012720:	461a      	mov	r2, r3
 8012722:	78fb      	ldrb	r3, [r7, #3]
 8012724:	441a      	add	r2, r3
 8012726:	78bb      	ldrb	r3, [r7, #2]
 8012728:	429a      	cmp	r2, r3
 801272a:	f300 846a 	bgt.w	8013002 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801272e:	78fb      	ldrb	r3, [r7, #3]
 8012730:	1c5a      	adds	r2, r3, #1
 8012732:	70fa      	strb	r2, [r7, #3]
 8012734:	461a      	mov	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4413      	add	r3, r2
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	3b02      	subs	r3, #2
 801273e:	2b11      	cmp	r3, #17
 8012740:	f200 8461 	bhi.w	8013006 <ProcessMacCommands+0x926>
 8012744:	a201      	add	r2, pc, #4	; (adr r2, 801274c <ProcessMacCommands+0x6c>)
 8012746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801274a:	bf00      	nop
 801274c:	08012795 	.word	0x08012795
 8012750:	080127d7 	.word	0x080127d7
 8012754:	080128f3 	.word	0x080128f3
 8012758:	08012931 	.word	0x08012931
 801275c:	08012a21 	.word	0x08012a21
 8012760:	08012a7d 	.word	0x08012a7d
 8012764:	08012b39 	.word	0x08012b39
 8012768:	08012b93 	.word	0x08012b93
 801276c:	08012c77 	.word	0x08012c77
 8012770:	08013007 	.word	0x08013007
 8012774:	08013007 	.word	0x08013007
 8012778:	08012d21 	.word	0x08012d21
 801277c:	08013007 	.word	0x08013007
 8012780:	08013007 	.word	0x08013007
 8012784:	08012e37 	.word	0x08012e37
 8012788:	08012e6b 	.word	0x08012e6b
 801278c:	08012efb 	.word	0x08012efb
 8012790:	08012f71 	.word	0x08012f71
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012794:	2004      	movs	r0, #4
 8012796:	f003 fd8f 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 801279a:	4603      	mov	r3, r0
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 842a 	beq.w	8012ff6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80127a2:	2104      	movs	r1, #4
 80127a4:	2000      	movs	r0, #0
 80127a6:	f003 fcfb 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80127aa:	78fb      	ldrb	r3, [r7, #3]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	70fa      	strb	r2, [r7, #3]
 80127b0:	461a      	mov	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4413      	add	r3, r2
 80127b6:	781a      	ldrb	r2, [r3, #0]
 80127b8:	4bad      	ldr	r3, [pc, #692]	; (8012a70 <ProcessMacCommands+0x390>)
 80127ba:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80127be:	78fb      	ldrb	r3, [r7, #3]
 80127c0:	1c5a      	adds	r2, r3, #1
 80127c2:	70fa      	strb	r2, [r7, #3]
 80127c4:	461a      	mov	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4413      	add	r3, r2
 80127ca:	781a      	ldrb	r2, [r3, #0]
 80127cc:	4ba8      	ldr	r3, [pc, #672]	; (8012a70 <ProcessMacCommands+0x390>)
 80127ce:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 80127d2:	f000 bc10 	b.w	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80127dc:	2300      	movs	r3, #0
 80127de:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 80127ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80127f2:	f083 0301 	eor.w	r3, r3, #1
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d078      	beq.n	80128ee <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80127fc:	2301      	movs	r3, #1
 80127fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012802:	78fb      	ldrb	r3, [r7, #3]
 8012804:	3b01      	subs	r3, #1
 8012806:	687a      	ldr	r2, [r7, #4]
 8012808:	4413      	add	r3, r2
 801280a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801280c:	78ba      	ldrb	r2, [r7, #2]
 801280e:	78fb      	ldrb	r3, [r7, #3]
 8012810:	1ad3      	subs	r3, r2, r3
 8012812:	b2db      	uxtb	r3, r3
 8012814:	3301      	adds	r3, #1
 8012816:	b2db      	uxtb	r3, r3
 8012818:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801281c:	4b95      	ldr	r3, [pc, #596]	; (8012a74 <ProcessMacCommands+0x394>)
 801281e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8012822:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012826:	4b93      	ldr	r3, [pc, #588]	; (8012a74 <ProcessMacCommands+0x394>)
 8012828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801282c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012830:	4b90      	ldr	r3, [pc, #576]	; (8012a74 <ProcessMacCommands+0x394>)
 8012832:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012836:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801283a:	4b8e      	ldr	r3, [pc, #568]	; (8012a74 <ProcessMacCommands+0x394>)
 801283c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012840:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012844:	4b8b      	ldr	r3, [pc, #556]	; (8012a74 <ProcessMacCommands+0x394>)
 8012846:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801284a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801284e:	4b89      	ldr	r3, [pc, #548]	; (8012a74 <ProcessMacCommands+0x394>)
 8012850:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012854:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012856:	4b87      	ldr	r3, [pc, #540]	; (8012a74 <ProcessMacCommands+0x394>)
 8012858:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801285c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012860:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012864:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801286c:	9301      	str	r3, [sp, #4]
 801286e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	4623      	mov	r3, r4
 8012876:	f005 f8ab 	bl	80179d0 <RegionLinkAdrReq>
 801287a:	4603      	mov	r3, r0
 801287c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012880:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012884:	f003 0307 	and.w	r3, r3, #7
 8012888:	2b07      	cmp	r3, #7
 801288a:	d10e      	bne.n	80128aa <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801288c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012890:	4b78      	ldr	r3, [pc, #480]	; (8012a74 <ProcessMacCommands+0x394>)
 8012892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012896:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801289a:	4b76      	ldr	r3, [pc, #472]	; (8012a74 <ProcessMacCommands+0x394>)
 801289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80128a0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80128a4:	4b73      	ldr	r3, [pc, #460]	; (8012a74 <ProcessMacCommands+0x394>)
 80128a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80128aa:	2300      	movs	r3, #0
 80128ac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80128b0:	e00b      	b.n	80128ca <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80128b2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80128b6:	2201      	movs	r2, #1
 80128b8:	4619      	mov	r1, r3
 80128ba:	2003      	movs	r0, #3
 80128bc:	f003 f9d4 	bl	8015c68 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80128c0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80128c4:	3301      	adds	r3, #1
 80128c6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80128ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80128ce:	4a6a      	ldr	r2, [pc, #424]	; (8012a78 <ProcessMacCommands+0x398>)
 80128d0:	fba2 2303 	umull	r2, r3, r2, r3
 80128d4:	089b      	lsrs	r3, r3, #2
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80128dc:	429a      	cmp	r2, r3
 80128de:	d3e8      	bcc.n	80128b2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80128e0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	4413      	add	r3, r2
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	3b01      	subs	r3, #1
 80128ec:	70fb      	strb	r3, [r7, #3]
                }
                break;
 80128ee:	bf00      	nop
 80128f0:	e381      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80128f2:	78fb      	ldrb	r3, [r7, #3]
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	70fa      	strb	r2, [r7, #3]
 80128f8:	461a      	mov	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4413      	add	r3, r2
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	f003 030f 	and.w	r3, r3, #15
 8012904:	b2da      	uxtb	r2, r3
 8012906:	4b5b      	ldr	r3, [pc, #364]	; (8012a74 <ProcessMacCommands+0x394>)
 8012908:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801290c:	4b59      	ldr	r3, [pc, #356]	; (8012a74 <ProcessMacCommands+0x394>)
 801290e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8012912:	461a      	mov	r2, r3
 8012914:	2301      	movs	r3, #1
 8012916:	4093      	lsls	r3, r2
 8012918:	b29a      	uxth	r2, r3
 801291a:	4b56      	ldr	r3, [pc, #344]	; (8012a74 <ProcessMacCommands+0x394>)
 801291c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012924:	2200      	movs	r2, #0
 8012926:	4619      	mov	r1, r3
 8012928:	2004      	movs	r0, #4
 801292a:	f003 f99d 	bl	8015c68 <LoRaMacCommandsAddCmd>
                break;
 801292e:	e362      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012930:	2307      	movs	r3, #7
 8012932:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012936:	78fb      	ldrb	r3, [r7, #3]
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	4413      	add	r3, r2
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	091b      	lsrs	r3, r3, #4
 8012940:	b2db      	uxtb	r3, r3
 8012942:	b25b      	sxtb	r3, r3
 8012944:	f003 0307 	and.w	r3, r3, #7
 8012948:	b25b      	sxtb	r3, r3
 801294a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801294e:	78fb      	ldrb	r3, [r7, #3]
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	4413      	add	r3, r2
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	b25b      	sxtb	r3, r3
 8012958:	f003 030f 	and.w	r3, r3, #15
 801295c:	b25b      	sxtb	r3, r3
 801295e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8012962:	78fb      	ldrb	r3, [r7, #3]
 8012964:	3301      	adds	r3, #1
 8012966:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012968:	78fb      	ldrb	r3, [r7, #3]
 801296a:	1c5a      	adds	r2, r3, #1
 801296c:	70fa      	strb	r2, [r7, #3]
 801296e:	461a      	mov	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4413      	add	r3, r2
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012978:	78fb      	ldrb	r3, [r7, #3]
 801297a:	1c5a      	adds	r2, r3, #1
 801297c:	70fa      	strb	r2, [r7, #3]
 801297e:	461a      	mov	r2, r3
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4413      	add	r3, r2
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	021a      	lsls	r2, r3, #8
 8012988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801298a:	4313      	orrs	r3, r2
 801298c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801298e:	78fb      	ldrb	r3, [r7, #3]
 8012990:	1c5a      	adds	r2, r3, #1
 8012992:	70fa      	strb	r2, [r7, #3]
 8012994:	461a      	mov	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4413      	add	r3, r2
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	041a      	lsls	r2, r3, #16
 801299e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129a0:	4313      	orrs	r3, r2
 80129a2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80129a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129a6:	2264      	movs	r2, #100	; 0x64
 80129a8:	fb02 f303 	mul.w	r3, r2, r3
 80129ac:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80129ae:	4b31      	ldr	r3, [pc, #196]	; (8012a74 <ProcessMacCommands+0x394>)
 80129b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129b4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80129b8:	4611      	mov	r1, r2
 80129ba:	4618      	mov	r0, r3
 80129bc:	f005 f82f 	bl	8017a1e <RegionRxParamSetupReq>
 80129c0:	4603      	mov	r3, r0
 80129c2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80129c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80129ca:	f003 0307 	and.w	r3, r3, #7
 80129ce:	2b07      	cmp	r3, #7
 80129d0:	d117      	bne.n	8012a02 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80129d2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	4b26      	ldr	r3, [pc, #152]	; (8012a74 <ProcessMacCommands+0x394>)
 80129da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80129de:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80129e2:	b2da      	uxtb	r2, r3
 80129e4:	4b23      	ldr	r3, [pc, #140]	; (8012a74 <ProcessMacCommands+0x394>)
 80129e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80129ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ec:	4a21      	ldr	r2, [pc, #132]	; (8012a74 <ProcessMacCommands+0x394>)
 80129ee:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80129f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f2:	4a20      	ldr	r2, [pc, #128]	; (8012a74 <ProcessMacCommands+0x394>)
 80129f4:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80129f6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80129fa:	b2da      	uxtb	r2, r3
 80129fc:	4b1d      	ldr	r3, [pc, #116]	; (8012a74 <ProcessMacCommands+0x394>)
 80129fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8012a02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012a06:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012a0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a0e:	2201      	movs	r2, #1
 8012a10:	4619      	mov	r1, r3
 8012a12:	2005      	movs	r0, #5
 8012a14:	f003 f928 	bl	8015c68 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8012a18:	f7ff fe52 	bl	80126c0 <SetMlmeScheduleUplinkIndication>
                break;
 8012a1c:	bf00      	nop
 8012a1e:	e2ea      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012a20:	23ff      	movs	r3, #255	; 0xff
 8012a22:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012a26:	4b12      	ldr	r3, [pc, #72]	; (8012a70 <ProcessMacCommands+0x390>)
 8012a28:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d00d      	beq.n	8012a4c <ProcessMacCommands+0x36c>
 8012a30:	4b0f      	ldr	r3, [pc, #60]	; (8012a70 <ProcessMacCommands+0x390>)
 8012a32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d007      	beq.n	8012a4c <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012a3c:	4b0c      	ldr	r3, [pc, #48]	; (8012a70 <ProcessMacCommands+0x390>)
 8012a3e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4798      	blx	r3
 8012a46:	4603      	mov	r3, r0
 8012a48:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012a4c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012a50:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012a54:	787b      	ldrb	r3, [r7, #1]
 8012a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012a60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a64:	2202      	movs	r2, #2
 8012a66:	4619      	mov	r1, r3
 8012a68:	2006      	movs	r0, #6
 8012a6a:	f003 f8fd 	bl	8015c68 <LoRaMacCommandsAddCmd>
                break;
 8012a6e:	e2c2      	b.n	8012ff6 <ProcessMacCommands+0x916>
 8012a70:	200033f0 	.word	0x200033f0
 8012a74:	200038f8 	.word	0x200038f8
 8012a78:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012a82:	78fb      	ldrb	r3, [r7, #3]
 8012a84:	1c5a      	adds	r2, r3, #1
 8012a86:	70fa      	strb	r2, [r7, #3]
 8012a88:	461a      	mov	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	b25b      	sxtb	r3, r3
 8012a92:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012a9a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012a9c:	78fb      	ldrb	r3, [r7, #3]
 8012a9e:	1c5a      	adds	r2, r3, #1
 8012aa0:	70fa      	strb	r2, [r7, #3]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012aac:	78fb      	ldrb	r3, [r7, #3]
 8012aae:	1c5a      	adds	r2, r3, #1
 8012ab0:	70fa      	strb	r2, [r7, #3]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	021a      	lsls	r2, r3, #8
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012ac2:	78fb      	ldrb	r3, [r7, #3]
 8012ac4:	1c5a      	adds	r2, r3, #1
 8012ac6:	70fa      	strb	r2, [r7, #3]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	4413      	add	r3, r2
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	041a      	lsls	r2, r3, #16
 8012ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ada:	2264      	movs	r2, #100	; 0x64
 8012adc:	fb02 f303 	mul.w	r3, r2, r3
 8012ae0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012ae6:	78fb      	ldrb	r3, [r7, #3]
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	70fa      	strb	r2, [r7, #3]
 8012aec:	461a      	mov	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4413      	add	r3, r2
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	b25b      	sxtb	r3, r3
 8012af6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012afa:	4b87      	ldr	r3, [pc, #540]	; (8012d18 <ProcessMacCommands+0x638>)
 8012afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012b04:	4611      	mov	r1, r2
 8012b06:	4618      	mov	r0, r3
 8012b08:	f004 ffa4 	bl	8017a54 <RegionNewChannelReq>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012b14:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b18:	b25b      	sxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	db0a      	blt.n	8012b34 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 8012b1e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b22:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012b26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	2007      	movs	r0, #7
 8012b30:	f003 f89a 	bl	8015c68 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b34:	bf00      	nop
 8012b36:	e25e      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012b38:	78fb      	ldrb	r3, [r7, #3]
 8012b3a:	1c5a      	adds	r2, r3, #1
 8012b3c:	70fa      	strb	r2, [r7, #3]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4413      	add	r3, r2
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	f003 030f 	and.w	r3, r3, #15
 8012b4a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012b4e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d104      	bne.n	8012b60 <ProcessMacCommands+0x480>
                {
                    delay++;
 8012b56:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012b60:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012b68:	fb02 f303 	mul.w	r3, r2, r3
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	4b6a      	ldr	r3, [pc, #424]	; (8012d18 <ProcessMacCommands+0x638>)
 8012b70:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012b72:	4b69      	ldr	r3, [pc, #420]	; (8012d18 <ProcessMacCommands+0x638>)
 8012b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b76:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012b7a:	4a67      	ldr	r2, [pc, #412]	; (8012d18 <ProcessMacCommands+0x638>)
 8012b7c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012b7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b82:	2200      	movs	r2, #0
 8012b84:	4619      	mov	r1, r3
 8012b86:	2008      	movs	r0, #8
 8012b88:	f003 f86e 	bl	8015c68 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8012b8c:	f7ff fd98 	bl	80126c0 <SetMlmeScheduleUplinkIndication>
                break;
 8012b90:	e231      	b.n	8012ff6 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012b92:	78fb      	ldrb	r3, [r7, #3]
 8012b94:	1c5a      	adds	r2, r3, #1
 8012b96:	70fa      	strb	r2, [r7, #3]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012baa:	2300      	movs	r3, #0
 8012bac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012bb0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012bb4:	f003 0320 	and.w	r3, r3, #32
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d002      	beq.n	8012bc2 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012bc2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012bc6:	f003 0310 	and.w	r3, r3, #16
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d002      	beq.n	8012bd4 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012bd4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012bd8:	f003 030f 	and.w	r3, r3, #15
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012be2:	4b4d      	ldr	r3, [pc, #308]	; (8012d18 <ProcessMacCommands+0x638>)
 8012be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012be8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012bec:	4611      	mov	r1, r2
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f004 ff4b 	bl	8017a8a <RegionTxParamSetupReq>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfa:	d03a      	beq.n	8012c72 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012bfc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012c00:	4b45      	ldr	r3, [pc, #276]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012c06:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012c0a:	4b43      	ldr	r3, [pc, #268]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c0c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012c10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c14:	461a      	mov	r2, r3
 8012c16:	4b41      	ldr	r3, [pc, #260]	; (8012d1c <ProcessMacCommands+0x63c>)
 8012c18:	5c9b      	ldrb	r3, [r3, r2]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7ed fdda 	bl	80007d4 <__aeabi_ui2f>
 8012c20:	4603      	mov	r3, r0
 8012c22:	4a3d      	ldr	r2, [pc, #244]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c24:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012c26:	2302      	movs	r3, #2
 8012c28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012c2c:	4b3a      	ldr	r3, [pc, #232]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012c32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c36:	4b38      	ldr	r3, [pc, #224]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f004 fdc1 	bl	80177ca <RegionGetPhyParam>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4e:	b25a      	sxtb	r2, r3
 8012c50:	4b31      	ldr	r3, [pc, #196]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c52:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012c56:	4293      	cmp	r3, r2
 8012c58:	bfb8      	it	lt
 8012c5a:	4613      	movlt	r3, r2
 8012c5c:	b25a      	sxtb	r2, r3
 8012c5e:	4b2e      	ldr	r3, [pc, #184]	; (8012d18 <ProcessMacCommands+0x638>)
 8012c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012c64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c68:	2200      	movs	r2, #0
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	2009      	movs	r0, #9
 8012c6e:	f002 fffb 	bl	8015c68 <LoRaMacCommandsAddCmd>
                }
                break;
 8012c72:	bf00      	nop
 8012c74:	e1bf      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012c76:	2303      	movs	r3, #3
 8012c78:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012c7c:	78fb      	ldrb	r3, [r7, #3]
 8012c7e:	1c5a      	adds	r2, r3, #1
 8012c80:	70fa      	strb	r2, [r7, #3]
 8012c82:	461a      	mov	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4413      	add	r3, r2
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012c8e:	78fb      	ldrb	r3, [r7, #3]
 8012c90:	1c5a      	adds	r2, r3, #1
 8012c92:	70fa      	strb	r2, [r7, #3]
 8012c94:	461a      	mov	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4413      	add	r3, r2
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012c9e:	78fb      	ldrb	r3, [r7, #3]
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	70fa      	strb	r2, [r7, #3]
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4413      	add	r3, r2
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	021a      	lsls	r2, r3, #8
 8012cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012cb4:	78fb      	ldrb	r3, [r7, #3]
 8012cb6:	1c5a      	adds	r2, r3, #1
 8012cb8:	70fa      	strb	r2, [r7, #3]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	041a      	lsls	r2, r3, #16
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ccc:	2264      	movs	r2, #100	; 0x64
 8012cce:	fb02 f303 	mul.w	r3, r2, r3
 8012cd2:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012cd4:	4b10      	ldr	r3, [pc, #64]	; (8012d18 <ProcessMacCommands+0x638>)
 8012cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cda:	f107 0220 	add.w	r2, r7, #32
 8012cde:	4611      	mov	r1, r2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f004 feed 	bl	8017ac0 <RegionDlChannelReq>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012cee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cf2:	b25b      	sxtb	r3, r3
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	db0c      	blt.n	8012d12 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 8012cf8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cfc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012d00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012d04:	2201      	movs	r2, #1
 8012d06:	4619      	mov	r1, r3
 8012d08:	200a      	movs	r0, #10
 8012d0a:	f002 ffad 	bl	8015c68 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 8012d0e:	f7ff fcd7 	bl	80126c0 <SetMlmeScheduleUplinkIndication>
                }
                break;
 8012d12:	bf00      	nop
 8012d14:	e16f      	b.n	8012ff6 <ProcessMacCommands+0x916>
 8012d16:	bf00      	nop
 8012d18:	200038f8 	.word	0x200038f8
 8012d1c:	08023218 	.word	0x08023218
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012d20:	200a      	movs	r0, #10
 8012d22:	f003 fac9 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	f000 8164 	beq.w	8012ff6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012d2e:	210a      	movs	r1, #10
 8012d30:	2000      	movs	r0, #0
 8012d32:	f003 fa35 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8012d36:	f107 0318 	add.w	r3, r7, #24
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	601a      	str	r2, [r3, #0]
 8012d3e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012d40:	f107 0310 	add.w	r3, r7, #16
 8012d44:	2200      	movs	r2, #0
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012d4a:	f107 0308 	add.w	r3, r7, #8
 8012d4e:	2200      	movs	r2, #0
 8012d50:	601a      	str	r2, [r3, #0]
 8012d52:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012d54:	78fb      	ldrb	r3, [r7, #3]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	70fa      	strb	r2, [r7, #3]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	4413      	add	r3, r2
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012d64:	78fb      	ldrb	r3, [r7, #3]
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	70fa      	strb	r2, [r7, #3]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	4413      	add	r3, r2
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	021a      	lsls	r2, r3, #8
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	4313      	orrs	r3, r2
 8012d78:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012d7a:	78fb      	ldrb	r3, [r7, #3]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	70fa      	strb	r2, [r7, #3]
 8012d80:	461a      	mov	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	4413      	add	r3, r2
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	041a      	lsls	r2, r3, #16
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	70fa      	strb	r2, [r7, #3]
 8012d96:	461a      	mov	r2, r3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	061a      	lsls	r2, r3, #24
 8012da0:	69bb      	ldr	r3, [r7, #24]
 8012da2:	4313      	orrs	r3, r2
 8012da4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012da6:	78fb      	ldrb	r3, [r7, #3]
 8012da8:	1c5a      	adds	r2, r3, #1
 8012daa:	70fa      	strb	r2, [r7, #3]
 8012dac:	461a      	mov	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	4413      	add	r3, r2
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	b21b      	sxth	r3, r3
 8012db6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012db8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012dc2:	fb02 f303 	mul.w	r3, r2, r3
 8012dc6:	121b      	asrs	r3, r3, #8
 8012dc8:	b21b      	sxth	r3, r3
 8012dca:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012dcc:	f107 0310 	add.w	r3, r7, #16
 8012dd0:	f107 0218 	add.w	r2, r7, #24
 8012dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dd8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012ddc:	693a      	ldr	r2, [r7, #16]
 8012dde:	4b8c      	ldr	r3, [pc, #560]	; (8013010 <ProcessMacCommands+0x930>)
 8012de0:	4413      	add	r3, r2
 8012de2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012de4:	f107 0308 	add.w	r3, r7, #8
 8012de8:	4618      	mov	r0, r3
 8012dea:	f00c fad1 	bl	801f390 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012dee:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012df2:	4b88      	ldr	r3, [pc, #544]	; (8013014 <ProcessMacCommands+0x934>)
 8012df4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012df8:	9200      	str	r2, [sp, #0]
 8012dfa:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012dfe:	f107 0210 	add.w	r2, r7, #16
 8012e02:	ca06      	ldmia	r2, {r1, r2}
 8012e04:	f00c fa5d 	bl	801f2c2 <SysTimeSub>
 8012e08:	f107 0010 	add.w	r0, r7, #16
 8012e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e12:	f107 0208 	add.w	r2, r7, #8
 8012e16:	ca06      	ldmia	r2, {r1, r2}
 8012e18:	f00c fa1a 	bl	801f250 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012e1c:	f107 0310 	add.w	r3, r7, #16
 8012e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e24:	f00c fa86 	bl	801f334 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012e28:	f002 fde3 	bl	80159f2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012e2c:	4b79      	ldr	r3, [pc, #484]	; (8013014 <ProcessMacCommands+0x934>)
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 8012e34:	e0df      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012e36:	200d      	movs	r0, #13
 8012e38:	f003 fa3e 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	f000 80d9 	beq.w	8012ff6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012e44:	210d      	movs	r1, #13
 8012e46:	2000      	movs	r0, #0
 8012e48:	f003 f9aa 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012e4c:	4b71      	ldr	r3, [pc, #452]	; (8013014 <ProcessMacCommands+0x934>)
 8012e4e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012e52:	2b04      	cmp	r3, #4
 8012e54:	f000 80cf 	beq.w	8012ff6 <ProcessMacCommands+0x916>
 8012e58:	4b6e      	ldr	r3, [pc, #440]	; (8013014 <ProcessMacCommands+0x934>)
 8012e5a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012e5e:	2b05      	cmp	r3, #5
 8012e60:	f000 80c9 	beq.w	8012ff6 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012e64:	f002 fda6 	bl	80159b4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012e68:	e0c5      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012e74:	78fb      	ldrb	r3, [r7, #3]
 8012e76:	1c5a      	adds	r2, r3, #1
 8012e78:	70fa      	strb	r2, [r7, #3]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	4413      	add	r3, r2
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012e84:	78fb      	ldrb	r3, [r7, #3]
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	70fa      	strb	r2, [r7, #3]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	4413      	add	r3, r2
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	021b      	lsls	r3, r3, #8
 8012e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e96:	4313      	orrs	r3, r2
 8012e98:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012e9a:	78fb      	ldrb	r3, [r7, #3]
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	70fa      	strb	r2, [r7, #3]
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	041b      	lsls	r3, r3, #16
 8012eaa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012eac:	4313      	orrs	r3, r2
 8012eae:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012eb2:	2264      	movs	r2, #100	; 0x64
 8012eb4:	fb02 f303 	mul.w	r3, r2, r3
 8012eb8:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012eba:	78fb      	ldrb	r3, [r7, #3]
 8012ebc:	1c5a      	adds	r2, r3, #1
 8012ebe:	70fa      	strb	r2, [r7, #3]
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 030f 	and.w	r3, r3, #15
 8012ecc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012ed4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f002 fd72 	bl	80159c0 <LoRaMacClassBPingSlotChannelReq>
 8012edc:	4603      	mov	r3, r0
 8012ede:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012ee2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012ee6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012eea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012eee:	2201      	movs	r2, #1
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	2011      	movs	r0, #17
 8012ef4:	f002 feb8 	bl	8015c68 <LoRaMacCommandsAddCmd>
                break;
 8012ef8:	e07d      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012efa:	200e      	movs	r0, #14
 8012efc:	f003 f9dc 	bl	80162b8 <LoRaMacConfirmQueueIsCmdActive>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d077      	beq.n	8012ff6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012f06:	210e      	movs	r1, #14
 8012f08:	2000      	movs	r0, #0
 8012f0a:	f003 f949 	bl	80161a0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012f14:	2300      	movs	r3, #0
 8012f16:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012f1a:	78fb      	ldrb	r3, [r7, #3]
 8012f1c:	1c5a      	adds	r2, r3, #1
 8012f1e:	70fa      	strb	r2, [r7, #3]
 8012f20:	461a      	mov	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	4413      	add	r3, r2
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012f2c:	78fb      	ldrb	r3, [r7, #3]
 8012f2e:	1c5a      	adds	r2, r3, #1
 8012f30:	70fa      	strb	r2, [r7, #3]
 8012f32:	461a      	mov	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	4413      	add	r3, r2
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	021b      	lsls	r3, r3, #8
 8012f3c:	b21a      	sxth	r2, r3
 8012f3e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012f42:	4313      	orrs	r3, r2
 8012f44:	b21b      	sxth	r3, r3
 8012f46:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012f4a:	78fb      	ldrb	r3, [r7, #3]
 8012f4c:	1c5a      	adds	r2, r3, #1
 8012f4e:	70fa      	strb	r2, [r7, #3]
 8012f50:	461a      	mov	r2, r3
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	4413      	add	r3, r2
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012f5c:	4b2e      	ldr	r3, [pc, #184]	; (8013018 <ProcessMacCommands+0x938>)
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012f64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f002 fd35 	bl	80159d8 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012f6e:	e042      	b.n	8012ff6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012f70:	2300      	movs	r3, #0
 8012f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012f76:	78fb      	ldrb	r3, [r7, #3]
 8012f78:	1c5a      	adds	r2, r3, #1
 8012f7a:	70fa      	strb	r2, [r7, #3]
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4413      	add	r3, r2
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012f88:	78fb      	ldrb	r3, [r7, #3]
 8012f8a:	1c5a      	adds	r2, r3, #1
 8012f8c:	70fa      	strb	r2, [r7, #3]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	4413      	add	r3, r2
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	021b      	lsls	r3, r3, #8
 8012f98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012fa2:	78fb      	ldrb	r3, [r7, #3]
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	70fa      	strb	r2, [r7, #3]
 8012fa8:	461a      	mov	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4413      	add	r3, r2
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	041b      	lsls	r3, r3, #16
 8012fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012fc0:	2264      	movs	r2, #100	; 0x64
 8012fc2:	fb02 f303 	mul.w	r3, r2, r3
 8012fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012fca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012fce:	f002 fd16 	bl	80159fe <LoRaMacClassBBeaconFreqReq>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d003      	beq.n	8012fe0 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012fde:	e002      	b.n	8012fe6 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012fe6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012fea:	2201      	movs	r2, #1
 8012fec:	4619      	mov	r1, r3
 8012fee:	2013      	movs	r0, #19
 8012ff0:	f002 fe3a 	bl	8015c68 <LoRaMacCommandsAddCmd>
                }
                break;
 8012ff4:	bf00      	nop
    while( macIndex < commandsSize )
 8012ff6:	78fa      	ldrb	r2, [r7, #3]
 8012ff8:	78bb      	ldrb	r3, [r7, #2]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	f4ff ab88 	bcc.w	8012710 <ProcessMacCommands+0x30>
 8013000:	e002      	b.n	8013008 <ProcessMacCommands+0x928>
            return;
 8013002:	bf00      	nop
 8013004:	e000      	b.n	8013008 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8013006:	bf00      	nop
        }
    }
}
 8013008:	378c      	adds	r7, #140	; 0x8c
 801300a:	46bd      	mov	sp, r7
 801300c:	bd90      	pop	{r4, r7, pc}
 801300e:	bf00      	nop
 8013010:	12d53d80 	.word	0x12d53d80
 8013014:	200033f0 	.word	0x200033f0
 8013018:	20003f10 	.word	0x20003f10

0801301c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08e      	sub	sp, #56	; 0x38
 8013020:	af02      	add	r7, sp, #8
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	461a      	mov	r2, r3
 8013028:	460b      	mov	r3, r1
 801302a:	72fb      	strb	r3, [r7, #11]
 801302c:	4613      	mov	r3, r2
 801302e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013030:	2303      	movs	r3, #3
 8013032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013036:	4b65      	ldr	r3, [pc, #404]	; (80131cc <Send+0x1b0>)
 8013038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801303c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8013040:	4b62      	ldr	r3, [pc, #392]	; (80131cc <Send+0x1b0>)
 8013042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013046:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801304a:	4b60      	ldr	r3, [pc, #384]	; (80131cc <Send+0x1b0>)
 801304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801304e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013050:	4b5e      	ldr	r3, [pc, #376]	; (80131cc <Send+0x1b0>)
 8013052:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801305a:	2307      	movs	r3, #7
 801305c:	e0b1      	b.n	80131c2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801305e:	4b5b      	ldr	r3, [pc, #364]	; (80131cc <Send+0x1b0>)
 8013060:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013068:	4b58      	ldr	r3, [pc, #352]	; (80131cc <Send+0x1b0>)
 801306a:	2200      	movs	r2, #0
 801306c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013078:	f36f 0303 	bfc	r3, #0, #4
 801307c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013080:	4b52      	ldr	r3, [pc, #328]	; (80131cc <Send+0x1b0>)
 8013082:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8013086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801308a:	f362 13c7 	bfi	r3, r2, #7, #1
 801308e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013092:	4b4e      	ldr	r3, [pc, #312]	; (80131cc <Send+0x1b0>)
 8013094:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8013098:	2b01      	cmp	r3, #1
 801309a:	d106      	bne.n	80130aa <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801309c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130a0:	f043 0310 	orr.w	r3, r3, #16
 80130a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80130a8:	e005      	b.n	80130b6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80130aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130ae:	f36f 1304 	bfc	r3, #4, #1
 80130b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80130b6:	4b45      	ldr	r3, [pc, #276]	; (80131cc <Send+0x1b0>)
 80130b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d005      	beq.n	80130cc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80130c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130c4:	f043 0320 	orr.w	r3, r3, #32
 80130c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 80130cc:	4b3f      	ldr	r3, [pc, #252]	; (80131cc <Send+0x1b0>)
 80130ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80130d2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 80130d4:	2301      	movs	r3, #1
 80130d6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80130d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	bf14      	ite	ne
 80130e6:	2301      	movne	r3, #1
 80130e8:	2300      	moveq	r3, #0
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80130ee:	4b37      	ldr	r3, [pc, #220]	; (80131cc <Send+0x1b0>)
 80130f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130f2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80130f4:	4b36      	ldr	r3, [pc, #216]	; (80131d0 <Send+0x1b4>)
 80130f6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80130fa:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80130fc:	4b34      	ldr	r3, [pc, #208]	; (80131d0 <Send+0x1b4>)
 80130fe:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8013102:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013104:	4b31      	ldr	r3, [pc, #196]	; (80131cc <Send+0x1b0>)
 8013106:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801310a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801310e:	4b2f      	ldr	r3, [pc, #188]	; (80131cc <Send+0x1b0>)
 8013110:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013118:	4b2c      	ldr	r3, [pc, #176]	; (80131cc <Send+0x1b0>)
 801311a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801311e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8013122:	4b2a      	ldr	r3, [pc, #168]	; (80131cc <Send+0x1b0>)
 8013124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801312c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013130:	f107 0014 	add.w	r0, r7, #20
 8013134:	4a27      	ldr	r2, [pc, #156]	; (80131d4 <Send+0x1b8>)
 8013136:	4928      	ldr	r1, [pc, #160]	; (80131d8 <Send+0x1bc>)
 8013138:	f002 fb7c 	bl	8015834 <LoRaMacAdrCalcNext>
 801313c:	4603      	mov	r3, r0
 801313e:	461a      	mov	r2, r3
 8013140:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013144:	f362 1386 	bfi	r3, r2, #6, #1
 8013148:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801314c:	7afa      	ldrb	r2, [r7, #11]
 801314e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8013152:	893b      	ldrh	r3, [r7, #8]
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f000 fc21 	bl	80139a0 <PrepareFrame>
 801315e:	4603      	mov	r3, r0
 8013160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8013164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013168:	2b00      	cmp	r3, #0
 801316a:	d003      	beq.n	8013174 <Send+0x158>
 801316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013170:	2b0a      	cmp	r3, #10
 8013172:	d107      	bne.n	8013184 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013174:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013178:	4618      	mov	r0, r3
 801317a:	f000 f96d 	bl	8013458 <ScheduleTx>
 801317e:	4603      	mov	r3, r0
 8013180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8013184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00a      	beq.n	80131a2 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801318c:	4a0f      	ldr	r2, [pc, #60]	; (80131cc <Send+0x1b0>)
 801318e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013192:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8013196:	4a0d      	ldr	r2, [pc, #52]	; (80131cc <Send+0x1b0>)
 8013198:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801319c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80131a0:	e00d      	b.n	80131be <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80131a2:	4b0a      	ldr	r3, [pc, #40]	; (80131cc <Send+0x1b0>)
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80131aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ac:	4a07      	ldr	r2, [pc, #28]	; (80131cc <Send+0x1b0>)
 80131ae:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80131b0:	f002 fdd2 	bl	8015d58 <LoRaMacCommandsRemoveNoneStickyCmds>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d001      	beq.n	80131be <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131ba:	2313      	movs	r3, #19
 80131bc:	e001      	b.n	80131c2 <Send+0x1a6>
        }
    }
    return status;
 80131be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3730      	adds	r7, #48	; 0x30
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	200038f8 	.word	0x200038f8
 80131d0:	200033f0 	.word	0x200033f0
 80131d4:	20003930 	.word	0x20003930
 80131d8:	20003931 	.word	0x20003931

080131dc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	4603      	mov	r3, r0
 80131e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80131e6:	2300      	movs	r3, #0
 80131e8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80131ea:	2300      	movs	r3, #0
 80131ec:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80131ee:	2301      	movs	r3, #1
 80131f0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80131f2:	79fb      	ldrb	r3, [r7, #7]
 80131f4:	2bff      	cmp	r3, #255	; 0xff
 80131f6:	d129      	bne.n	801324c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80131f8:	2000      	movs	r0, #0
 80131fa:	f7ff f941 	bl	8012480 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80131fe:	4b1a      	ldr	r3, [pc, #104]	; (8013268 <SendReJoinReq+0x8c>)
 8013200:	2200      	movs	r2, #0
 8013202:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8013206:	4b18      	ldr	r3, [pc, #96]	; (8013268 <SendReJoinReq+0x8c>)
 8013208:	4a18      	ldr	r2, [pc, #96]	; (801326c <SendReJoinReq+0x90>)
 801320a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801320e:	4b16      	ldr	r3, [pc, #88]	; (8013268 <SendReJoinReq+0x8c>)
 8013210:	22ff      	movs	r2, #255	; 0xff
 8013212:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8013216:	7b3b      	ldrb	r3, [r7, #12]
 8013218:	f36f 1347 	bfc	r3, #5, #3
 801321c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801321e:	7b3a      	ldrb	r2, [r7, #12]
 8013220:	4b11      	ldr	r3, [pc, #68]	; (8013268 <SendReJoinReq+0x8c>)
 8013222:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013226:	f7fc f853 	bl	800f2d0 <SecureElementGetJoinEui>
 801322a:	4603      	mov	r3, r0
 801322c:	2208      	movs	r2, #8
 801322e:	4619      	mov	r1, r3
 8013230:	480f      	ldr	r0, [pc, #60]	; (8013270 <SendReJoinReq+0x94>)
 8013232:	f008 f996 	bl	801b562 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8013236:	f7fc f829 	bl	800f28c <SecureElementGetDevEui>
 801323a:	4603      	mov	r3, r0
 801323c:	2208      	movs	r2, #8
 801323e:	4619      	mov	r1, r3
 8013240:	480c      	ldr	r0, [pc, #48]	; (8013274 <SendReJoinReq+0x98>)
 8013242:	f008 f98e 	bl	801b562 <memcpy1>

            allowDelayedTx = false;
 8013246:	2300      	movs	r3, #0
 8013248:	73fb      	strb	r3, [r7, #15]

            break;
 801324a:	e002      	b.n	8013252 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801324c:	2302      	movs	r3, #2
 801324e:	73bb      	strb	r3, [r7, #14]
            break;
 8013250:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013252:	7bfb      	ldrb	r3, [r7, #15]
 8013254:	4618      	mov	r0, r3
 8013256:	f000 f8ff 	bl	8013458 <ScheduleTx>
 801325a:	4603      	mov	r3, r0
 801325c:	73bb      	strb	r3, [r7, #14]
    return status;
 801325e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3710      	adds	r7, #16
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	200033f0 	.word	0x200033f0
 801326c:	200033f2 	.word	0x200033f2
 8013270:	200034fe 	.word	0x200034fe
 8013274:	20003506 	.word	0x20003506

08013278 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801327c:	f002 fb49 	bl	8015912 <LoRaMacClassBIsBeaconExpected>
 8013280:	4603      	mov	r3, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013286:	230e      	movs	r3, #14
 8013288:	e013      	b.n	80132b2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801328a:	4b0b      	ldr	r3, [pc, #44]	; (80132b8 <CheckForClassBCollision+0x40>)
 801328c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8013290:	2b01      	cmp	r3, #1
 8013292:	d10d      	bne.n	80132b0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013294:	f002 fb44 	bl	8015920 <LoRaMacClassBIsPingExpected>
 8013298:	4603      	mov	r3, r0
 801329a:	2b00      	cmp	r3, #0
 801329c:	d001      	beq.n	80132a2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801329e:	230f      	movs	r3, #15
 80132a0:	e007      	b.n	80132b2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80132a2:	f002 fb44 	bl	801592e <LoRaMacClassBIsMulticastExpected>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d001      	beq.n	80132b0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80132ac:	230f      	movs	r3, #15
 80132ae:	e000      	b.n	80132b2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	200038f8 	.word	0x200038f8

080132bc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80132bc:	b590      	push	{r4, r7, lr}
 80132be:	b083      	sub	sp, #12
 80132c0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132c2:	4b2d      	ldr	r3, [pc, #180]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132c4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80132c8:	4b2b      	ldr	r3, [pc, #172]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80132ce:	4b2a      	ldr	r3, [pc, #168]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132d0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 80132d4:	4b28      	ldr	r3, [pc, #160]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132d6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80132da:	4b27      	ldr	r3, [pc, #156]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80132e0:	b25b      	sxtb	r3, r3
 80132e2:	f004 fc68 	bl	8017bb6 <RegionApplyDrOffset>
 80132e6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132e8:	b259      	sxtb	r1, r3
 80132ea:	4b23      	ldr	r3, [pc, #140]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80132f0:	4b21      	ldr	r3, [pc, #132]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 80132f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132f4:	4821      	ldr	r0, [pc, #132]	; (801337c <ComputeRxWindowParameters+0xc0>)
 80132f6:	9000      	str	r0, [sp, #0]
 80132f8:	4620      	mov	r0, r4
 80132fa:	f004 fb07 	bl	801790c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132fe:	4b1e      	ldr	r3, [pc, #120]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013300:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013304:	4b1c      	ldr	r3, [pc, #112]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013306:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801330a:	b259      	sxtb	r1, r3
 801330c:	4b1a      	ldr	r3, [pc, #104]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 801330e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013312:	4b19      	ldr	r3, [pc, #100]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013316:	4c1a      	ldr	r4, [pc, #104]	; (8013380 <ComputeRxWindowParameters+0xc4>)
 8013318:	9400      	str	r4, [sp, #0]
 801331a:	f004 faf7 	bl	801790c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801331e:	4b16      	ldr	r3, [pc, #88]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013322:	4a18      	ldr	r2, [pc, #96]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 8013324:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013328:	4413      	add	r3, r2
 801332a:	4a16      	ldr	r2, [pc, #88]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 801332c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013330:	4b11      	ldr	r3, [pc, #68]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013334:	4a13      	ldr	r2, [pc, #76]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 8013336:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801333a:	4413      	add	r3, r2
 801333c:	4a11      	ldr	r2, [pc, #68]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 801333e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013342:	4b0d      	ldr	r3, [pc, #52]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013344:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8013348:	2b00      	cmp	r3, #0
 801334a:	d111      	bne.n	8013370 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801334c:	4b0a      	ldr	r3, [pc, #40]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 801334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013350:	4a0c      	ldr	r2, [pc, #48]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 8013352:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013356:	4413      	add	r3, r2
 8013358:	4a0a      	ldr	r2, [pc, #40]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 801335a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801335e:	4b06      	ldr	r3, [pc, #24]	; (8013378 <ComputeRxWindowParameters+0xbc>)
 8013360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013362:	4a08      	ldr	r2, [pc, #32]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 8013364:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013368:	4413      	add	r3, r2
 801336a:	4a06      	ldr	r2, [pc, #24]	; (8013384 <ComputeRxWindowParameters+0xc8>)
 801336c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013370:	bf00      	nop
 8013372:	3704      	adds	r7, #4
 8013374:	46bd      	mov	sp, r7
 8013376:	bd90      	pop	{r4, r7, pc}
 8013378:	200038f8 	.word	0x200038f8
 801337c:	200037a8 	.word	0x200037a8
 8013380:	200037bc 	.word	0x200037bc
 8013384:	200033f0 	.word	0x200033f0

08013388 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801338e:	2300      	movs	r3, #0
 8013390:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013392:	4b13      	ldr	r3, [pc, #76]	; (80133e0 <VerifyTxFrame+0x58>)
 8013394:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8013398:	2b00      	cmp	r3, #0
 801339a:	d01b      	beq.n	80133d4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801339c:	1d3b      	adds	r3, r7, #4
 801339e:	4618      	mov	r0, r3
 80133a0:	f002 fd20 	bl	8015de4 <LoRaMacCommandsGetSizeSerializedCmds>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80133aa:	2313      	movs	r3, #19
 80133ac:	e013      	b.n	80133d6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80133ae:	4b0d      	ldr	r3, [pc, #52]	; (80133e4 <VerifyTxFrame+0x5c>)
 80133b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80133b4:	4a0a      	ldr	r2, [pc, #40]	; (80133e0 <VerifyTxFrame+0x58>)
 80133b6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	b2d2      	uxtb	r2, r2
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff f956 	bl	8012670 <ValidatePayloadLength>
 80133c4:	4603      	mov	r3, r0
 80133c6:	f083 0301 	eor.w	r3, r3, #1
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80133d0:	2308      	movs	r3, #8
 80133d2:	e000      	b.n	80133d6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80133d4:	2300      	movs	r3, #0
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3708      	adds	r7, #8
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	200038f8 	.word	0x200038f8
 80133e4:	200033f0 	.word	0x200033f0

080133e8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80133ee:	4b18      	ldr	r3, [pc, #96]	; (8013450 <SerializeTxFrame+0x68>)
 80133f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d002      	beq.n	80133fe <SerializeTxFrame+0x16>
 80133f8:	2b04      	cmp	r3, #4
 80133fa:	d011      	beq.n	8013420 <SerializeTxFrame+0x38>
 80133fc:	e021      	b.n	8013442 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133fe:	4815      	ldr	r0, [pc, #84]	; (8013454 <SerializeTxFrame+0x6c>)
 8013400:	f004 f855 	bl	80174ae <LoRaMacSerializerJoinRequest>
 8013404:	4603      	mov	r3, r0
 8013406:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013408:	79fb      	ldrb	r3, [r7, #7]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d001      	beq.n	8013412 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801340e:	2311      	movs	r3, #17
 8013410:	e01a      	b.n	8013448 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013412:	4b0f      	ldr	r3, [pc, #60]	; (8013450 <SerializeTxFrame+0x68>)
 8013414:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013418:	b29a      	uxth	r2, r3
 801341a:	4b0d      	ldr	r3, [pc, #52]	; (8013450 <SerializeTxFrame+0x68>)
 801341c:	801a      	strh	r2, [r3, #0]
            break;
 801341e:	e012      	b.n	8013446 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013420:	480c      	ldr	r0, [pc, #48]	; (8013454 <SerializeTxFrame+0x6c>)
 8013422:	f004 f8c6 	bl	80175b2 <LoRaMacSerializerData>
 8013426:	4603      	mov	r3, r0
 8013428:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d001      	beq.n	8013434 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013430:	2311      	movs	r3, #17
 8013432:	e009      	b.n	8013448 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013434:	4b06      	ldr	r3, [pc, #24]	; (8013450 <SerializeTxFrame+0x68>)
 8013436:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801343a:	b29a      	uxth	r2, r3
 801343c:	4b04      	ldr	r3, [pc, #16]	; (8013450 <SerializeTxFrame+0x68>)
 801343e:	801a      	strh	r2, [r3, #0]
            break;
 8013440:	e001      	b.n	8013446 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013442:	2303      	movs	r3, #3
 8013444:	e000      	b.n	8013448 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013446:	2300      	movs	r3, #0
}
 8013448:	4618      	mov	r0, r3
 801344a:	3708      	adds	r7, #8
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	200033f0 	.word	0x200033f0
 8013454:	200034f8 	.word	0x200034f8

08013458 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b090      	sub	sp, #64	; 0x40
 801345c:	af02      	add	r7, sp, #8
 801345e:	4603      	mov	r3, r0
 8013460:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013462:	2303      	movs	r3, #3
 8013464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013468:	f7ff ff06 	bl	8013278 <CheckForClassBCollision>
 801346c:	4603      	mov	r3, r0
 801346e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013472:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013476:	2b00      	cmp	r3, #0
 8013478:	d002      	beq.n	8013480 <ScheduleTx+0x28>
    {
        return status;
 801347a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801347e:	e08f      	b.n	80135a0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8013480:	f000 f8fa 	bl	8013678 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013484:	f7ff ffb0 	bl	80133e8 <SerializeTxFrame>
 8013488:	4603      	mov	r3, r0
 801348a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801348e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <ScheduleTx+0x44>
    {
        return status;
 8013496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801349a:	e081      	b.n	80135a0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801349c:	4b42      	ldr	r3, [pc, #264]	; (80135a8 <ScheduleTx+0x150>)
 801349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134a0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80134a2:	4b41      	ldr	r3, [pc, #260]	; (80135a8 <ScheduleTx+0x150>)
 80134a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80134a8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80134aa:	4b3f      	ldr	r3, [pc, #252]	; (80135a8 <ScheduleTx+0x150>)
 80134ac:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80134b0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80134b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134b6:	4618      	mov	r0, r3
 80134b8:	f00b ffa2 	bl	801f400 <SysTimeGetMcuTime>
 80134bc:	4638      	mov	r0, r7
 80134be:	4b3a      	ldr	r3, [pc, #232]	; (80135a8 <ScheduleTx+0x150>)
 80134c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80134c4:	9200      	str	r2, [sp, #0]
 80134c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80134ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80134ce:	ca06      	ldmia	r2, {r1, r2}
 80134d0:	f00b fef7 	bl	801f2c2 <SysTimeSub>
 80134d4:	f107 0320 	add.w	r3, r7, #32
 80134d8:	463a      	mov	r2, r7
 80134da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134de:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80134e2:	4b31      	ldr	r3, [pc, #196]	; (80135a8 <ScheduleTx+0x150>)
 80134e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80134e8:	2300      	movs	r3, #0
 80134ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80134ee:	2301      	movs	r3, #1
 80134f0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80134f2:	4b2e      	ldr	r3, [pc, #184]	; (80135ac <ScheduleTx+0x154>)
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80134f8:	4b2b      	ldr	r3, [pc, #172]	; (80135a8 <ScheduleTx+0x150>)
 80134fa:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d104      	bne.n	801350c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013502:	2301      	movs	r3, #1
 8013504:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013508:	2300      	movs	r3, #0
 801350a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801350c:	4b26      	ldr	r3, [pc, #152]	; (80135a8 <ScheduleTx+0x150>)
 801350e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013512:	f107 0114 	add.w	r1, r7, #20
 8013516:	4b26      	ldr	r3, [pc, #152]	; (80135b0 <ScheduleTx+0x158>)
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	4b26      	ldr	r3, [pc, #152]	; (80135b4 <ScheduleTx+0x15c>)
 801351c:	4a26      	ldr	r2, [pc, #152]	; (80135b8 <ScheduleTx+0x160>)
 801351e:	f004 fb10 	bl	8017b42 <RegionNextChannel>
 8013522:	4603      	mov	r3, r0
 8013524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801352c:	2b00      	cmp	r3, #0
 801352e:	d022      	beq.n	8013576 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8013530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013534:	2b0b      	cmp	r3, #11
 8013536:	d11b      	bne.n	8013570 <ScheduleTx+0x118>
 8013538:	7bfb      	ldrb	r3, [r7, #15]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d018      	beq.n	8013570 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801353e:	4b1b      	ldr	r3, [pc, #108]	; (80135ac <ScheduleTx+0x154>)
 8013540:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013544:	2b00      	cmp	r3, #0
 8013546:	d011      	beq.n	801356c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013548:	4b18      	ldr	r3, [pc, #96]	; (80135ac <ScheduleTx+0x154>)
 801354a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801354e:	f043 0320 	orr.w	r3, r3, #32
 8013552:	4a16      	ldr	r2, [pc, #88]	; (80135ac <ScheduleTx+0x154>)
 8013554:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013558:	4b14      	ldr	r3, [pc, #80]	; (80135ac <ScheduleTx+0x154>)
 801355a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801355e:	4619      	mov	r1, r3
 8013560:	4816      	ldr	r0, [pc, #88]	; (80135bc <ScheduleTx+0x164>)
 8013562:	f00c faad 	bl	801fac0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8013566:	4815      	ldr	r0, [pc, #84]	; (80135bc <ScheduleTx+0x164>)
 8013568:	f00c f9cc 	bl	801f904 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801356c:	2300      	movs	r3, #0
 801356e:	e017      	b.n	80135a0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013574:	e014      	b.n	80135a0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013576:	f7ff fea1 	bl	80132bc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801357a:	f7ff ff05 	bl	8013388 <VerifyTxFrame>
 801357e:	4603      	mov	r3, r0
 8013580:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013584:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013588:	2b00      	cmp	r3, #0
 801358a:	d002      	beq.n	8013592 <ScheduleTx+0x13a>
    {
        return status;
 801358c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013590:	e006      	b.n	80135a0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013592:	4b06      	ldr	r3, [pc, #24]	; (80135ac <ScheduleTx+0x154>)
 8013594:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013598:	4618      	mov	r0, r3
 801359a:	f000 fb1d 	bl	8013bd8 <SendFrameOnChannel>
 801359e:	4603      	mov	r3, r0
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3738      	adds	r7, #56	; 0x38
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	200038f8 	.word	0x200038f8
 80135ac:	200033f0 	.word	0x200033f0
 80135b0:	20003928 	.word	0x20003928
 80135b4:	20003874 	.word	0x20003874
 80135b8:	20003805 	.word	0x20003805
 80135bc:	20003758 	.word	0x20003758

080135c0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	4603      	mov	r3, r0
 80135c8:	460a      	mov	r2, r1
 80135ca:	71fb      	strb	r3, [r7, #7]
 80135cc:	4613      	mov	r3, r2
 80135ce:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80135d0:	2313      	movs	r3, #19
 80135d2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80135d4:	2300      	movs	r3, #0
 80135d6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80135d8:	4b25      	ldr	r3, [pc, #148]	; (8013670 <SecureFrame+0xb0>)
 80135da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d002      	beq.n	80135e8 <SecureFrame+0x28>
 80135e2:	2b04      	cmp	r3, #4
 80135e4:	d011      	beq.n	801360a <SecureFrame+0x4a>
 80135e6:	e03b      	b.n	8013660 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80135e8:	4822      	ldr	r0, [pc, #136]	; (8013674 <SecureFrame+0xb4>)
 80135ea:	f003 fb29 	bl	8016c40 <LoRaMacCryptoPrepareJoinRequest>
 80135ee:	4603      	mov	r3, r0
 80135f0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80135f2:	7bfb      	ldrb	r3, [r7, #15]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80135f8:	2311      	movs	r3, #17
 80135fa:	e034      	b.n	8013666 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80135fc:	4b1c      	ldr	r3, [pc, #112]	; (8013670 <SecureFrame+0xb0>)
 80135fe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013602:	b29a      	uxth	r2, r3
 8013604:	4b1a      	ldr	r3, [pc, #104]	; (8013670 <SecureFrame+0xb0>)
 8013606:	801a      	strh	r2, [r3, #0]
            break;
 8013608:	e02c      	b.n	8013664 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801360a:	f107 0308 	add.w	r3, r7, #8
 801360e:	4618      	mov	r0, r3
 8013610:	f003 fa30 	bl	8016a74 <LoRaMacCryptoGetFCntUp>
 8013614:	4603      	mov	r3, r0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801361a:	2312      	movs	r3, #18
 801361c:	e023      	b.n	8013666 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 801361e:	4b14      	ldr	r3, [pc, #80]	; (8013670 <SecureFrame+0xb0>)
 8013620:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013624:	2b00      	cmp	r3, #0
 8013626:	d104      	bne.n	8013632 <SecureFrame+0x72>
 8013628:	4b11      	ldr	r3, [pc, #68]	; (8013670 <SecureFrame+0xb0>)
 801362a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801362e:	2b01      	cmp	r3, #1
 8013630:	d902      	bls.n	8013638 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	3b01      	subs	r3, #1
 8013636:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013638:	68b8      	ldr	r0, [r7, #8]
 801363a:	79ba      	ldrb	r2, [r7, #6]
 801363c:	79f9      	ldrb	r1, [r7, #7]
 801363e:	4b0d      	ldr	r3, [pc, #52]	; (8013674 <SecureFrame+0xb4>)
 8013640:	f003 fc16 	bl	8016e70 <LoRaMacCryptoSecureMessage>
 8013644:	4603      	mov	r3, r0
 8013646:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013648:	7bfb      	ldrb	r3, [r7, #15]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801364e:	2311      	movs	r3, #17
 8013650:	e009      	b.n	8013666 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013652:	4b07      	ldr	r3, [pc, #28]	; (8013670 <SecureFrame+0xb0>)
 8013654:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013658:	b29a      	uxth	r2, r3
 801365a:	4b05      	ldr	r3, [pc, #20]	; (8013670 <SecureFrame+0xb0>)
 801365c:	801a      	strh	r2, [r3, #0]
            break;
 801365e:	e001      	b.n	8013664 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013660:	2303      	movs	r3, #3
 8013662:	e000      	b.n	8013666 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	200033f0 	.word	0x200033f0
 8013674:	200034f8 	.word	0x200034f8

08013678 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013678:	b480      	push	{r7}
 801367a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <CalculateBackOff+0x2c>)
 801367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10a      	bne.n	801369a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013684:	4b07      	ldr	r3, [pc, #28]	; (80136a4 <CalculateBackOff+0x2c>)
 8013686:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 801368a:	3b01      	subs	r3, #1
 801368c:	4a06      	ldr	r2, [pc, #24]	; (80136a8 <CalculateBackOff+0x30>)
 801368e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8013692:	fb02 f303 	mul.w	r3, r2, r3
 8013696:	4a03      	ldr	r2, [pc, #12]	; (80136a4 <CalculateBackOff+0x2c>)
 8013698:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801369a:	bf00      	nop
 801369c:	46bd      	mov	sp, r7
 801369e:	bc80      	pop	{r7}
 80136a0:	4770      	bx	lr
 80136a2:	bf00      	nop
 80136a4:	200038f8 	.word	0x200038f8
 80136a8:	200033f0 	.word	0x200033f0

080136ac <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	4603      	mov	r3, r0
 80136b4:	7139      	strb	r1, [r7, #4]
 80136b6:	71fb      	strb	r3, [r7, #7]
 80136b8:	4613      	mov	r3, r2
 80136ba:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80136bc:	79fb      	ldrb	r3, [r7, #7]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d002      	beq.n	80136c8 <RemoveMacCommands+0x1c>
 80136c2:	79fb      	ldrb	r3, [r7, #7]
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d10d      	bne.n	80136e4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80136c8:	79bb      	ldrb	r3, [r7, #6]
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d108      	bne.n	80136e0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80136ce:	793b      	ldrb	r3, [r7, #4]
 80136d0:	f003 0320 	and.w	r3, r3, #32
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d004      	beq.n	80136e4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80136da:	f002 fb61 	bl	8015da0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80136de:	e001      	b.n	80136e4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80136e0:	f002 fb5e 	bl	8015da0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80136e4:	bf00      	nop
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <ResetMacParameters>:


static void ResetMacParameters( void )
{
 80136ec:	b5b0      	push	{r4, r5, r7, lr}
 80136ee:	b08e      	sub	sp, #56	; 0x38
 80136f0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80136f2:	4b68      	ldr	r3, [pc, #416]	; (8013894 <ResetMacParameters+0x1a8>)
 80136f4:	2200      	movs	r2, #0
 80136f6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80136fa:	4b66      	ldr	r3, [pc, #408]	; (8013894 <ResetMacParameters+0x1a8>)
 80136fc:	2200      	movs	r2, #0
 80136fe:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013700:	4b65      	ldr	r3, [pc, #404]	; (8013898 <ResetMacParameters+0x1ac>)
 8013702:	2200      	movs	r2, #0
 8013704:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8013708:	4b63      	ldr	r3, [pc, #396]	; (8013898 <ResetMacParameters+0x1ac>)
 801370a:	2201      	movs	r2, #1
 801370c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013710:	4b61      	ldr	r3, [pc, #388]	; (8013898 <ResetMacParameters+0x1ac>)
 8013712:	2201      	movs	r2, #1
 8013714:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8013718:	4b5f      	ldr	r3, [pc, #380]	; (8013898 <ResetMacParameters+0x1ac>)
 801371a:	2200      	movs	r2, #0
 801371c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8013720:	4b5c      	ldr	r3, [pc, #368]	; (8013894 <ResetMacParameters+0x1a8>)
 8013722:	2200      	movs	r2, #0
 8013724:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013728:	4b5a      	ldr	r3, [pc, #360]	; (8013894 <ResetMacParameters+0x1a8>)
 801372a:	2201      	movs	r2, #1
 801372c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013730:	4b58      	ldr	r3, [pc, #352]	; (8013894 <ResetMacParameters+0x1a8>)
 8013732:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8013736:	4b57      	ldr	r3, [pc, #348]	; (8013894 <ResetMacParameters+0x1a8>)
 8013738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801373c:	4b55      	ldr	r3, [pc, #340]	; (8013894 <ResetMacParameters+0x1a8>)
 801373e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8013742:	4b54      	ldr	r3, [pc, #336]	; (8013894 <ResetMacParameters+0x1a8>)
 8013744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013748:	4b52      	ldr	r3, [pc, #328]	; (8013894 <ResetMacParameters+0x1a8>)
 801374a:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 801374e:	4b51      	ldr	r3, [pc, #324]	; (8013894 <ResetMacParameters+0x1a8>)
 8013750:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013754:	4b4f      	ldr	r3, [pc, #316]	; (8013894 <ResetMacParameters+0x1a8>)
 8013756:	4a4f      	ldr	r2, [pc, #316]	; (8013894 <ResetMacParameters+0x1a8>)
 8013758:	3364      	adds	r3, #100	; 0x64
 801375a:	32a4      	adds	r2, #164	; 0xa4
 801375c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013760:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013764:	4b4b      	ldr	r3, [pc, #300]	; (8013894 <ResetMacParameters+0x1a8>)
 8013766:	4a4b      	ldr	r2, [pc, #300]	; (8013894 <ResetMacParameters+0x1a8>)
 8013768:	336c      	adds	r3, #108	; 0x6c
 801376a:	32ac      	adds	r2, #172	; 0xac
 801376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013770:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013774:	4b47      	ldr	r3, [pc, #284]	; (8013894 <ResetMacParameters+0x1a8>)
 8013776:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 801377a:	4b46      	ldr	r3, [pc, #280]	; (8013894 <ResetMacParameters+0x1a8>)
 801377c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013780:	4b44      	ldr	r3, [pc, #272]	; (8013894 <ResetMacParameters+0x1a8>)
 8013782:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8013786:	4b43      	ldr	r3, [pc, #268]	; (8013894 <ResetMacParameters+0x1a8>)
 8013788:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801378c:	4b41      	ldr	r3, [pc, #260]	; (8013894 <ResetMacParameters+0x1a8>)
 801378e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013792:	4a40      	ldr	r2, [pc, #256]	; (8013894 <ResetMacParameters+0x1a8>)
 8013794:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013796:	4b3f      	ldr	r3, [pc, #252]	; (8013894 <ResetMacParameters+0x1a8>)
 8013798:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801379c:	4a3d      	ldr	r2, [pc, #244]	; (8013894 <ResetMacParameters+0x1a8>)
 801379e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80137a0:	4b3d      	ldr	r3, [pc, #244]	; (8013898 <ResetMacParameters+0x1ac>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80137a8:	4b3a      	ldr	r3, [pc, #232]	; (8013894 <ResetMacParameters+0x1a8>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80137b0:	2301      	movs	r3, #1
 80137b2:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80137b4:	4b39      	ldr	r3, [pc, #228]	; (801389c <ResetMacParameters+0x1b0>)
 80137b6:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80137b8:	4b39      	ldr	r3, [pc, #228]	; (80138a0 <ResetMacParameters+0x1b4>)
 80137ba:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80137bc:	4b35      	ldr	r3, [pc, #212]	; (8013894 <ResetMacParameters+0x1a8>)
 80137be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137c2:	1d3a      	adds	r2, r7, #4
 80137c4:	4611      	mov	r1, r2
 80137c6:	4618      	mov	r0, r3
 80137c8:	f004 f836 	bl	8017838 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80137cc:	4b32      	ldr	r3, [pc, #200]	; (8013898 <ResetMacParameters+0x1ac>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80137d4:	4b30      	ldr	r3, [pc, #192]	; (8013898 <ResetMacParameters+0x1ac>)
 80137d6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80137da:	4b2f      	ldr	r3, [pc, #188]	; (8013898 <ResetMacParameters+0x1ac>)
 80137dc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80137e0:	4b2c      	ldr	r3, [pc, #176]	; (8013894 <ResetMacParameters+0x1a8>)
 80137e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137e4:	4a2c      	ldr	r2, [pc, #176]	; (8013898 <ResetMacParameters+0x1ac>)
 80137e6:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137ea:	4b2a      	ldr	r3, [pc, #168]	; (8013894 <ResetMacParameters+0x1a8>)
 80137ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80137f0:	4b29      	ldr	r3, [pc, #164]	; (8013898 <ResetMacParameters+0x1ac>)
 80137f2:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80137f6:	4b27      	ldr	r3, [pc, #156]	; (8013894 <ResetMacParameters+0x1a8>)
 80137f8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80137fc:	4b26      	ldr	r3, [pc, #152]	; (8013898 <ResetMacParameters+0x1ac>)
 80137fe:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013802:	4b25      	ldr	r3, [pc, #148]	; (8013898 <ResetMacParameters+0x1ac>)
 8013804:	2200      	movs	r2, #0
 8013806:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801380a:	4b23      	ldr	r3, [pc, #140]	; (8013898 <ResetMacParameters+0x1ac>)
 801380c:	2201      	movs	r2, #1
 801380e:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013812:	4a21      	ldr	r2, [pc, #132]	; (8013898 <ResetMacParameters+0x1ac>)
 8013814:	4b20      	ldr	r3, [pc, #128]	; (8013898 <ResetMacParameters+0x1ac>)
 8013816:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801381a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801381e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013822:	682b      	ldr	r3, [r5, #0]
 8013824:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013826:	4b1c      	ldr	r3, [pc, #112]	; (8013898 <ResetMacParameters+0x1ac>)
 8013828:	2201      	movs	r2, #1
 801382a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801382e:	4b1a      	ldr	r3, [pc, #104]	; (8013898 <ResetMacParameters+0x1ac>)
 8013830:	2202      	movs	r2, #2
 8013832:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013836:	2300      	movs	r3, #0
 8013838:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801383a:	2300      	movs	r3, #0
 801383c:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801383e:	4b16      	ldr	r3, [pc, #88]	; (8013898 <ResetMacParameters+0x1ac>)
 8013840:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013844:	2b00      	cmp	r3, #0
 8013846:	d009      	beq.n	801385c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013848:	4b13      	ldr	r3, [pc, #76]	; (8013898 <ResetMacParameters+0x1ac>)
 801384a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013852:	4b11      	ldr	r3, [pc, #68]	; (8013898 <ResetMacParameters+0x1ac>)
 8013854:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801385c:	4b11      	ldr	r3, [pc, #68]	; (80138a4 <ResetMacParameters+0x1b8>)
 801385e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013860:	4b11      	ldr	r3, [pc, #68]	; (80138a8 <ResetMacParameters+0x1bc>)
 8013862:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013864:	4b11      	ldr	r3, [pc, #68]	; (80138ac <ResetMacParameters+0x1c0>)
 8013866:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013868:	4b11      	ldr	r3, [pc, #68]	; (80138b0 <ResetMacParameters+0x1c4>)
 801386a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801386c:	4b11      	ldr	r3, [pc, #68]	; (80138b4 <ResetMacParameters+0x1c8>)
 801386e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013870:	4b11      	ldr	r3, [pc, #68]	; (80138b8 <ResetMacParameters+0x1cc>)
 8013872:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013874:	4b11      	ldr	r3, [pc, #68]	; (80138bc <ResetMacParameters+0x1d0>)
 8013876:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013878:	4b11      	ldr	r3, [pc, #68]	; (80138c0 <ResetMacParameters+0x1d4>)
 801387a:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801387c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013880:	f107 0310 	add.w	r3, r7, #16
 8013884:	4a0f      	ldr	r2, [pc, #60]	; (80138c4 <ResetMacParameters+0x1d8>)
 8013886:	4618      	mov	r0, r3
 8013888:	f001 ffec 	bl	8015864 <LoRaMacClassBInit>
}
 801388c:	bf00      	nop
 801388e:	3738      	adds	r7, #56	; 0x38
 8013890:	46bd      	mov	sp, r7
 8013892:	bdb0      	pop	{r4, r5, r7, pc}
 8013894:	200038f8 	.word	0x200038f8
 8013898:	200033f0 	.word	0x200033f0
 801389c:	20003ad0 	.word	0x20003ad0
 80138a0:	20003b74 	.word	0x20003b74
 80138a4:	20003850 	.word	0x20003850
 80138a8:	2000380c 	.word	0x2000380c
 80138ac:	2000383c 	.word	0x2000383c
 80138b0:	20003871 	.word	0x20003871
 80138b4:	200039c4 	.word	0x200039c4
 80138b8:	20003938 	.word	0x20003938
 80138bc:	2000393c 	.word	0x2000393c
 80138c0:	200039c8 	.word	0x200039c8
 80138c4:	20003ef0 	.word	0x20003ef0

080138c8 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b082      	sub	sp, #8
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f00c f884 	bl	801f9e0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80138d8:	4b0e      	ldr	r3, [pc, #56]	; (8013914 <RxWindowSetup+0x4c>)
 80138da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138dc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80138de:	4b0e      	ldr	r3, [pc, #56]	; (8013918 <RxWindowSetup+0x50>)
 80138e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138e4:	4a0d      	ldr	r2, [pc, #52]	; (801391c <RxWindowSetup+0x54>)
 80138e6:	6839      	ldr	r1, [r7, #0]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f004 f832 	bl	8017952 <RegionRxConfig>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00a      	beq.n	801390a <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80138f4:	4b07      	ldr	r3, [pc, #28]	; (8013914 <RxWindowSetup+0x4c>)
 80138f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f8:	4a07      	ldr	r2, [pc, #28]	; (8013918 <RxWindowSetup+0x50>)
 80138fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80138fc:	4610      	mov	r0, r2
 80138fe:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	7cda      	ldrb	r2, [r3, #19]
 8013904:	4b06      	ldr	r3, [pc, #24]	; (8013920 <RxWindowSetup+0x58>)
 8013906:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801390a:	bf00      	nop
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	080232e4 	.word	0x080232e4
 8013918:	200038f8 	.word	0x200038f8
 801391c:	20003810 	.word	0x20003810
 8013920:	200033f0 	.word	0x200033f0

08013924 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013924:	b590      	push	{r4, r7, lr}
 8013926:	b083      	sub	sp, #12
 8013928:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801392a:	4b18      	ldr	r3, [pc, #96]	; (801398c <OpenContinuousRxCWindow+0x68>)
 801392c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013930:	4b16      	ldr	r3, [pc, #88]	; (801398c <OpenContinuousRxCWindow+0x68>)
 8013932:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013936:	b259      	sxtb	r1, r3
 8013938:	4b14      	ldr	r3, [pc, #80]	; (801398c <OpenContinuousRxCWindow+0x68>)
 801393a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801393e:	4b13      	ldr	r3, [pc, #76]	; (801398c <OpenContinuousRxCWindow+0x68>)
 8013940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013942:	4c13      	ldr	r4, [pc, #76]	; (8013990 <OpenContinuousRxCWindow+0x6c>)
 8013944:	9400      	str	r4, [sp, #0]
 8013946:	f003 ffe1 	bl	801790c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801394a:	4b12      	ldr	r3, [pc, #72]	; (8013994 <OpenContinuousRxCWindow+0x70>)
 801394c:	2202      	movs	r2, #2
 801394e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013952:	4b10      	ldr	r3, [pc, #64]	; (8013994 <OpenContinuousRxCWindow+0x70>)
 8013954:	2201      	movs	r2, #1
 8013956:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801395a:	4b0c      	ldr	r3, [pc, #48]	; (801398c <OpenContinuousRxCWindow+0x68>)
 801395c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013960:	4a0d      	ldr	r2, [pc, #52]	; (8013998 <OpenContinuousRxCWindow+0x74>)
 8013962:	490b      	ldr	r1, [pc, #44]	; (8013990 <OpenContinuousRxCWindow+0x6c>)
 8013964:	4618      	mov	r0, r3
 8013966:	f003 fff4 	bl	8017952 <RegionRxConfig>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d009      	beq.n	8013984 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8013970:	4b0a      	ldr	r3, [pc, #40]	; (801399c <OpenContinuousRxCWindow+0x78>)
 8013972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013974:	2000      	movs	r0, #0
 8013976:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013978:	4b06      	ldr	r3, [pc, #24]	; (8013994 <OpenContinuousRxCWindow+0x70>)
 801397a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801397e:	4b05      	ldr	r3, [pc, #20]	; (8013994 <OpenContinuousRxCWindow+0x70>)
 8013980:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013984:	bf00      	nop
 8013986:	3704      	adds	r7, #4
 8013988:	46bd      	mov	sp, r7
 801398a:	bd90      	pop	{r4, r7, pc}
 801398c:	200038f8 	.word	0x200038f8
 8013990:	200037d0 	.word	0x200037d0
 8013994:	200033f0 	.word	0x200033f0
 8013998:	20003810 	.word	0x20003810
 801399c:	080232e4 	.word	0x080232e4

080139a0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b088      	sub	sp, #32
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	603b      	str	r3, [r7, #0]
 80139ac:	4613      	mov	r3, r2
 80139ae:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80139b0:	4b82      	ldr	r3, [pc, #520]	; (8013bbc <PrepareFrame+0x21c>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80139b6:	4b81      	ldr	r3, [pc, #516]	; (8013bbc <PrepareFrame+0x21c>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80139be:	2300      	movs	r3, #0
 80139c0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d101      	bne.n	80139d4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80139d0:	2300      	movs	r3, #0
 80139d2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80139d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139d6:	461a      	mov	r2, r3
 80139d8:	6839      	ldr	r1, [r7, #0]
 80139da:	4879      	ldr	r0, [pc, #484]	; (8013bc0 <PrepareFrame+0x220>)
 80139dc:	f007 fdc1 	bl	801b562 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80139e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139e2:	b2da      	uxtb	r2, r3
 80139e4:	4b75      	ldr	r3, [pc, #468]	; (8013bbc <PrepareFrame+0x21c>)
 80139e6:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	781a      	ldrb	r2, [r3, #0]
 80139ee:	4b73      	ldr	r3, [pc, #460]	; (8013bbc <PrepareFrame+0x21c>)
 80139f0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	2b07      	cmp	r3, #7
 80139fe:	f000 80b9 	beq.w	8013b74 <PrepareFrame+0x1d4>
 8013a02:	2b07      	cmp	r3, #7
 8013a04:	f300 80d0 	bgt.w	8013ba8 <PrepareFrame+0x208>
 8013a08:	2b02      	cmp	r3, #2
 8013a0a:	d006      	beq.n	8013a1a <PrepareFrame+0x7a>
 8013a0c:	2b04      	cmp	r3, #4
 8013a0e:	f040 80cb 	bne.w	8013ba8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013a12:	4b6a      	ldr	r3, [pc, #424]	; (8013bbc <PrepareFrame+0x21c>)
 8013a14:	2201      	movs	r2, #1
 8013a16:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013a1a:	4b68      	ldr	r3, [pc, #416]	; (8013bbc <PrepareFrame+0x21c>)
 8013a1c:	2204      	movs	r2, #4
 8013a1e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013a22:	4b66      	ldr	r3, [pc, #408]	; (8013bbc <PrepareFrame+0x21c>)
 8013a24:	4a67      	ldr	r2, [pc, #412]	; (8013bc4 <PrepareFrame+0x224>)
 8013a26:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013a2a:	4b64      	ldr	r3, [pc, #400]	; (8013bbc <PrepareFrame+0x21c>)
 8013a2c:	22ff      	movs	r2, #255	; 0xff
 8013a2e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	781a      	ldrb	r2, [r3, #0]
 8013a36:	4b61      	ldr	r3, [pc, #388]	; (8013bbc <PrepareFrame+0x21c>)
 8013a38:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013a3c:	4a5f      	ldr	r2, [pc, #380]	; (8013bbc <PrepareFrame+0x21c>)
 8013a3e:	79fb      	ldrb	r3, [r7, #7]
 8013a40:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013a44:	4b60      	ldr	r3, [pc, #384]	; (8013bc8 <PrepareFrame+0x228>)
 8013a46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013a4a:	4a5c      	ldr	r2, [pc, #368]	; (8013bbc <PrepareFrame+0x21c>)
 8013a4c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	781a      	ldrb	r2, [r3, #0]
 8013a54:	4b59      	ldr	r3, [pc, #356]	; (8013bbc <PrepareFrame+0x21c>)
 8013a56:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013a5a:	4b58      	ldr	r3, [pc, #352]	; (8013bbc <PrepareFrame+0x21c>)
 8013a5c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013a60:	4b56      	ldr	r3, [pc, #344]	; (8013bbc <PrepareFrame+0x21c>)
 8013a62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013a66:	4b55      	ldr	r3, [pc, #340]	; (8013bbc <PrepareFrame+0x21c>)
 8013a68:	4a55      	ldr	r2, [pc, #340]	; (8013bc0 <PrepareFrame+0x220>)
 8013a6a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013a6e:	f107 0318 	add.w	r3, r7, #24
 8013a72:	4618      	mov	r0, r3
 8013a74:	f002 fffe 	bl	8016a74 <LoRaMacCryptoGetFCntUp>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013a7e:	2312      	movs	r3, #18
 8013a80:	e098      	b.n	8013bb4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	4b4d      	ldr	r3, [pc, #308]	; (8013bbc <PrepareFrame+0x21c>)
 8013a88:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8013a8c:	4b4b      	ldr	r3, [pc, #300]	; (8013bbc <PrepareFrame+0x21c>)
 8013a8e:	2200      	movs	r2, #0
 8013a90:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8013a94:	4b49      	ldr	r3, [pc, #292]	; (8013bbc <PrepareFrame+0x21c>)
 8013a96:	2200      	movs	r2, #0
 8013a98:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	4a47      	ldr	r2, [pc, #284]	; (8013bbc <PrepareFrame+0x21c>)
 8013aa0:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013aa4:	f107 0314 	add.w	r3, r7, #20
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f002 f99b 	bl	8015de4 <LoRaMacCommandsGetSizeSerializedCmds>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ab4:	2313      	movs	r3, #19
 8013ab6:	e07d      	b.n	8013bb4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d076      	beq.n	8013bac <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013abe:	4b42      	ldr	r3, [pc, #264]	; (8013bc8 <PrepareFrame+0x228>)
 8013ac0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fe fdab 	bl	8012620 <GetMaxAppPayloadWithoutFOptsLength>
 8013aca:	4603      	mov	r3, r0
 8013acc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013ace:	4b3b      	ldr	r3, [pc, #236]	; (8013bbc <PrepareFrame+0x21c>)
 8013ad0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d01d      	beq.n	8013b14 <PrepareFrame+0x174>
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	2b0f      	cmp	r3, #15
 8013adc:	d81a      	bhi.n	8013b14 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013ade:	f107 0314 	add.w	r3, r7, #20
 8013ae2:	4a3a      	ldr	r2, [pc, #232]	; (8013bcc <PrepareFrame+0x22c>)
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	200f      	movs	r0, #15
 8013ae8:	f002 f992 	bl	8015e10 <LoRaMacCommandsSerializeCmds>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013af2:	2313      	movs	r3, #19
 8013af4:	e05e      	b.n	8013bb4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	f003 030f 	and.w	r3, r3, #15
 8013afc:	b2d9      	uxtb	r1, r3
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	7813      	ldrb	r3, [r2, #0]
 8013b02:	f361 0303 	bfi	r3, r1, #0, #4
 8013b06:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	781a      	ldrb	r2, [r3, #0]
 8013b0c:	4b2b      	ldr	r3, [pc, #172]	; (8013bbc <PrepareFrame+0x21c>)
 8013b0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013b12:	e04b      	b.n	8013bac <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b14:	4b29      	ldr	r3, [pc, #164]	; (8013bbc <PrepareFrame+0x21c>)
 8013b16:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d010      	beq.n	8013b40 <PrepareFrame+0x1a0>
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	2b0f      	cmp	r3, #15
 8013b22:	d90d      	bls.n	8013b40 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b24:	7ffb      	ldrb	r3, [r7, #31]
 8013b26:	f107 0114 	add.w	r1, r7, #20
 8013b2a:	4a29      	ldr	r2, [pc, #164]	; (8013bd0 <PrepareFrame+0x230>)
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f002 f96f 	bl	8015e10 <LoRaMacCommandsSerializeCmds>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d001      	beq.n	8013b3c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b38:	2313      	movs	r3, #19
 8013b3a:	e03b      	b.n	8013bb4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013b3c:	230a      	movs	r3, #10
 8013b3e:	e039      	b.n	8013bb4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b40:	7ffb      	ldrb	r3, [r7, #31]
 8013b42:	f107 0114 	add.w	r1, r7, #20
 8013b46:	4a22      	ldr	r2, [pc, #136]	; (8013bd0 <PrepareFrame+0x230>)
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f002 f961 	bl	8015e10 <LoRaMacCommandsSerializeCmds>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d001      	beq.n	8013b58 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b54:	2313      	movs	r3, #19
 8013b56:	e02d      	b.n	8013bb4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013b58:	4b18      	ldr	r3, [pc, #96]	; (8013bbc <PrepareFrame+0x21c>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013b60:	4b16      	ldr	r3, [pc, #88]	; (8013bbc <PrepareFrame+0x21c>)
 8013b62:	4a1b      	ldr	r2, [pc, #108]	; (8013bd0 <PrepareFrame+0x230>)
 8013b64:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	b2da      	uxtb	r2, r3
 8013b6c:	4b13      	ldr	r3, [pc, #76]	; (8013bbc <PrepareFrame+0x21c>)
 8013b6e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013b72:	e01b      	b.n	8013bac <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d01a      	beq.n	8013bb0 <PrepareFrame+0x210>
 8013b7a:	4b10      	ldr	r3, [pc, #64]	; (8013bbc <PrepareFrame+0x21c>)
 8013b7c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d015      	beq.n	8013bb0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013b84:	4813      	ldr	r0, [pc, #76]	; (8013bd4 <PrepareFrame+0x234>)
 8013b86:	4b0d      	ldr	r3, [pc, #52]	; (8013bbc <PrepareFrame+0x21c>)
 8013b88:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	461a      	mov	r2, r3
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	f007 fce6 	bl	801b562 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013b96:	4b09      	ldr	r3, [pc, #36]	; (8013bbc <PrepareFrame+0x21c>)
 8013b98:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	b29a      	uxth	r2, r3
 8013ba2:	4b06      	ldr	r3, [pc, #24]	; (8013bbc <PrepareFrame+0x21c>)
 8013ba4:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013ba6:	e003      	b.n	8013bb0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013ba8:	2302      	movs	r3, #2
 8013baa:	e003      	b.n	8013bb4 <PrepareFrame+0x214>
            break;
 8013bac:	bf00      	nop
 8013bae:	e000      	b.n	8013bb2 <PrepareFrame+0x212>
            break;
 8013bb0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3720      	adds	r7, #32
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	200033f0 	.word	0x200033f0
 8013bc0:	20003528 	.word	0x20003528
 8013bc4:	200033f2 	.word	0x200033f2
 8013bc8:	200038f8 	.word	0x200038f8
 8013bcc:	20003508 	.word	0x20003508
 8013bd0:	20003878 	.word	0x20003878
 8013bd4:	200033f3 	.word	0x200033f3

08013bd8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b08a      	sub	sp, #40	; 0x28
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	4603      	mov	r3, r0
 8013be0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013be2:	2303      	movs	r3, #3
 8013be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013be8:	2300      	movs	r3, #0
 8013bea:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013bec:	79fb      	ldrb	r3, [r7, #7]
 8013bee:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013bf0:	4b47      	ldr	r3, [pc, #284]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013bf2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013bf6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013bf8:	4b45      	ldr	r3, [pc, #276]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013bfa:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bfe:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013c00:	4b43      	ldr	r3, [pc, #268]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c04:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013c06:	4b42      	ldr	r3, [pc, #264]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c0a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013c0c:	4b41      	ldr	r3, [pc, #260]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013c12:	4b3f      	ldr	r3, [pc, #252]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013c18:	f107 020f 	add.w	r2, r7, #15
 8013c1c:	f107 0110 	add.w	r1, r7, #16
 8013c20:	4b3d      	ldr	r3, [pc, #244]	; (8013d18 <SendFrameOnChannel+0x140>)
 8013c22:	f003 feb4 	bl	801798e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c26:	4b3b      	ldr	r3, [pc, #236]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c28:	2201      	movs	r2, #1
 8013c2a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c2e:	4b38      	ldr	r3, [pc, #224]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c30:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	4b37      	ldr	r3, [pc, #220]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c38:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8013c3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013c40:	4b34      	ldr	r3, [pc, #208]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c42:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8013c46:	79fb      	ldrb	r3, [r7, #7]
 8013c48:	4a32      	ldr	r2, [pc, #200]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c4a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c4e:	4b31      	ldr	r3, [pc, #196]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c50:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c54:	4a2f      	ldr	r2, [pc, #188]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c56:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c5a:	4b2e      	ldr	r3, [pc, #184]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c5c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c60:	4a2c      	ldr	r2, [pc, #176]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c62:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013c66:	f001 fe69 	bl	801593c <LoRaMacClassBIsBeaconModeActive>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00b      	beq.n	8013c88 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013c70:	4b28      	ldr	r3, [pc, #160]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013c72:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c76:	4618      	mov	r0, r3
 8013c78:	f001 fecb 	bl	8015a12 <LoRaMacClassBIsUplinkCollision>
 8013c7c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013c7e:	6a3b      	ldr	r3, [r7, #32]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d001      	beq.n	8013c88 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013c84:	2310      	movs	r3, #16
 8013c86:	e03e      	b.n	8013d06 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013c88:	4b21      	ldr	r3, [pc, #132]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c8a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d101      	bne.n	8013c96 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013c92:	f001 fec8 	bl	8015a26 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013c96:	f001 fe62 	bl	801595e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013c9a:	4b1d      	ldr	r3, [pc, #116]	; (8013d10 <SendFrameOnChannel+0x138>)
 8013c9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	4a1c      	ldr	r2, [pc, #112]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013ca4:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8013ca8:	4611      	mov	r1, r2
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7ff fc88 	bl	80135c0 <SecureFrame>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d002      	beq.n	8013cc4 <SendFrameOnChannel+0xec>
    {
        return status;
 8013cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cc2:	e020      	b.n	8013d06 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013cc4:	4b13      	ldr	r3, [pc, #76]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013cc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013cca:	f043 0302 	orr.w	r3, r3, #2
 8013cce:	4a11      	ldr	r2, [pc, #68]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013cd0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8013cd4:	4b0f      	ldr	r3, [pc, #60]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013cd6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8013cda:	f083 0301 	eor.w	r3, r3, #1
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d007      	beq.n	8013cf4 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013ce4:	4b0b      	ldr	r3, [pc, #44]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013ce6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013cea:	3301      	adds	r3, #1
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	4b09      	ldr	r3, [pc, #36]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013cf0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013cf4:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <SendFrameOnChannel+0x144>)
 8013cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cf8:	4a06      	ldr	r2, [pc, #24]	; (8013d14 <SendFrameOnChannel+0x13c>)
 8013cfa:	8812      	ldrh	r2, [r2, #0]
 8013cfc:	b2d2      	uxtb	r2, r2
 8013cfe:	4611      	mov	r1, r2
 8013d00:	4807      	ldr	r0, [pc, #28]	; (8013d20 <SendFrameOnChannel+0x148>)
 8013d02:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3728      	adds	r7, #40	; 0x28
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	200038f8 	.word	0x200038f8
 8013d14:	200033f0 	.word	0x200033f0
 8013d18:	20003808 	.word	0x20003808
 8013d1c:	080232e4 	.word	0x080232e4
 8013d20:	200033f2 	.word	0x200033f2

08013d24 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013d2e:	4b15      	ldr	r3, [pc, #84]	; (8013d84 <SetTxContinuousWave+0x60>)
 8013d30:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013d34:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013d36:	4b14      	ldr	r3, [pc, #80]	; (8013d88 <SetTxContinuousWave+0x64>)
 8013d38:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013d3c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013d3e:	4b12      	ldr	r3, [pc, #72]	; (8013d88 <SetTxContinuousWave+0x64>)
 8013d40:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013d44:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013d46:	4b10      	ldr	r3, [pc, #64]	; (8013d88 <SetTxContinuousWave+0x64>)
 8013d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d4a:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013d4c:	4b0e      	ldr	r3, [pc, #56]	; (8013d88 <SetTxContinuousWave+0x64>)
 8013d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d50:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013d52:	88fb      	ldrh	r3, [r7, #6]
 8013d54:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013d56:	4b0c      	ldr	r3, [pc, #48]	; (8013d88 <SetTxContinuousWave+0x64>)
 8013d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d5c:	f107 0208 	add.w	r2, r7, #8
 8013d60:	4611      	mov	r1, r2
 8013d62:	4618      	mov	r0, r3
 8013d64:	f003 ff10 	bl	8017b88 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d68:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <SetTxContinuousWave+0x60>)
 8013d6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d6e:	f043 0302 	orr.w	r3, r3, #2
 8013d72:	4a04      	ldr	r2, [pc, #16]	; (8013d84 <SetTxContinuousWave+0x60>)
 8013d74:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013d78:	2300      	movs	r3, #0
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3718      	adds	r7, #24
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	200033f0 	.word	0x200033f0
 8013d88:	200038f8 	.word	0x200038f8

08013d8c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	6039      	str	r1, [r7, #0]
 8013d96:	80fb      	strh	r3, [r7, #6]
 8013d98:	4613      	mov	r3, r2
 8013d9a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013d9c:	4b09      	ldr	r3, [pc, #36]	; (8013dc4 <SetTxContinuousWave1+0x38>)
 8013d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013da0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013da4:	88fa      	ldrh	r2, [r7, #6]
 8013da6:	6838      	ldr	r0, [r7, #0]
 8013da8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013daa:	4b07      	ldr	r3, [pc, #28]	; (8013dc8 <SetTxContinuousWave1+0x3c>)
 8013dac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013db0:	f043 0302 	orr.w	r3, r3, #2
 8013db4:	4a04      	ldr	r2, [pc, #16]	; (8013dc8 <SetTxContinuousWave1+0x3c>)
 8013db6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013dba:	2300      	movs	r3, #0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	080232e4 	.word	0x080232e4
 8013dc8:	200033f0 	.word	0x200033f0

08013dcc <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8013dcc:	b480      	push	{r7}
 8013dce:	af00      	add	r7, sp, #0
    return &Nvm;
 8013dd0:	4b02      	ldr	r3, [pc, #8]	; (8013ddc <GetNvmData+0x10>)
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bc80      	pop	{r7}
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	200038f8 	.word	0x200038f8

08013de0 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8013de8:	2300      	movs	r3, #0
 8013dea:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013df2:	2303      	movs	r3, #3
 8013df4:	e09a      	b.n	8013f2c <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013df6:	4b4f      	ldr	r3, [pc, #316]	; (8013f34 <RestoreNvmData+0x154>)
 8013df8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d001      	beq.n	8013e04 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8013e00:	2301      	movs	r3, #1
 8013e02:	e093      	b.n	8013f2c <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2124      	movs	r1, #36	; 0x24
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f007 fbff 	bl	801b60c <Crc32>
 8013e0e:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d105      	bne.n	8013e26 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2228      	movs	r2, #40	; 0x28
 8013e1e:	4619      	mov	r1, r3
 8013e20:	4845      	ldr	r0, [pc, #276]	; (8013f38 <RestoreNvmData+0x158>)
 8013e22:	f007 fb9e 	bl	801b562 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	3328      	adds	r3, #40	; 0x28
 8013e2a:	2114      	movs	r1, #20
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f007 fbed 	bl	801b60c <Crc32>
 8013e32:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d106      	bne.n	8013e4c <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	3328      	adds	r3, #40	; 0x28
 8013e42:	2218      	movs	r2, #24
 8013e44:	4619      	mov	r1, r3
 8013e46:	483d      	ldr	r0, [pc, #244]	; (8013f3c <RestoreNvmData+0x15c>)
 8013e48:	f007 fb8b 	bl	801b562 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	3340      	adds	r3, #64	; 0x40
 8013e50:	21d4      	movs	r1, #212	; 0xd4
 8013e52:	4618      	mov	r0, r3
 8013e54:	f007 fbda 	bl	801b60c <Crc32>
 8013e58:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d11f      	bne.n	8013ea6 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	3340      	adds	r3, #64	; 0x40
 8013e6a:	22d8      	movs	r2, #216	; 0xd8
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4834      	ldr	r0, [pc, #208]	; (8013f40 <RestoreNvmData+0x160>)
 8013e70:	f007 fb77 	bl	801b562 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013e74:	4b2f      	ldr	r3, [pc, #188]	; (8013f34 <RestoreNvmData+0x154>)
 8013e76:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013e7a:	4b2e      	ldr	r3, [pc, #184]	; (8013f34 <RestoreNvmData+0x154>)
 8013e7c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013e80:	4b2d      	ldr	r3, [pc, #180]	; (8013f38 <RestoreNvmData+0x158>)
 8013e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e84:	4a2b      	ldr	r2, [pc, #172]	; (8013f34 <RestoreNvmData+0x154>)
 8013e86:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013e8a:	4b2b      	ldr	r3, [pc, #172]	; (8013f38 <RestoreNvmData+0x158>)
 8013e8c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013e90:	4b28      	ldr	r3, [pc, #160]	; (8013f34 <RestoreNvmData+0x154>)
 8013e92:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8013e96:	4b27      	ldr	r3, [pc, #156]	; (8013f34 <RestoreNvmData+0x154>)
 8013e98:	2201      	movs	r2, #1
 8013e9a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013e9e:	4b25      	ldr	r3, [pc, #148]	; (8013f34 <RestoreNvmData+0x154>)
 8013ea0:	2202      	movs	r2, #2
 8013ea2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013eac:	21bc      	movs	r1, #188	; 0xbc
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f007 fbac 	bl	801b60c <Crc32>
 8013eb4:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8013ebc:	68fa      	ldr	r2, [r7, #12]
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d107      	bne.n	8013ed2 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013ec8:	22c0      	movs	r2, #192	; 0xc0
 8013eca:	4619      	mov	r1, r3
 8013ecc:	481d      	ldr	r0, [pc, #116]	; (8013f44 <RestoreNvmData+0x164>)
 8013ece:	f007 fb48 	bl	801b562 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013ed8:	21a0      	movs	r1, #160	; 0xa0
 8013eda:	4618      	mov	r0, r3
 8013edc:	f007 fb96 	bl	801b60c <Crc32>
 8013ee0:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d107      	bne.n	8013efe <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013ef4:	22a4      	movs	r2, #164	; 0xa4
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	4813      	ldr	r0, [pc, #76]	; (8013f48 <RestoreNvmData+0x168>)
 8013efa:	f007 fb32 	bl	801b562 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8013f04:	2114      	movs	r1, #20
 8013f06:	4618      	mov	r0, r3
 8013f08:	f007 fb80 	bl	801b60c <Crc32>
 8013f0c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8013f14:	68fa      	ldr	r2, [r7, #12]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d107      	bne.n	8013f2a <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8013f20:	2218      	movs	r2, #24
 8013f22:	4619      	mov	r1, r3
 8013f24:	4809      	ldr	r0, [pc, #36]	; (8013f4c <RestoreNvmData+0x16c>)
 8013f26:	f007 fb1c 	bl	801b562 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8013f2a:	2300      	movs	r3, #0
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3710      	adds	r7, #16
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	200033f0 	.word	0x200033f0
 8013f38:	200038f8 	.word	0x200038f8
 8013f3c:	20003920 	.word	0x20003920
 8013f40:	20003938 	.word	0x20003938
 8013f44:	20003a10 	.word	0x20003a10
 8013f48:	20003ad0 	.word	0x20003ad0
 8013f4c:	20003ef0 	.word	0x20003ef0

08013f50 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013f50:	b480      	push	{r7}
 8013f52:	b083      	sub	sp, #12
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <DetermineFrameType+0x16>
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d101      	bne.n	8013f6a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f66:	2303      	movs	r3, #3
 8013f68:	e03b      	b.n	8013fe2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	7b1b      	ldrb	r3, [r3, #12]
 8013f6e:	f003 030f 	and.w	r3, r3, #15
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d008      	beq.n	8013f8a <DetermineFrameType+0x3a>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	2200      	movs	r2, #0
 8013f86:	701a      	strb	r2, [r3, #0]
 8013f88:	e02a      	b.n	8013fe0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d103      	bne.n	8013f9c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	2201      	movs	r2, #1
 8013f98:	701a      	strb	r2, [r3, #0]
 8013f9a:	e021      	b.n	8013fe0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	7b1b      	ldrb	r3, [r3, #12]
 8013fa0:	f003 030f 	and.w	r3, r3, #15
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d108      	bne.n	8013fbc <DetermineFrameType+0x6c>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d103      	bne.n	8013fbc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	2202      	movs	r2, #2
 8013fb8:	701a      	strb	r2, [r3, #0]
 8013fba:	e011      	b.n	8013fe0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	7b1b      	ldrb	r3, [r3, #12]
 8013fc0:	f003 030f 	and.w	r3, r3, #15
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d108      	bne.n	8013fdc <DetermineFrameType+0x8c>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d003      	beq.n	8013fdc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	2203      	movs	r2, #3
 8013fd8:	701a      	strb	r2, [r3, #0]
 8013fda:	e001      	b.n	8013fe0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013fdc:	2317      	movs	r3, #23
 8013fde:	e000      	b.n	8013fe2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	370c      	adds	r7, #12
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bc80      	pop	{r7}
 8013fea:	4770      	bx	lr

08013fec <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013fec:	b480      	push	{r7}
 8013fee:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013ff0:	4b12      	ldr	r3, [pc, #72]	; (801403c <CheckRetransUnconfirmedUplink+0x50>)
 8013ff2:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013ff6:	4b12      	ldr	r3, [pc, #72]	; (8014040 <CheckRetransUnconfirmedUplink+0x54>)
 8013ff8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d301      	bcc.n	8014004 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8014000:	2301      	movs	r3, #1
 8014002:	e016      	b.n	8014032 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014004:	4b0d      	ldr	r3, [pc, #52]	; (801403c <CheckRetransUnconfirmedUplink+0x50>)
 8014006:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801400a:	f003 0302 	and.w	r3, r3, #2
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00d      	beq.n	8014030 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014014:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <CheckRetransUnconfirmedUplink+0x54>)
 8014016:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801401a:	2b00      	cmp	r3, #0
 801401c:	d101      	bne.n	8014022 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801401e:	2301      	movs	r3, #1
 8014020:	e007      	b.n	8014032 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8014022:	4b06      	ldr	r3, [pc, #24]	; (801403c <CheckRetransUnconfirmedUplink+0x50>)
 8014024:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8014028:	2b00      	cmp	r3, #0
 801402a:	d101      	bne.n	8014030 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801402c:	2301      	movs	r3, #1
 801402e:	e000      	b.n	8014032 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8014030:	2300      	movs	r3, #0
}
 8014032:	4618      	mov	r0, r3
 8014034:	46bd      	mov	sp, r7
 8014036:	bc80      	pop	{r7}
 8014038:	4770      	bx	lr
 801403a:	bf00      	nop
 801403c:	200033f0 	.word	0x200033f0
 8014040:	200038f8 	.word	0x200038f8

08014044 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8014044:	b480      	push	{r7}
 8014046:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8014048:	4b0e      	ldr	r3, [pc, #56]	; (8014084 <CheckRetransConfirmedUplink+0x40>)
 801404a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801404e:	4b0d      	ldr	r3, [pc, #52]	; (8014084 <CheckRetransConfirmedUplink+0x40>)
 8014050:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8014054:	429a      	cmp	r2, r3
 8014056:	d301      	bcc.n	801405c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8014058:	2301      	movs	r3, #1
 801405a:	e00f      	b.n	801407c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801405c:	4b09      	ldr	r3, [pc, #36]	; (8014084 <CheckRetransConfirmedUplink+0x40>)
 801405e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014062:	f003 0302 	and.w	r3, r3, #2
 8014066:	b2db      	uxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	d006      	beq.n	801407a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801406c:	4b05      	ldr	r3, [pc, #20]	; (8014084 <CheckRetransConfirmedUplink+0x40>)
 801406e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8014072:	2b00      	cmp	r3, #0
 8014074:	d001      	beq.n	801407a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8014076:	2301      	movs	r3, #1
 8014078:	e000      	b.n	801407c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	46bd      	mov	sp, r7
 8014080:	bc80      	pop	{r7}
 8014082:	4770      	bx	lr
 8014084:	200033f0 	.word	0x200033f0

08014088 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8014088:	b480      	push	{r7}
 801408a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801408c:	4b1a      	ldr	r3, [pc, #104]	; (80140f8 <StopRetransmission+0x70>)
 801408e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014092:	f003 0302 	and.w	r3, r3, #2
 8014096:	b2db      	uxtb	r3, r3
 8014098:	2b00      	cmp	r3, #0
 801409a:	d009      	beq.n	80140b0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801409c:	4b16      	ldr	r3, [pc, #88]	; (80140f8 <StopRetransmission+0x70>)
 801409e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d00e      	beq.n	80140c4 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80140a6:	4b14      	ldr	r3, [pc, #80]	; (80140f8 <StopRetransmission+0x70>)
 80140a8:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d009      	beq.n	80140c4 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80140b0:	4b12      	ldr	r3, [pc, #72]	; (80140fc <StopRetransmission+0x74>)
 80140b2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d004      	beq.n	80140c4 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80140ba:	4b10      	ldr	r3, [pc, #64]	; (80140fc <StopRetransmission+0x74>)
 80140bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140be:	3301      	adds	r3, #1
 80140c0:	4a0e      	ldr	r2, [pc, #56]	; (80140fc <StopRetransmission+0x74>)
 80140c2:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80140c4:	4b0c      	ldr	r3, [pc, #48]	; (80140f8 <StopRetransmission+0x70>)
 80140c6:	2200      	movs	r2, #0
 80140c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80140cc:	4b0a      	ldr	r3, [pc, #40]	; (80140f8 <StopRetransmission+0x70>)
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80140d4:	4b08      	ldr	r3, [pc, #32]	; (80140f8 <StopRetransmission+0x70>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80140dc:	4b06      	ldr	r3, [pc, #24]	; (80140f8 <StopRetransmission+0x70>)
 80140de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140e2:	f023 0302 	bic.w	r3, r3, #2
 80140e6:	4a04      	ldr	r2, [pc, #16]	; (80140f8 <StopRetransmission+0x70>)
 80140e8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80140ec:	2301      	movs	r3, #1
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bc80      	pop	{r7}
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	200033f0 	.word	0x200033f0
 80140fc:	200038f8 	.word	0x200038f8

08014100 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	4603      	mov	r3, r0
 8014108:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801410a:	4b0b      	ldr	r3, [pc, #44]	; (8014138 <CallNvmDataChangeCallback+0x38>)
 801410c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00c      	beq.n	801412e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8014114:	4b08      	ldr	r3, [pc, #32]	; (8014138 <CallNvmDataChangeCallback+0x38>)
 8014116:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801411a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801411c:	2b00      	cmp	r3, #0
 801411e:	d006      	beq.n	801412e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8014120:	4b05      	ldr	r3, [pc, #20]	; (8014138 <CallNvmDataChangeCallback+0x38>)
 8014122:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	88fa      	ldrh	r2, [r7, #6]
 801412a:	4610      	mov	r0, r2
 801412c:	4798      	blx	r3
    }
}
 801412e:	bf00      	nop
 8014130:	3708      	adds	r7, #8
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	200033f0 	.word	0x200033f0

0801413c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8014142:	4b1b      	ldr	r3, [pc, #108]	; (80141b0 <AckTimeoutRetriesProcess+0x74>)
 8014144:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014148:	4b19      	ldr	r3, [pc, #100]	; (80141b0 <AckTimeoutRetriesProcess+0x74>)
 801414a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801414e:	429a      	cmp	r2, r3
 8014150:	d229      	bcs.n	80141a6 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8014152:	4b17      	ldr	r3, [pc, #92]	; (80141b0 <AckTimeoutRetriesProcess+0x74>)
 8014154:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8014158:	3301      	adds	r3, #1
 801415a:	b2da      	uxtb	r2, r3
 801415c:	4b14      	ldr	r3, [pc, #80]	; (80141b0 <AckTimeoutRetriesProcess+0x74>)
 801415e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8014162:	4b13      	ldr	r3, [pc, #76]	; (80141b0 <AckTimeoutRetriesProcess+0x74>)
 8014164:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8014168:	f003 0301 	and.w	r3, r3, #1
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b00      	cmp	r3, #0
 8014170:	d019      	beq.n	80141a6 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014172:	2322      	movs	r3, #34	; 0x22
 8014174:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014176:	4b0f      	ldr	r3, [pc, #60]	; (80141b4 <AckTimeoutRetriesProcess+0x78>)
 8014178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801417c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801417e:	4b0d      	ldr	r3, [pc, #52]	; (80141b4 <AckTimeoutRetriesProcess+0x78>)
 8014180:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014184:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014186:	4b0b      	ldr	r3, [pc, #44]	; (80141b4 <AckTimeoutRetriesProcess+0x78>)
 8014188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801418c:	f107 0208 	add.w	r2, r7, #8
 8014190:	4611      	mov	r1, r2
 8014192:	4618      	mov	r0, r3
 8014194:	f003 fb19 	bl	80177ca <RegionGetPhyParam>
 8014198:	4603      	mov	r3, r0
 801419a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	b25a      	sxtb	r2, r3
 80141a0:	4b04      	ldr	r3, [pc, #16]	; (80141b4 <AckTimeoutRetriesProcess+0x78>)
 80141a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80141a6:	bf00      	nop
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	200033f0 	.word	0x200033f0
 80141b4:	200038f8 	.word	0x200038f8

080141b8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80141be:	4b14      	ldr	r3, [pc, #80]	; (8014210 <AckTimeoutRetriesFinalize+0x58>)
 80141c0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80141c4:	f083 0301 	eor.w	r3, r3, #1
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d015      	beq.n	80141fa <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80141ce:	2302      	movs	r3, #2
 80141d0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80141d2:	4b10      	ldr	r3, [pc, #64]	; (8014214 <AckTimeoutRetriesFinalize+0x5c>)
 80141d4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80141d6:	4b10      	ldr	r3, [pc, #64]	; (8014218 <AckTimeoutRetriesFinalize+0x60>)
 80141d8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80141da:	4b10      	ldr	r3, [pc, #64]	; (801421c <AckTimeoutRetriesFinalize+0x64>)
 80141dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80141e0:	1d3a      	adds	r2, r7, #4
 80141e2:	4611      	mov	r1, r2
 80141e4:	4618      	mov	r0, r3
 80141e6:	f003 fb27 	bl	8017838 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80141ea:	4b09      	ldr	r3, [pc, #36]	; (8014210 <AckTimeoutRetriesFinalize+0x58>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80141f2:	4b07      	ldr	r3, [pc, #28]	; (8014210 <AckTimeoutRetriesFinalize+0x58>)
 80141f4:	2200      	movs	r2, #0
 80141f6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80141fa:	4b05      	ldr	r3, [pc, #20]	; (8014210 <AckTimeoutRetriesFinalize+0x58>)
 80141fc:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014200:	4b03      	ldr	r3, [pc, #12]	; (8014210 <AckTimeoutRetriesFinalize+0x58>)
 8014202:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8014206:	bf00      	nop
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	200033f0 	.word	0x200033f0
 8014214:	20003ad0 	.word	0x20003ad0
 8014218:	20003b74 	.word	0x20003b74
 801421c:	200038f8 	.word	0x200038f8

08014220 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8014220:	b480      	push	{r7}
 8014222:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014224:	4b0b      	ldr	r3, [pc, #44]	; (8014254 <IsRequestPending+0x34>)
 8014226:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801422a:	f003 0304 	and.w	r3, r3, #4
 801422e:	b2db      	uxtb	r3, r3
 8014230:	2b00      	cmp	r3, #0
 8014232:	d107      	bne.n	8014244 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8014234:	4b07      	ldr	r3, [pc, #28]	; (8014254 <IsRequestPending+0x34>)
 8014236:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801423a:	f003 0301 	and.w	r3, r3, #1
 801423e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014240:	2b00      	cmp	r3, #0
 8014242:	d001      	beq.n	8014248 <IsRequestPending+0x28>
    {
        return 1;
 8014244:	2301      	movs	r3, #1
 8014246:	e000      	b.n	801424a <IsRequestPending+0x2a>
    }
    return 0;
 8014248:	2300      	movs	r3, #0
}
 801424a:	4618      	mov	r0, r3
 801424c:	46bd      	mov	sp, r7
 801424e:	bc80      	pop	{r7}
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	200033f0 	.word	0x200033f0

08014258 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8014258:	b590      	push	{r4, r7, lr}
 801425a:	b08f      	sub	sp, #60	; 0x3c
 801425c:	af02      	add	r7, sp, #8
 801425e:	6178      	str	r0, [r7, #20]
 8014260:	6139      	str	r1, [r7, #16]
 8014262:	4613      	mov	r3, r2
 8014264:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d002      	beq.n	8014272 <LoRaMacInitialization+0x1a>
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d101      	bne.n	8014276 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014272:	2303      	movs	r3, #3
 8014274:	e275      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00b      	beq.n	8014296 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8014282:	2b00      	cmp	r3, #0
 8014284:	d007      	beq.n	8014296 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801428a:	2b00      	cmp	r3, #0
 801428c:	d003      	beq.n	8014296 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8014292:	2b00      	cmp	r3, #0
 8014294:	d101      	bne.n	801429a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014296:	2303      	movs	r3, #3
 8014298:	e263      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801429a:	7bfb      	ldrb	r3, [r7, #15]
 801429c:	4618      	mov	r0, r3
 801429e:	f003 fa7f 	bl	80177a0 <RegionIsActive>
 80142a2:	4603      	mov	r3, r0
 80142a4:	f083 0301 	eor.w	r3, r3, #1
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d001      	beq.n	80142b2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80142ae:	2309      	movs	r3, #9
 80142b0:	e257      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80142b2:	6978      	ldr	r0, [r7, #20]
 80142b4:	f001 fef6 	bl	80160a4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80142b8:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80142bc:	2100      	movs	r1, #0
 80142be:	48c7      	ldr	r0, [pc, #796]	; (80145dc <LoRaMacInitialization+0x384>)
 80142c0:	f007 f98a 	bl	801b5d8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80142c4:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80142c8:	2100      	movs	r1, #0
 80142ca:	48c5      	ldr	r0, [pc, #788]	; (80145e0 <LoRaMacInitialization+0x388>)
 80142cc:	f007 f984 	bl	801b5d8 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80142d0:	4bc3      	ldr	r3, [pc, #780]	; (80145e0 <LoRaMacInitialization+0x388>)
 80142d2:	2201      	movs	r2, #1
 80142d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80142d8:	4bc1      	ldr	r3, [pc, #772]	; (80145e0 <LoRaMacInitialization+0x388>)
 80142da:	2201      	movs	r2, #1
 80142dc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 80142e0:	4abe      	ldr	r2, [pc, #760]	; (80145dc <LoRaMacInitialization+0x384>)
 80142e2:	7bfb      	ldrb	r3, [r7, #15]
 80142e4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80142e8:	4bbc      	ldr	r3, [pc, #752]	; (80145dc <LoRaMacInitialization+0x384>)
 80142ea:	2200      	movs	r2, #0
 80142ec:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80142f0:	4bba      	ldr	r3, [pc, #744]	; (80145dc <LoRaMacInitialization+0x384>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80142f8:	4bb8      	ldr	r3, [pc, #736]	; (80145dc <LoRaMacInitialization+0x384>)
 80142fa:	4aba      	ldr	r2, [pc, #744]	; (80145e4 <LoRaMacInitialization+0x38c>)
 80142fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014300:	230f      	movs	r3, #15
 8014302:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014306:	4bb5      	ldr	r3, [pc, #724]	; (80145dc <LoRaMacInitialization+0x384>)
 8014308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801430c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014310:	4611      	mov	r1, r2
 8014312:	4618      	mov	r0, r3
 8014314:	f003 fa59 	bl	80177ca <RegionGetPhyParam>
 8014318:	4603      	mov	r3, r0
 801431a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	2b00      	cmp	r3, #0
 8014320:	bf14      	ite	ne
 8014322:	2301      	movne	r3, #1
 8014324:	2300      	moveq	r3, #0
 8014326:	b2da      	uxtb	r2, r3
 8014328:	4bac      	ldr	r3, [pc, #688]	; (80145dc <LoRaMacInitialization+0x384>)
 801432a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801432e:	230a      	movs	r3, #10
 8014330:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014334:	4ba9      	ldr	r3, [pc, #676]	; (80145dc <LoRaMacInitialization+0x384>)
 8014336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801433a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f003 fa42 	bl	80177ca <RegionGetPhyParam>
 8014346:	4603      	mov	r3, r0
 8014348:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	b25a      	sxtb	r2, r3
 801434e:	4ba3      	ldr	r3, [pc, #652]	; (80145dc <LoRaMacInitialization+0x384>)
 8014350:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8014354:	2306      	movs	r3, #6
 8014356:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801435a:	4ba0      	ldr	r3, [pc, #640]	; (80145dc <LoRaMacInitialization+0x384>)
 801435c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014360:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014364:	4611      	mov	r1, r2
 8014366:	4618      	mov	r0, r3
 8014368:	f003 fa2f 	bl	80177ca <RegionGetPhyParam>
 801436c:	4603      	mov	r3, r0
 801436e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	b25a      	sxtb	r2, r3
 8014374:	4b99      	ldr	r3, [pc, #612]	; (80145dc <LoRaMacInitialization+0x384>)
 8014376:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801437a:	2310      	movs	r3, #16
 801437c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014380:	4b96      	ldr	r3, [pc, #600]	; (80145dc <LoRaMacInitialization+0x384>)
 8014382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801438a:	4611      	mov	r1, r2
 801438c:	4618      	mov	r0, r3
 801438e:	f003 fa1c 	bl	80177ca <RegionGetPhyParam>
 8014392:	4603      	mov	r3, r0
 8014394:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8014396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014398:	4a90      	ldr	r2, [pc, #576]	; (80145dc <LoRaMacInitialization+0x384>)
 801439a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801439e:	2311      	movs	r3, #17
 80143a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143a4:	4b8d      	ldr	r3, [pc, #564]	; (80145dc <LoRaMacInitialization+0x384>)
 80143a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143ae:	4611      	mov	r1, r2
 80143b0:	4618      	mov	r0, r3
 80143b2:	f003 fa0a 	bl	80177ca <RegionGetPhyParam>
 80143b6:	4603      	mov	r3, r0
 80143b8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	4a87      	ldr	r2, [pc, #540]	; (80145dc <LoRaMacInitialization+0x384>)
 80143be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80143c2:	2312      	movs	r3, #18
 80143c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143c8:	4b84      	ldr	r3, [pc, #528]	; (80145dc <LoRaMacInitialization+0x384>)
 80143ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143d2:	4611      	mov	r1, r2
 80143d4:	4618      	mov	r0, r3
 80143d6:	f003 f9f8 	bl	80177ca <RegionGetPhyParam>
 80143da:	4603      	mov	r3, r0
 80143dc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80143de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e0:	4a7e      	ldr	r2, [pc, #504]	; (80145dc <LoRaMacInitialization+0x384>)
 80143e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80143e6:	2313      	movs	r3, #19
 80143e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143ec:	4b7b      	ldr	r3, [pc, #492]	; (80145dc <LoRaMacInitialization+0x384>)
 80143ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143f6:	4611      	mov	r1, r2
 80143f8:	4618      	mov	r0, r3
 80143fa:	f003 f9e6 	bl	80177ca <RegionGetPhyParam>
 80143fe:	4603      	mov	r3, r0
 8014400:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014404:	4a75      	ldr	r2, [pc, #468]	; (80145dc <LoRaMacInitialization+0x384>)
 8014406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801440a:	2314      	movs	r3, #20
 801440c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014410:	4b72      	ldr	r3, [pc, #456]	; (80145dc <LoRaMacInitialization+0x384>)
 8014412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801441a:	4611      	mov	r1, r2
 801441c:	4618      	mov	r0, r3
 801441e:	f003 f9d4 	bl	80177ca <RegionGetPhyParam>
 8014422:	4603      	mov	r3, r0
 8014424:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014428:	4a6c      	ldr	r2, [pc, #432]	; (80145dc <LoRaMacInitialization+0x384>)
 801442a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801442e:	2317      	movs	r3, #23
 8014430:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014434:	4b69      	ldr	r3, [pc, #420]	; (80145dc <LoRaMacInitialization+0x384>)
 8014436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801443a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801443e:	4611      	mov	r1, r2
 8014440:	4618      	mov	r0, r3
 8014442:	f003 f9c2 	bl	80177ca <RegionGetPhyParam>
 8014446:	4603      	mov	r3, r0
 8014448:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	b2da      	uxtb	r2, r3
 801444e:	4b63      	ldr	r3, [pc, #396]	; (80145dc <LoRaMacInitialization+0x384>)
 8014450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014454:	2318      	movs	r3, #24
 8014456:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801445a:	4b60      	ldr	r3, [pc, #384]	; (80145dc <LoRaMacInitialization+0x384>)
 801445c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014460:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014464:	4611      	mov	r1, r2
 8014466:	4618      	mov	r0, r3
 8014468:	f003 f9af 	bl	80177ca <RegionGetPhyParam>
 801446c:	4603      	mov	r3, r0
 801446e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014472:	4a5a      	ldr	r2, [pc, #360]	; (80145dc <LoRaMacInitialization+0x384>)
 8014474:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	4a58      	ldr	r2, [pc, #352]	; (80145dc <LoRaMacInitialization+0x384>)
 801447c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014480:	2319      	movs	r3, #25
 8014482:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014486:	4b55      	ldr	r3, [pc, #340]	; (80145dc <LoRaMacInitialization+0x384>)
 8014488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801448c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014490:	4611      	mov	r1, r2
 8014492:	4618      	mov	r0, r3
 8014494:	f003 f999 	bl	80177ca <RegionGetPhyParam>
 8014498:	4603      	mov	r3, r0
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449e:	b2da      	uxtb	r2, r3
 80144a0:	4b4e      	ldr	r3, [pc, #312]	; (80145dc <LoRaMacInitialization+0x384>)
 80144a2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80144a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	4b4c      	ldr	r3, [pc, #304]	; (80145dc <LoRaMacInitialization+0x384>)
 80144ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80144b0:	231e      	movs	r3, #30
 80144b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144b6:	4b49      	ldr	r3, [pc, #292]	; (80145dc <LoRaMacInitialization+0x384>)
 80144b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144c0:	4611      	mov	r1, r2
 80144c2:	4618      	mov	r0, r3
 80144c4:	f003 f981 	bl	80177ca <RegionGetPhyParam>
 80144c8:	4603      	mov	r3, r0
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	b2da      	uxtb	r2, r3
 80144d0:	4b42      	ldr	r3, [pc, #264]	; (80145dc <LoRaMacInitialization+0x384>)
 80144d2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80144d6:	231f      	movs	r3, #31
 80144d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144dc:	4b3f      	ldr	r3, [pc, #252]	; (80145dc <LoRaMacInitialization+0x384>)
 80144de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144e6:	4611      	mov	r1, r2
 80144e8:	4618      	mov	r0, r3
 80144ea:	f003 f96e 	bl	80177ca <RegionGetPhyParam>
 80144ee:	4603      	mov	r3, r0
 80144f0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80144f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f4:	b2da      	uxtb	r2, r3
 80144f6:	4b39      	ldr	r3, [pc, #228]	; (80145dc <LoRaMacInitialization+0x384>)
 80144f8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80144fc:	2320      	movs	r3, #32
 80144fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014502:	4b36      	ldr	r3, [pc, #216]	; (80145dc <LoRaMacInitialization+0x384>)
 8014504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014508:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801450c:	4611      	mov	r1, r2
 801450e:	4618      	mov	r0, r3
 8014510:	f003 f95b 	bl	80177ca <RegionGetPhyParam>
 8014514:	4603      	mov	r3, r0
 8014516:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451a:	4a30      	ldr	r2, [pc, #192]	; (80145dc <LoRaMacInitialization+0x384>)
 801451c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014520:	2321      	movs	r3, #33	; 0x21
 8014522:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014526:	4b2d      	ldr	r3, [pc, #180]	; (80145dc <LoRaMacInitialization+0x384>)
 8014528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801452c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f003 f949 	bl	80177ca <RegionGetPhyParam>
 8014538:	4603      	mov	r3, r0
 801453a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453e:	4a27      	ldr	r2, [pc, #156]	; (80145dc <LoRaMacInitialization+0x384>)
 8014540:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014544:	230b      	movs	r3, #11
 8014546:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801454a:	4b24      	ldr	r3, [pc, #144]	; (80145dc <LoRaMacInitialization+0x384>)
 801454c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014550:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014554:	4611      	mov	r1, r2
 8014556:	4618      	mov	r0, r3
 8014558:	f003 f937 	bl	80177ca <RegionGetPhyParam>
 801455c:	4603      	mov	r3, r0
 801455e:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8014560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014562:	b29a      	uxth	r2, r3
 8014564:	4b1e      	ldr	r3, [pc, #120]	; (80145e0 <LoRaMacInitialization+0x388>)
 8014566:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801456a:	230c      	movs	r3, #12
 801456c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014570:	4b1a      	ldr	r3, [pc, #104]	; (80145dc <LoRaMacInitialization+0x384>)
 8014572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801457a:	4611      	mov	r1, r2
 801457c:	4618      	mov	r0, r3
 801457e:	f003 f924 	bl	80177ca <RegionGetPhyParam>
 8014582:	4603      	mov	r3, r0
 8014584:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8014586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014588:	b29a      	uxth	r2, r3
 801458a:	4b15      	ldr	r3, [pc, #84]	; (80145e0 <LoRaMacInitialization+0x388>)
 801458c:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014590:	4b12      	ldr	r3, [pc, #72]	; (80145dc <LoRaMacInitialization+0x384>)
 8014592:	2201      	movs	r2, #1
 8014594:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014598:	4b10      	ldr	r3, [pc, #64]	; (80145dc <LoRaMacInitialization+0x384>)
 801459a:	220a      	movs	r2, #10
 801459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80145a0:	4b0e      	ldr	r3, [pc, #56]	; (80145dc <LoRaMacInitialization+0x384>)
 80145a2:	2206      	movs	r2, #6
 80145a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80145a8:	4b0c      	ldr	r3, [pc, #48]	; (80145dc <LoRaMacInitialization+0x384>)
 80145aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145ae:	4a0b      	ldr	r2, [pc, #44]	; (80145dc <LoRaMacInitialization+0x384>)
 80145b0:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80145b2:	4b0a      	ldr	r3, [pc, #40]	; (80145dc <LoRaMacInitialization+0x384>)
 80145b4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80145b8:	4b08      	ldr	r3, [pc, #32]	; (80145dc <LoRaMacInitialization+0x384>)
 80145ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80145be:	4b07      	ldr	r3, [pc, #28]	; (80145dc <LoRaMacInitialization+0x384>)
 80145c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145c4:	4a05      	ldr	r2, [pc, #20]	; (80145dc <LoRaMacInitialization+0x384>)
 80145c6:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80145c8:	4b04      	ldr	r3, [pc, #16]	; (80145dc <LoRaMacInitialization+0x384>)
 80145ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145ce:	4a03      	ldr	r2, [pc, #12]	; (80145dc <LoRaMacInitialization+0x384>)
 80145d0:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80145d2:	4b02      	ldr	r3, [pc, #8]	; (80145dc <LoRaMacInitialization+0x384>)
 80145d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80145d8:	e006      	b.n	80145e8 <LoRaMacInitialization+0x390>
 80145da:	bf00      	nop
 80145dc:	200038f8 	.word	0x200038f8
 80145e0:	200033f0 	.word	0x200033f0
 80145e4:	01000300 	.word	0x01000300
 80145e8:	4a60      	ldr	r2, [pc, #384]	; (801476c <LoRaMacInitialization+0x514>)
 80145ea:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80145ec:	4b5f      	ldr	r3, [pc, #380]	; (801476c <LoRaMacInitialization+0x514>)
 80145ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80145f2:	4a5e      	ldr	r2, [pc, #376]	; (801476c <LoRaMacInitialization+0x514>)
 80145f4:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80145f6:	4b5d      	ldr	r3, [pc, #372]	; (801476c <LoRaMacInitialization+0x514>)
 80145f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80145fc:	4a5b      	ldr	r2, [pc, #364]	; (801476c <LoRaMacInitialization+0x514>)
 80145fe:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014600:	4b5a      	ldr	r3, [pc, #360]	; (801476c <LoRaMacInitialization+0x514>)
 8014602:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8014606:	4b59      	ldr	r3, [pc, #356]	; (801476c <LoRaMacInitialization+0x514>)
 8014608:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801460c:	2300      	movs	r3, #0
 801460e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014612:	4b57      	ldr	r3, [pc, #348]	; (8014770 <LoRaMacInitialization+0x518>)
 8014614:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014616:	4b57      	ldr	r3, [pc, #348]	; (8014774 <LoRaMacInitialization+0x51c>)
 8014618:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801461a:	4b54      	ldr	r3, [pc, #336]	; (801476c <LoRaMacInitialization+0x514>)
 801461c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014620:	f107 0218 	add.w	r2, r7, #24
 8014624:	4611      	mov	r1, r2
 8014626:	4618      	mov	r0, r3
 8014628:	f003 f906 	bl	8017838 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 801462c:	4a52      	ldr	r2, [pc, #328]	; (8014778 <LoRaMacInitialization+0x520>)
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8014634:	f7ff f85a 	bl	80136ec <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014638:	4b4c      	ldr	r3, [pc, #304]	; (801476c <LoRaMacInitialization+0x514>)
 801463a:	2201      	movs	r2, #1
 801463c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8014640:	4a4d      	ldr	r2, [pc, #308]	; (8014778 <LoRaMacInitialization+0x520>)
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014648:	4b4b      	ldr	r3, [pc, #300]	; (8014778 <LoRaMacInitialization+0x520>)
 801464a:	2200      	movs	r2, #0
 801464c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8014650:	4b49      	ldr	r3, [pc, #292]	; (8014778 <LoRaMacInitialization+0x520>)
 8014652:	2201      	movs	r2, #1
 8014654:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014658:	4b44      	ldr	r3, [pc, #272]	; (801476c <LoRaMacInitialization+0x514>)
 801465a:	2200      	movs	r2, #0
 801465c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801465e:	4b43      	ldr	r3, [pc, #268]	; (801476c <LoRaMacInitialization+0x514>)
 8014660:	2200      	movs	r2, #0
 8014662:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014664:	2300      	movs	r3, #0
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	4b44      	ldr	r3, [pc, #272]	; (801477c <LoRaMacInitialization+0x524>)
 801466a:	2200      	movs	r2, #0
 801466c:	f04f 31ff 	mov.w	r1, #4294967295
 8014670:	4843      	ldr	r0, [pc, #268]	; (8014780 <LoRaMacInitialization+0x528>)
 8014672:	f00b f911 	bl	801f898 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014676:	2300      	movs	r3, #0
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	4b42      	ldr	r3, [pc, #264]	; (8014784 <LoRaMacInitialization+0x52c>)
 801467c:	2200      	movs	r2, #0
 801467e:	f04f 31ff 	mov.w	r1, #4294967295
 8014682:	4841      	ldr	r0, [pc, #260]	; (8014788 <LoRaMacInitialization+0x530>)
 8014684:	f00b f908 	bl	801f898 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014688:	2300      	movs	r3, #0
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	4b3f      	ldr	r3, [pc, #252]	; (801478c <LoRaMacInitialization+0x534>)
 801468e:	2200      	movs	r2, #0
 8014690:	f04f 31ff 	mov.w	r1, #4294967295
 8014694:	483e      	ldr	r0, [pc, #248]	; (8014790 <LoRaMacInitialization+0x538>)
 8014696:	f00b f8ff 	bl	801f898 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 801469a:	2300      	movs	r3, #0
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	4b3d      	ldr	r3, [pc, #244]	; (8014794 <LoRaMacInitialization+0x53c>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	f04f 31ff 	mov.w	r1, #4294967295
 80146a6:	483c      	ldr	r0, [pc, #240]	; (8014798 <LoRaMacInitialization+0x540>)
 80146a8:	f00b f8f6 	bl	801f898 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80146ac:	4c2f      	ldr	r4, [pc, #188]	; (801476c <LoRaMacInitialization+0x514>)
 80146ae:	463b      	mov	r3, r7
 80146b0:	4618      	mov	r0, r3
 80146b2:	f00a fea5 	bl	801f400 <SysTimeGetMcuTime>
 80146b6:	f504 7382 	add.w	r3, r4, #260	; 0x104
 80146ba:	463a      	mov	r2, r7
 80146bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146c0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80146c4:	4b2c      	ldr	r3, [pc, #176]	; (8014778 <LoRaMacInitialization+0x520>)
 80146c6:	4a35      	ldr	r2, [pc, #212]	; (801479c <LoRaMacInitialization+0x544>)
 80146c8:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80146cc:	4b2a      	ldr	r3, [pc, #168]	; (8014778 <LoRaMacInitialization+0x520>)
 80146ce:	4a34      	ldr	r2, [pc, #208]	; (80147a0 <LoRaMacInitialization+0x548>)
 80146d0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80146d4:	4b28      	ldr	r3, [pc, #160]	; (8014778 <LoRaMacInitialization+0x520>)
 80146d6:	4a33      	ldr	r2, [pc, #204]	; (80147a4 <LoRaMacInitialization+0x54c>)
 80146d8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80146dc:	4b26      	ldr	r3, [pc, #152]	; (8014778 <LoRaMacInitialization+0x520>)
 80146de:	4a32      	ldr	r2, [pc, #200]	; (80147a8 <LoRaMacInitialization+0x550>)
 80146e0:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80146e4:	4b24      	ldr	r3, [pc, #144]	; (8014778 <LoRaMacInitialization+0x520>)
 80146e6:	4a31      	ldr	r2, [pc, #196]	; (80147ac <LoRaMacInitialization+0x554>)
 80146e8:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80146ec:	4b30      	ldr	r3, [pc, #192]	; (80147b0 <LoRaMacInitialization+0x558>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4830      	ldr	r0, [pc, #192]	; (80147b4 <LoRaMacInitialization+0x55c>)
 80146f2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	689b      	ldr	r3, [r3, #8]
 80146f8:	4619      	mov	r1, r3
 80146fa:	482f      	ldr	r0, [pc, #188]	; (80147b8 <LoRaMacInitialization+0x560>)
 80146fc:	f7fa fb08 	bl	800ed10 <SecureElementInit>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d001      	beq.n	801470a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014706:	2311      	movs	r3, #17
 8014708:	e02b      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801470a:	4818      	ldr	r0, [pc, #96]	; (801476c <LoRaMacInitialization+0x514>)
 801470c:	f002 f976 	bl	80169fc <LoRaMacCryptoInit>
 8014710:	4603      	mov	r3, r0
 8014712:	2b00      	cmp	r3, #0
 8014714:	d001      	beq.n	801471a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014716:	2311      	movs	r3, #17
 8014718:	e023      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801471a:	f001 fa95 	bl	8015c48 <LoRaMacCommandsInit>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014724:	2313      	movs	r3, #19
 8014726:	e01c      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014728:	4824      	ldr	r0, [pc, #144]	; (80147bc <LoRaMacInitialization+0x564>)
 801472a:	f002 fa31 	bl	8016b90 <LoRaMacCryptoSetMulticastReference>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014734:	2311      	movs	r3, #17
 8014736:	e014      	b.n	8014762 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014738:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <LoRaMacInitialization+0x558>)
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	4798      	blx	r3
 801473e:	4603      	mov	r3, r0
 8014740:	4618      	mov	r0, r3
 8014742:	f006 fee9 	bl	801b518 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014746:	4b1a      	ldr	r3, [pc, #104]	; (80147b0 <LoRaMacInitialization+0x558>)
 8014748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801474a:	4a08      	ldr	r2, [pc, #32]	; (801476c <LoRaMacInitialization+0x514>)
 801474c:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8014750:	4610      	mov	r0, r2
 8014752:	4798      	blx	r3
    Radio.Sleep( );
 8014754:	4b16      	ldr	r3, [pc, #88]	; (80147b0 <LoRaMacInitialization+0x558>)
 8014756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014758:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801475a:	2001      	movs	r0, #1
 801475c:	f7fd faaa 	bl	8011cb4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	3734      	adds	r7, #52	; 0x34
 8014766:	46bd      	mov	sp, r7
 8014768:	bd90      	pop	{r4, r7, pc}
 801476a:	bf00      	nop
 801476c:	200038f8 	.word	0x200038f8
 8014770:	20003ad0 	.word	0x20003ad0
 8014774:	20003b74 	.word	0x20003b74
 8014778:	200033f0 	.word	0x200033f0
 801477c:	0801223d 	.word	0x0801223d
 8014780:	20003758 	.word	0x20003758
 8014784:	080122b1 	.word	0x080122b1
 8014788:	20003770 	.word	0x20003770
 801478c:	0801231d 	.word	0x0801231d
 8014790:	20003788 	.word	0x20003788
 8014794:	08012391 	.word	0x08012391
 8014798:	200037e8 	.word	0x200037e8
 801479c:	08010e41 	.word	0x08010e41
 80147a0:	08010eb9 	.word	0x08010eb9
 80147a4:	08010f91 	.word	0x08010f91
 80147a8:	08010f45 	.word	0x08010f45
 80147ac:	08010fcd 	.word	0x08010fcd
 80147b0:	080232e4 	.word	0x080232e4
 80147b4:	2000373c 	.word	0x2000373c
 80147b8:	20003a10 	.word	0x20003a10
 80147bc:	200039c8 	.word	0x200039c8

080147c0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80147c0:	b480      	push	{r7}
 80147c2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80147c4:	4b04      	ldr	r3, [pc, #16]	; (80147d8 <LoRaMacStart+0x18>)
 80147c6:	2200      	movs	r2, #0
 80147c8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bc80      	pop	{r7}
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	200033f0 	.word	0x200033f0

080147dc <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08a      	sub	sp, #40	; 0x28
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	4603      	mov	r3, r0
 80147e4:	6039      	str	r1, [r7, #0]
 80147e6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80147e8:	4b3e      	ldr	r3, [pc, #248]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 80147ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ec:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80147ee:	4b3d      	ldr	r3, [pc, #244]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 80147f0:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80147f4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80147f6:	4b3b      	ldr	r3, [pc, #236]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 80147f8:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80147fc:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 80147fe:	2300      	movs	r3, #0
 8014800:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d101      	bne.n	801480c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014808:	2303      	movs	r3, #3
 801480a:	e066      	b.n	80148da <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 801480c:	4b35      	ldr	r3, [pc, #212]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 801480e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8014812:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8014814:	2300      	movs	r3, #0
 8014816:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014818:	4b32      	ldr	r3, [pc, #200]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 801481a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801481e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014820:	4b30      	ldr	r3, [pc, #192]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 8014822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014824:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8014826:	4b30      	ldr	r3, [pc, #192]	; (80148e8 <LoRaMacQueryTxPossible+0x10c>)
 8014828:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801482c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801482e:	4b2e      	ldr	r3, [pc, #184]	; (80148e8 <LoRaMacQueryTxPossible+0x10c>)
 8014830:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014834:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014836:	4b2b      	ldr	r3, [pc, #172]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 8014838:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801483c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014840:	4b28      	ldr	r3, [pc, #160]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 8014842:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014846:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801484a:	4b26      	ldr	r3, [pc, #152]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 801484c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014854:	4b23      	ldr	r3, [pc, #140]	; (80148e4 <LoRaMacQueryTxPossible+0x108>)
 8014856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801485a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801485e:	f107 0310 	add.w	r3, r7, #16
 8014862:	f107 020e 	add.w	r2, r7, #14
 8014866:	f107 010f 	add.w	r1, r7, #15
 801486a:	f107 0014 	add.w	r0, r7, #20
 801486e:	f000 ffe1 	bl	8015834 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014876:	4618      	mov	r0, r3
 8014878:	f7fd fed2 	bl	8012620 <GetMaxAppPayloadWithoutFOptsLength>
 801487c:	4603      	mov	r3, r0
 801487e:	461a      	mov	r2, r3
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014884:	f107 0308 	add.w	r3, r7, #8
 8014888:	4618      	mov	r0, r3
 801488a:	f001 faab 	bl	8015de4 <LoRaMacCommandsGetSizeSerializedCmds>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014894:	2313      	movs	r3, #19
 8014896:	e020      	b.n	80148da <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	2b0f      	cmp	r3, #15
 801489c:	d819      	bhi.n	80148d2 <LoRaMacQueryTxPossible+0xf6>
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	785b      	ldrb	r3, [r3, #1]
 80148a2:	461a      	mov	r2, r3
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d313      	bcc.n	80148d2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	785a      	ldrb	r2, [r3, #1]
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	b2db      	uxtb	r3, r3
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	b2da      	uxtb	r2, r3
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	785b      	ldrb	r3, [r3, #1]
 80148be:	4619      	mov	r1, r3
 80148c0:	79fa      	ldrb	r2, [r7, #7]
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	4413      	add	r3, r2
 80148c6:	4299      	cmp	r1, r3
 80148c8:	d301      	bcc.n	80148ce <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80148ca:	2300      	movs	r3, #0
 80148cc:	e005      	b.n	80148da <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80148ce:	2308      	movs	r3, #8
 80148d0:	e003      	b.n	80148da <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	2200      	movs	r2, #0
 80148d6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80148d8:	2308      	movs	r3, #8
    }
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3728      	adds	r7, #40	; 0x28
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	200038f8 	.word	0x200038f8
 80148e8:	200033f0 	.word	0x200033f0

080148ec <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b087      	sub	sp, #28
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d101      	bne.n	8014902 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80148fe:	2303      	movs	r3, #3
 8014900:	e14b      	b.n	8014b9a <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	2b28      	cmp	r3, #40	; 0x28
 8014908:	f200 8140 	bhi.w	8014b8c <LoRaMacMibGetRequestConfirm+0x2a0>
 801490c:	a201      	add	r2, pc, #4	; (adr r2, 8014914 <LoRaMacMibGetRequestConfirm+0x28>)
 801490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014912:	bf00      	nop
 8014914:	080149b9 	.word	0x080149b9
 8014918:	080149c5 	.word	0x080149c5
 801491c:	080149d1 	.word	0x080149d1
 8014920:	080149dd 	.word	0x080149dd
 8014924:	080149e9 	.word	0x080149e9
 8014928:	080149f5 	.word	0x080149f5
 801492c:	08014a01 	.word	0x08014a01
 8014930:	08014b8d 	.word	0x08014b8d
 8014934:	08014b8d 	.word	0x08014b8d
 8014938:	08014b8d 	.word	0x08014b8d
 801493c:	08014b8d 	.word	0x08014b8d
 8014940:	08014b8d 	.word	0x08014b8d
 8014944:	08014b8d 	.word	0x08014b8d
 8014948:	08014b8d 	.word	0x08014b8d
 801494c:	08014b8d 	.word	0x08014b8d
 8014950:	08014a0d 	.word	0x08014a0d
 8014954:	08014a19 	.word	0x08014a19
 8014958:	08014a25 	.word	0x08014a25
 801495c:	08014a47 	.word	0x08014a47
 8014960:	08014a59 	.word	0x08014a59
 8014964:	08014a6b 	.word	0x08014a6b
 8014968:	08014a7d 	.word	0x08014a7d
 801496c:	08014ab1 	.word	0x08014ab1
 8014970:	08014a8f 	.word	0x08014a8f
 8014974:	08014ad3 	.word	0x08014ad3
 8014978:	08014adf 	.word	0x08014adf
 801497c:	08014ae9 	.word	0x08014ae9
 8014980:	08014af3 	.word	0x08014af3
 8014984:	08014afd 	.word	0x08014afd
 8014988:	08014b07 	.word	0x08014b07
 801498c:	08014b11 	.word	0x08014b11
 8014990:	08014b1d 	.word	0x08014b1d
 8014994:	08014b35 	.word	0x08014b35
 8014998:	08014b29 	.word	0x08014b29
 801499c:	08014b41 	.word	0x08014b41
 80149a0:	08014b4b 	.word	0x08014b4b
 80149a4:	08014b57 	.word	0x08014b57
 80149a8:	08014b6d 	.word	0x08014b6d
 80149ac:	08014b61 	.word	0x08014b61
 80149b0:	08014b8d 	.word	0x08014b8d
 80149b4:	08014b79 	.word	0x08014b79
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80149b8:	4b7a      	ldr	r3, [pc, #488]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80149ba:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	711a      	strb	r2, [r3, #4]
            break;
 80149c2:	e0e9      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80149c4:	4b77      	ldr	r3, [pc, #476]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80149c6:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	711a      	strb	r2, [r3, #4]
            break;
 80149ce:	e0e3      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80149d0:	f7fa fc5c 	bl	800f28c <SecureElementGetDevEui>
 80149d4:	4602      	mov	r2, r0
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	605a      	str	r2, [r3, #4]
            break;
 80149da:	e0dd      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80149dc:	f7fa fc78 	bl	800f2d0 <SecureElementGetJoinEui>
 80149e0:	4602      	mov	r2, r0
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	605a      	str	r2, [r3, #4]
            break;
 80149e6:	e0d7      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80149e8:	4b6e      	ldr	r3, [pc, #440]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80149ea:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	711a      	strb	r2, [r3, #4]
            break;
 80149f2:	e0d1      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80149f4:	4b6b      	ldr	r3, [pc, #428]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80149f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	605a      	str	r2, [r3, #4]
            break;
 80149fe:	e0cb      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8014a00:	4b68      	ldr	r3, [pc, #416]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a02:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	605a      	str	r2, [r3, #4]
            break;
 8014a0a:	e0c5      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014a0c:	4b65      	ldr	r3, [pc, #404]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a0e:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	711a      	strb	r2, [r3, #4]
            break;
 8014a16:	e0bf      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014a18:	4b62      	ldr	r3, [pc, #392]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a1a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	711a      	strb	r2, [r3, #4]
            break;
 8014a22:	e0b9      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014a24:	231d      	movs	r3, #29
 8014a26:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a28:	4b5e      	ldr	r3, [pc, #376]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a2e:	f107 0210 	add.w	r2, r7, #16
 8014a32:	4611      	mov	r1, r2
 8014a34:	4618      	mov	r0, r3
 8014a36:	f002 fec8 	bl	80177ca <RegionGetPhyParam>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	605a      	str	r2, [r3, #4]
            break;
 8014a44:	e0a8      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	4a56      	ldr	r2, [pc, #344]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a4a:	3304      	adds	r3, #4
 8014a4c:	3264      	adds	r2, #100	; 0x64
 8014a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a52:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014a56:	e09f      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	4a52      	ldr	r2, [pc, #328]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a5c:	3304      	adds	r3, #4
 8014a5e:	32a4      	adds	r2, #164	; 0xa4
 8014a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a64:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014a68:	e096      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	4a4d      	ldr	r2, [pc, #308]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a6e:	3304      	adds	r3, #4
 8014a70:	326c      	adds	r2, #108	; 0x6c
 8014a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a76:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014a7a:	e08d      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	4a49      	ldr	r2, [pc, #292]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a80:	3304      	adds	r3, #4
 8014a82:	32ac      	adds	r2, #172	; 0xac
 8014a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a88:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014a8c:	e084      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014a8e:	231b      	movs	r3, #27
 8014a90:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a92:	4b44      	ldr	r3, [pc, #272]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a98:	f107 0210 	add.w	r2, r7, #16
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f002 fe93 	bl	80177ca <RegionGetPhyParam>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014aa8:	68fa      	ldr	r2, [r7, #12]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	605a      	str	r2, [r3, #4]
            break;
 8014aae:	e073      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014ab0:	231a      	movs	r3, #26
 8014ab2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ab4:	4b3b      	ldr	r3, [pc, #236]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014aba:	f107 0210 	add.w	r2, r7, #16
 8014abe:	4611      	mov	r1, r2
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f002 fe82 	bl	80177ca <RegionGetPhyParam>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014aca:	68fa      	ldr	r2, [r7, #12]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	605a      	str	r2, [r3, #4]
            break;
 8014ad0:	e062      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014ad2:	4b34      	ldr	r3, [pc, #208]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014ad4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	711a      	strb	r2, [r3, #4]
            break;
 8014adc:	e05c      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014ade:	4b31      	ldr	r3, [pc, #196]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	605a      	str	r2, [r3, #4]
            break;
 8014ae6:	e057      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014ae8:	4b2e      	ldr	r3, [pc, #184]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	605a      	str	r2, [r3, #4]
            break;
 8014af0:	e052      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014af2:	4b2c      	ldr	r3, [pc, #176]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	605a      	str	r2, [r3, #4]
            break;
 8014afa:	e04d      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014afc:	4b29      	ldr	r3, [pc, #164]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014afe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	605a      	str	r2, [r3, #4]
            break;
 8014b04:	e048      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014b06:	4b27      	ldr	r3, [pc, #156]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	605a      	str	r2, [r3, #4]
            break;
 8014b0e:	e043      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014b10:	4b24      	ldr	r3, [pc, #144]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b12:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	711a      	strb	r2, [r3, #4]
            break;
 8014b1a:	e03d      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014b1c:	4b21      	ldr	r3, [pc, #132]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b1e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	711a      	strb	r2, [r3, #4]
            break;
 8014b26:	e037      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014b28:	4b1e      	ldr	r3, [pc, #120]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b2a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	711a      	strb	r2, [r3, #4]
            break;
 8014b32:	e031      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014b34:	4b1b      	ldr	r3, [pc, #108]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b36:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	711a      	strb	r2, [r3, #4]
            break;
 8014b3e:	e02b      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014b40:	4b18      	ldr	r3, [pc, #96]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	605a      	str	r2, [r3, #4]
            break;
 8014b48:	e026      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014b4a:	4b16      	ldr	r3, [pc, #88]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	711a      	strb	r2, [r3, #4]
            break;
 8014b54:	e020      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014b56:	4b13      	ldr	r3, [pc, #76]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b58:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	605a      	str	r2, [r3, #4]
            break;
 8014b5e:	e01b      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8014b60:	f7ff f934 	bl	8013dcc <GetNvmData>
 8014b64:	4602      	mov	r2, r0
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	605a      	str	r2, [r3, #4]
            break;
 8014b6a:	e015      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014b6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b6e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	605a      	str	r2, [r3, #4]
            break;
 8014b76:	e00f      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	4a0a      	ldr	r2, [pc, #40]	; (8014ba4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b7c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8014b80:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014b82:	687c      	ldr	r4, [r7, #4]
 8014b84:	f003 f846 	bl	8017c14 <RegionGetVersion>
 8014b88:	60a0      	str	r0, [r4, #8]
            break;
 8014b8a:	e005      	b.n	8014b98 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 fefd 	bl	801598c <LoRaMacClassBMibGetRequestConfirm>
 8014b92:	4603      	mov	r3, r0
 8014b94:	75fb      	strb	r3, [r7, #23]
            break;
 8014b96:	bf00      	nop
        }
    }
    return status;
 8014b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	371c      	adds	r7, #28
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd90      	pop	{r4, r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	200038f8 	.word	0x200038f8

08014ba8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b086      	sub	sp, #24
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d101      	bne.n	8014bbe <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014bba:	2303      	movs	r3, #3
 8014bbc:	e32b      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014bbe:	4bb4      	ldr	r3, [pc, #720]	; (8014e90 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8014bc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014bc4:	f003 0302 	and.w	r3, r3, #2
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d001      	beq.n	8014bd0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e322      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b27      	cmp	r3, #39	; 0x27
 8014bd6:	f200 82fc 	bhi.w	80151d2 <LoRaMacMibSetRequestConfirm+0x62a>
 8014bda:	a201      	add	r2, pc, #4	; (adr r2, 8014be0 <LoRaMacMibSetRequestConfirm+0x38>)
 8014bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014be0:	08014c81 	.word	0x08014c81
 8014be4:	08014c91 	.word	0x08014c91
 8014be8:	08014cab 	.word	0x08014cab
 8014bec:	08014cc3 	.word	0x08014cc3
 8014bf0:	08014cdb 	.word	0x08014cdb
 8014bf4:	08014ce7 	.word	0x08014ce7
 8014bf8:	08014cf3 	.word	0x08014cf3
 8014bfc:	08014cff 	.word	0x08014cff
 8014c00:	08014d25 	.word	0x08014d25
 8014c04:	08014d4b 	.word	0x08014d4b
 8014c08:	08014d71 	.word	0x08014d71
 8014c0c:	08014d97 	.word	0x08014d97
 8014c10:	08014dbd 	.word	0x08014dbd
 8014c14:	08014de3 	.word	0x08014de3
 8014c18:	08014e09 	.word	0x08014e09
 8014c1c:	08014e2f 	.word	0x08014e2f
 8014c20:	08014e4f 	.word	0x08014e4f
 8014c24:	080151d3 	.word	0x080151d3
 8014c28:	08014e5b 	.word	0x08014e5b
 8014c2c:	08014ed9 	.word	0x08014ed9
 8014c30:	08014f19 	.word	0x08014f19
 8014c34:	08014f7b 	.word	0x08014f7b
 8014c38:	08014feb 	.word	0x08014feb
 8014c3c:	08014fbb 	.word	0x08014fbb
 8014c40:	0801501b 	.word	0x0801501b
 8014c44:	0801503d 	.word	0x0801503d
 8014c48:	08015047 	.word	0x08015047
 8014c4c:	08015051 	.word	0x08015051
 8014c50:	0801505b 	.word	0x0801505b
 8014c54:	08015065 	.word	0x08015065
 8014c58:	0801506f 	.word	0x0801506f
 8014c5c:	080150a1 	.word	0x080150a1
 8014c60:	0801510d 	.word	0x0801510d
 8014c64:	080150db 	.word	0x080150db
 8014c68:	0801513f 	.word	0x0801513f
 8014c6c:	08015155 	.word	0x08015155
 8014c70:	08015175 	.word	0x08015175
 8014c74:	0801517f 	.word	0x0801517f
 8014c78:	0801518b 	.word	0x0801518b
 8014c7c:	080151a9 	.word	0x080151a9
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	791b      	ldrb	r3, [r3, #4]
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fd fbfb 	bl	8012480 <SwitchClass>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	75fb      	strb	r3, [r7, #23]
            break;
 8014c8e:	e2c1      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	791b      	ldrb	r3, [r3, #4]
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d005      	beq.n	8014ca4 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	791a      	ldrb	r2, [r3, #4]
 8014c9c:	4b7d      	ldr	r3, [pc, #500]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014c9e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ca2:	e2b7      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8014ca8:	e2b4      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fa fad4 	bl	800f25c <SecureElementSetDevEui>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f000 8291 	beq.w	80151de <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cbc:	2303      	movs	r3, #3
 8014cbe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cc0:	e28d      	b.n	80151de <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7fa faea 	bl	800f2a0 <SecureElementSetJoinEui>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	f000 8287 	beq.w	80151e2 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cd8:	e283      	b.n	80151e2 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	791a      	ldrb	r2, [r3, #4]
 8014cde:	4b6d      	ldr	r3, [pc, #436]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014ce0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8014ce4:	e296      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4a6a      	ldr	r2, [pc, #424]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014cec:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8014cf0:	e290      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	4a67      	ldr	r2, [pc, #412]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014cf8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014cfc:	e28a      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	f001 ff67 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f000 8266 	beq.w	80151e6 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d1a:	2311      	movs	r3, #17
 8014d1c:	e27b      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d1e:	2303      	movs	r3, #3
 8014d20:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d22:	e260      	b.n	80151e6 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d00b      	beq.n	8014d44 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	4619      	mov	r1, r3
 8014d32:	2001      	movs	r0, #1
 8014d34:	f001 ff54 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f000 8255 	beq.w	80151ea <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d40:	2311      	movs	r3, #17
 8014d42:	e268      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d44:	2303      	movs	r3, #3
 8014d46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d48:	e24f      	b.n	80151ea <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00b      	beq.n	8014d6a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	4619      	mov	r1, r3
 8014d58:	2002      	movs	r0, #2
 8014d5a:	f001 ff41 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f000 8244 	beq.w	80151ee <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d66:	2311      	movs	r3, #17
 8014d68:	e255      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d6a:	2303      	movs	r3, #3
 8014d6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d6e:	e23e      	b.n	80151ee <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d00b      	beq.n	8014d90 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	2003      	movs	r0, #3
 8014d80:	f001 ff2e 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f000 8233 	beq.w	80151f2 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d8c:	2311      	movs	r3, #17
 8014d8e:	e242      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d90:	2303      	movs	r3, #3
 8014d92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d94:	e22d      	b.n	80151f2 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d00b      	beq.n	8014db6 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	4619      	mov	r1, r3
 8014da4:	207f      	movs	r0, #127	; 0x7f
 8014da6:	f001 ff1b 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f000 8222 	beq.w	80151f6 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014db2:	2311      	movs	r3, #17
 8014db4:	e22f      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014db6:	2303      	movs	r3, #3
 8014db8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014dba:	e21c      	b.n	80151f6 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d00b      	beq.n	8014ddc <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	2080      	movs	r0, #128	; 0x80
 8014dcc:	f001 ff08 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	f000 8211 	beq.w	80151fa <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014dd8:	2311      	movs	r3, #17
 8014dda:	e21c      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ddc:	2303      	movs	r3, #3
 8014dde:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014de0:	e20b      	b.n	80151fa <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00b      	beq.n	8014e02 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	4619      	mov	r1, r3
 8014df0:	2081      	movs	r0, #129	; 0x81
 8014df2:	f001 fef5 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 8200 	beq.w	80151fe <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014dfe:	2311      	movs	r3, #17
 8014e00:	e209      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e02:	2303      	movs	r3, #3
 8014e04:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e06:	e1fa      	b.n	80151fe <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00b      	beq.n	8014e28 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	4619      	mov	r1, r3
 8014e16:	2082      	movs	r0, #130	; 0x82
 8014e18:	f001 fee2 	bl	8016be0 <LoRaMacCryptoSetKey>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	f000 81ef 	beq.w	8015202 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e24:	2311      	movs	r3, #17
 8014e26:	e1f6      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e28:	2303      	movs	r3, #3
 8014e2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e2c:	e1e9      	b.n	8015202 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	791a      	ldrb	r2, [r3, #4]
 8014e32:	4b18      	ldr	r3, [pc, #96]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e34:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014e38:	4b17      	ldr	r3, [pc, #92]	; (8014e98 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8014e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e3c:	4a15      	ldr	r2, [pc, #84]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e3e:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8014e42:	4610      	mov	r0, r2
 8014e44:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8014e46:	4b14      	ldr	r3, [pc, #80]	; (8014e98 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8014e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e4a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014e4c:	e1e2      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	791a      	ldrb	r2, [r3, #4]
 8014e52:	4b10      	ldr	r3, [pc, #64]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8014e58:	e1dc      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	7a1b      	ldrb	r3, [r3, #8]
 8014e5e:	b25b      	sxtb	r3, r3
 8014e60:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e62:	4b0c      	ldr	r3, [pc, #48]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e64:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014e68:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014e6a:	4b0a      	ldr	r3, [pc, #40]	; (8014e94 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014e70:	f107 0108 	add.w	r1, r7, #8
 8014e74:	2207      	movs	r2, #7
 8014e76:	4618      	mov	r0, r3
 8014e78:	f002 fcf5 	bl	8017866 <RegionVerify>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	f083 0301 	eor.w	r3, r3, #1
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d009      	beq.n	8014e9c <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e88:	2303      	movs	r3, #3
 8014e8a:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8014e8c:	e1c2      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
 8014e8e:	bf00      	nop
 8014e90:	200033f0 	.word	0x200033f0
 8014e94:	200038f8 	.word	0x200038f8
 8014e98:	080232e4 	.word	0x080232e4
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014ea2:	4bb2      	ldr	r3, [pc, #712]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ea8:	f107 0108 	add.w	r1, r7, #8
 8014eac:	2200      	movs	r2, #0
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f002 fcd9 	bl	8017866 <RegionVerify>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	f083 0301 	eor.w	r3, r3, #1
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8014ec4:	e1a6      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014ec6:	4ba9      	ldr	r3, [pc, #676]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	3364      	adds	r3, #100	; 0x64
 8014ecc:	3204      	adds	r2, #4
 8014ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ed2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ed6:	e19d      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	7a1b      	ldrb	r3, [r3, #8]
 8014edc:	b25b      	sxtb	r3, r3
 8014ede:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014ee0:	4ba2      	ldr	r3, [pc, #648]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014ee2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014ee6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014ee8:	4ba0      	ldr	r3, [pc, #640]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014eee:	f107 0108 	add.w	r1, r7, #8
 8014ef2:	2207      	movs	r2, #7
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f002 fcb6 	bl	8017866 <RegionVerify>
 8014efa:	4603      	mov	r3, r0
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d008      	beq.n	8014f12 <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014f00:	4b9a      	ldr	r3, [pc, #616]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	33a4      	adds	r3, #164	; 0xa4
 8014f06:	3204      	adds	r2, #4
 8014f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f0c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f10:	e180      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f12:	2303      	movs	r3, #3
 8014f14:	75fb      	strb	r3, [r7, #23]
            break;
 8014f16:	e17d      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7a1b      	ldrb	r3, [r3, #8]
 8014f1c:	b25b      	sxtb	r3, r3
 8014f1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f20:	4b92      	ldr	r3, [pc, #584]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f22:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f26:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014f28:	4b90      	ldr	r3, [pc, #576]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f2e:	f107 0108 	add.w	r1, r7, #8
 8014f32:	2207      	movs	r2, #7
 8014f34:	4618      	mov	r0, r3
 8014f36:	f002 fc96 	bl	8017866 <RegionVerify>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d019      	beq.n	8014f74 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014f40:	4b8a      	ldr	r3, [pc, #552]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	336c      	adds	r3, #108	; 0x6c
 8014f46:	3204      	adds	r2, #4
 8014f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f4c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014f50:	4b86      	ldr	r3, [pc, #536]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f52:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	f040 8155 	bne.w	8015206 <LoRaMacMibSetRequestConfirm+0x65e>
 8014f5c:	4b83      	ldr	r3, [pc, #524]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f5e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	f000 814f 	beq.w	8015206 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014f68:	4b81      	ldr	r3, [pc, #516]	; (8015170 <LoRaMacMibSetRequestConfirm+0x5c8>)
 8014f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f6c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014f6e:	f7fe fcd9 	bl	8013924 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f72:	e148      	b.n	8015206 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f74:	2303      	movs	r3, #3
 8014f76:	75fb      	strb	r3, [r7, #23]
            break;
 8014f78:	e145      	b.n	8015206 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	7a1b      	ldrb	r3, [r3, #8]
 8014f7e:	b25b      	sxtb	r3, r3
 8014f80:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f82:	4b7a      	ldr	r3, [pc, #488]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f84:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f88:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014f8a:	4b78      	ldr	r3, [pc, #480]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f90:	f107 0108 	add.w	r1, r7, #8
 8014f94:	2207      	movs	r2, #7
 8014f96:	4618      	mov	r0, r3
 8014f98:	f002 fc65 	bl	8017866 <RegionVerify>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d008      	beq.n	8014fb4 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014fa2:	4b72      	ldr	r3, [pc, #456]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	33ac      	adds	r3, #172	; 0xac
 8014fa8:	3204      	adds	r2, #4
 8014faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fae:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fb2:	e12f      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	75fb      	strb	r3, [r7, #23]
            break;
 8014fb8:	e12c      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014fc4:	4b69      	ldr	r3, [pc, #420]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014fca:	f107 020c 	add.w	r2, r7, #12
 8014fce:	4611      	mov	r1, r2
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f002 fc80 	bl	80178d6 <RegionChanMaskSet>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	f083 0301 	eor.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f000 8113 	beq.w	801520a <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fe4:	2303      	movs	r3, #3
 8014fe6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014fe8:	e10f      	b.n	801520a <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014ff4:	4b5d      	ldr	r3, [pc, #372]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ffa:	f107 020c 	add.w	r2, r7, #12
 8014ffe:	4611      	mov	r1, r2
 8015000:	4618      	mov	r0, r3
 8015002:	f002 fc68 	bl	80178d6 <RegionChanMaskSet>
 8015006:	4603      	mov	r3, r0
 8015008:	f083 0301 	eor.w	r3, r3, #1
 801500c:	b2db      	uxtb	r3, r3
 801500e:	2b00      	cmp	r3, #0
 8015010:	f000 80fd 	beq.w	801520e <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015014:	2303      	movs	r3, #3
 8015016:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015018:	e0f9      	b.n	801520e <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	791b      	ldrb	r3, [r3, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d009      	beq.n	8015036 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8015026:	2b0f      	cmp	r3, #15
 8015028:	d805      	bhi.n	8015036 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	791a      	ldrb	r2, [r3, #4]
 801502e:	4b4f      	ldr	r3, [pc, #316]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015030:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015034:	e0ee      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015036:	2303      	movs	r3, #3
 8015038:	75fb      	strb	r3, [r7, #23]
            break;
 801503a:	e0eb      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	4a4a      	ldr	r2, [pc, #296]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015042:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015044:	e0e6      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	4a48      	ldr	r2, [pc, #288]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801504c:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801504e:	e0e1      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	4a45      	ldr	r2, [pc, #276]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015056:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8015058:	e0dc      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	4a43      	ldr	r2, [pc, #268]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015060:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8015062:	e0d7      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	4a40      	ldr	r2, [pc, #256]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801506a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801506c:	e0d2      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015074:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8015076:	4b3d      	ldr	r3, [pc, #244]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801507c:	f107 0108 	add.w	r1, r7, #8
 8015080:	2206      	movs	r2, #6
 8015082:	4618      	mov	r0, r3
 8015084:	f002 fbef 	bl	8017866 <RegionVerify>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d005      	beq.n	801509a <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801508e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015092:	4b36      	ldr	r3, [pc, #216]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015094:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015098:	e0bc      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801509a:	2303      	movs	r3, #3
 801509c:	75fb      	strb	r3, [r7, #23]
            break;
 801509e:	e0b9      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80150a6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80150a8:	4b30      	ldr	r3, [pc, #192]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80150ae:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80150b0:	4b2e      	ldr	r3, [pc, #184]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150b6:	f107 0108 	add.w	r1, r7, #8
 80150ba:	2205      	movs	r2, #5
 80150bc:	4618      	mov	r0, r3
 80150be:	f002 fbd2 	bl	8017866 <RegionVerify>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d005      	beq.n	80150d4 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80150c8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80150cc:	4b27      	ldr	r3, [pc, #156]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80150d2:	e09f      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150d4:	2303      	movs	r3, #3
 80150d6:	75fb      	strb	r3, [r7, #23]
            break;
 80150d8:	e09c      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80150e0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80150e2:	4b22      	ldr	r3, [pc, #136]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150e8:	f107 0108 	add.w	r1, r7, #8
 80150ec:	220a      	movs	r2, #10
 80150ee:	4618      	mov	r0, r3
 80150f0:	f002 fbb9 	bl	8017866 <RegionVerify>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d005      	beq.n	8015106 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80150fa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80150fe:	4b1b      	ldr	r3, [pc, #108]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015100:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015104:	e086      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015106:	2303      	movs	r3, #3
 8015108:	75fb      	strb	r3, [r7, #23]
            break;
 801510a:	e083      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015112:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015114:	4b15      	ldr	r3, [pc, #84]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801511a:	f107 0108 	add.w	r1, r7, #8
 801511e:	2209      	movs	r2, #9
 8015120:	4618      	mov	r0, r3
 8015122:	f002 fba0 	bl	8017866 <RegionVerify>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d005      	beq.n	8015138 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801512c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015130:	4b0e      	ldr	r3, [pc, #56]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015136:	e06d      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015138:	2303      	movs	r3, #3
 801513a:	75fb      	strb	r3, [r7, #23]
            break;
 801513c:	e06a      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	4a0a      	ldr	r2, [pc, #40]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8015148:	4b08      	ldr	r3, [pc, #32]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801514e:	4a07      	ldr	r2, [pc, #28]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015150:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8015152:	e05f      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	791a      	ldrb	r2, [r3, #4]
 8015158:	4b04      	ldr	r3, [pc, #16]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801515a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801515e:	4b03      	ldr	r3, [pc, #12]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015160:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8015164:	4b01      	ldr	r3, [pc, #4]	; (801516c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015166:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 801516a:	e053      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
 801516c:	200038f8 	.word	0x200038f8
 8015170:	080232e4 	.word	0x080232e4
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	4a29      	ldr	r2, [pc, #164]	; (8015220 <LoRaMacMibSetRequestConfirm+0x678>)
 801517a:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801517c:	e04a      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	4a27      	ldr	r2, [pc, #156]	; (8015220 <LoRaMacMibSetRequestConfirm+0x678>)
 8015184:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8015188:	e044      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d007      	beq.n	80151a2 <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	4618      	mov	r0, r3
 8015198:	f7fe fe22 	bl	8013de0 <RestoreNvmData>
 801519c:	4603      	mov	r3, r0
 801519e:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80151a0:	e038      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151a2:	2303      	movs	r3, #3
 80151a4:	75fb      	strb	r3, [r7, #23]
            break;
 80151a6:	e035      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	799b      	ldrb	r3, [r3, #6]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d80d      	bhi.n	80151cc <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80151b0:	4a1b      	ldr	r2, [pc, #108]	; (8015220 <LoRaMacMibSetRequestConfirm+0x678>)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6858      	ldr	r0, [r3, #4]
 80151be:	f001 fc49 	bl	8016a54 <LoRaMacCryptoSetLrWanVersion>
 80151c2:	4603      	mov	r3, r0
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d024      	beq.n	8015212 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80151c8:	2311      	movs	r3, #17
 80151ca:	e024      	b.n	8015216 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151cc:	2303      	movs	r3, #3
 80151ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80151d0:	e01f      	b.n	8015212 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 fbe4 	bl	80159a0 <LoRaMacMibClassBSetRequestConfirm>
 80151d8:	4603      	mov	r3, r0
 80151da:	75fb      	strb	r3, [r7, #23]
            break;
 80151dc:	e01a      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151de:	bf00      	nop
 80151e0:	e018      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151e2:	bf00      	nop
 80151e4:	e016      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151e6:	bf00      	nop
 80151e8:	e014      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151ea:	bf00      	nop
 80151ec:	e012      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151ee:	bf00      	nop
 80151f0:	e010      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151f2:	bf00      	nop
 80151f4:	e00e      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151f6:	bf00      	nop
 80151f8:	e00c      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151fa:	bf00      	nop
 80151fc:	e00a      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80151fe:	bf00      	nop
 8015200:	e008      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015202:	bf00      	nop
 8015204:	e006      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015206:	bf00      	nop
 8015208:	e004      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801520a:	bf00      	nop
 801520c:	e002      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801520e:	bf00      	nop
 8015210:	e000      	b.n	8015214 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015212:	bf00      	nop
        }
    }
    return status;
 8015214:	7dfb      	ldrb	r3, [r7, #23]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3718      	adds	r7, #24
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	200038f8 	.word	0x200038f8

08015224 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b086      	sub	sp, #24
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801522c:	2302      	movs	r3, #2
 801522e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8015230:	2300      	movs	r3, #0
 8015232:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d101      	bne.n	801523e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801523a:	2303      	movs	r3, #3
 801523c:	e127      	b.n	801548e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801523e:	f7fc fd23 	bl	8011c88 <LoRaMacIsBusy>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015248:	2301      	movs	r3, #1
 801524a:	e120      	b.n	801548e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801524c:	f001 f8a6 	bl	801639c <LoRaMacConfirmQueueIsFull>
 8015250:	4603      	mov	r3, r0
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8015256:	2301      	movs	r3, #1
 8015258:	e119      	b.n	801548e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801525a:	f001 f893 	bl	8016384 <LoRaMacConfirmQueueGetCnt>
 801525e:	4603      	mov	r3, r0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d104      	bne.n	801526e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015264:	2214      	movs	r2, #20
 8015266:	2100      	movs	r1, #0
 8015268:	488b      	ldr	r0, [pc, #556]	; (8015498 <LoRaMacMlmeRequest+0x274>)
 801526a:	f006 f9b5 	bl	801b5d8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801526e:	4b8b      	ldr	r3, [pc, #556]	; (801549c <LoRaMacMlmeRequest+0x278>)
 8015270:	2201      	movs	r2, #1
 8015272:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015276:	4a89      	ldr	r2, [pc, #548]	; (801549c <LoRaMacMlmeRequest+0x278>)
 8015278:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801527c:	f043 0304 	orr.w	r3, r3, #4
 8015280:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801528a:	2301      	movs	r3, #1
 801528c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801528e:	2300      	movs	r3, #0
 8015290:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	3b01      	subs	r3, #1
 8015298:	2b0d      	cmp	r3, #13
 801529a:	f200 80ce 	bhi.w	801543a <LoRaMacMlmeRequest+0x216>
 801529e:	a201      	add	r2, pc, #4	; (adr r2, 80152a4 <LoRaMacMlmeRequest+0x80>)
 80152a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152a4:	080152dd 	.word	0x080152dd
 80152a8:	0801543b 	.word	0x0801543b
 80152ac:	0801543b 	.word	0x0801543b
 80152b0:	08015347 	.word	0x08015347
 80152b4:	08015365 	.word	0x08015365
 80152b8:	08015375 	.word	0x08015375
 80152bc:	0801543b 	.word	0x0801543b
 80152c0:	0801543b 	.word	0x0801543b
 80152c4:	0801543b 	.word	0x0801543b
 80152c8:	08015391 	.word	0x08015391
 80152cc:	0801543b 	.word	0x0801543b
 80152d0:	0801540f 	.word	0x0801540f
 80152d4:	080153af 	.word	0x080153af
 80152d8:	080153f1 	.word	0x080153f1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80152dc:	4b6f      	ldr	r3, [pc, #444]	; (801549c <LoRaMacMlmeRequest+0x278>)
 80152de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80152e2:	f003 0320 	and.w	r3, r3, #32
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d001      	beq.n	80152ee <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80152ea:	2301      	movs	r3, #1
 80152ec:	e0cf      	b.n	801548e <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80152ee:	f7fe f9fd 	bl	80136ec <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80152f2:	4b6b      	ldr	r3, [pc, #428]	; (80154a0 <LoRaMacMlmeRequest+0x27c>)
 80152f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	791b      	ldrb	r3, [r3, #4]
 80152fc:	b25b      	sxtb	r3, r3
 80152fe:	2200      	movs	r2, #0
 8015300:	4619      	mov	r1, r3
 8015302:	f002 fbf8 	bl	8017af6 <RegionAlternateDr>
 8015306:	4603      	mov	r3, r0
 8015308:	461a      	mov	r2, r3
 801530a:	4b65      	ldr	r3, [pc, #404]	; (80154a0 <LoRaMacMlmeRequest+0x27c>)
 801530c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8015310:	2307      	movs	r3, #7
 8015312:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8015314:	20ff      	movs	r0, #255	; 0xff
 8015316:	f7fd ff61 	bl	80131dc <SendReJoinReq>
 801531a:	4603      	mov	r3, r0
 801531c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801531e:	7dfb      	ldrb	r3, [r7, #23]
 8015320:	2b00      	cmp	r3, #0
 8015322:	f000 808c 	beq.w	801543e <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015326:	4b5e      	ldr	r3, [pc, #376]	; (80154a0 <LoRaMacMlmeRequest+0x27c>)
 8015328:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	791b      	ldrb	r3, [r3, #4]
 8015330:	b25b      	sxtb	r3, r3
 8015332:	2201      	movs	r2, #1
 8015334:	4619      	mov	r1, r3
 8015336:	f002 fbde 	bl	8017af6 <RegionAlternateDr>
 801533a:	4603      	mov	r3, r0
 801533c:	461a      	mov	r2, r3
 801533e:	4b58      	ldr	r3, [pc, #352]	; (80154a0 <LoRaMacMlmeRequest+0x27c>)
 8015340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8015344:	e07b      	b.n	801543e <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015346:	2300      	movs	r3, #0
 8015348:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801534a:	f107 030c 	add.w	r3, r7, #12
 801534e:	2200      	movs	r2, #0
 8015350:	4619      	mov	r1, r3
 8015352:	2002      	movs	r0, #2
 8015354:	f000 fc88 	bl	8015c68 <LoRaMacCommandsAddCmd>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d071      	beq.n	8015442 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801535e:	2313      	movs	r3, #19
 8015360:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015362:	e06e      	b.n	8015442 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	889b      	ldrh	r3, [r3, #4]
 8015368:	4618      	mov	r0, r3
 801536a:	f7fe fcdb 	bl	8013d24 <SetTxContinuousWave>
 801536e:	4603      	mov	r3, r0
 8015370:	75fb      	strb	r3, [r7, #23]
            break;
 8015372:	e06d      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	8898      	ldrh	r0, [r3, #4]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6899      	ldr	r1, [r3, #8]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015382:	b2db      	uxtb	r3, r3
 8015384:	461a      	mov	r2, r3
 8015386:	f7fe fd01 	bl	8013d8c <SetTxContinuousWave1>
 801538a:	4603      	mov	r3, r0
 801538c:	75fb      	strb	r3, [r7, #23]
            break;
 801538e:	e05f      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015390:	2300      	movs	r3, #0
 8015392:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015394:	f107 030c 	add.w	r3, r7, #12
 8015398:	2200      	movs	r2, #0
 801539a:	4619      	mov	r1, r3
 801539c:	200d      	movs	r0, #13
 801539e:	f000 fc63 	bl	8015c68 <LoRaMacCommandsAddCmd>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d04e      	beq.n	8015446 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80153a8:	2313      	movs	r3, #19
 80153aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153ac:	e04b      	b.n	8015446 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80153ae:	4b3c      	ldr	r3, [pc, #240]	; (80154a0 <LoRaMacMlmeRequest+0x27c>)
 80153b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d148      	bne.n	801544a <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	791b      	ldrb	r3, [r3, #4]
 80153bc:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	791b      	ldrb	r3, [r3, #4]
 80153c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	4618      	mov	r0, r3
 80153ca:	f000 fabe 	bl	801594a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80153ce:	7dbb      	ldrb	r3, [r7, #22]
 80153d0:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 80153d2:	2300      	movs	r3, #0
 80153d4:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80153d6:	f107 030c 	add.w	r3, r7, #12
 80153da:	2201      	movs	r2, #1
 80153dc:	4619      	mov	r1, r3
 80153de:	2010      	movs	r0, #16
 80153e0:	f000 fc42 	bl	8015c68 <LoRaMacCommandsAddCmd>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d02f      	beq.n	801544a <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80153ea:	2313      	movs	r3, #19
 80153ec:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80153ee:	e02c      	b.n	801544a <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80153f0:	2300      	movs	r3, #0
 80153f2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80153f4:	f107 030c 	add.w	r3, r7, #12
 80153f8:	2200      	movs	r2, #0
 80153fa:	4619      	mov	r1, r3
 80153fc:	2012      	movs	r0, #18
 80153fe:	f000 fc33 	bl	8015c68 <LoRaMacCommandsAddCmd>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d022      	beq.n	801544e <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015408:	2313      	movs	r3, #19
 801540a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801540c:	e01f      	b.n	801544e <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801540e:	2301      	movs	r3, #1
 8015410:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015412:	f000 fa50 	bl	80158b6 <LoRaMacClassBIsAcquisitionInProgress>
 8015416:	4603      	mov	r3, r0
 8015418:	f083 0301 	eor.w	r3, r3, #1
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b00      	cmp	r3, #0
 8015420:	d008      	beq.n	8015434 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015422:	2000      	movs	r0, #0
 8015424:	f000 fa29 	bl	801587a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015428:	2000      	movs	r0, #0
 801542a:	f000 fa4b 	bl	80158c4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801542e:	2300      	movs	r3, #0
 8015430:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015432:	e00d      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8015434:	2301      	movs	r3, #1
 8015436:	75fb      	strb	r3, [r7, #23]
            break;
 8015438:	e00a      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 801543a:	bf00      	nop
 801543c:	e008      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
            break;
 801543e:	bf00      	nop
 8015440:	e006      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
            break;
 8015442:	bf00      	nop
 8015444:	e004      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
            break;
 8015446:	bf00      	nop
 8015448:	e002      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
            break;
 801544a:	bf00      	nop
 801544c:	e000      	b.n	8015450 <LoRaMacMlmeRequest+0x22c>
            break;
 801544e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015450:	4b12      	ldr	r3, [pc, #72]	; (801549c <LoRaMacMlmeRequest+0x278>)
 8015452:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801545a:	7dfb      	ldrb	r3, [r7, #23]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d010      	beq.n	8015482 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015460:	f000 ff90 	bl	8016384 <LoRaMacConfirmQueueGetCnt>
 8015464:	4603      	mov	r3, r0
 8015466:	2b00      	cmp	r3, #0
 8015468:	d110      	bne.n	801548c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 801546a:	4b0c      	ldr	r3, [pc, #48]	; (801549c <LoRaMacMlmeRequest+0x278>)
 801546c:	2200      	movs	r2, #0
 801546e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015472:	4a0a      	ldr	r2, [pc, #40]	; (801549c <LoRaMacMlmeRequest+0x278>)
 8015474:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015478:	f36f 0382 	bfc	r3, #2, #1
 801547c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015480:	e004      	b.n	801548c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015482:	f107 0310 	add.w	r3, r7, #16
 8015486:	4618      	mov	r0, r3
 8015488:	f000 fe2e 	bl	80160e8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801548c:	7dfb      	ldrb	r3, [r7, #23]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3718      	adds	r7, #24
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	2000383c 	.word	0x2000383c
 801549c:	200033f0 	.word	0x200033f0
 80154a0:	200038f8 	.word	0x200038f8

080154a4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b08c      	sub	sp, #48	; 0x30
 80154a8:	af02      	add	r7, sp, #8
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	460b      	mov	r3, r1
 80154ae:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80154b0:	2302      	movs	r3, #2
 80154b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80154b6:	2300      	movs	r3, #0
 80154b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80154bc:	2300      	movs	r3, #0
 80154be:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 80154c4:	2300      	movs	r3, #0
 80154c6:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d101      	bne.n	80154d2 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80154ce:	2303      	movs	r3, #3
 80154d0:	e0d4      	b.n	801567c <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 80154d2:	f7fc fbd9 	bl	8011c88 <LoRaMacIsBusy>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80154dc:	2301      	movs	r3, #1
 80154de:	e0cd      	b.n	801567c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80154e0:	2300      	movs	r3, #0
 80154e2:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80154e4:	2214      	movs	r2, #20
 80154e6:	2100      	movs	r1, #0
 80154e8:	4866      	ldr	r0, [pc, #408]	; (8015684 <LoRaMacMcpsRequest+0x1e0>)
 80154ea:	f006 f875 	bl	801b5d8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80154ee:	4b66      	ldr	r3, [pc, #408]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 80154f0:	2201      	movs	r2, #1
 80154f2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80154f6:	4b64      	ldr	r3, [pc, #400]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	2b03      	cmp	r3, #3
 8015504:	d03d      	beq.n	8015582 <LoRaMacMcpsRequest+0xde>
 8015506:	2b03      	cmp	r3, #3
 8015508:	dc4f      	bgt.n	80155aa <LoRaMacMcpsRequest+0x106>
 801550a:	2b00      	cmp	r3, #0
 801550c:	d002      	beq.n	8015514 <LoRaMacMcpsRequest+0x70>
 801550e:	2b01      	cmp	r3, #1
 8015510:	d019      	beq.n	8015546 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015512:	e04a      	b.n	80155aa <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015514:	2301      	movs	r3, #1
 8015516:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015518:	4b5b      	ldr	r3, [pc, #364]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 801551a:	2201      	movs	r2, #1
 801551c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015520:	7b3b      	ldrb	r3, [r7, #12]
 8015522:	2202      	movs	r2, #2
 8015524:	f362 1347 	bfi	r3, r2, #5, #3
 8015528:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	791b      	ldrb	r3, [r3, #4]
 801552e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	689b      	ldr	r3, [r3, #8]
 8015536:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	899b      	ldrh	r3, [r3, #12]
 801553c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	7b9b      	ldrb	r3, [r3, #14]
 8015542:	777b      	strb	r3, [r7, #29]
            break;
 8015544:	e032      	b.n	80155ac <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015546:	2301      	movs	r3, #1
 8015548:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	7bdb      	ldrb	r3, [r3, #15]
 801554e:	2b08      	cmp	r3, #8
 8015550:	bf28      	it	cs
 8015552:	2308      	movcs	r3, #8
 8015554:	b2da      	uxtb	r2, r3
 8015556:	4b4c      	ldr	r3, [pc, #304]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015558:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801555c:	7b3b      	ldrb	r3, [r7, #12]
 801555e:	2204      	movs	r2, #4
 8015560:	f362 1347 	bfi	r3, r2, #5, #3
 8015564:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	791b      	ldrb	r3, [r3, #4]
 801556a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	689b      	ldr	r3, [r3, #8]
 8015572:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	899b      	ldrh	r3, [r3, #12]
 8015578:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7b9b      	ldrb	r3, [r3, #14]
 801557e:	777b      	strb	r3, [r7, #29]
            break;
 8015580:	e014      	b.n	80155ac <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015582:	2301      	movs	r3, #1
 8015584:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015586:	4b40      	ldr	r3, [pc, #256]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015588:	2201      	movs	r2, #1
 801558a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801558e:	7b3b      	ldrb	r3, [r7, #12]
 8015590:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015594:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	891b      	ldrh	r3, [r3, #8]
 80155a0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	7a9b      	ldrb	r3, [r3, #10]
 80155a6:	777b      	strb	r3, [r7, #29]
            break;
 80155a8:	e000      	b.n	80155ac <LoRaMacMcpsRequest+0x108>
            break;
 80155aa:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80155ac:	2302      	movs	r3, #2
 80155ae:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80155b0:	4b36      	ldr	r3, [pc, #216]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 80155b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80155b6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80155b8:	4b34      	ldr	r3, [pc, #208]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 80155ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155be:	f107 0214 	add.w	r2, r7, #20
 80155c2:	4611      	mov	r1, r2
 80155c4:	4618      	mov	r0, r3
 80155c6:	f002 f900 	bl	80177ca <RegionGetPhyParam>
 80155ca:	4603      	mov	r3, r0
 80155cc:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	b25b      	sxtb	r3, r3
 80155d2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80155d6:	4293      	cmp	r3, r2
 80155d8:	bfb8      	it	lt
 80155da:	4613      	movlt	r3, r2
 80155dc:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80155de:	7f3b      	ldrb	r3, [r7, #28]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d044      	beq.n	801566e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80155e4:	4b29      	ldr	r3, [pc, #164]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 80155e6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80155ea:	f083 0301 	eor.w	r3, r3, #1
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d019      	beq.n	8015628 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80155f4:	7f7b      	ldrb	r3, [r7, #29]
 80155f6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80155f8:	4b24      	ldr	r3, [pc, #144]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 80155fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80155fe:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015600:	4b22      	ldr	r3, [pc, #136]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 8015602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015606:	f107 0108 	add.w	r1, r7, #8
 801560a:	2205      	movs	r2, #5
 801560c:	4618      	mov	r0, r3
 801560e:	f002 f92a 	bl	8017866 <RegionVerify>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d005      	beq.n	8015624 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015618:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801561c:	4b1b      	ldr	r3, [pc, #108]	; (801568c <LoRaMacMcpsRequest+0x1e8>)
 801561e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015622:	e001      	b.n	8015628 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015624:	2303      	movs	r3, #3
 8015626:	e029      	b.n	801567c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015628:	8bfa      	ldrh	r2, [r7, #30]
 801562a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801562e:	f107 000c 	add.w	r0, r7, #12
 8015632:	78fb      	ldrb	r3, [r7, #3]
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	4613      	mov	r3, r2
 8015638:	6a3a      	ldr	r2, [r7, #32]
 801563a:	f7fd fcef 	bl	801301c <Send>
 801563e:	4603      	mov	r3, r0
 8015640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10c      	bne.n	8015666 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	781a      	ldrb	r2, [r3, #0]
 8015650:	4b0d      	ldr	r3, [pc, #52]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015652:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015656:	4a0c      	ldr	r2, [pc, #48]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015658:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801565c:	f043 0301 	orr.w	r3, r3, #1
 8015660:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015664:	e003      	b.n	801566e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015666:	4b08      	ldr	r3, [pc, #32]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015668:	2200      	movs	r2, #0
 801566a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801566e:	4b06      	ldr	r3, [pc, #24]	; (8015688 <LoRaMacMcpsRequest+0x1e4>)
 8015670:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	611a      	str	r2, [r3, #16]

    return status;
 8015678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801567c:	4618      	mov	r0, r3
 801567e:	3728      	adds	r7, #40	; 0x28
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}
 8015684:	20003828 	.word	0x20003828
 8015688:	200033f0 	.word	0x200033f0
 801568c:	200038f8 	.word	0x200038f8

08015690 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801569a:	79fb      	ldrb	r3, [r7, #7]
 801569c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801569e:	4b0a      	ldr	r3, [pc, #40]	; (80156c8 <LoRaMacTestSetDutyCycleOn+0x38>)
 80156a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80156a4:	f107 010c 	add.w	r1, r7, #12
 80156a8:	220f      	movs	r2, #15
 80156aa:	4618      	mov	r0, r3
 80156ac:	f002 f8db 	bl	8017866 <RegionVerify>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d003      	beq.n	80156be <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80156b6:	4a04      	ldr	r2, [pc, #16]	; (80156c8 <LoRaMacTestSetDutyCycleOn+0x38>)
 80156b8:	79fb      	ldrb	r3, [r7, #7]
 80156ba:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 80156be:	bf00      	nop
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	200038f8 	.word	0x200038f8

080156cc <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08c      	sub	sp, #48	; 0x30
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80156da:	2300      	movs	r3, #0
 80156dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	7c1b      	ldrb	r3, [r3, #16]
 80156e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	7c5b      	ldrb	r3, [r3, #17]
 80156ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	689a      	ldr	r2, [r3, #8]
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	795b      	ldrb	r3, [r3, #5]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f000 808b 	beq.w	8015818 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015702:	2302      	movs	r3, #2
 8015704:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	7c9b      	ldrb	r3, [r3, #18]
 801570c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	7cdb      	ldrb	r3, [r3, #19]
 8015714:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015718:	4611      	mov	r1, r2
 801571a:	4618      	mov	r0, r3
 801571c:	f002 f855 	bl	80177ca <RegionGetPhyParam>
 8015720:	4603      	mov	r3, r0
 8015722:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015724:	6a3b      	ldr	r3, [r7, #32]
 8015726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801572a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801572e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015732:	4293      	cmp	r3, r2
 8015734:	bfb8      	it	lt
 8015736:	4613      	movlt	r3, r2
 8015738:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 801573c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015740:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015744:	429a      	cmp	r2, r3
 8015746:	d106      	bne.n	8015756 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	2200      	movs	r2, #0
 801574c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801574e:	2300      	movs	r3, #0
 8015750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015754:	e060      	b.n	8015818 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	8992      	ldrh	r2, [r2, #12]
 801575e:	4293      	cmp	r3, r2
 8015760:	d303      	bcc.n	801576a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015762:	2301      	movs	r3, #1
 8015764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015768:	e002      	b.n	8015770 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801576a:	2300      	movs	r3, #0
 801576c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	8992      	ldrh	r2, [r2, #12]
 8015778:	4611      	mov	r1, r2
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	89d2      	ldrh	r2, [r2, #14]
 801577e:	440a      	add	r2, r1
 8015780:	4293      	cmp	r3, r2
 8015782:	d349      	bcc.n	8015818 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015784:	2308      	movs	r3, #8
 8015786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	7cdb      	ldrb	r3, [r3, #19]
 801578e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015792:	4611      	mov	r1, r2
 8015794:	4618      	mov	r0, r3
 8015796:	f002 f818 	bl	80177ca <RegionGetPhyParam>
 801579a:	4603      	mov	r3, r0
 801579c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801579e:	6a3b      	ldr	r3, [r7, #32]
 80157a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	89d2      	ldrh	r2, [r2, #14]
 80157ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80157b0:	fb01 f202 	mul.w	r2, r1, r2
 80157b4:	1a9b      	subs	r3, r3, r2
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d12e      	bne.n	8015818 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80157ba:	2322      	movs	r3, #34	; 0x22
 80157bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80157c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80157c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	7c9b      	ldrb	r3, [r3, #18]
 80157cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	7cdb      	ldrb	r3, [r3, #19]
 80157d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157d8:	4611      	mov	r1, r2
 80157da:	4618      	mov	r0, r3
 80157dc:	f001 fff5 	bl	80177ca <RegionGetPhyParam>
 80157e0:	4603      	mov	r3, r0
 80157e2:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80157ea:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80157ee:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d110      	bne.n	8015818 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80157f6:	2300      	movs	r3, #0
 80157f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	791b      	ldrb	r3, [r3, #4]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d009      	beq.n	8015818 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015804:	2302      	movs	r3, #2
 8015806:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	7cdb      	ldrb	r3, [r3, #19]
 801580c:	f107 0214 	add.w	r2, r7, #20
 8015810:	4611      	mov	r1, r2
 8015812:	4618      	mov	r0, r3
 8015814:	f002 f810 	bl	8017838 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801581e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015826:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801582c:	4618      	mov	r0, r3
 801582e:	3730      	adds	r7, #48	; 0x30
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	60f8      	str	r0, [r7, #12]
 801583c:	60b9      	str	r1, [r7, #8]
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	789b      	ldrb	r3, [r3, #2]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d107      	bne.n	801585a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	68b9      	ldr	r1, [r7, #8]
 8015850:	68f8      	ldr	r0, [r7, #12]
 8015852:	f7ff ff3b 	bl	80156cc <CalcNextV10X>
 8015856:	4603      	mov	r3, r0
 8015858:	e000      	b.n	801585c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801585a:	2300      	movs	r3, #0
}
 801585c:	4618      	mov	r0, r3
 801585e:	3710      	adds	r7, #16
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8015864:	b480      	push	{r7}
 8015866:	b085      	sub	sp, #20
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015870:	bf00      	nop
 8015872:	3714      	adds	r7, #20
 8015874:	46bd      	mov	sp, r7
 8015876:	bc80      	pop	{r7}
 8015878:	4770      	bx	lr

0801587a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801587a:	b480      	push	{r7}
 801587c:	b083      	sub	sp, #12
 801587e:	af00      	add	r7, sp, #0
 8015880:	4603      	mov	r3, r0
 8015882:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015884:	bf00      	nop
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	bc80      	pop	{r7}
 801588c:	4770      	bx	lr

0801588e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801588e:	b480      	push	{r7}
 8015890:	b083      	sub	sp, #12
 8015892:	af00      	add	r7, sp, #0
 8015894:	4603      	mov	r3, r0
 8015896:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	bc80      	pop	{r7}
 80158a0:	4770      	bx	lr

080158a2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80158a2:	b480      	push	{r7}
 80158a4:	b083      	sub	sp, #12
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	4603      	mov	r3, r0
 80158aa:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ac:	bf00      	nop
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bc80      	pop	{r7}
 80158b4:	4770      	bx	lr

080158b6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80158b6:	b480      	push	{r7}
 80158b8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80158ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158bc:	4618      	mov	r0, r3
 80158be:	46bd      	mov	sp, r7
 80158c0:	bc80      	pop	{r7}
 80158c2:	4770      	bx	lr

080158c4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158cc:	bf00      	nop
 80158ce:	370c      	adds	r7, #12
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bc80      	pop	{r7}
 80158d4:	4770      	bx	lr

080158d6 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80158d6:	b480      	push	{r7}
 80158d8:	b083      	sub	sp, #12
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158de:	bf00      	nop
 80158e0:	370c      	adds	r7, #12
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bc80      	pop	{r7}
 80158e6:	4770      	bx	lr

080158e8 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80158e8:	b480      	push	{r7}
 80158ea:	b083      	sub	sp, #12
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f0:	bf00      	nop
 80158f2:	370c      	adds	r7, #12
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bc80      	pop	{r7}
 80158f8:	4770      	bx	lr

080158fa <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80158fa:	b480      	push	{r7}
 80158fc:	b083      	sub	sp, #12
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	460b      	mov	r3, r1
 8015904:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015906:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015908:	4618      	mov	r0, r3
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	bc80      	pop	{r7}
 8015910:	4770      	bx	lr

08015912 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015912:	b480      	push	{r7}
 8015914:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015916:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015918:	4618      	mov	r0, r3
 801591a:	46bd      	mov	sp, r7
 801591c:	bc80      	pop	{r7}
 801591e:	4770      	bx	lr

08015920 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015920:	b480      	push	{r7}
 8015922:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015924:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015926:	4618      	mov	r0, r3
 8015928:	46bd      	mov	sp, r7
 801592a:	bc80      	pop	{r7}
 801592c:	4770      	bx	lr

0801592e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801592e:	b480      	push	{r7}
 8015930:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015932:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015934:	4618      	mov	r0, r3
 8015936:	46bd      	mov	sp, r7
 8015938:	bc80      	pop	{r7}
 801593a:	4770      	bx	lr

0801593c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801593c:	b480      	push	{r7}
 801593e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015940:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015942:	4618      	mov	r0, r3
 8015944:	46bd      	mov	sp, r7
 8015946:	bc80      	pop	{r7}
 8015948:	4770      	bx	lr

0801594a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801594a:	b480      	push	{r7}
 801594c:	b083      	sub	sp, #12
 801594e:	af00      	add	r7, sp, #0
 8015950:	4603      	mov	r3, r0
 8015952:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015954:	bf00      	nop
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	bc80      	pop	{r7}
 801595c:	4770      	bx	lr

0801595e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801595e:	b480      	push	{r7}
 8015960:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015962:	bf00      	nop
 8015964:	46bd      	mov	sp, r7
 8015966:	bc80      	pop	{r7}
 8015968:	4770      	bx	lr

0801596a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801596a:	b480      	push	{r7}
 801596c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801596e:	bf00      	nop
 8015970:	46bd      	mov	sp, r7
 8015972:	bc80      	pop	{r7}
 8015974:	4770      	bx	lr

08015976 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015976:	b480      	push	{r7}
 8015978:	b083      	sub	sp, #12
 801597a:	af00      	add	r7, sp, #0
 801597c:	4603      	mov	r3, r0
 801597e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015980:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015982:	4618      	mov	r0, r3
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	bc80      	pop	{r7}
 801598a:	4770      	bx	lr

0801598c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015994:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015996:	4618      	mov	r0, r3
 8015998:	370c      	adds	r7, #12
 801599a:	46bd      	mov	sp, r7
 801599c:	bc80      	pop	{r7}
 801599e:	4770      	bx	lr

080159a0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159a8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	370c      	adds	r7, #12
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bc80      	pop	{r7}
 80159b2:	4770      	bx	lr

080159b4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80159b4:	b480      	push	{r7}
 80159b6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159b8:	bf00      	nop
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bc80      	pop	{r7}
 80159be:	4770      	bx	lr

080159c0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80159c0:	b480      	push	{r7}
 80159c2:	b083      	sub	sp, #12
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	4603      	mov	r3, r0
 80159c8:	6039      	str	r1, [r7, #0]
 80159ca:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80159cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	370c      	adds	r7, #12
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bc80      	pop	{r7}
 80159d6:	4770      	bx	lr

080159d8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	4603      	mov	r3, r0
 80159e0:	603a      	str	r2, [r7, #0]
 80159e2:	80fb      	strh	r3, [r7, #6]
 80159e4:	460b      	mov	r3, r1
 80159e6:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159e8:	bf00      	nop
 80159ea:	370c      	adds	r7, #12
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bc80      	pop	{r7}
 80159f0:	4770      	bx	lr

080159f2 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80159f2:	b480      	push	{r7}
 80159f4:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159f6:	bf00      	nop
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bc80      	pop	{r7}
 80159fc:	4770      	bx	lr

080159fe <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80159fe:	b480      	push	{r7}
 8015a00:	b083      	sub	sp, #12
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015a06:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bc80      	pop	{r7}
 8015a10:	4770      	bx	lr

08015a12 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015a12:	b480      	push	{r7}
 8015a14:	b083      	sub	sp, #12
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015a1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bc80      	pop	{r7}
 8015a24:	4770      	bx	lr

08015a26 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015a26:	b480      	push	{r7}
 8015a28:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a2a:	bf00      	nop
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bc80      	pop	{r7}
 8015a30:	4770      	bx	lr

08015a32 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8015a32:	b480      	push	{r7}
 8015a34:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a36:	bf00      	nop
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bc80      	pop	{r7}
 8015a3c:	4770      	bx	lr

08015a3e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015a3e:	b480      	push	{r7}
 8015a40:	b085      	sub	sp, #20
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	81fb      	strh	r3, [r7, #14]
 8015a4e:	e00a      	b.n	8015a66 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015a50:	89fb      	ldrh	r3, [r7, #14]
 8015a52:	68ba      	ldr	r2, [r7, #8]
 8015a54:	4413      	add	r3, r2
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d001      	beq.n	8015a60 <IsSlotFree+0x22>
        {
            return false;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	e006      	b.n	8015a6e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a60:	89fb      	ldrh	r3, [r7, #14]
 8015a62:	3301      	adds	r3, #1
 8015a64:	81fb      	strh	r3, [r7, #14]
 8015a66:	89fb      	ldrh	r3, [r7, #14]
 8015a68:	2b0f      	cmp	r3, #15
 8015a6a:	d9f1      	bls.n	8015a50 <IsSlotFree+0x12>
        }
    }
    return true;
 8015a6c:	2301      	movs	r3, #1
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3714      	adds	r7, #20
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bc80      	pop	{r7}
 8015a76:	4770      	bx	lr

08015a78 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a82:	e007      	b.n	8015a94 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a84:	79fb      	ldrb	r3, [r7, #7]
 8015a86:	3301      	adds	r3, #1
 8015a88:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a8a:	79fb      	ldrb	r3, [r7, #7]
 8015a8c:	2b0f      	cmp	r3, #15
 8015a8e:	d101      	bne.n	8015a94 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a90:	2300      	movs	r3, #0
 8015a92:	e012      	b.n	8015aba <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	011b      	lsls	r3, r3, #4
 8015a98:	3308      	adds	r3, #8
 8015a9a:	4a0a      	ldr	r2, [pc, #40]	; (8015ac4 <MallocNewMacCommandSlot+0x4c>)
 8015a9c:	4413      	add	r3, r2
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7ff ffcd 	bl	8015a3e <IsSlotFree>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	f083 0301 	eor.w	r3, r3, #1
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d1e9      	bne.n	8015a84 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015ab0:	79fb      	ldrb	r3, [r7, #7]
 8015ab2:	011b      	lsls	r3, r3, #4
 8015ab4:	3308      	adds	r3, #8
 8015ab6:	4a03      	ldr	r2, [pc, #12]	; (8015ac4 <MallocNewMacCommandSlot+0x4c>)
 8015ab8:	4413      	add	r3, r2
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	3708      	adds	r7, #8
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	bf00      	nop
 8015ac4:	20003f20 	.word	0x20003f20

08015ac8 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d101      	bne.n	8015ada <FreeMacCommandSlot+0x12>
    {
        return false;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	e005      	b.n	8015ae6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015ada:	2210      	movs	r2, #16
 8015adc:	2100      	movs	r1, #0
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f005 fd7a 	bl	801b5d8 <memset1>

    return true;
 8015ae4:	2301      	movs	r3, #1
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3708      	adds	r7, #8
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015aee:	b480      	push	{r7}
 8015af0:	b083      	sub	sp, #12
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d101      	bne.n	8015b00 <LinkedListInit+0x12>
    {
        return false;
 8015afc:	2300      	movs	r3, #0
 8015afe:	e006      	b.n	8015b0e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	605a      	str	r2, [r3, #4]

    return true;
 8015b0c:	2301      	movs	r3, #1
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	370c      	adds	r7, #12
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bc80      	pop	{r7}
 8015b16:	4770      	bx	lr

08015b18 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b083      	sub	sp, #12
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <LinkedListAdd+0x16>
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d101      	bne.n	8015b32 <LinkedListAdd+0x1a>
    {
        return false;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e015      	b.n	8015b5e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d102      	bne.n	8015b40 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	683a      	ldr	r2, [r7, #0]
 8015b3e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d003      	beq.n	8015b50 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	683a      	ldr	r2, [r7, #0]
 8015b4e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	2200      	movs	r2, #0
 8015b54:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	683a      	ldr	r2, [r7, #0]
 8015b5a:	605a      	str	r2, [r3, #4]

    return true;
 8015b5c:	2301      	movs	r3, #1
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	370c      	adds	r7, #12
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bc80      	pop	{r7}
 8015b66:	4770      	bx	lr

08015b68 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b085      	sub	sp, #20
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d002      	beq.n	8015b7e <LinkedListGetPrevious+0x16>
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d101      	bne.n	8015b82 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	e016      	b.n	8015bb0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b88:	683a      	ldr	r2, [r7, #0]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d00c      	beq.n	8015baa <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b90:	e002      	b.n	8015b98 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d007      	beq.n	8015bae <LinkedListGetPrevious+0x46>
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	683a      	ldr	r2, [r7, #0]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d1f4      	bne.n	8015b92 <LinkedListGetPrevious+0x2a>
 8015ba8:	e001      	b.n	8015bae <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015baa:	2300      	movs	r3, #0
 8015bac:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015bae:	68fb      	ldr	r3, [r7, #12]
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3714      	adds	r7, #20
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bc80      	pop	{r7}
 8015bb8:	4770      	bx	lr

08015bba <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b084      	sub	sp, #16
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d002      	beq.n	8015bd0 <LinkedListRemove+0x16>
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d101      	bne.n	8015bd4 <LinkedListRemove+0x1a>
    {
        return false;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	e020      	b.n	8015c16 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015bd4:	6839      	ldr	r1, [r7, #0]
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7ff ffc6 	bl	8015b68 <LinkedListGetPrevious>
 8015bdc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	683a      	ldr	r2, [r7, #0]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d103      	bne.n	8015bf0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	683a      	ldr	r2, [r7, #0]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d102      	bne.n	8015c00 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d003      	beq.n	8015c0e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	2200      	movs	r2, #0
 8015c12:	601a      	str	r2, [r3, #0]

    return true;
 8015c14:	2301      	movs	r3, #1
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015c1e:	b480      	push	{r7}
 8015c20:	b083      	sub	sp, #12
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	4603      	mov	r3, r0
 8015c26:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015c28:	79fb      	ldrb	r3, [r7, #7]
 8015c2a:	2b05      	cmp	r3, #5
 8015c2c:	d004      	beq.n	8015c38 <IsSticky+0x1a>
 8015c2e:	2b05      	cmp	r3, #5
 8015c30:	db04      	blt.n	8015c3c <IsSticky+0x1e>
 8015c32:	3b08      	subs	r3, #8
 8015c34:	2b02      	cmp	r3, #2
 8015c36:	d801      	bhi.n	8015c3c <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8015c38:	2301      	movs	r3, #1
 8015c3a:	e000      	b.n	8015c3e <IsSticky+0x20>
        default:
            return false;
 8015c3c:	2300      	movs	r3, #0
    }
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	370c      	adds	r7, #12
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bc80      	pop	{r7}
 8015c46:	4770      	bx	lr

08015c48 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c4c:	22fc      	movs	r2, #252	; 0xfc
 8015c4e:	2100      	movs	r1, #0
 8015c50:	4804      	ldr	r0, [pc, #16]	; (8015c64 <LoRaMacCommandsInit+0x1c>)
 8015c52:	f005 fcc1 	bl	801b5d8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c56:	4803      	ldr	r0, [pc, #12]	; (8015c64 <LoRaMacCommandsInit+0x1c>)
 8015c58:	f7ff ff49 	bl	8015aee <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c5c:	2300      	movs	r3, #0
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	bd80      	pop	{r7, pc}
 8015c62:	bf00      	nop
 8015c64:	20003f20 	.word	0x20003f20

08015c68 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b086      	sub	sp, #24
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	4603      	mov	r3, r0
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	607a      	str	r2, [r7, #4]
 8015c74:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d101      	bne.n	8015c80 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	e033      	b.n	8015ce8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c80:	f7ff fefa 	bl	8015a78 <MallocNewMacCommandSlot>
 8015c84:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d101      	bne.n	8015c90 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c8c:	2302      	movs	r3, #2
 8015c8e:	e02b      	b.n	8015ce8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c90:	6979      	ldr	r1, [r7, #20]
 8015c92:	4817      	ldr	r0, [pc, #92]	; (8015cf0 <LoRaMacCommandsAddCmd+0x88>)
 8015c94:	f7ff ff40 	bl	8015b18 <LinkedListAdd>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	f083 0301 	eor.w	r3, r3, #1
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d001      	beq.n	8015ca8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015ca4:	2305      	movs	r3, #5
 8015ca6:	e01f      	b.n	8015ce8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	7bfa      	ldrb	r2, [r7, #15]
 8015cac:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	3305      	adds	r3, #5
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	b292      	uxth	r2, r2
 8015cbc:	68b9      	ldr	r1, [r7, #8]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f005 fc4f 	bl	801b562 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015cc4:	7bfb      	ldrb	r3, [r7, #15]
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7ff ffa9 	bl	8015c1e <IsSticky>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	461a      	mov	r2, r3
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015cd4:	4b06      	ldr	r3, [pc, #24]	; (8015cf0 <LoRaMacCommandsAddCmd+0x88>)
 8015cd6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	4413      	add	r3, r2
 8015cde:	3301      	adds	r3, #1
 8015ce0:	4a03      	ldr	r2, [pc, #12]	; (8015cf0 <LoRaMacCommandsAddCmd+0x88>)
 8015ce2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3718      	adds	r7, #24
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	20003f20 	.word	0x20003f20

08015cf4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d101      	bne.n	8015d06 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015d02:	2301      	movs	r3, #1
 8015d04:	e021      	b.n	8015d4a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015d06:	6879      	ldr	r1, [r7, #4]
 8015d08:	4812      	ldr	r0, [pc, #72]	; (8015d54 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d0a:	f7ff ff56 	bl	8015bba <LinkedListRemove>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	f083 0301 	eor.w	r3, r3, #1
 8015d14:	b2db      	uxtb	r3, r3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d001      	beq.n	8015d1e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d1a:	2303      	movs	r3, #3
 8015d1c:	e015      	b.n	8015d4a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015d1e:	4b0d      	ldr	r3, [pc, #52]	; (8015d54 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d20:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	689b      	ldr	r3, [r3, #8]
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	3b01      	subs	r3, #1
 8015d2c:	4a09      	ldr	r2, [pc, #36]	; (8015d54 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d2e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f7ff fec8 	bl	8015ac8 <FreeMacCommandSlot>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	f083 0301 	eor.w	r3, r3, #1
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d001      	beq.n	8015d48 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d44:	2305      	movs	r3, #5
 8015d46:	e000      	b.n	8015d4a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d48:	2300      	movs	r3, #0
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	20003f20 	.word	0x20003f20

08015d58 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b082      	sub	sp, #8
 8015d5c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d5e:	4b0f      	ldr	r3, [pc, #60]	; (8015d9c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d64:	e012      	b.n	8015d8c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	7b1b      	ldrb	r3, [r3, #12]
 8015d6a:	f083 0301 	eor.w	r3, r3, #1
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d008      	beq.n	8015d86 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff ffba 	bl	8015cf4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	607b      	str	r3, [r7, #4]
 8015d84:	e002      	b.n	8015d8c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d1e9      	bne.n	8015d66 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d92:	2300      	movs	r3, #0
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3708      	adds	r7, #8
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	20003f20 	.word	0x20003f20

08015da0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015da6:	4b0e      	ldr	r3, [pc, #56]	; (8015de0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015dac:	e00f      	b.n	8015dce <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	791b      	ldrb	r3, [r3, #4]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7ff ff30 	bl	8015c1e <IsSticky>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d002      	beq.n	8015dca <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f7ff ff95 	bl	8015cf4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d1ec      	bne.n	8015dae <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dd4:	2300      	movs	r3, #0
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	20003f20 	.word	0x20003f20

08015de4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d101      	bne.n	8015df6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e005      	b.n	8015e02 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015df6:	4b05      	ldr	r3, [pc, #20]	; (8015e0c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015df8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e00:	2300      	movs	r3, #0
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	370c      	adds	r7, #12
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bc80      	pop	{r7}
 8015e0a:	4770      	bx	lr
 8015e0c:	20003f20 	.word	0x20003f20

08015e10 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b088      	sub	sp, #32
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e1c:	4b25      	ldr	r3, [pc, #148]	; (8015eb4 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d002      	beq.n	8015e32 <LoRaMacCommandsSerializeCmds+0x22>
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d126      	bne.n	8015e80 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e32:	2301      	movs	r3, #1
 8015e34:	e039      	b.n	8015eaa <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e36:	7efb      	ldrb	r3, [r7, #27]
 8015e38:	68fa      	ldr	r2, [r7, #12]
 8015e3a:	1ad2      	subs	r2, r2, r3
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	689b      	ldr	r3, [r3, #8]
 8015e40:	3301      	adds	r3, #1
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d320      	bcc.n	8015e88 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e46:	7efb      	ldrb	r3, [r7, #27]
 8015e48:	1c5a      	adds	r2, r3, #1
 8015e4a:	76fa      	strb	r2, [r7, #27]
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	4413      	add	r3, r2
 8015e52:	69fa      	ldr	r2, [r7, #28]
 8015e54:	7912      	ldrb	r2, [r2, #4]
 8015e56:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e58:	7efb      	ldrb	r3, [r7, #27]
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	18d0      	adds	r0, r2, r3
 8015e5e:	69fb      	ldr	r3, [r7, #28]
 8015e60:	1d59      	adds	r1, r3, #5
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	689b      	ldr	r3, [r3, #8]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	461a      	mov	r2, r3
 8015e6a:	f005 fb7a 	bl	801b562 <memcpy1>
            itr += curElement->PayloadSize;
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	689b      	ldr	r3, [r3, #8]
 8015e72:	b2da      	uxtb	r2, r3
 8015e74:	7efb      	ldrb	r3, [r7, #27]
 8015e76:	4413      	add	r3, r2
 8015e78:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1d7      	bne.n	8015e36 <LoRaMacCommandsSerializeCmds+0x26>
 8015e86:	e009      	b.n	8015e9c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015e88:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015e8a:	e007      	b.n	8015e9c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015e92:	69f8      	ldr	r0, [r7, #28]
 8015e94:	f7ff ff2e 	bl	8015cf4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d1f4      	bne.n	8015e8c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015ea2:	68b8      	ldr	r0, [r7, #8]
 8015ea4:	f7ff ff9e 	bl	8015de4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3720      	adds	r7, #32
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	20003f20 	.word	0x20003f20

08015eb8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b085      	sub	sp, #20
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d101      	bne.n	8015eca <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	e016      	b.n	8015ef8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8015eca:	4b0e      	ldr	r3, [pc, #56]	; (8015f04 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015ed6:	e00b      	b.n	8015ef0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	7b1b      	ldrb	r3, [r3, #12]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d004      	beq.n	8015eea <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e006      	b.n	8015ef8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d1f0      	bne.n	8015ed8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015ef6:	2300      	movs	r3, #0
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3714      	adds	r7, #20
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bc80      	pop	{r7}
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	20003f20 	.word	0x20003f20

08015f08 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015f08:	b480      	push	{r7}
 8015f0a:	b085      	sub	sp, #20
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	4603      	mov	r3, r0
 8015f10:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015f12:	2300      	movs	r3, #0
 8015f14:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015f16:	79fb      	ldrb	r3, [r7, #7]
 8015f18:	3b02      	subs	r3, #2
 8015f1a:	2b11      	cmp	r3, #17
 8015f1c:	d850      	bhi.n	8015fc0 <LoRaMacCommandsGetCmdSize+0xb8>
 8015f1e:	a201      	add	r2, pc, #4	; (adr r2, 8015f24 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f24:	08015f6d 	.word	0x08015f6d
 8015f28:	08015f73 	.word	0x08015f73
 8015f2c:	08015f79 	.word	0x08015f79
 8015f30:	08015f7f 	.word	0x08015f7f
 8015f34:	08015f85 	.word	0x08015f85
 8015f38:	08015f8b 	.word	0x08015f8b
 8015f3c:	08015f91 	.word	0x08015f91
 8015f40:	08015f97 	.word	0x08015f97
 8015f44:	08015f9d 	.word	0x08015f9d
 8015f48:	08015fc1 	.word	0x08015fc1
 8015f4c:	08015fc1 	.word	0x08015fc1
 8015f50:	08015fa3 	.word	0x08015fa3
 8015f54:	08015fc1 	.word	0x08015fc1
 8015f58:	08015fc1 	.word	0x08015fc1
 8015f5c:	08015fa9 	.word	0x08015fa9
 8015f60:	08015faf 	.word	0x08015faf
 8015f64:	08015fb5 	.word	0x08015fb5
 8015f68:	08015fbb 	.word	0x08015fbb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f6c:	2303      	movs	r3, #3
 8015f6e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f70:	e027      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f72:	2305      	movs	r3, #5
 8015f74:	73fb      	strb	r3, [r7, #15]
            break;
 8015f76:	e024      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f78:	2302      	movs	r3, #2
 8015f7a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7c:	e021      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f7e:	2305      	movs	r3, #5
 8015f80:	73fb      	strb	r3, [r7, #15]
            break;
 8015f82:	e01e      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f84:	2301      	movs	r3, #1
 8015f86:	73fb      	strb	r3, [r7, #15]
            break;
 8015f88:	e01b      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f8a:	2306      	movs	r3, #6
 8015f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f8e:	e018      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f90:	2302      	movs	r3, #2
 8015f92:	73fb      	strb	r3, [r7, #15]
            break;
 8015f94:	e015      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015f96:	2302      	movs	r3, #2
 8015f98:	73fb      	strb	r3, [r7, #15]
            break;
 8015f9a:	e012      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015f9c:	2305      	movs	r3, #5
 8015f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8015fa0:	e00f      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015fa2:	2306      	movs	r3, #6
 8015fa4:	73fb      	strb	r3, [r7, #15]
            break;
 8015fa6:	e00c      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	73fb      	strb	r3, [r7, #15]
            break;
 8015fac:	e009      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015fae:	2305      	movs	r3, #5
 8015fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb2:	e006      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015fb4:	2304      	movs	r3, #4
 8015fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb8:	e003      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015fba:	2304      	movs	r3, #4
 8015fbc:	73fb      	strb	r3, [r7, #15]
            break;
 8015fbe:	e000      	b.n	8015fc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015fc0:	bf00      	nop
        }
    }
    return cidSize;
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3714      	adds	r7, #20
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bc80      	pop	{r7}
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop

08015fd0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	4a07      	ldr	r2, [pc, #28]	; (8015ff8 <IncreaseBufferPointer+0x28>)
 8015fdc:	4293      	cmp	r3, r2
 8015fde:	d102      	bne.n	8015fe6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fe0:	4b06      	ldr	r3, [pc, #24]	; (8015ffc <IncreaseBufferPointer+0x2c>)
 8015fe2:	607b      	str	r3, [r7, #4]
 8015fe4:	e002      	b.n	8015fec <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	3304      	adds	r3, #4
 8015fea:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015fec:	687b      	ldr	r3, [r7, #4]
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	370c      	adds	r7, #12
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bc80      	pop	{r7}
 8015ff6:	4770      	bx	lr
 8015ff8:	20004038 	.word	0x20004038
 8015ffc:	20004028 	.word	0x20004028

08016000 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	4603      	mov	r3, r0
 8016008:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801600a:	79fb      	ldrb	r3, [r7, #7]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d101      	bne.n	8016014 <IsListEmpty+0x14>
    {
        return true;
 8016010:	2301      	movs	r3, #1
 8016012:	e000      	b.n	8016016 <IsListEmpty+0x16>
    }
    return false;
 8016014:	2300      	movs	r3, #0
}
 8016016:	4618      	mov	r0, r3
 8016018:	370c      	adds	r7, #12
 801601a:	46bd      	mov	sp, r7
 801601c:	bc80      	pop	{r7}
 801601e:	4770      	bx	lr

08016020 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	4603      	mov	r3, r0
 8016028:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801602a:	79fb      	ldrb	r3, [r7, #7]
 801602c:	2b04      	cmp	r3, #4
 801602e:	d901      	bls.n	8016034 <IsListFull+0x14>
    {
        return true;
 8016030:	2301      	movs	r3, #1
 8016032:	e000      	b.n	8016036 <IsListFull+0x16>
    }
    return false;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	370c      	adds	r7, #12
 801603a:	46bd      	mov	sp, r7
 801603c:	bc80      	pop	{r7}
 801603e:	4770      	bx	lr

08016040 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b086      	sub	sp, #24
 8016044:	af00      	add	r7, sp, #0
 8016046:	4603      	mov	r3, r0
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	607a      	str	r2, [r7, #4]
 801604c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016052:	4b13      	ldr	r3, [pc, #76]	; (80160a0 <GetElement+0x60>)
 8016054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016058:	4618      	mov	r0, r3
 801605a:	f7ff ffd1 	bl	8016000 <IsListEmpty>
 801605e:	4603      	mov	r3, r0
 8016060:	2b00      	cmp	r3, #0
 8016062:	d001      	beq.n	8016068 <GetElement+0x28>
    {
        return NULL;
 8016064:	2300      	movs	r3, #0
 8016066:	e017      	b.n	8016098 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016068:	2300      	movs	r3, #0
 801606a:	74fb      	strb	r3, [r7, #19]
 801606c:	e00d      	b.n	801608a <GetElement+0x4a>
    {
        if( element->Request == request )
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	7bfa      	ldrb	r2, [r7, #15]
 8016074:	429a      	cmp	r2, r3
 8016076:	d101      	bne.n	801607c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	e00d      	b.n	8016098 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801607c:	6978      	ldr	r0, [r7, #20]
 801607e:	f7ff ffa7 	bl	8015fd0 <IncreaseBufferPointer>
 8016082:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016084:	7cfb      	ldrb	r3, [r7, #19]
 8016086:	3301      	adds	r3, #1
 8016088:	74fb      	strb	r3, [r7, #19]
 801608a:	4b05      	ldr	r3, [pc, #20]	; (80160a0 <GetElement+0x60>)
 801608c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016090:	7cfa      	ldrb	r2, [r7, #19]
 8016092:	429a      	cmp	r2, r3
 8016094:	d3eb      	bcc.n	801606e <GetElement+0x2e>
    }

    return NULL;
 8016096:	2300      	movs	r3, #0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3718      	adds	r7, #24
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	2000401c 	.word	0x2000401c

080160a4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80160ac:	4a0c      	ldr	r2, [pc, #48]	; (80160e0 <LoRaMacConfirmQueueInit+0x3c>)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80160b2:	4b0b      	ldr	r3, [pc, #44]	; (80160e0 <LoRaMacConfirmQueueInit+0x3c>)
 80160b4:	2200      	movs	r2, #0
 80160b6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160ba:	4b09      	ldr	r3, [pc, #36]	; (80160e0 <LoRaMacConfirmQueueInit+0x3c>)
 80160bc:	4a09      	ldr	r2, [pc, #36]	; (80160e4 <LoRaMacConfirmQueueInit+0x40>)
 80160be:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160c0:	4b07      	ldr	r3, [pc, #28]	; (80160e0 <LoRaMacConfirmQueueInit+0x3c>)
 80160c2:	4a08      	ldr	r2, [pc, #32]	; (80160e4 <LoRaMacConfirmQueueInit+0x40>)
 80160c4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80160c6:	2214      	movs	r2, #20
 80160c8:	21ff      	movs	r1, #255	; 0xff
 80160ca:	4806      	ldr	r0, [pc, #24]	; (80160e4 <LoRaMacConfirmQueueInit+0x40>)
 80160cc:	f005 fa84 	bl	801b5d8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80160d0:	4b03      	ldr	r3, [pc, #12]	; (80160e0 <LoRaMacConfirmQueueInit+0x3c>)
 80160d2:	2201      	movs	r2, #1
 80160d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160d8:	bf00      	nop
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	2000401c 	.word	0x2000401c
 80160e4:	20004028 	.word	0x20004028

080160e8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160f0:	4b19      	ldr	r3, [pc, #100]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 80160f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7ff ff92 	bl	8016020 <IsListFull>
 80160fc:	4603      	mov	r3, r0
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d001      	beq.n	8016106 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8016102:	2300      	movs	r3, #0
 8016104:	e023      	b.n	801614e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016106:	4b14      	ldr	r3, [pc, #80]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 8016108:	689b      	ldr	r3, [r3, #8]
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	7812      	ldrb	r2, [r2, #0]
 801610e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8016110:	4b11      	ldr	r3, [pc, #68]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	7852      	ldrb	r2, [r2, #1]
 8016118:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801611a:	4b0f      	ldr	r3, [pc, #60]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 801611c:	689b      	ldr	r3, [r3, #8]
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	78d2      	ldrb	r2, [r2, #3]
 8016122:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016124:	4b0c      	ldr	r3, [pc, #48]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 8016126:	689b      	ldr	r3, [r3, #8]
 8016128:	2200      	movs	r2, #0
 801612a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 801612e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016132:	3301      	adds	r3, #1
 8016134:	b2da      	uxtb	r2, r3
 8016136:	4b08      	ldr	r3, [pc, #32]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 8016138:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801613c:	4b06      	ldr	r3, [pc, #24]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 801613e:	689b      	ldr	r3, [r3, #8]
 8016140:	4618      	mov	r0, r3
 8016142:	f7ff ff45 	bl	8015fd0 <IncreaseBufferPointer>
 8016146:	4603      	mov	r3, r0
 8016148:	4a03      	ldr	r2, [pc, #12]	; (8016158 <LoRaMacConfirmQueueAdd+0x70>)
 801614a:	6093      	str	r3, [r2, #8]

    return true;
 801614c:	2301      	movs	r3, #1
}
 801614e:	4618      	mov	r0, r3
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	2000401c 	.word	0x2000401c

0801615c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016160:	4b0e      	ldr	r3, [pc, #56]	; (801619c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016166:	4618      	mov	r0, r3
 8016168:	f7ff ff4a 	bl	8016000 <IsListEmpty>
 801616c:	4603      	mov	r3, r0
 801616e:	2b00      	cmp	r3, #0
 8016170:	d001      	beq.n	8016176 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8016172:	2300      	movs	r3, #0
 8016174:	e010      	b.n	8016198 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016176:	4b09      	ldr	r3, [pc, #36]	; (801619c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016178:	f893 3020 	ldrb.w	r3, [r3, #32]
 801617c:	3b01      	subs	r3, #1
 801617e:	b2da      	uxtb	r2, r3
 8016180:	4b06      	ldr	r3, [pc, #24]	; (801619c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016182:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016186:	4b05      	ldr	r3, [pc, #20]	; (801619c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	4618      	mov	r0, r3
 801618c:	f7ff ff20 	bl	8015fd0 <IncreaseBufferPointer>
 8016190:	4603      	mov	r3, r0
 8016192:	4a02      	ldr	r2, [pc, #8]	; (801619c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016194:	6053      	str	r3, [r2, #4]

    return true;
 8016196:	2301      	movs	r3, #1
}
 8016198:	4618      	mov	r0, r3
 801619a:	bd80      	pop	{r7, pc}
 801619c:	2000401c 	.word	0x2000401c

080161a0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b084      	sub	sp, #16
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	4603      	mov	r3, r0
 80161a8:	460a      	mov	r2, r1
 80161aa:	71fb      	strb	r3, [r7, #7]
 80161ac:	4613      	mov	r3, r2
 80161ae:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80161b0:	2300      	movs	r3, #0
 80161b2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161b4:	4b10      	ldr	r3, [pc, #64]	; (80161f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7ff ff20 	bl	8016000 <IsListEmpty>
 80161c0:	4603      	mov	r3, r0
 80161c2:	f083 0301 	eor.w	r3, r3, #1
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d011      	beq.n	80161f0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161cc:	4b0a      	ldr	r3, [pc, #40]	; (80161f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161ce:	6859      	ldr	r1, [r3, #4]
 80161d0:	4b09      	ldr	r3, [pc, #36]	; (80161f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161d2:	689a      	ldr	r2, [r3, #8]
 80161d4:	79bb      	ldrb	r3, [r7, #6]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff ff32 	bl	8016040 <GetElement>
 80161dc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d005      	beq.n	80161f0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	79fa      	ldrb	r2, [r7, #7]
 80161e8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2201      	movs	r2, #1
 80161ee:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161f0:	bf00      	nop
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	2000401c 	.word	0x2000401c

080161fc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b084      	sub	sp, #16
 8016200:	af00      	add	r7, sp, #0
 8016202:	4603      	mov	r3, r0
 8016204:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016206:	2300      	movs	r3, #0
 8016208:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801620a:	4b10      	ldr	r3, [pc, #64]	; (801624c <LoRaMacConfirmQueueGetStatus+0x50>)
 801620c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016210:	4618      	mov	r0, r3
 8016212:	f7ff fef5 	bl	8016000 <IsListEmpty>
 8016216:	4603      	mov	r3, r0
 8016218:	f083 0301 	eor.w	r3, r3, #1
 801621c:	b2db      	uxtb	r3, r3
 801621e:	2b00      	cmp	r3, #0
 8016220:	d00e      	beq.n	8016240 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016222:	4b0a      	ldr	r3, [pc, #40]	; (801624c <LoRaMacConfirmQueueGetStatus+0x50>)
 8016224:	6859      	ldr	r1, [r3, #4]
 8016226:	4b09      	ldr	r3, [pc, #36]	; (801624c <LoRaMacConfirmQueueGetStatus+0x50>)
 8016228:	689a      	ldr	r2, [r3, #8]
 801622a:	79fb      	ldrb	r3, [r7, #7]
 801622c:	4618      	mov	r0, r3
 801622e:	f7ff ff07 	bl	8016040 <GetElement>
 8016232:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d002      	beq.n	8016240 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	785b      	ldrb	r3, [r3, #1]
 801623e:	e000      	b.n	8016242 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016240:	2301      	movs	r3, #1
}
 8016242:	4618      	mov	r0, r3
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	2000401c 	.word	0x2000401c

08016250 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b084      	sub	sp, #16
 8016254:	af00      	add	r7, sp, #0
 8016256:	4603      	mov	r3, r0
 8016258:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801625a:	4b16      	ldr	r3, [pc, #88]	; (80162b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801625c:	685b      	ldr	r3, [r3, #4]
 801625e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016260:	4a14      	ldr	r2, [pc, #80]	; (80162b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016262:	79fb      	ldrb	r3, [r7, #7]
 8016264:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016268:	4b12      	ldr	r3, [pc, #72]	; (80162b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801626a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801626e:	4618      	mov	r0, r3
 8016270:	f7ff fec6 	bl	8016000 <IsListEmpty>
 8016274:	4603      	mov	r3, r0
 8016276:	f083 0301 	eor.w	r3, r3, #1
 801627a:	b2db      	uxtb	r3, r3
 801627c:	2b00      	cmp	r3, #0
 801627e:	d015      	beq.n	80162ac <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	79fa      	ldrb	r2, [r7, #7]
 8016284:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	78db      	ldrb	r3, [r3, #3]
 801628a:	f083 0301 	eor.w	r3, r3, #1
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	d002      	beq.n	801629a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	2201      	movs	r2, #1
 8016298:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801629a:	68f8      	ldr	r0, [r7, #12]
 801629c:	f7ff fe98 	bl	8015fd0 <IncreaseBufferPointer>
 80162a0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80162a2:	4b04      	ldr	r3, [pc, #16]	; (80162b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162a4:	689b      	ldr	r3, [r3, #8]
 80162a6:	68fa      	ldr	r2, [r7, #12]
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d1e9      	bne.n	8016280 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80162ac:	bf00      	nop
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	2000401c 	.word	0x2000401c

080162b8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	4603      	mov	r3, r0
 80162c0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80162c2:	4b09      	ldr	r3, [pc, #36]	; (80162e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162c4:	6859      	ldr	r1, [r3, #4]
 80162c6:	4b08      	ldr	r3, [pc, #32]	; (80162e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162c8:	689a      	ldr	r2, [r3, #8]
 80162ca:	79fb      	ldrb	r3, [r7, #7]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7ff feb7 	bl	8016040 <GetElement>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d001      	beq.n	80162dc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162d8:	2301      	movs	r3, #1
 80162da:	e000      	b.n	80162de <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162dc:	2300      	movs	r3, #0
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3708      	adds	r7, #8
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	2000401c 	.word	0x2000401c

080162ec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162f4:	4b22      	ldr	r3, [pc, #136]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 80162f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162fa:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80162fc:	2300      	movs	r3, #0
 80162fe:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8016300:	2300      	movs	r3, #0
 8016302:	73fb      	strb	r3, [r7, #15]
 8016304:	e032      	b.n	801636c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016306:	4b1e      	ldr	r3, [pc, #120]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	781a      	ldrb	r2, [r3, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8016310:	4b1b      	ldr	r3, [pc, #108]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	785a      	ldrb	r2, [r3, #1]
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801631a:	4b19      	ldr	r3, [pc, #100]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	789b      	ldrb	r3, [r3, #2]
 8016320:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8016322:	7b7b      	ldrb	r3, [r7, #13]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d005      	beq.n	8016334 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016328:	4b15      	ldr	r3, [pc, #84]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	689b      	ldr	r3, [r3, #8]
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	4798      	blx	r3
 8016332:	e00b      	b.n	801634c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016334:	4b12      	ldr	r3, [pc, #72]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801633c:	4b10      	ldr	r3, [pc, #64]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	785b      	ldrb	r3, [r3, #1]
 8016342:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016344:	4b0e      	ldr	r3, [pc, #56]	; (8016380 <LoRaMacConfirmQueueHandleCb+0x94>)
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	78db      	ldrb	r3, [r3, #3]
 801634a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801634c:	f7ff ff06 	bl	801615c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8016350:	7b7b      	ldrb	r3, [r7, #13]
 8016352:	f083 0301 	eor.w	r3, r3, #1
 8016356:	b2db      	uxtb	r3, r3
 8016358:	2b00      	cmp	r3, #0
 801635a:	d004      	beq.n	8016366 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801635c:	f107 0308 	add.w	r3, r7, #8
 8016360:	4618      	mov	r0, r3
 8016362:	f7ff fec1 	bl	80160e8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016366:	7bfb      	ldrb	r3, [r7, #15]
 8016368:	3301      	adds	r3, #1
 801636a:	73fb      	strb	r3, [r7, #15]
 801636c:	7bfa      	ldrb	r2, [r7, #15]
 801636e:	7bbb      	ldrb	r3, [r7, #14]
 8016370:	429a      	cmp	r2, r3
 8016372:	d3c8      	bcc.n	8016306 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8016374:	bf00      	nop
 8016376:	bf00      	nop
 8016378:	3710      	adds	r7, #16
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	2000401c 	.word	0x2000401c

08016384 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016384:	b480      	push	{r7}
 8016386:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016388:	4b03      	ldr	r3, [pc, #12]	; (8016398 <LoRaMacConfirmQueueGetCnt+0x14>)
 801638a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801638e:	4618      	mov	r0, r3
 8016390:	46bd      	mov	sp, r7
 8016392:	bc80      	pop	{r7}
 8016394:	4770      	bx	lr
 8016396:	bf00      	nop
 8016398:	2000401c 	.word	0x2000401c

0801639c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801639c:	b580      	push	{r7, lr}
 801639e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80163a0:	4b06      	ldr	r3, [pc, #24]	; (80163bc <LoRaMacConfirmQueueIsFull+0x20>)
 80163a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7ff fe3a 	bl	8016020 <IsListFull>
 80163ac:	4603      	mov	r3, r0
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d001      	beq.n	80163b6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80163b2:	2301      	movs	r3, #1
 80163b4:	e000      	b.n	80163b8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80163b6:	2300      	movs	r3, #0
    }
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	bd80      	pop	{r7, pc}
 80163bc:	2000401c 	.word	0x2000401c

080163c0 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b08e      	sub	sp, #56	; 0x38
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	60f8      	str	r0, [r7, #12]
 80163c8:	607b      	str	r3, [r7, #4]
 80163ca:	460b      	mov	r3, r1
 80163cc:	817b      	strh	r3, [r7, #10]
 80163ce:	4613      	mov	r3, r2
 80163d0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d101      	bne.n	80163dc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163d8:	230a      	movs	r3, #10
 80163da:	e086      	b.n	80164ea <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163e2:	2301      	movs	r3, #1
 80163e4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163e6:	2300      	movs	r3, #0
 80163e8:	623b      	str	r3, [r7, #32]
 80163ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163ee:	2200      	movs	r2, #0
 80163f0:	601a      	str	r2, [r3, #0]
 80163f2:	605a      	str	r2, [r3, #4]
 80163f4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80163f6:	2300      	movs	r3, #0
 80163f8:	613b      	str	r3, [r7, #16]
 80163fa:	f107 0314 	add.w	r3, r7, #20
 80163fe:	2200      	movs	r2, #0
 8016400:	601a      	str	r2, [r3, #0]
 8016402:	605a      	str	r2, [r3, #4]
 8016404:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016406:	2301      	movs	r3, #1
 8016408:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801640a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801640e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	b2db      	uxtb	r3, r3
 8016414:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	0a1b      	lsrs	r3, r3, #8
 801641a:	b2db      	uxtb	r3, r3
 801641c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	0c1b      	lsrs	r3, r3, #16
 8016422:	b2db      	uxtb	r3, r3
 8016424:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	0e1b      	lsrs	r3, r3, #24
 801642a:	b2db      	uxtb	r3, r3
 801642c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016430:	b2db      	uxtb	r3, r3
 8016432:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016436:	0a1b      	lsrs	r3, r3, #8
 8016438:	b2db      	uxtb	r3, r3
 801643a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801643e:	0c1b      	lsrs	r3, r3, #16
 8016440:	b2db      	uxtb	r3, r3
 8016442:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016446:	0e1b      	lsrs	r3, r3, #24
 8016448:	b2db      	uxtb	r3, r3
 801644a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801644c:	e048      	b.n	80164e0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801644e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016450:	b2db      	uxtb	r3, r3
 8016452:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016454:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016456:	3301      	adds	r3, #1
 8016458:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801645a:	f107 0320 	add.w	r3, r7, #32
 801645e:	7a7a      	ldrb	r2, [r7, #9]
 8016460:	f107 0010 	add.w	r0, r7, #16
 8016464:	2110      	movs	r1, #16
 8016466:	f7f8 fdbe 	bl	800efe6 <SecureElementAesEncrypt>
 801646a:	4603      	mov	r3, r0
 801646c:	2b00      	cmp	r3, #0
 801646e:	d001      	beq.n	8016474 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016470:	230f      	movs	r3, #15
 8016472:	e03a      	b.n	80164ea <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016474:	2300      	movs	r3, #0
 8016476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801647a:	e01e      	b.n	80164ba <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801647c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016484:	4413      	add	r3, r2
 8016486:	461a      	mov	r2, r3
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	4413      	add	r3, r2
 801648c:	7819      	ldrb	r1, [r3, #0]
 801648e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016492:	3338      	adds	r3, #56	; 0x38
 8016494:	443b      	add	r3, r7
 8016496:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801649a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801649e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164a2:	4403      	add	r3, r0
 80164a4:	4618      	mov	r0, r3
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	4403      	add	r3, r0
 80164aa:	404a      	eors	r2, r1
 80164ac:	b2d2      	uxtb	r2, r2
 80164ae:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80164b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164b4:	3301      	adds	r3, #1
 80164b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164c2:	2a10      	cmp	r2, #16
 80164c4:	bfa8      	it	ge
 80164c6:	2210      	movge	r2, #16
 80164c8:	b212      	sxth	r2, r2
 80164ca:	4293      	cmp	r3, r2
 80164cc:	dbd6      	blt.n	801647c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164ce:	897b      	ldrh	r3, [r7, #10]
 80164d0:	3b10      	subs	r3, #16
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164da:	3310      	adds	r3, #16
 80164dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	dcb2      	bgt.n	801644e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164e8:	2300      	movs	r3, #0
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3738      	adds	r7, #56	; 0x38
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}

080164f2 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80164f2:	b490      	push	{r4, r7}
 80164f4:	b082      	sub	sp, #8
 80164f6:	af00      	add	r7, sp, #0
 80164f8:	4604      	mov	r4, r0
 80164fa:	4608      	mov	r0, r1
 80164fc:	4611      	mov	r1, r2
 80164fe:	461a      	mov	r2, r3
 8016500:	4623      	mov	r3, r4
 8016502:	80fb      	strh	r3, [r7, #6]
 8016504:	4603      	mov	r3, r0
 8016506:	717b      	strb	r3, [r7, #5]
 8016508:	460b      	mov	r3, r1
 801650a:	713b      	strb	r3, [r7, #4]
 801650c:	4613      	mov	r3, r2
 801650e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016510:	69bb      	ldr	r3, [r7, #24]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d101      	bne.n	801651a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016516:	230a      	movs	r3, #10
 8016518:	e04e      	b.n	80165b8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801651a:	69bb      	ldr	r3, [r7, #24]
 801651c:	2249      	movs	r2, #73	; 0x49
 801651e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	3301      	adds	r3, #1
 8016524:	2200      	movs	r2, #0
 8016526:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	3302      	adds	r3, #2
 801652c:	2200      	movs	r2, #0
 801652e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	3303      	adds	r3, #3
 8016534:	2200      	movs	r2, #0
 8016536:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	3304      	adds	r3, #4
 801653c:	2200      	movs	r2, #0
 801653e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	3305      	adds	r3, #5
 8016544:	78fa      	ldrb	r2, [r7, #3]
 8016546:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	3306      	adds	r3, #6
 801654c:	693a      	ldr	r2, [r7, #16]
 801654e:	b2d2      	uxtb	r2, r2
 8016550:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	0a1a      	lsrs	r2, r3, #8
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	3307      	adds	r3, #7
 801655a:	b2d2      	uxtb	r2, r2
 801655c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	0c1a      	lsrs	r2, r3, #16
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	3308      	adds	r3, #8
 8016566:	b2d2      	uxtb	r2, r2
 8016568:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	0e1a      	lsrs	r2, r3, #24
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	3309      	adds	r3, #9
 8016572:	b2d2      	uxtb	r2, r2
 8016574:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	330a      	adds	r3, #10
 801657a:	697a      	ldr	r2, [r7, #20]
 801657c:	b2d2      	uxtb	r2, r2
 801657e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	0a1a      	lsrs	r2, r3, #8
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	330b      	adds	r3, #11
 8016588:	b2d2      	uxtb	r2, r2
 801658a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801658c:	697b      	ldr	r3, [r7, #20]
 801658e:	0c1a      	lsrs	r2, r3, #16
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	330c      	adds	r3, #12
 8016594:	b2d2      	uxtb	r2, r2
 8016596:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	0e1a      	lsrs	r2, r3, #24
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	330d      	adds	r3, #13
 80165a0:	b2d2      	uxtb	r2, r2
 80165a2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	330e      	adds	r3, #14
 80165a8:	2200      	movs	r2, #0
 80165aa:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	330f      	adds	r3, #15
 80165b0:	88fa      	ldrh	r2, [r7, #6]
 80165b2:	b2d2      	uxtb	r2, r2
 80165b4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165b6:	2300      	movs	r3, #0
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bc90      	pop	{r4, r7}
 80165c0:	4770      	bx	lr

080165c2 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165c2:	b590      	push	{r4, r7, lr}
 80165c4:	b08b      	sub	sp, #44	; 0x2c
 80165c6:	af04      	add	r7, sp, #16
 80165c8:	6078      	str	r0, [r7, #4]
 80165ca:	4608      	mov	r0, r1
 80165cc:	4611      	mov	r1, r2
 80165ce:	461a      	mov	r2, r3
 80165d0:	4603      	mov	r3, r0
 80165d2:	807b      	strh	r3, [r7, #2]
 80165d4:	460b      	mov	r3, r1
 80165d6:	707b      	strb	r3, [r7, #1]
 80165d8:	4613      	mov	r3, r2
 80165da:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d002      	beq.n	80165e8 <ComputeCmacB0+0x26>
 80165e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d101      	bne.n	80165ec <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165e8:	230a      	movs	r3, #10
 80165ea:	e024      	b.n	8016636 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165ec:	887b      	ldrh	r3, [r7, #2]
 80165ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165f2:	d901      	bls.n	80165f8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80165f4:	230e      	movs	r3, #14
 80165f6:	e01e      	b.n	8016636 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80165f8:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80165fc:	783a      	ldrb	r2, [r7, #0]
 80165fe:	7879      	ldrb	r1, [r7, #1]
 8016600:	8878      	ldrh	r0, [r7, #2]
 8016602:	f107 0308 	add.w	r3, r7, #8
 8016606:	9302      	str	r3, [sp, #8]
 8016608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660a:	9301      	str	r3, [sp, #4]
 801660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660e:	9300      	str	r3, [sp, #0]
 8016610:	4623      	mov	r3, r4
 8016612:	f7ff ff6e 	bl	80164f2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016616:	7879      	ldrb	r1, [r7, #1]
 8016618:	887a      	ldrh	r2, [r7, #2]
 801661a:	f107 0008 	add.w	r0, r7, #8
 801661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	460b      	mov	r3, r1
 8016624:	6879      	ldr	r1, [r7, #4]
 8016626:	f7f8 fc91 	bl	800ef4c <SecureElementComputeAesCmac>
 801662a:	4603      	mov	r3, r0
 801662c:	2b00      	cmp	r3, #0
 801662e:	d001      	beq.n	8016634 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016630:	230f      	movs	r3, #15
 8016632:	e000      	b.n	8016636 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016634:	2300      	movs	r3, #0
}
 8016636:	4618      	mov	r0, r3
 8016638:	371c      	adds	r7, #28
 801663a:	46bd      	mov	sp, r7
 801663c:	bd90      	pop	{r4, r7, pc}

0801663e <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801663e:	b590      	push	{r4, r7, lr}
 8016640:	b0cd      	sub	sp, #308	; 0x134
 8016642:	af04      	add	r7, sp, #16
 8016644:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016648:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801664c:	6020      	str	r0, [r4, #0]
 801664e:	460c      	mov	r4, r1
 8016650:	4610      	mov	r0, r2
 8016652:	4619      	mov	r1, r3
 8016654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016658:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801665c:	4622      	mov	r2, r4
 801665e:	801a      	strh	r2, [r3, #0]
 8016660:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016664:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016668:	4602      	mov	r2, r0
 801666a:	701a      	strb	r2, [r3, #0]
 801666c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016670:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016674:	460a      	mov	r2, r1
 8016676:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016678:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801667c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d101      	bne.n	801668a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016686:	230a      	movs	r3, #10
 8016688:	e063      	b.n	8016752 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801668a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801668e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016692:	881b      	ldrh	r3, [r3, #0]
 8016694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016698:	d901      	bls.n	801669e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801669a:	230e      	movs	r3, #14
 801669c:	e059      	b.n	8016752 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801669e:	f107 030c 	add.w	r3, r7, #12
 80166a2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80166a6:	2100      	movs	r1, #0
 80166a8:	4618      	mov	r0, r3
 80166aa:	f004 ff95 	bl	801b5d8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166ae:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80166b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166ba:	781a      	ldrb	r2, [r3, #0]
 80166bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166c0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166c4:	7819      	ldrb	r1, [r3, #0]
 80166c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ca:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166ce:	8818      	ldrh	r0, [r3, #0]
 80166d0:	f107 030c 	add.w	r3, r7, #12
 80166d4:	9302      	str	r3, [sp, #8]
 80166d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166da:	9301      	str	r3, [sp, #4]
 80166dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166e0:	9300      	str	r3, [sp, #0]
 80166e2:	4623      	mov	r3, r4
 80166e4:	f7ff ff05 	bl	80164f2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80166e8:	f107 030c 	add.w	r3, r7, #12
 80166ec:	3310      	adds	r3, #16
 80166ee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80166f2:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80166f6:	8812      	ldrh	r2, [r2, #0]
 80166f8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80166fc:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016700:	6809      	ldr	r1, [r1, #0]
 8016702:	4618      	mov	r0, r3
 8016704:	f004 ff2d 	bl	801b562 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016708:	2306      	movs	r3, #6
 801670a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801670e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016712:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016716:	881b      	ldrh	r3, [r3, #0]
 8016718:	3310      	adds	r3, #16
 801671a:	b299      	uxth	r1, r3
 801671c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016720:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	f107 000c 	add.w	r0, r7, #12
 801672a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801672e:	f7f8 fc2b 	bl	800ef88 <SecureElementVerifyAesCmac>
 8016732:	4603      	mov	r3, r0
 8016734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801673c:	2b00      	cmp	r3, #0
 801673e:	d101      	bne.n	8016744 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016740:	2300      	movs	r3, #0
 8016742:	e006      	b.n	8016752 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016748:	2b01      	cmp	r3, #1
 801674a:	d101      	bne.n	8016750 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801674c:	2301      	movs	r3, #1
 801674e:	e000      	b.n	8016752 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016750:	230f      	movs	r3, #15
}
 8016752:	4618      	mov	r0, r3
 8016754:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016758:	46bd      	mov	sp, r7
 801675a:	bd90      	pop	{r4, r7, pc}

0801675c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801675c:	b480      	push	{r7}
 801675e:	b085      	sub	sp, #20
 8016760:	af00      	add	r7, sp, #0
 8016762:	4603      	mov	r3, r0
 8016764:	6039      	str	r1, [r7, #0]
 8016766:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016768:	2300      	movs	r3, #0
 801676a:	73fb      	strb	r3, [r7, #15]
 801676c:	e011      	b.n	8016792 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801676e:	7bfb      	ldrb	r3, [r7, #15]
 8016770:	4a0c      	ldr	r2, [pc, #48]	; (80167a4 <GetKeyAddrItem+0x48>)
 8016772:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016776:	79fa      	ldrb	r2, [r7, #7]
 8016778:	429a      	cmp	r2, r3
 801677a:	d107      	bne.n	801678c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801677c:	7bfb      	ldrb	r3, [r7, #15]
 801677e:	009b      	lsls	r3, r3, #2
 8016780:	4a08      	ldr	r2, [pc, #32]	; (80167a4 <GetKeyAddrItem+0x48>)
 8016782:	441a      	add	r2, r3
 8016784:	683b      	ldr	r3, [r7, #0]
 8016786:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016788:	2300      	movs	r3, #0
 801678a:	e006      	b.n	801679a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801678c:	7bfb      	ldrb	r3, [r7, #15]
 801678e:	3301      	adds	r3, #1
 8016790:	73fb      	strb	r3, [r7, #15]
 8016792:	7bfb      	ldrb	r3, [r7, #15]
 8016794:	2b01      	cmp	r3, #1
 8016796:	d9ea      	bls.n	801676e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016798:	230c      	movs	r3, #12
}
 801679a:	4618      	mov	r0, r3
 801679c:	3714      	adds	r7, #20
 801679e:	46bd      	mov	sp, r7
 80167a0:	bc80      	pop	{r7}
 80167a2:	4770      	bx	lr
 80167a4:	20000104 	.word	0x20000104

080167a8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b088      	sub	sp, #32
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60b9      	str	r1, [r7, #8]
 80167b0:	607a      	str	r2, [r7, #4]
 80167b2:	461a      	mov	r2, r3
 80167b4:	4603      	mov	r3, r0
 80167b6:	73fb      	strb	r3, [r7, #15]
 80167b8:	4613      	mov	r3, r2
 80167ba:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167bc:	2300      	movs	r3, #0
 80167be:	613b      	str	r3, [r7, #16]
 80167c0:	f107 0314 	add.w	r3, r7, #20
 80167c4:	2200      	movs	r2, #0
 80167c6:	601a      	str	r2, [r3, #0]
 80167c8:	605a      	str	r2, [r3, #4]
 80167ca:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80167cc:	7bfb      	ldrb	r3, [r7, #15]
 80167ce:	2b02      	cmp	r3, #2
 80167d0:	d002      	beq.n	80167d8 <DeriveSessionKey10x+0x30>
 80167d2:	2b03      	cmp	r3, #3
 80167d4:	d003      	beq.n	80167de <DeriveSessionKey10x+0x36>
 80167d6:	e005      	b.n	80167e4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80167d8:	2301      	movs	r3, #1
 80167da:	743b      	strb	r3, [r7, #16]
            break;
 80167dc:	e004      	b.n	80167e8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167de:	2302      	movs	r3, #2
 80167e0:	743b      	strb	r3, [r7, #16]
            break;
 80167e2:	e001      	b.n	80167e8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167e4:	230b      	movs	r3, #11
 80167e6:	e02a      	b.n	801683e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	0a1b      	lsrs	r3, r3, #8
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	0c1b      	lsrs	r3, r3, #16
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	b2db      	uxtb	r3, r3
 8016802:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	0a1b      	lsrs	r3, r3, #8
 8016808:	b2db      	uxtb	r3, r3
 801680a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	0c1b      	lsrs	r3, r3, #16
 8016810:	b2db      	uxtb	r3, r3
 8016812:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016814:	89bb      	ldrh	r3, [r7, #12]
 8016816:	b2db      	uxtb	r3, r3
 8016818:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801681a:	89bb      	ldrh	r3, [r7, #12]
 801681c:	0a1b      	lsrs	r3, r3, #8
 801681e:	b29b      	uxth	r3, r3
 8016820:	b2db      	uxtb	r3, r3
 8016822:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016824:	7bfa      	ldrb	r2, [r7, #15]
 8016826:	f107 0310 	add.w	r3, r7, #16
 801682a:	2101      	movs	r1, #1
 801682c:	4618      	mov	r0, r3
 801682e:	f7f8 fc41 	bl	800f0b4 <SecureElementDeriveAndStoreKey>
 8016832:	4603      	mov	r3, r0
 8016834:	2b00      	cmp	r3, #0
 8016836:	d001      	beq.n	801683c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016838:	230f      	movs	r3, #15
 801683a:	e000      	b.n	801683e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801683c:	2300      	movs	r3, #0
}
 801683e:	4618      	mov	r0, r3
 8016840:	3720      	adds	r7, #32
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
	...

08016848 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	6039      	str	r1, [r7, #0]
 8016852:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d101      	bne.n	801685e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801685a:	230a      	movs	r3, #10
 801685c:	e03b      	b.n	80168d6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801685e:	79fb      	ldrb	r3, [r7, #7]
 8016860:	3b01      	subs	r3, #1
 8016862:	2b03      	cmp	r3, #3
 8016864:	d834      	bhi.n	80168d0 <GetLastFcntDown+0x88>
 8016866:	a201      	add	r2, pc, #4	; (adr r2, 801686c <GetLastFcntDown+0x24>)
 8016868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801686c:	0801687d 	.word	0x0801687d
 8016870:	08016895 	.word	0x08016895
 8016874:	080168ad 	.word	0x080168ad
 8016878:	080168c5 	.word	0x080168c5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801687c:	4b18      	ldr	r3, [pc, #96]	; (80168e0 <GetLastFcntDown+0x98>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	691a      	ldr	r2, [r3, #16]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8016886:	4b16      	ldr	r3, [pc, #88]	; (80168e0 <GetLastFcntDown+0x98>)
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	4b15      	ldr	r3, [pc, #84]	; (80168e0 <GetLastFcntDown+0x98>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	6912      	ldr	r2, [r2, #16]
 8016890:	621a      	str	r2, [r3, #32]
            break;
 8016892:	e01f      	b.n	80168d4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016894:	4b12      	ldr	r3, [pc, #72]	; (80168e0 <GetLastFcntDown+0x98>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	695a      	ldr	r2, [r3, #20]
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801689e:	4b10      	ldr	r3, [pc, #64]	; (80168e0 <GetLastFcntDown+0x98>)
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	4b0f      	ldr	r3, [pc, #60]	; (80168e0 <GetLastFcntDown+0x98>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	6952      	ldr	r2, [r2, #20]
 80168a8:	621a      	str	r2, [r3, #32]
            break;
 80168aa:	e013      	b.n	80168d4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80168ac:	4b0c      	ldr	r3, [pc, #48]	; (80168e0 <GetLastFcntDown+0x98>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	699a      	ldr	r2, [r3, #24]
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80168b6:	4b0a      	ldr	r3, [pc, #40]	; (80168e0 <GetLastFcntDown+0x98>)
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	4b09      	ldr	r3, [pc, #36]	; (80168e0 <GetLastFcntDown+0x98>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	6992      	ldr	r2, [r2, #24]
 80168c0:	621a      	str	r2, [r3, #32]
            break;
 80168c2:	e007      	b.n	80168d4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80168c4:	4b06      	ldr	r3, [pc, #24]	; (80168e0 <GetLastFcntDown+0x98>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	69da      	ldr	r2, [r3, #28]
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	601a      	str	r2, [r3, #0]
            break;
 80168ce:	e001      	b.n	80168d4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80168d0:	2305      	movs	r3, #5
 80168d2:	e000      	b.n	80168d6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80168d4:	2300      	movs	r3, #0
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	bc80      	pop	{r7}
 80168de:	4770      	bx	lr
 80168e0:	20004040 	.word	0x20004040

080168e4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4603      	mov	r3, r0
 80168ec:	6039      	str	r1, [r7, #0]
 80168ee:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168f0:	2300      	movs	r3, #0
 80168f2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168f4:	f107 020c 	add.w	r2, r7, #12
 80168f8:	79fb      	ldrb	r3, [r7, #7]
 80168fa:	4611      	mov	r1, r2
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7ff ffa3 	bl	8016848 <GetLastFcntDown>
 8016902:	4603      	mov	r3, r0
 8016904:	2b00      	cmp	r3, #0
 8016906:	d001      	beq.n	801690c <CheckFCntDown+0x28>
    {
        return false;
 8016908:	2300      	movs	r3, #0
 801690a:	e00a      	b.n	8016922 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	683a      	ldr	r2, [r7, #0]
 8016910:	429a      	cmp	r2, r3
 8016912:	d803      	bhi.n	801691c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016914:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801691a:	d101      	bne.n	8016920 <CheckFCntDown+0x3c>
    {
        return true;
 801691c:	2301      	movs	r3, #1
 801691e:	e000      	b.n	8016922 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016920:	2300      	movs	r3, #0
    }
}
 8016922:	4618      	mov	r0, r3
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
	...

0801692c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801692c:	b480      	push	{r7}
 801692e:	b083      	sub	sp, #12
 8016930:	af00      	add	r7, sp, #0
 8016932:	4603      	mov	r3, r0
 8016934:	6039      	str	r1, [r7, #0]
 8016936:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016938:	79fb      	ldrb	r3, [r7, #7]
 801693a:	3b01      	subs	r3, #1
 801693c:	2b03      	cmp	r3, #3
 801693e:	d81f      	bhi.n	8016980 <UpdateFCntDown+0x54>
 8016940:	a201      	add	r2, pc, #4	; (adr r2, 8016948 <UpdateFCntDown+0x1c>)
 8016942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016946:	bf00      	nop
 8016948:	08016959 	.word	0x08016959
 801694c:	08016963 	.word	0x08016963
 8016950:	0801696d 	.word	0x0801696d
 8016954:	08016977 	.word	0x08016977
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016958:	4b0c      	ldr	r3, [pc, #48]	; (801698c <UpdateFCntDown+0x60>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	683a      	ldr	r2, [r7, #0]
 801695e:	611a      	str	r2, [r3, #16]
            break;
 8016960:	e00f      	b.n	8016982 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016962:	4b0a      	ldr	r3, [pc, #40]	; (801698c <UpdateFCntDown+0x60>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	683a      	ldr	r2, [r7, #0]
 8016968:	615a      	str	r2, [r3, #20]
            break;
 801696a:	e00a      	b.n	8016982 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801696c:	4b07      	ldr	r3, [pc, #28]	; (801698c <UpdateFCntDown+0x60>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	683a      	ldr	r2, [r7, #0]
 8016972:	619a      	str	r2, [r3, #24]
            break;
 8016974:	e005      	b.n	8016982 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016976:	4b05      	ldr	r3, [pc, #20]	; (801698c <UpdateFCntDown+0x60>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	61da      	str	r2, [r3, #28]
            break;
 801697e:	e000      	b.n	8016982 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016980:	bf00      	nop
    }
}
 8016982:	bf00      	nop
 8016984:	370c      	adds	r7, #12
 8016986:	46bd      	mov	sp, r7
 8016988:	bc80      	pop	{r7}
 801698a:	4770      	bx	lr
 801698c:	20004040 	.word	0x20004040

08016990 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016996:	4b18      	ldr	r3, [pc, #96]	; (80169f8 <ResetFCnts+0x68>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2200      	movs	r2, #0
 801699c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801699e:	4b16      	ldr	r3, [pc, #88]	; (80169f8 <ResetFCnts+0x68>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f04f 32ff 	mov.w	r2, #4294967295
 80169a6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80169a8:	4b13      	ldr	r3, [pc, #76]	; (80169f8 <ResetFCnts+0x68>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	f04f 32ff 	mov.w	r2, #4294967295
 80169b0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80169b2:	4b11      	ldr	r3, [pc, #68]	; (80169f8 <ResetFCnts+0x68>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f04f 32ff 	mov.w	r2, #4294967295
 80169ba:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80169bc:	4b0e      	ldr	r3, [pc, #56]	; (80169f8 <ResetFCnts+0x68>)
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	4b0d      	ldr	r3, [pc, #52]	; (80169f8 <ResetFCnts+0x68>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	6992      	ldr	r2, [r2, #24]
 80169c6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169c8:	2300      	movs	r3, #0
 80169ca:	607b      	str	r3, [r7, #4]
 80169cc:	e00b      	b.n	80169e6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80169ce:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <ResetFCnts+0x68>)
 80169d0:	681a      	ldr	r2, [r3, #0]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	3306      	adds	r3, #6
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	4413      	add	r3, r2
 80169da:	f04f 32ff 	mov.w	r2, #4294967295
 80169de:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3301      	adds	r3, #1
 80169e4:	607b      	str	r3, [r7, #4]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	ddf0      	ble.n	80169ce <ResetFCnts+0x3e>
    }
}
 80169ec:	bf00      	nop
 80169ee:	bf00      	nop
 80169f0:	370c      	adds	r7, #12
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bc80      	pop	{r7}
 80169f6:	4770      	bx	lr
 80169f8:	20004040 	.word	0x20004040

080169fc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d101      	bne.n	8016a0e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a0a:	2309      	movs	r3, #9
 8016a0c:	e01c      	b.n	8016a48 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a0e:	4a10      	ldr	r2, [pc, #64]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a14:	4b0e      	ldr	r3, [pc, #56]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	2228      	movs	r2, #40	; 0x28
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f004 fddb 	bl	801b5d8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a22:	4b0b      	ldr	r3, [pc, #44]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2201      	movs	r2, #1
 8016a28:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a2a:	4b09      	ldr	r3, [pc, #36]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2201      	movs	r2, #1
 8016a30:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a32:	4b07      	ldr	r3, [pc, #28]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2201      	movs	r2, #1
 8016a38:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a3a:	4b05      	ldr	r3, [pc, #20]	; (8016a50 <LoRaMacCryptoInit+0x54>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a42:	f7ff ffa5 	bl	8016990 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a46:	2300      	movs	r3, #0
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	20004040 	.word	0x20004040

08016a54 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a5c:	4b04      	ldr	r3, [pc, #16]	; (8016a70 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	687a      	ldr	r2, [r7, #4]
 8016a62:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a64:	2300      	movs	r3, #0
}
 8016a66:	4618      	mov	r0, r3
 8016a68:	370c      	adds	r7, #12
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bc80      	pop	{r7}
 8016a6e:	4770      	bx	lr
 8016a70:	20004040 	.word	0x20004040

08016a74 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016a74:	b480      	push	{r7}
 8016a76:	b083      	sub	sp, #12
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d101      	bne.n	8016a86 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a82:	230a      	movs	r3, #10
 8016a84:	e006      	b.n	8016a94 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a86:	4b06      	ldr	r3, [pc, #24]	; (8016aa0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	68db      	ldr	r3, [r3, #12]
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bc80      	pop	{r7}
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop
 8016aa0:	20004040 	.word	0x20004040

08016aa4 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016aa8:	b08a      	sub	sp, #40	; 0x28
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	613a      	str	r2, [r7, #16]
 8016aae:	60fb      	str	r3, [r7, #12]
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	75fb      	strb	r3, [r7, #23]
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016abc:	2300      	movs	r3, #0
 8016abe:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ac0:	2313      	movs	r3, #19
 8016ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d101      	bne.n	8016ad0 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016acc:	230a      	movs	r3, #10
 8016ace:	e057      	b.n	8016b80 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ad0:	f107 021c 	add.w	r2, r7, #28
 8016ad4:	7dfb      	ldrb	r3, [r7, #23]
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7ff feb5 	bl	8016848 <GetLastFcntDown>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d002      	beq.n	8016af2 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016af0:	e046      	b.n	8016b80 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016af8:	d103      	bne.n	8016b02 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	693a      	ldr	r2, [r7, #16]
 8016afe:	601a      	str	r2, [r3, #0]
 8016b00:	e01e      	b.n	8016b40 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	693a      	ldr	r2, [r7, #16]
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	dd05      	ble.n	8016b1e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b12:	69fa      	ldr	r2, [r7, #28]
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	441a      	add	r2, r3
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	601a      	str	r2, [r3, #0]
 8016b1c:	e010      	b.n	8016b40 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d104      	bne.n	8016b2e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b24:	69fa      	ldr	r2, [r7, #28]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b2a:	2307      	movs	r3, #7
 8016b2c:	e028      	b.n	8016b80 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	0c1b      	lsrs	r3, r3, #16
 8016b32:	041b      	lsls	r3, r3, #16
 8016b34:	693a      	ldr	r2, [r7, #16]
 8016b36:	4413      	add	r3, r2
 8016b38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b40:	4b12      	ldr	r3, [pc, #72]	; (8016b8c <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	789b      	ldrb	r3, [r3, #2]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d119      	bne.n	8016b7e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	2200      	movs	r2, #0
 8016b50:	603b      	str	r3, [r7, #0]
 8016b52:	607a      	str	r2, [r7, #4]
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	2200      	movs	r2, #0
 8016b58:	469a      	mov	sl, r3
 8016b5a:	4693      	mov	fp, r2
 8016b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b60:	4611      	mov	r1, r2
 8016b62:	ebb1 040a 	subs.w	r4, r1, sl
 8016b66:	eb63 050b 	sbc.w	r5, r3, fp
 8016b6a:	8abb      	ldrh	r3, [r7, #20]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	4698      	mov	r8, r3
 8016b70:	4691      	mov	r9, r2
 8016b72:	4544      	cmp	r4, r8
 8016b74:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b78:	db01      	blt.n	8016b7e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b7a:	2308      	movs	r3, #8
 8016b7c:	e000      	b.n	8016b80 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b7e:	2300      	movs	r3, #0
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3728      	adds	r7, #40	; 0x28
 8016b84:	46bd      	mov	sp, r7
 8016b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b8a:	bf00      	nop
 8016b8c:	20004040 	.word	0x20004040

08016b90 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016b90:	b480      	push	{r7}
 8016b92:	b085      	sub	sp, #20
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d101      	bne.n	8016ba2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b9e:	230a      	movs	r3, #10
 8016ba0:	e017      	b.n	8016bd2 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	60fb      	str	r3, [r7, #12]
 8016ba6:	e010      	b.n	8016bca <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016ba8:	4b0c      	ldr	r3, [pc, #48]	; (8016bdc <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016baa:	6819      	ldr	r1, [r3, #0]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	222c      	movs	r2, #44	; 0x2c
 8016bb0:	fb02 f303 	mul.w	r3, r2, r3
 8016bb4:	687a      	ldr	r2, [r7, #4]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	68fa      	ldr	r2, [r7, #12]
 8016bba:	3206      	adds	r2, #6
 8016bbc:	0092      	lsls	r2, r2, #2
 8016bbe:	440a      	add	r2, r1
 8016bc0:	3204      	adds	r2, #4
 8016bc2:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	60fb      	str	r3, [r7, #12]
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	ddeb      	ble.n	8016ba8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bd0:	2300      	movs	r3, #0
}
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	3714      	adds	r7, #20
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bc80      	pop	{r7}
 8016bda:	4770      	bx	lr
 8016bdc:	20004040 	.word	0x20004040

08016be0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	4603      	mov	r3, r0
 8016be8:	6039      	str	r1, [r7, #0]
 8016bea:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016bec:	79fb      	ldrb	r3, [r7, #7]
 8016bee:	6839      	ldr	r1, [r7, #0]
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7f8 f94d 	bl	800ee90 <SecureElementSetKey>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d001      	beq.n	8016c00 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bfc:	230f      	movs	r3, #15
 8016bfe:	e018      	b.n	8016c32 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8016c00:	79fb      	ldrb	r3, [r7, #7]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d114      	bne.n	8016c30 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016c06:	4b0d      	ldr	r3, [pc, #52]	; (8016c3c <LoRaMacCryptoSetKey+0x5c>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	789b      	ldrb	r3, [r3, #2]
 8016c0c:	79fa      	ldrb	r2, [r7, #7]
 8016c0e:	4611      	mov	r1, r2
 8016c10:	4618      	mov	r0, r3
 8016c12:	f000 fa3f 	bl	8017094 <LoRaMacCryptoDeriveMcRootKey>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d001      	beq.n	8016c20 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c1c:	230f      	movs	r3, #15
 8016c1e:	e008      	b.n	8016c32 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c20:	2004      	movs	r0, #4
 8016c22:	f000 fa62 	bl	80170ea <LoRaMacCryptoDeriveMcKEKey>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d001      	beq.n	8016c30 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c2c:	230f      	movs	r3, #15
 8016c2e:	e000      	b.n	8016c32 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c30:	2300      	movs	r3, #0
}
 8016c32:	4618      	mov	r0, r3
 8016c34:	3708      	adds	r7, #8
 8016c36:	46bd      	mov	sp, r7
 8016c38:	bd80      	pop	{r7, pc}
 8016c3a:	bf00      	nop
 8016c3c:	20004040 	.word	0x20004040

08016c40 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b086      	sub	sp, #24
 8016c44:	af02      	add	r7, sp, #8
 8016c46:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d101      	bne.n	8016c52 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c4e:	230a      	movs	r3, #10
 8016c50:	e033      	b.n	8016cba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c52:	2301      	movs	r3, #1
 8016c54:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c56:	2300      	movs	r3, #0
 8016c58:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c5a:	f107 0308 	add.w	r3, r7, #8
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7f8 fae6 	bl	800f230 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c64:	68ba      	ldr	r2, [r7, #8]
 8016c66:	4b17      	ldr	r3, [pc, #92]	; (8016cc4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	b292      	uxth	r2, r2
 8016c6c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c6e:	4b15      	ldr	r3, [pc, #84]	; (8016cc4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	889a      	ldrh	r2, [r3, #4]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f000 fc18 	bl	80174ae <LoRaMacSerializerJoinRequest>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d001      	beq.n	8016c88 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016c84:	2311      	movs	r3, #17
 8016c86:	e018      	b.n	8016cba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6819      	ldr	r1, [r3, #0]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	3318      	adds	r3, #24
 8016c90:	7bfa      	ldrb	r2, [r7, #15]
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	4613      	mov	r3, r2
 8016c96:	2213      	movs	r2, #19
 8016c98:	2000      	movs	r0, #0
 8016c9a:	f7f8 f957 	bl	800ef4c <SecureElementComputeAesCmac>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d001      	beq.n	8016ca8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ca4:	230f      	movs	r3, #15
 8016ca6:	e008      	b.n	8016cba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f000 fc00 	bl	80174ae <LoRaMacSerializerJoinRequest>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d001      	beq.n	8016cb8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cb4:	2311      	movs	r3, #17
 8016cb6:	e000      	b.n	8016cba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cb8:	2300      	movs	r3, #0
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3710      	adds	r7, #16
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	20004040 	.word	0x20004040

08016cc8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016cc8:	b590      	push	{r4, r7, lr}
 8016cca:	b097      	sub	sp, #92	; 0x5c
 8016ccc:	af04      	add	r7, sp, #16
 8016cce:	4603      	mov	r3, r0
 8016cd0:	60b9      	str	r1, [r7, #8]
 8016cd2:	607a      	str	r2, [r7, #4]
 8016cd4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d002      	beq.n	8016ce2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d101      	bne.n	8016ce6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ce2:	230a      	movs	r3, #10
 8016ce4:	e0bd      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016ce6:	2313      	movs	r3, #19
 8016ce8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016cec:	2300      	movs	r3, #0
 8016cee:	61bb      	str	r3, [r7, #24]
 8016cf0:	f107 031c 	add.w	r3, r7, #28
 8016cf4:	221d      	movs	r2, #29
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f009 fe9b 	bl	8020a34 <memset>
    uint8_t versionMinor         = 0;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d02:	4b5a      	ldr	r3, [pc, #360]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	889b      	ldrh	r3, [r3, #4]
 8016d08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681c      	ldr	r4, [r3, #0]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	791b      	ldrb	r3, [r3, #4]
 8016d14:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d18:	7bf8      	ldrb	r0, [r7, #15]
 8016d1a:	f107 0217 	add.w	r2, r7, #23
 8016d1e:	9202      	str	r2, [sp, #8]
 8016d20:	f107 0218 	add.w	r2, r7, #24
 8016d24:	9201      	str	r2, [sp, #4]
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	4623      	mov	r3, r4
 8016d2a:	460a      	mov	r2, r1
 8016d2c:	68b9      	ldr	r1, [r7, #8]
 8016d2e:	f7f8 fa01 	bl	800f134 <SecureElementProcessJoinAccept>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d001      	beq.n	8016d3c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d38:	230f      	movs	r3, #15
 8016d3a:	e092      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6818      	ldr	r0, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	791b      	ldrb	r3, [r3, #4]
 8016d44:	b29a      	uxth	r2, r3
 8016d46:	f107 0318 	add.w	r3, r7, #24
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	f004 fc09 	bl	801b562 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d50:	6878      	ldr	r0, [r7, #4]
 8016d52:	f000 f9ed 	bl	8017130 <LoRaMacParserJoinAccept>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d5c:	2310      	movs	r3, #16
 8016d5e:	e080      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	799b      	ldrb	r3, [r3, #6]
 8016d64:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	79db      	ldrb	r3, [r3, #7]
 8016d6a:	021b      	lsls	r3, r3, #8
 8016d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016d6e:	4313      	orrs	r3, r2
 8016d70:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	7a1b      	ldrb	r3, [r3, #8]
 8016d76:	041b      	lsls	r3, r3, #16
 8016d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016d7a:	4313      	orrs	r3, r2
 8016d7c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8016d7e:	4b3b      	ldr	r3, [pc, #236]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	689b      	ldr	r3, [r3, #8]
 8016d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d010      	beq.n	8016dac <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016d8a:	4b38      	ldr	r3, [pc, #224]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016d90:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8016d92:	7dfb      	ldrb	r3, [r7, #23]
 8016d94:	2100      	movs	r1, #0
 8016d96:	4618      	mov	r0, r3
 8016d98:	f000 f97c 	bl	8017094 <LoRaMacCryptoDeriveMcRootKey>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016da2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d005      	beq.n	8016db6 <LoRaMacCryptoHandleJoinAccept+0xee>
 8016daa:	e001      	b.n	8016db0 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016dac:	2303      	movs	r3, #3
 8016dae:	e058      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8016db0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016db4:	e055      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016db6:	2004      	movs	r0, #4
 8016db8:	f000 f997 	bl	80170ea <LoRaMacCryptoDeriveMcKEKey>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d002      	beq.n	8016dd0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8016dca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dce:	e048      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	7a5b      	ldrb	r3, [r3, #9]
 8016dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	7a9b      	ldrb	r3, [r3, #10]
 8016dda:	021b      	lsls	r3, r3, #8
 8016ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dde:	4313      	orrs	r3, r2
 8016de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	7adb      	ldrb	r3, [r3, #11]
 8016de6:	041b      	lsls	r3, r3, #16
 8016de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dea:	4313      	orrs	r3, r2
 8016dec:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016dee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016df6:	2003      	movs	r0, #3
 8016df8:	f7ff fcd6 	bl	80167a8 <DeriveSessionKey10x>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d002      	beq.n	8016e10 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8016e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e0e:	e028      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e18:	2002      	movs	r0, #2
 8016e1a:	f7ff fcc5 	bl	80167a8 <DeriveSessionKey10x>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d002      	beq.n	8016e32 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8016e2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e30:	e017      	b.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e32:	4b0e      	ldr	r3, [pc, #56]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	7dfa      	ldrb	r2, [r7, #23]
 8016e38:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e3a:	4b0c      	ldr	r3, [pc, #48]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e42:	4b0a      	ldr	r3, [pc, #40]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	f04f 32ff 	mov.w	r2, #4294967295
 8016e4a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e4c:	4b07      	ldr	r3, [pc, #28]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f04f 32ff 	mov.w	r2, #4294967295
 8016e54:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e56:	4b05      	ldr	r3, [pc, #20]	; (8016e6c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e5e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e60:	2300      	movs	r3, #0
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	374c      	adds	r7, #76	; 0x4c
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd90      	pop	{r4, r7, pc}
 8016e6a:	bf00      	nop
 8016e6c:	20004040 	.word	0x20004040

08016e70 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016e70:	b590      	push	{r4, r7, lr}
 8016e72:	b08b      	sub	sp, #44	; 0x2c
 8016e74:	af04      	add	r7, sp, #16
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	607b      	str	r3, [r7, #4]
 8016e7a:	460b      	mov	r3, r1
 8016e7c:	72fb      	strb	r3, [r7, #11]
 8016e7e:	4613      	mov	r3, r2
 8016e80:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016e82:	2313      	movs	r3, #19
 8016e84:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016e86:	2303      	movs	r3, #3
 8016e88:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d101      	bne.n	8016e94 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016e90:	230a      	movs	r3, #10
 8016e92:	e05f      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016e94:	4b31      	ldr	r3, [pc, #196]	; (8016f5c <LoRaMacCryptoSecureMessage+0xec>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	d201      	bcs.n	8016ea4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016ea0:	2306      	movs	r3, #6
 8016ea2:	e057      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d101      	bne.n	8016eb2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016eae:	2302      	movs	r3, #2
 8016eb0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016eb2:	4b2a      	ldr	r3, [pc, #168]	; (8016f5c <LoRaMacCryptoSecureMessage+0xec>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	68fa      	ldr	r2, [r7, #12]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d916      	bls.n	8016eec <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016ec8:	b219      	sxth	r1, r3
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	689c      	ldr	r4, [r3, #8]
 8016ece:	7dfa      	ldrb	r2, [r7, #23]
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	9301      	str	r3, [sp, #4]
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	9300      	str	r3, [sp, #0]
 8016ed8:	4623      	mov	r3, r4
 8016eda:	f7ff fa71 	bl	80163c0 <PayloadEncrypt>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ee2:	7dbb      	ldrb	r3, [r7, #22]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d001      	beq.n	8016eec <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016ee8:	7dbb      	ldrb	r3, [r7, #22]
 8016eea:	e033      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 fb60 	bl	80175b2 <LoRaMacSerializerData>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d001      	beq.n	8016efc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ef8:	2311      	movs	r3, #17
 8016efa:	e02b      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016efc:	2302      	movs	r3, #2
 8016efe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6818      	ldr	r0, [r3, #0]
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	791b      	ldrb	r3, [r3, #4]
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	3b04      	subs	r3, #4
 8016f0c:	b299      	uxth	r1, r3
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	322c      	adds	r2, #44	; 0x2c
 8016f16:	7dfc      	ldrb	r4, [r7, #23]
 8016f18:	9203      	str	r2, [sp, #12]
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	9202      	str	r2, [sp, #8]
 8016f1e:	9301      	str	r3, [sp, #4]
 8016f20:	2300      	movs	r3, #0
 8016f22:	9300      	str	r3, [sp, #0]
 8016f24:	2300      	movs	r3, #0
 8016f26:	4622      	mov	r2, r4
 8016f28:	f7ff fb4b 	bl	80165c2 <ComputeCmacB0>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f30:	7dbb      	ldrb	r3, [r7, #22]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d001      	beq.n	8016f3a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f36:	7dbb      	ldrb	r3, [r7, #22]
 8016f38:	e00c      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f000 fb39 	bl	80175b2 <LoRaMacSerializerData>
 8016f40:	4603      	mov	r3, r0
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d001      	beq.n	8016f4a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f46:	2311      	movs	r3, #17
 8016f48:	e004      	b.n	8016f54 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f4a:	4b04      	ldr	r3, [pc, #16]	; (8016f5c <LoRaMacCryptoSecureMessage+0xec>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	68fa      	ldr	r2, [r7, #12]
 8016f50:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f52:	2300      	movs	r3, #0
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	371c      	adds	r7, #28
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd90      	pop	{r4, r7, pc}
 8016f5c:	20004040 	.word	0x20004040

08016f60 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016f60:	b590      	push	{r4, r7, lr}
 8016f62:	b08b      	sub	sp, #44	; 0x2c
 8016f64:	af04      	add	r7, sp, #16
 8016f66:	60b9      	str	r1, [r7, #8]
 8016f68:	607b      	str	r3, [r7, #4]
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	73fb      	strb	r3, [r7, #15]
 8016f6e:	4613      	mov	r3, r2
 8016f70:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d101      	bne.n	8016f7c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f78:	230a      	movs	r3, #10
 8016f7a:	e084      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016f7c:	7bbb      	ldrb	r3, [r7, #14]
 8016f7e:	6879      	ldr	r1, [r7, #4]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff fcaf 	bl	80168e4 <CheckFCntDown>
 8016f86:	4603      	mov	r3, r0
 8016f88:	f083 0301 	eor.w	r3, r3, #1
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d001      	beq.n	8016f96 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f92:	2306      	movs	r3, #6
 8016f94:	e077      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016f96:	2313      	movs	r3, #19
 8016f98:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016f9a:	2303      	movs	r3, #3
 8016f9c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016f9e:	2302      	movs	r3, #2
 8016fa0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fa4:	f000 f98f 	bl	80172c6 <LoRaMacParserData>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d001      	beq.n	8016fb2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016fae:	2310      	movs	r3, #16
 8016fb0:	e069      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016fb2:	f107 0210 	add.w	r2, r7, #16
 8016fb6:	7bfb      	ldrb	r3, [r7, #15]
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7ff fbce 	bl	801675c <GetKeyAddrItem>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016fc4:	7d7b      	ldrb	r3, [r7, #21]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d001      	beq.n	8016fce <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016fca:	7d7b      	ldrb	r3, [r7, #21]
 8016fcc:	e05b      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	785b      	ldrb	r3, [r3, #1]
 8016fd2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016fd4:	693b      	ldr	r3, [r7, #16]
 8016fd6:	789b      	ldrb	r3, [r3, #2]
 8016fd8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fdc:	689b      	ldr	r3, [r3, #8]
 8016fde:	68ba      	ldr	r2, [r7, #8]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	d001      	beq.n	8016fe8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016fe4:	2302      	movs	r3, #2
 8016fe6:	e04e      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fea:	7b1b      	ldrb	r3, [r3, #12]
 8016fec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	bf14      	ite	ne
 8016ff6:	2301      	movne	r3, #1
 8016ff8:	2300      	moveq	r3, #0
 8016ffa:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016ffc:	4b24      	ldr	r3, [pc, #144]	; (8017090 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	789b      	ldrb	r3, [r3, #2]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d101      	bne.n	801700a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017006:	2300      	movs	r3, #0
 8017008:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	6818      	ldr	r0, [r3, #0]
 801700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017010:	791b      	ldrb	r3, [r3, #4]
 8017012:	b29b      	uxth	r3, r3
 8017014:	3b04      	subs	r3, #4
 8017016:	b299      	uxth	r1, r3
 8017018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801701c:	7dbc      	ldrb	r4, [r7, #22]
 801701e:	7d3a      	ldrb	r2, [r7, #20]
 8017020:	9303      	str	r3, [sp, #12]
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	9302      	str	r3, [sp, #8]
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	9301      	str	r3, [sp, #4]
 801702a:	2301      	movs	r3, #1
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	4623      	mov	r3, r4
 8017030:	f7ff fb05 	bl	801663e <VerifyCmacB0>
 8017034:	4603      	mov	r3, r0
 8017036:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017038:	7d7b      	ldrb	r3, [r7, #21]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801703e:	7d7b      	ldrb	r3, [r7, #21]
 8017040:	e021      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d101      	bne.n	8017050 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801704c:	2302      	movs	r3, #2
 801704e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017052:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801705a:	b219      	sxth	r1, r3
 801705c:	7dfa      	ldrb	r2, [r7, #23]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	9301      	str	r3, [sp, #4]
 8017062:	2301      	movs	r3, #1
 8017064:	9300      	str	r3, [sp, #0]
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	f7ff f9aa 	bl	80163c0 <PayloadEncrypt>
 801706c:	4603      	mov	r3, r0
 801706e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017070:	7d7b      	ldrb	r3, [r7, #21]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d001      	beq.n	801707a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8017076:	7d7b      	ldrb	r3, [r7, #21]
 8017078:	e005      	b.n	8017086 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801707a:	7bbb      	ldrb	r3, [r7, #14]
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	4618      	mov	r0, r3
 8017080:	f7ff fc54 	bl	801692c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017084:	2300      	movs	r3, #0
}
 8017086:	4618      	mov	r0, r3
 8017088:	371c      	adds	r7, #28
 801708a:	46bd      	mov	sp, r7
 801708c:	bd90      	pop	{r4, r7, pc}
 801708e:	bf00      	nop
 8017090:	20004040 	.word	0x20004040

08017094 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b086      	sub	sp, #24
 8017098:	af00      	add	r7, sp, #0
 801709a:	4603      	mov	r3, r0
 801709c:	460a      	mov	r2, r1
 801709e:	71fb      	strb	r3, [r7, #7]
 80170a0:	4613      	mov	r3, r2
 80170a2:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80170a4:	79bb      	ldrb	r3, [r7, #6]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d001      	beq.n	80170ae <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80170aa:	230b      	movs	r3, #11
 80170ac:	e019      	b.n	80170e2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80170ae:	2300      	movs	r3, #0
 80170b0:	60bb      	str	r3, [r7, #8]
 80170b2:	f107 030c 	add.w	r3, r7, #12
 80170b6:	2200      	movs	r2, #0
 80170b8:	601a      	str	r2, [r3, #0]
 80170ba:	605a      	str	r2, [r3, #4]
 80170bc:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80170be:	79fb      	ldrb	r3, [r7, #7]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d101      	bne.n	80170c8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80170c4:	2320      	movs	r3, #32
 80170c6:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80170c8:	79b9      	ldrb	r1, [r7, #6]
 80170ca:	f107 0308 	add.w	r3, r7, #8
 80170ce:	2204      	movs	r2, #4
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7f7 ffef 	bl	800f0b4 <SecureElementDeriveAndStoreKey>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d001      	beq.n	80170e0 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80170dc:	230f      	movs	r3, #15
 80170de:	e000      	b.n	80170e2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80170e0:	2300      	movs	r3, #0
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3718      	adds	r7, #24
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80170ea:	b580      	push	{r7, lr}
 80170ec:	b086      	sub	sp, #24
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	4603      	mov	r3, r0
 80170f2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80170f4:	79fb      	ldrb	r3, [r7, #7]
 80170f6:	2b04      	cmp	r3, #4
 80170f8:	d001      	beq.n	80170fe <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80170fa:	230b      	movs	r3, #11
 80170fc:	e014      	b.n	8017128 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80170fe:	2300      	movs	r3, #0
 8017100:	60bb      	str	r3, [r7, #8]
 8017102:	f107 030c 	add.w	r3, r7, #12
 8017106:	2200      	movs	r2, #0
 8017108:	601a      	str	r2, [r3, #0]
 801710a:	605a      	str	r2, [r3, #4]
 801710c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801710e:	79f9      	ldrb	r1, [r7, #7]
 8017110:	f107 0308 	add.w	r3, r7, #8
 8017114:	227f      	movs	r2, #127	; 0x7f
 8017116:	4618      	mov	r0, r3
 8017118:	f7f7 ffcc 	bl	800f0b4 <SecureElementDeriveAndStoreKey>
 801711c:	4603      	mov	r3, r0
 801711e:	2b00      	cmp	r3, #0
 8017120:	d001      	beq.n	8017126 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017122:	230f      	movs	r3, #15
 8017124:	e000      	b.n	8017128 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017126:	2300      	movs	r3, #0
}
 8017128:	4618      	mov	r0, r3
 801712a:	3718      	adds	r7, #24
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d003      	beq.n	8017146 <LoRaMacParserJoinAccept+0x16>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d101      	bne.n	801714a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017146:	2302      	movs	r3, #2
 8017148:	e0b9      	b.n	80172be <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801714a:	2300      	movs	r3, #0
 801714c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	89fb      	ldrh	r3, [r7, #14]
 8017154:	1c59      	adds	r1, r3, #1
 8017156:	81f9      	strh	r1, [r7, #14]
 8017158:	4413      	add	r3, r2
 801715a:	781a      	ldrb	r2, [r3, #0]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	1d98      	adds	r0, r3, #6
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681a      	ldr	r2, [r3, #0]
 8017168:	89fb      	ldrh	r3, [r7, #14]
 801716a:	4413      	add	r3, r2
 801716c:	2203      	movs	r2, #3
 801716e:	4619      	mov	r1, r3
 8017170:	f004 f9f7 	bl	801b562 <memcpy1>
    bufItr = bufItr + 3;
 8017174:	89fb      	ldrh	r3, [r7, #14]
 8017176:	3303      	adds	r3, #3
 8017178:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f103 0009 	add.w	r0, r3, #9
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	89fb      	ldrh	r3, [r7, #14]
 8017186:	4413      	add	r3, r2
 8017188:	2203      	movs	r2, #3
 801718a:	4619      	mov	r1, r3
 801718c:	f004 f9e9 	bl	801b562 <memcpy1>
    bufItr = bufItr + 3;
 8017190:	89fb      	ldrh	r3, [r7, #14]
 8017192:	3303      	adds	r3, #3
 8017194:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	89fb      	ldrh	r3, [r7, #14]
 801719c:	1c59      	adds	r1, r3, #1
 801719e:	81f9      	strh	r1, [r7, #14]
 80171a0:	4413      	add	r3, r2
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	461a      	mov	r2, r3
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	89fb      	ldrh	r3, [r7, #14]
 80171b0:	1c59      	adds	r1, r3, #1
 80171b2:	81f9      	strh	r1, [r7, #14]
 80171b4:	4413      	add	r3, r2
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	021a      	lsls	r2, r3, #8
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	68db      	ldr	r3, [r3, #12]
 80171be:	431a      	orrs	r2, r3
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	89fb      	ldrh	r3, [r7, #14]
 80171ca:	1c59      	adds	r1, r3, #1
 80171cc:	81f9      	strh	r1, [r7, #14]
 80171ce:	4413      	add	r3, r2
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	041a      	lsls	r2, r3, #16
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	68db      	ldr	r3, [r3, #12]
 80171d8:	431a      	orrs	r2, r3
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	89fb      	ldrh	r3, [r7, #14]
 80171e4:	1c59      	adds	r1, r3, #1
 80171e6:	81f9      	strh	r1, [r7, #14]
 80171e8:	4413      	add	r3, r2
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	061a      	lsls	r2, r3, #24
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	431a      	orrs	r2, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	89fb      	ldrh	r3, [r7, #14]
 80171fe:	1c59      	adds	r1, r3, #1
 8017200:	81f9      	strh	r1, [r7, #14]
 8017202:	4413      	add	r3, r2
 8017204:	781a      	ldrb	r2, [r3, #0]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681a      	ldr	r2, [r3, #0]
 801720e:	89fb      	ldrh	r3, [r7, #14]
 8017210:	1c59      	adds	r1, r3, #1
 8017212:	81f9      	strh	r1, [r7, #14]
 8017214:	4413      	add	r3, r2
 8017216:	781a      	ldrb	r2, [r3, #0]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	791b      	ldrb	r3, [r3, #4]
 8017220:	1f1a      	subs	r2, r3, #4
 8017222:	89fb      	ldrh	r3, [r7, #14]
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	2b10      	cmp	r3, #16
 8017228:	d10e      	bne.n	8017248 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f103 0012 	add.w	r0, r3, #18
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	89fb      	ldrh	r3, [r7, #14]
 8017236:	4413      	add	r3, r2
 8017238:	2210      	movs	r2, #16
 801723a:	4619      	mov	r1, r3
 801723c:	f004 f991 	bl	801b562 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8017240:	89fb      	ldrh	r3, [r7, #14]
 8017242:	3310      	adds	r3, #16
 8017244:	81fb      	strh	r3, [r7, #14]
 8017246:	e008      	b.n	801725a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	791b      	ldrb	r3, [r3, #4]
 801724c:	1f1a      	subs	r2, r3, #4
 801724e:	89fb      	ldrh	r3, [r7, #14]
 8017250:	1ad3      	subs	r3, r2, r3
 8017252:	2b00      	cmp	r3, #0
 8017254:	dd01      	ble.n	801725a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017256:	2301      	movs	r3, #1
 8017258:	e031      	b.n	80172be <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	1c59      	adds	r1, r3, #1
 8017262:	81f9      	strh	r1, [r7, #14]
 8017264:	4413      	add	r3, r2
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	461a      	mov	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681a      	ldr	r2, [r3, #0]
 8017272:	89fb      	ldrh	r3, [r7, #14]
 8017274:	1c59      	adds	r1, r3, #1
 8017276:	81f9      	strh	r1, [r7, #14]
 8017278:	4413      	add	r3, r2
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	021a      	lsls	r2, r3, #8
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017282:	431a      	orrs	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	89fb      	ldrh	r3, [r7, #14]
 801728e:	1c59      	adds	r1, r3, #1
 8017290:	81f9      	strh	r1, [r7, #14]
 8017292:	4413      	add	r3, r2
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	041a      	lsls	r2, r3, #16
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801729c:	431a      	orrs	r2, r3
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681a      	ldr	r2, [r3, #0]
 80172a6:	89fb      	ldrh	r3, [r7, #14]
 80172a8:	1c59      	adds	r1, r3, #1
 80172aa:	81f9      	strh	r1, [r7, #14]
 80172ac:	4413      	add	r3, r2
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	061a      	lsls	r2, r3, #24
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172b6:	431a      	orrs	r2, r3
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172bc:	2300      	movs	r3, #0
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3710      	adds	r7, #16
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}

080172c6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80172c6:	b580      	push	{r7, lr}
 80172c8:	b084      	sub	sp, #16
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d003      	beq.n	80172dc <LoRaMacParserData+0x16>
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d101      	bne.n	80172e0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80172dc:	2302      	movs	r3, #2
 80172de:	e0e2      	b.n	80174a6 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	89fb      	ldrh	r3, [r7, #14]
 80172ea:	1c59      	adds	r1, r3, #1
 80172ec:	81f9      	strh	r1, [r7, #14]
 80172ee:	4413      	add	r3, r2
 80172f0:	781a      	ldrb	r2, [r3, #0]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	89fb      	ldrh	r3, [r7, #14]
 80172fc:	1c59      	adds	r1, r3, #1
 80172fe:	81f9      	strh	r1, [r7, #14]
 8017300:	4413      	add	r3, r2
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	461a      	mov	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	89fb      	ldrh	r3, [r7, #14]
 8017310:	1c59      	adds	r1, r3, #1
 8017312:	81f9      	strh	r1, [r7, #14]
 8017314:	4413      	add	r3, r2
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	021a      	lsls	r2, r3, #8
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	431a      	orrs	r2, r3
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681a      	ldr	r2, [r3, #0]
 8017328:	89fb      	ldrh	r3, [r7, #14]
 801732a:	1c59      	adds	r1, r3, #1
 801732c:	81f9      	strh	r1, [r7, #14]
 801732e:	4413      	add	r3, r2
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	041a      	lsls	r2, r3, #16
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	431a      	orrs	r2, r3
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	89fb      	ldrh	r3, [r7, #14]
 8017344:	1c59      	adds	r1, r3, #1
 8017346:	81f9      	strh	r1, [r7, #14]
 8017348:	4413      	add	r3, r2
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	061a      	lsls	r2, r3, #24
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	689b      	ldr	r3, [r3, #8]
 8017352:	431a      	orrs	r2, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	89fb      	ldrh	r3, [r7, #14]
 801735e:	1c59      	adds	r1, r3, #1
 8017360:	81f9      	strh	r1, [r7, #14]
 8017362:	4413      	add	r3, r2
 8017364:	781a      	ldrb	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681a      	ldr	r2, [r3, #0]
 801736e:	89fb      	ldrh	r3, [r7, #14]
 8017370:	1c59      	adds	r1, r3, #1
 8017372:	81f9      	strh	r1, [r7, #14]
 8017374:	4413      	add	r3, r2
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	b29a      	uxth	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	89fb      	ldrh	r3, [r7, #14]
 8017384:	1c59      	adds	r1, r3, #1
 8017386:	81f9      	strh	r1, [r7, #14]
 8017388:	4413      	add	r3, r2
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	0219      	lsls	r1, r3, #8
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	89db      	ldrh	r3, [r3, #14]
 8017392:	b21a      	sxth	r2, r3
 8017394:	b20b      	sxth	r3, r1
 8017396:	4313      	orrs	r3, r2
 8017398:	b21b      	sxth	r3, r3
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f103 0010 	add.w	r0, r3, #16
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	89fb      	ldrh	r3, [r7, #14]
 80173ac:	18d1      	adds	r1, r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	7b1b      	ldrb	r3, [r3, #12]
 80173b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173b6:	b2db      	uxtb	r3, r3
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	461a      	mov	r2, r3
 80173bc:	f004 f8d1 	bl	801b562 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	7b1b      	ldrb	r3, [r3, #12]
 80173c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	b29a      	uxth	r2, r3
 80173cc:	89fb      	ldrh	r3, [r7, #14]
 80173ce:	4413      	add	r3, r2
 80173d0:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2200      	movs	r2, #0
 80173d6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2200      	movs	r2, #0
 80173de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	791b      	ldrb	r3, [r3, #4]
 80173e6:	461a      	mov	r2, r3
 80173e8:	89fb      	ldrh	r3, [r7, #14]
 80173ea:	1ad3      	subs	r3, r2, r3
 80173ec:	2b04      	cmp	r3, #4
 80173ee:	dd28      	ble.n	8017442 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681a      	ldr	r2, [r3, #0]
 80173f4:	89fb      	ldrh	r3, [r7, #14]
 80173f6:	1c59      	adds	r1, r3, #1
 80173f8:	81f9      	strh	r1, [r7, #14]
 80173fa:	4413      	add	r3, r2
 80173fc:	781a      	ldrb	r2, [r3, #0]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	791a      	ldrb	r2, [r3, #4]
 8017408:	89fb      	ldrh	r3, [r7, #14]
 801740a:	b2db      	uxtb	r3, r3
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	b2db      	uxtb	r3, r3
 8017410:	3b04      	subs	r3, #4
 8017412:	b2da      	uxtb	r2, r3
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	89fb      	ldrh	r3, [r7, #14]
 8017424:	18d1      	adds	r1, r2, r3
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801742c:	b29b      	uxth	r3, r3
 801742e:	461a      	mov	r2, r3
 8017430:	f004 f897 	bl	801b562 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801743a:	b29a      	uxth	r2, r3
 801743c:	89fb      	ldrh	r3, [r7, #14]
 801743e:	4413      	add	r3, r2
 8017440:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681a      	ldr	r2, [r3, #0]
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	791b      	ldrb	r3, [r3, #4]
 801744a:	3b04      	subs	r3, #4
 801744c:	4413      	add	r3, r2
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	461a      	mov	r2, r3
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6819      	ldr	r1, [r3, #0]
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	791b      	ldrb	r3, [r3, #4]
 8017462:	3b03      	subs	r3, #3
 8017464:	440b      	add	r3, r1
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	021b      	lsls	r3, r3, #8
 801746a:	431a      	orrs	r2, r3
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	6819      	ldr	r1, [r3, #0]
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	791b      	ldrb	r3, [r3, #4]
 801747c:	3b02      	subs	r3, #2
 801747e:	440b      	add	r3, r1
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	041b      	lsls	r3, r3, #16
 8017484:	431a      	orrs	r2, r3
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6819      	ldr	r1, [r3, #0]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	791b      	ldrb	r3, [r3, #4]
 8017496:	3b01      	subs	r3, #1
 8017498:	440b      	add	r3, r1
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	061b      	lsls	r3, r3, #24
 801749e:	431a      	orrs	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174a4:	2300      	movs	r3, #0
}
 80174a6:	4618      	mov	r0, r3
 80174a8:	3710      	adds	r7, #16
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}

080174ae <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174ae:	b580      	push	{r7, lr}
 80174b0:	b084      	sub	sp, #16
 80174b2:	af00      	add	r7, sp, #0
 80174b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d003      	beq.n	80174c4 <LoRaMacSerializerJoinRequest+0x16>
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d101      	bne.n	80174c8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80174c4:	2301      	movs	r3, #1
 80174c6:	e070      	b.n	80175aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80174c8:	2300      	movs	r3, #0
 80174ca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	791b      	ldrb	r3, [r3, #4]
 80174d0:	2b16      	cmp	r3, #22
 80174d2:	d801      	bhi.n	80174d8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80174d4:	2302      	movs	r3, #2
 80174d6:	e068      	b.n	80175aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681a      	ldr	r2, [r3, #0]
 80174dc:	89fb      	ldrh	r3, [r7, #14]
 80174de:	1c59      	adds	r1, r3, #1
 80174e0:	81f9      	strh	r1, [r7, #14]
 80174e2:	4413      	add	r3, r2
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	7952      	ldrb	r2, [r2, #5]
 80174e8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	89fb      	ldrh	r3, [r7, #14]
 80174f0:	18d0      	adds	r0, r2, r3
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	3306      	adds	r3, #6
 80174f6:	2208      	movs	r2, #8
 80174f8:	4619      	mov	r1, r3
 80174fa:	f004 f84d 	bl	801b598 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80174fe:	89fb      	ldrh	r3, [r7, #14]
 8017500:	3308      	adds	r3, #8
 8017502:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681a      	ldr	r2, [r3, #0]
 8017508:	89fb      	ldrh	r3, [r7, #14]
 801750a:	18d0      	adds	r0, r2, r3
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	330e      	adds	r3, #14
 8017510:	2208      	movs	r2, #8
 8017512:	4619      	mov	r1, r3
 8017514:	f004 f840 	bl	801b598 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017518:	89fb      	ldrh	r3, [r7, #14]
 801751a:	3308      	adds	r3, #8
 801751c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	8ad9      	ldrh	r1, [r3, #22]
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681a      	ldr	r2, [r3, #0]
 8017526:	89fb      	ldrh	r3, [r7, #14]
 8017528:	1c58      	adds	r0, r3, #1
 801752a:	81f8      	strh	r0, [r7, #14]
 801752c:	4413      	add	r3, r2
 801752e:	b2ca      	uxtb	r2, r1
 8017530:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	8adb      	ldrh	r3, [r3, #22]
 8017536:	0a1b      	lsrs	r3, r3, #8
 8017538:	b299      	uxth	r1, r3
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681a      	ldr	r2, [r3, #0]
 801753e:	89fb      	ldrh	r3, [r7, #14]
 8017540:	1c58      	adds	r0, r3, #1
 8017542:	81f8      	strh	r0, [r7, #14]
 8017544:	4413      	add	r3, r2
 8017546:	b2ca      	uxtb	r2, r1
 8017548:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	6999      	ldr	r1, [r3, #24]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	89fb      	ldrh	r3, [r7, #14]
 8017554:	1c58      	adds	r0, r3, #1
 8017556:	81f8      	strh	r0, [r7, #14]
 8017558:	4413      	add	r3, r2
 801755a:	b2ca      	uxtb	r2, r1
 801755c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	699b      	ldr	r3, [r3, #24]
 8017562:	0a19      	lsrs	r1, r3, #8
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	89fb      	ldrh	r3, [r7, #14]
 801756a:	1c58      	adds	r0, r3, #1
 801756c:	81f8      	strh	r0, [r7, #14]
 801756e:	4413      	add	r3, r2
 8017570:	b2ca      	uxtb	r2, r1
 8017572:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	699b      	ldr	r3, [r3, #24]
 8017578:	0c19      	lsrs	r1, r3, #16
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681a      	ldr	r2, [r3, #0]
 801757e:	89fb      	ldrh	r3, [r7, #14]
 8017580:	1c58      	adds	r0, r3, #1
 8017582:	81f8      	strh	r0, [r7, #14]
 8017584:	4413      	add	r3, r2
 8017586:	b2ca      	uxtb	r2, r1
 8017588:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	699b      	ldr	r3, [r3, #24]
 801758e:	0e19      	lsrs	r1, r3, #24
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	89fb      	ldrh	r3, [r7, #14]
 8017596:	1c58      	adds	r0, r3, #1
 8017598:	81f8      	strh	r0, [r7, #14]
 801759a:	4413      	add	r3, r2
 801759c:	b2ca      	uxtb	r2, r1
 801759e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175a0:	89fb      	ldrh	r3, [r7, #14]
 80175a2:	b2da      	uxtb	r2, r3
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175a8:	2300      	movs	r3, #0
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3710      	adds	r7, #16
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b084      	sub	sp, #16
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d003      	beq.n	80175c8 <LoRaMacSerializerData+0x16>
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d101      	bne.n	80175cc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175c8:	2301      	movs	r3, #1
 80175ca:	e0e5      	b.n	8017798 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80175cc:	2300      	movs	r3, #0
 80175ce:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80175d0:	2308      	movs	r3, #8
 80175d2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	7b1b      	ldrb	r3, [r3, #12]
 80175d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	b29a      	uxth	r2, r3
 80175e0:	89bb      	ldrh	r3, [r7, #12]
 80175e2:	4413      	add	r3, r2
 80175e4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d002      	beq.n	80175f6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80175f0:	89bb      	ldrh	r3, [r7, #12]
 80175f2:	3301      	adds	r3, #1
 80175f4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175fc:	b29a      	uxth	r2, r3
 80175fe:	89bb      	ldrh	r3, [r7, #12]
 8017600:	4413      	add	r3, r2
 8017602:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017604:	89bb      	ldrh	r3, [r7, #12]
 8017606:	3304      	adds	r3, #4
 8017608:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	791b      	ldrb	r3, [r3, #4]
 801760e:	b29b      	uxth	r3, r3
 8017610:	89ba      	ldrh	r2, [r7, #12]
 8017612:	429a      	cmp	r2, r3
 8017614:	d901      	bls.n	801761a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017616:	2302      	movs	r3, #2
 8017618:	e0be      	b.n	8017798 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681a      	ldr	r2, [r3, #0]
 801761e:	89fb      	ldrh	r3, [r7, #14]
 8017620:	1c59      	adds	r1, r3, #1
 8017622:	81f9      	strh	r1, [r7, #14]
 8017624:	4413      	add	r3, r2
 8017626:	687a      	ldr	r2, [r7, #4]
 8017628:	7952      	ldrb	r2, [r2, #5]
 801762a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6899      	ldr	r1, [r3, #8]
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	89fb      	ldrh	r3, [r7, #14]
 8017636:	1c58      	adds	r0, r3, #1
 8017638:	81f8      	strh	r0, [r7, #14]
 801763a:	4413      	add	r3, r2
 801763c:	b2ca      	uxtb	r2, r1
 801763e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	0a19      	lsrs	r1, r3, #8
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	89fb      	ldrh	r3, [r7, #14]
 801764c:	1c58      	adds	r0, r3, #1
 801764e:	81f8      	strh	r0, [r7, #14]
 8017650:	4413      	add	r3, r2
 8017652:	b2ca      	uxtb	r2, r1
 8017654:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	689b      	ldr	r3, [r3, #8]
 801765a:	0c19      	lsrs	r1, r3, #16
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681a      	ldr	r2, [r3, #0]
 8017660:	89fb      	ldrh	r3, [r7, #14]
 8017662:	1c58      	adds	r0, r3, #1
 8017664:	81f8      	strh	r0, [r7, #14]
 8017666:	4413      	add	r3, r2
 8017668:	b2ca      	uxtb	r2, r1
 801766a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	689b      	ldr	r3, [r3, #8]
 8017670:	0e19      	lsrs	r1, r3, #24
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681a      	ldr	r2, [r3, #0]
 8017676:	89fb      	ldrh	r3, [r7, #14]
 8017678:	1c58      	adds	r0, r3, #1
 801767a:	81f8      	strh	r0, [r7, #14]
 801767c:	4413      	add	r3, r2
 801767e:	b2ca      	uxtb	r2, r1
 8017680:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	89fb      	ldrh	r3, [r7, #14]
 8017688:	1c59      	adds	r1, r3, #1
 801768a:	81f9      	strh	r1, [r7, #14]
 801768c:	4413      	add	r3, r2
 801768e:	687a      	ldr	r2, [r7, #4]
 8017690:	7b12      	ldrb	r2, [r2, #12]
 8017692:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	89d9      	ldrh	r1, [r3, #14]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	1c58      	adds	r0, r3, #1
 80176a0:	81f8      	strh	r0, [r7, #14]
 80176a2:	4413      	add	r3, r2
 80176a4:	b2ca      	uxtb	r2, r1
 80176a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	89db      	ldrh	r3, [r3, #14]
 80176ac:	0a1b      	lsrs	r3, r3, #8
 80176ae:	b299      	uxth	r1, r3
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681a      	ldr	r2, [r3, #0]
 80176b4:	89fb      	ldrh	r3, [r7, #14]
 80176b6:	1c58      	adds	r0, r3, #1
 80176b8:	81f8      	strh	r0, [r7, #14]
 80176ba:	4413      	add	r3, r2
 80176bc:	b2ca      	uxtb	r2, r1
 80176be:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681a      	ldr	r2, [r3, #0]
 80176c4:	89fb      	ldrh	r3, [r7, #14]
 80176c6:	18d0      	adds	r0, r2, r3
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f103 0110 	add.w	r1, r3, #16
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	7b1b      	ldrb	r3, [r3, #12]
 80176d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	b29b      	uxth	r3, r3
 80176da:	461a      	mov	r2, r3
 80176dc:	f003 ff41 	bl	801b562 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	7b1b      	ldrb	r3, [r3, #12]
 80176e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	89fb      	ldrh	r3, [r7, #14]
 80176ee:	4413      	add	r3, r2
 80176f0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d009      	beq.n	8017710 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681a      	ldr	r2, [r3, #0]
 8017700:	89fb      	ldrh	r3, [r7, #14]
 8017702:	1c59      	adds	r1, r3, #1
 8017704:	81f9      	strh	r1, [r7, #14]
 8017706:	4413      	add	r3, r2
 8017708:	687a      	ldr	r2, [r7, #4]
 801770a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801770e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681a      	ldr	r2, [r3, #0]
 8017714:	89fb      	ldrh	r3, [r7, #14]
 8017716:	18d0      	adds	r0, r2, r3
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017722:	b29b      	uxth	r3, r3
 8017724:	461a      	mov	r2, r3
 8017726:	f003 ff1c 	bl	801b562 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017730:	b29a      	uxth	r2, r3
 8017732:	89fb      	ldrh	r3, [r7, #14]
 8017734:	4413      	add	r3, r2
 8017736:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681a      	ldr	r2, [r3, #0]
 8017740:	89fb      	ldrh	r3, [r7, #14]
 8017742:	1c58      	adds	r0, r3, #1
 8017744:	81f8      	strh	r0, [r7, #14]
 8017746:	4413      	add	r3, r2
 8017748:	b2ca      	uxtb	r2, r1
 801774a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017750:	0a19      	lsrs	r1, r3, #8
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681a      	ldr	r2, [r3, #0]
 8017756:	89fb      	ldrh	r3, [r7, #14]
 8017758:	1c58      	adds	r0, r3, #1
 801775a:	81f8      	strh	r0, [r7, #14]
 801775c:	4413      	add	r3, r2
 801775e:	b2ca      	uxtb	r2, r1
 8017760:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017766:	0c19      	lsrs	r1, r3, #16
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681a      	ldr	r2, [r3, #0]
 801776c:	89fb      	ldrh	r3, [r7, #14]
 801776e:	1c58      	adds	r0, r3, #1
 8017770:	81f8      	strh	r0, [r7, #14]
 8017772:	4413      	add	r3, r2
 8017774:	b2ca      	uxtb	r2, r1
 8017776:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777c:	0e19      	lsrs	r1, r3, #24
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	1c58      	adds	r0, r3, #1
 8017786:	81f8      	strh	r0, [r7, #14]
 8017788:	4413      	add	r3, r2
 801778a:	b2ca      	uxtb	r2, r1
 801778c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801778e:	89fb      	ldrh	r3, [r7, #14]
 8017790:	b2da      	uxtb	r2, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017796:	2300      	movs	r3, #0
}
 8017798:	4618      	mov	r0, r3
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}

080177a0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177a0:	b480      	push	{r7}
 80177a2:	b083      	sub	sp, #12
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	4603      	mov	r3, r0
 80177a8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177aa:	79fb      	ldrb	r3, [r7, #7]
 80177ac:	2b05      	cmp	r3, #5
 80177ae:	d002      	beq.n	80177b6 <RegionIsActive+0x16>
 80177b0:	2b08      	cmp	r3, #8
 80177b2:	d002      	beq.n	80177ba <RegionIsActive+0x1a>
 80177b4:	e003      	b.n	80177be <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177b6:	2301      	movs	r3, #1
 80177b8:	e002      	b.n	80177c0 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80177ba:	2301      	movs	r3, #1
 80177bc:	e000      	b.n	80177c0 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177be:	2300      	movs	r3, #0
        }
    }
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	370c      	adds	r7, #12
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bc80      	pop	{r7}
 80177c8:	4770      	bx	lr

080177ca <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b084      	sub	sp, #16
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	4603      	mov	r3, r0
 80177d2:	6039      	str	r1, [r7, #0]
 80177d4:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80177d6:	2300      	movs	r3, #0
 80177d8:	60bb      	str	r3, [r7, #8]
    switch( region )
 80177da:	79fb      	ldrb	r3, [r7, #7]
 80177dc:	2b05      	cmp	r3, #5
 80177de:	d002      	beq.n	80177e6 <RegionGetPhyParam+0x1c>
 80177e0:	2b08      	cmp	r3, #8
 80177e2:	d006      	beq.n	80177f2 <RegionGetPhyParam+0x28>
 80177e4:	e00b      	b.n	80177fe <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80177e6:	6838      	ldr	r0, [r7, #0]
 80177e8:	f001 fae4 	bl	8018db4 <RegionEU868GetPhyParam>
 80177ec:	4603      	mov	r3, r0
 80177ee:	60fb      	str	r3, [r7, #12]
 80177f0:	e007      	b.n	8017802 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80177f2:	6838      	ldr	r0, [r7, #0]
 80177f4:	f002 fcb2 	bl	801a15c <RegionUS915GetPhyParam>
 80177f8:	4603      	mov	r3, r0
 80177fa:	60fb      	str	r3, [r7, #12]
 80177fc:	e001      	b.n	8017802 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	4618      	mov	r0, r3
 8017806:	3710      	adds	r7, #16
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	4603      	mov	r3, r0
 8017814:	6039      	str	r1, [r7, #0]
 8017816:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017818:	79fb      	ldrb	r3, [r7, #7]
 801781a:	2b05      	cmp	r3, #5
 801781c:	d002      	beq.n	8017824 <RegionSetBandTxDone+0x18>
 801781e:	2b08      	cmp	r3, #8
 8017820:	d004      	beq.n	801782c <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017822:	e006      	b.n	8017832 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8017824:	6838      	ldr	r0, [r7, #0]
 8017826:	f001 fc11 	bl	801904c <RegionEU868SetBandTxDone>
 801782a:	e002      	b.n	8017832 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801782c:	6838      	ldr	r0, [r7, #0]
 801782e:	f002 fdf7 	bl	801a420 <RegionUS915SetBandTxDone>
        }
    }
}
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	4603      	mov	r3, r0
 8017840:	6039      	str	r1, [r7, #0]
 8017842:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	2b05      	cmp	r3, #5
 8017848:	d002      	beq.n	8017850 <RegionInitDefaults+0x18>
 801784a:	2b08      	cmp	r3, #8
 801784c:	d004      	beq.n	8017858 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801784e:	e006      	b.n	801785e <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8017850:	6838      	ldr	r0, [r7, #0]
 8017852:	f001 fc27 	bl	80190a4 <RegionEU868InitDefaults>
 8017856:	e002      	b.n	801785e <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8017858:	6838      	ldr	r0, [r7, #0]
 801785a:	f002 fe0d 	bl	801a478 <RegionUS915InitDefaults>
        }
    }
}
 801785e:	bf00      	nop
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	4603      	mov	r3, r0
 801786e:	6039      	str	r1, [r7, #0]
 8017870:	71fb      	strb	r3, [r7, #7]
 8017872:	4613      	mov	r3, r2
 8017874:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017876:	79fb      	ldrb	r3, [r7, #7]
 8017878:	2b05      	cmp	r3, #5
 801787a:	d002      	beq.n	8017882 <RegionVerify+0x1c>
 801787c:	2b08      	cmp	r3, #8
 801787e:	d007      	beq.n	8017890 <RegionVerify+0x2a>
 8017880:	e00d      	b.n	801789e <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017882:	79bb      	ldrb	r3, [r7, #6]
 8017884:	4619      	mov	r1, r3
 8017886:	6838      	ldr	r0, [r7, #0]
 8017888:	f001 fcaa 	bl	80191e0 <RegionEU868Verify>
 801788c:	4603      	mov	r3, r0
 801788e:	e007      	b.n	80178a0 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8017890:	79bb      	ldrb	r3, [r7, #6]
 8017892:	4619      	mov	r1, r3
 8017894:	6838      	ldr	r0, [r7, #0]
 8017896:	f002 ff21 	bl	801a6dc <RegionUS915Verify>
 801789a:	4603      	mov	r3, r0
 801789c:	e000      	b.n	80178a0 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 801789e:	2300      	movs	r3, #0
        }
    }
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	4603      	mov	r3, r0
 80178b0:	6039      	str	r1, [r7, #0]
 80178b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178b4:	79fb      	ldrb	r3, [r7, #7]
 80178b6:	2b05      	cmp	r3, #5
 80178b8:	d002      	beq.n	80178c0 <RegionApplyCFList+0x18>
 80178ba:	2b08      	cmp	r3, #8
 80178bc:	d004      	beq.n	80178c8 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80178be:	e006      	b.n	80178ce <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80178c0:	6838      	ldr	r0, [r7, #0]
 80178c2:	f001 fd09 	bl	80192d8 <RegionEU868ApplyCFList>
 80178c6:	e002      	b.n	80178ce <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80178c8:	6838      	ldr	r0, [r7, #0]
 80178ca:	f002 ff6f 	bl	801a7ac <RegionUS915ApplyCFList>
        }
    }
}
 80178ce:	bf00      	nop
 80178d0:	3708      	adds	r7, #8
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b082      	sub	sp, #8
 80178da:	af00      	add	r7, sp, #0
 80178dc:	4603      	mov	r3, r0
 80178de:	6039      	str	r1, [r7, #0]
 80178e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178e2:	79fb      	ldrb	r3, [r7, #7]
 80178e4:	2b05      	cmp	r3, #5
 80178e6:	d002      	beq.n	80178ee <RegionChanMaskSet+0x18>
 80178e8:	2b08      	cmp	r3, #8
 80178ea:	d005      	beq.n	80178f8 <RegionChanMaskSet+0x22>
 80178ec:	e009      	b.n	8017902 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178ee:	6838      	ldr	r0, [r7, #0]
 80178f0:	f001 fd66 	bl	80193c0 <RegionEU868ChanMaskSet>
 80178f4:	4603      	mov	r3, r0
 80178f6:	e005      	b.n	8017904 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80178f8:	6838      	ldr	r0, [r7, #0]
 80178fa:	f002 ffcd 	bl	801a898 <RegionUS915ChanMaskSet>
 80178fe:	4603      	mov	r3, r0
 8017900:	e000      	b.n	8017904 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017902:	2300      	movs	r3, #0
        }
    }
}
 8017904:	4618      	mov	r0, r3
 8017906:	3708      	adds	r7, #8
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	603b      	str	r3, [r7, #0]
 8017914:	4603      	mov	r3, r0
 8017916:	71fb      	strb	r3, [r7, #7]
 8017918:	460b      	mov	r3, r1
 801791a:	71bb      	strb	r3, [r7, #6]
 801791c:	4613      	mov	r3, r2
 801791e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017920:	79fb      	ldrb	r3, [r7, #7]
 8017922:	2b05      	cmp	r3, #5
 8017924:	d002      	beq.n	801792c <RegionComputeRxWindowParameters+0x20>
 8017926:	2b08      	cmp	r3, #8
 8017928:	d008      	beq.n	801793c <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801792a:	e00e      	b.n	801794a <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801792c:	7979      	ldrb	r1, [r7, #5]
 801792e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	683a      	ldr	r2, [r7, #0]
 8017936:	f001 fd6d 	bl	8019414 <RegionEU868ComputeRxWindowParameters>
 801793a:	e006      	b.n	801794a <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801793c:	7979      	ldrb	r1, [r7, #5]
 801793e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	f003 f811 	bl	801a96c <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 801794a:	bf00      	nop
 801794c:	3708      	adds	r7, #8
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}

08017952 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017952:	b580      	push	{r7, lr}
 8017954:	b084      	sub	sp, #16
 8017956:	af00      	add	r7, sp, #0
 8017958:	4603      	mov	r3, r0
 801795a:	60b9      	str	r1, [r7, #8]
 801795c:	607a      	str	r2, [r7, #4]
 801795e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017960:	7bfb      	ldrb	r3, [r7, #15]
 8017962:	2b05      	cmp	r3, #5
 8017964:	d002      	beq.n	801796c <RegionRxConfig+0x1a>
 8017966:	2b08      	cmp	r3, #8
 8017968:	d006      	beq.n	8017978 <RegionRxConfig+0x26>
 801796a:	e00b      	b.n	8017984 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	68b8      	ldr	r0, [r7, #8]
 8017970:	f001 fdaa 	bl	80194c8 <RegionEU868RxConfig>
 8017974:	4603      	mov	r3, r0
 8017976:	e006      	b.n	8017986 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8017978:	6879      	ldr	r1, [r7, #4]
 801797a:	68b8      	ldr	r0, [r7, #8]
 801797c:	f003 f840 	bl	801aa00 <RegionUS915RxConfig>
 8017980:	4603      	mov	r3, r0
 8017982:	e000      	b.n	8017986 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017984:	2300      	movs	r3, #0
        }
    }
}
 8017986:	4618      	mov	r0, r3
 8017988:	3710      	adds	r7, #16
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b084      	sub	sp, #16
 8017992:	af00      	add	r7, sp, #0
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
 8017998:	603b      	str	r3, [r7, #0]
 801799a:	4603      	mov	r3, r0
 801799c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801799e:	7bfb      	ldrb	r3, [r7, #15]
 80179a0:	2b05      	cmp	r3, #5
 80179a2:	d002      	beq.n	80179aa <RegionTxConfig+0x1c>
 80179a4:	2b08      	cmp	r3, #8
 80179a6:	d007      	beq.n	80179b8 <RegionTxConfig+0x2a>
 80179a8:	e00d      	b.n	80179c6 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80179aa:	683a      	ldr	r2, [r7, #0]
 80179ac:	6879      	ldr	r1, [r7, #4]
 80179ae:	68b8      	ldr	r0, [r7, #8]
 80179b0:	f001 fe5a 	bl	8019668 <RegionEU868TxConfig>
 80179b4:	4603      	mov	r3, r0
 80179b6:	e007      	b.n	80179c8 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80179b8:	683a      	ldr	r2, [r7, #0]
 80179ba:	6879      	ldr	r1, [r7, #4]
 80179bc:	68b8      	ldr	r0, [r7, #8]
 80179be:	f003 f8a3 	bl	801ab08 <RegionUS915TxConfig>
 80179c2:	4603      	mov	r3, r0
 80179c4:	e000      	b.n	80179c8 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80179c6:	2300      	movs	r3, #0
        }
    }
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	3710      	adds	r7, #16
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af02      	add	r7, sp, #8
 80179d6:	60b9      	str	r1, [r7, #8]
 80179d8:	607a      	str	r2, [r7, #4]
 80179da:	603b      	str	r3, [r7, #0]
 80179dc:	4603      	mov	r3, r0
 80179de:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179e0:	7bfb      	ldrb	r3, [r7, #15]
 80179e2:	2b05      	cmp	r3, #5
 80179e4:	d002      	beq.n	80179ec <RegionLinkAdrReq+0x1c>
 80179e6:	2b08      	cmp	r3, #8
 80179e8:	d00a      	beq.n	8017a00 <RegionLinkAdrReq+0x30>
 80179ea:	e013      	b.n	8017a14 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80179ec:	69fb      	ldr	r3, [r7, #28]
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	69bb      	ldr	r3, [r7, #24]
 80179f2:	683a      	ldr	r2, [r7, #0]
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	68b8      	ldr	r0, [r7, #8]
 80179f8:	f001 ff06 	bl	8019808 <RegionEU868LinkAdrReq>
 80179fc:	4603      	mov	r3, r0
 80179fe:	e00a      	b.n	8017a16 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017a00:	69fb      	ldr	r3, [r7, #28]
 8017a02:	9300      	str	r3, [sp, #0]
 8017a04:	69bb      	ldr	r3, [r7, #24]
 8017a06:	683a      	ldr	r2, [r7, #0]
 8017a08:	6879      	ldr	r1, [r7, #4]
 8017a0a:	68b8      	ldr	r0, [r7, #8]
 8017a0c:	f003 f928 	bl	801ac60 <RegionUS915LinkAdrReq>
 8017a10:	4603      	mov	r3, r0
 8017a12:	e000      	b.n	8017a16 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017a14:	2300      	movs	r3, #0
        }
    }
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3710      	adds	r7, #16
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}

08017a1e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b082      	sub	sp, #8
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	4603      	mov	r3, r0
 8017a26:	6039      	str	r1, [r7, #0]
 8017a28:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a2a:	79fb      	ldrb	r3, [r7, #7]
 8017a2c:	2b05      	cmp	r3, #5
 8017a2e:	d002      	beq.n	8017a36 <RegionRxParamSetupReq+0x18>
 8017a30:	2b08      	cmp	r3, #8
 8017a32:	d005      	beq.n	8017a40 <RegionRxParamSetupReq+0x22>
 8017a34:	e009      	b.n	8017a4a <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017a36:	6838      	ldr	r0, [r7, #0]
 8017a38:	f002 f808 	bl	8019a4c <RegionEU868RxParamSetupReq>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	e005      	b.n	8017a4c <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017a40:	6838      	ldr	r0, [r7, #0]
 8017a42:	f003 fb31 	bl	801b0a8 <RegionUS915RxParamSetupReq>
 8017a46:	4603      	mov	r3, r0
 8017a48:	e000      	b.n	8017a4c <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017a4a:	2300      	movs	r3, #0
        }
    }
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3708      	adds	r7, #8
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}

08017a54 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	6039      	str	r1, [r7, #0]
 8017a5e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a60:	79fb      	ldrb	r3, [r7, #7]
 8017a62:	2b05      	cmp	r3, #5
 8017a64:	d002      	beq.n	8017a6c <RegionNewChannelReq+0x18>
 8017a66:	2b08      	cmp	r3, #8
 8017a68:	d005      	beq.n	8017a76 <RegionNewChannelReq+0x22>
 8017a6a:	e009      	b.n	8017a80 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017a6c:	6838      	ldr	r0, [r7, #0]
 8017a6e:	f002 f82b 	bl	8019ac8 <RegionEU868NewChannelReq>
 8017a72:	4603      	mov	r3, r0
 8017a74:	e005      	b.n	8017a82 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017a76:	6838      	ldr	r0, [r7, #0]
 8017a78:	f003 fb62 	bl	801b140 <RegionUS915NewChannelReq>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	e000      	b.n	8017a82 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a80:	2300      	movs	r3, #0
        }
    }
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3708      	adds	r7, #8
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}

08017a8a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017a8a:	b580      	push	{r7, lr}
 8017a8c:	b082      	sub	sp, #8
 8017a8e:	af00      	add	r7, sp, #0
 8017a90:	4603      	mov	r3, r0
 8017a92:	6039      	str	r1, [r7, #0]
 8017a94:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a96:	79fb      	ldrb	r3, [r7, #7]
 8017a98:	2b05      	cmp	r3, #5
 8017a9a:	d002      	beq.n	8017aa2 <RegionTxParamSetupReq+0x18>
 8017a9c:	2b08      	cmp	r3, #8
 8017a9e:	d005      	beq.n	8017aac <RegionTxParamSetupReq+0x22>
 8017aa0:	e009      	b.n	8017ab6 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017aa2:	6838      	ldr	r0, [r7, #0]
 8017aa4:	f002 f86e 	bl	8019b84 <RegionEU868TxParamSetupReq>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	e005      	b.n	8017ab8 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017aac:	6838      	ldr	r0, [r7, #0]
 8017aae:	f003 fb52 	bl	801b156 <RegionUS915TxParamSetupReq>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	e000      	b.n	8017ab8 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017ab6:	2300      	movs	r3, #0
        }
    }
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3708      	adds	r7, #8
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}

08017ac0 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b082      	sub	sp, #8
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	6039      	str	r1, [r7, #0]
 8017aca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017acc:	79fb      	ldrb	r3, [r7, #7]
 8017ace:	2b05      	cmp	r3, #5
 8017ad0:	d002      	beq.n	8017ad8 <RegionDlChannelReq+0x18>
 8017ad2:	2b08      	cmp	r3, #8
 8017ad4:	d005      	beq.n	8017ae2 <RegionDlChannelReq+0x22>
 8017ad6:	e009      	b.n	8017aec <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017ad8:	6838      	ldr	r0, [r7, #0]
 8017ada:	f002 f85f 	bl	8019b9c <RegionEU868DlChannelReq>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	e005      	b.n	8017aee <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017ae2:	6838      	ldr	r0, [r7, #0]
 8017ae4:	f003 fb42 	bl	801b16c <RegionUS915DlChannelReq>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	e000      	b.n	8017aee <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017aec:	2300      	movs	r3, #0
        }
    }
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3708      	adds	r7, #8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}

08017af6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017af6:	b580      	push	{r7, lr}
 8017af8:	b082      	sub	sp, #8
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	4603      	mov	r3, r0
 8017afe:	71fb      	strb	r3, [r7, #7]
 8017b00:	460b      	mov	r3, r1
 8017b02:	71bb      	strb	r3, [r7, #6]
 8017b04:	4613      	mov	r3, r2
 8017b06:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017b08:	79fb      	ldrb	r3, [r7, #7]
 8017b0a:	2b05      	cmp	r3, #5
 8017b0c:	d002      	beq.n	8017b14 <RegionAlternateDr+0x1e>
 8017b0e:	2b08      	cmp	r3, #8
 8017b10:	d009      	beq.n	8017b26 <RegionAlternateDr+0x30>
 8017b12:	e011      	b.n	8017b38 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017b14:	797a      	ldrb	r2, [r7, #5]
 8017b16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b1a:	4611      	mov	r1, r2
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f002 f881 	bl	8019c24 <RegionEU868AlternateDr>
 8017b22:	4603      	mov	r3, r0
 8017b24:	e009      	b.n	8017b3a <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017b26:	797a      	ldrb	r2, [r7, #5]
 8017b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b2c:	4611      	mov	r1, r2
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f003 fb28 	bl	801b184 <RegionUS915AlternateDr>
 8017b34:	4603      	mov	r3, r0
 8017b36:	e000      	b.n	8017b3a <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017b38:	2300      	movs	r3, #0
        }
    }
}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3708      	adds	r7, #8
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}

08017b42 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017b42:	b580      	push	{r7, lr}
 8017b44:	b084      	sub	sp, #16
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	60b9      	str	r1, [r7, #8]
 8017b4a:	607a      	str	r2, [r7, #4]
 8017b4c:	603b      	str	r3, [r7, #0]
 8017b4e:	4603      	mov	r3, r0
 8017b50:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017b52:	7bfb      	ldrb	r3, [r7, #15]
 8017b54:	2b05      	cmp	r3, #5
 8017b56:	d002      	beq.n	8017b5e <RegionNextChannel+0x1c>
 8017b58:	2b08      	cmp	r3, #8
 8017b5a:	d008      	beq.n	8017b6e <RegionNextChannel+0x2c>
 8017b5c:	e00f      	b.n	8017b7e <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	683a      	ldr	r2, [r7, #0]
 8017b62:	6879      	ldr	r1, [r7, #4]
 8017b64:	68b8      	ldr	r0, [r7, #8]
 8017b66:	f002 f86d 	bl	8019c44 <RegionEU868NextChannel>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	e008      	b.n	8017b80 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017b6e:	69bb      	ldr	r3, [r7, #24]
 8017b70:	683a      	ldr	r2, [r7, #0]
 8017b72:	6879      	ldr	r1, [r7, #4]
 8017b74:	68b8      	ldr	r0, [r7, #8]
 8017b76:	f003 fb41 	bl	801b1fc <RegionUS915NextChannel>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	e000      	b.n	8017b80 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017b7e:	2309      	movs	r3, #9
        }
    }
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3710      	adds	r7, #16
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b082      	sub	sp, #8
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	4603      	mov	r3, r0
 8017b90:	6039      	str	r1, [r7, #0]
 8017b92:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b94:	79fb      	ldrb	r3, [r7, #7]
 8017b96:	2b05      	cmp	r3, #5
 8017b98:	d002      	beq.n	8017ba0 <RegionSetContinuousWave+0x18>
 8017b9a:	2b08      	cmp	r3, #8
 8017b9c:	d004      	beq.n	8017ba8 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017b9e:	e006      	b.n	8017bae <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8017ba0:	6838      	ldr	r0, [r7, #0]
 8017ba2:	f002 f9c9 	bl	8019f38 <RegionEU868SetContinuousWave>
 8017ba6:	e002      	b.n	8017bae <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 8017ba8:	6838      	ldr	r0, [r7, #0]
 8017baa:	f003 fc1b 	bl	801b3e4 <RegionUS915SetContinuousWave>
        }
    }
}
 8017bae:	bf00      	nop
 8017bb0:	3708      	adds	r7, #8
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}

08017bb6 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017bb6:	b590      	push	{r4, r7, lr}
 8017bb8:	b083      	sub	sp, #12
 8017bba:	af00      	add	r7, sp, #0
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	4608      	mov	r0, r1
 8017bc0:	4611      	mov	r1, r2
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	4623      	mov	r3, r4
 8017bc6:	71fb      	strb	r3, [r7, #7]
 8017bc8:	4603      	mov	r3, r0
 8017bca:	71bb      	strb	r3, [r7, #6]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	717b      	strb	r3, [r7, #5]
 8017bd0:	4613      	mov	r3, r2
 8017bd2:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017bd4:	79fb      	ldrb	r3, [r7, #7]
 8017bd6:	2b05      	cmp	r3, #5
 8017bd8:	d002      	beq.n	8017be0 <RegionApplyDrOffset+0x2a>
 8017bda:	2b08      	cmp	r3, #8
 8017bdc:	d00a      	beq.n	8017bf4 <RegionApplyDrOffset+0x3e>
 8017bde:	e013      	b.n	8017c08 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017be0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017be4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017be8:	79bb      	ldrb	r3, [r7, #6]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f002 f9f2 	bl	8019fd4 <RegionEU868ApplyDrOffset>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	e00a      	b.n	8017c0a <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017bf4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017bf8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017bfc:	79bb      	ldrb	r3, [r7, #6]
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f003 fc46 	bl	801b490 <RegionUS915ApplyDrOffset>
 8017c04:	4603      	mov	r3, r0
 8017c06:	e000      	b.n	8017c0a <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017c08:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	370c      	adds	r7, #12
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd90      	pop	{r4, r7, pc}
	...

08017c14 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017c14:	b480      	push	{r7}
 8017c16:	b083      	sub	sp, #12
 8017c18:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017c1a:	4b04      	ldr	r3, [pc, #16]	; (8017c2c <RegionGetVersion+0x18>)
 8017c1c:	607b      	str	r3, [r7, #4]

    return version;
 8017c1e:	687b      	ldr	r3, [r7, #4]
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	370c      	adds	r7, #12
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bc80      	pop	{r7}
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	01000300 	.word	0x01000300

08017c30 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017c30:	b480      	push	{r7}
 8017c32:	b087      	sub	sp, #28
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	4603      	mov	r3, r0
 8017c38:	60b9      	str	r1, [r7, #8]
 8017c3a:	607a      	str	r2, [r7, #4]
 8017c3c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d002      	beq.n	8017c4a <FindAvailable125kHzChannels+0x1a>
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d101      	bne.n	8017c4e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017c4a:	2303      	movs	r3, #3
 8017c4c:	e021      	b.n	8017c92 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2200      	movs	r2, #0
 8017c52:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017c54:	2300      	movs	r3, #0
 8017c56:	75fb      	strb	r3, [r7, #23]
 8017c58:	e017      	b.n	8017c8a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017c5a:	89fa      	ldrh	r2, [r7, #14]
 8017c5c:	7dfb      	ldrb	r3, [r7, #23]
 8017c5e:	fa42 f303 	asr.w	r3, r2, r3
 8017c62:	f003 0301 	and.w	r3, r3, #1
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d00c      	beq.n	8017c84 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	781b      	ldrb	r3, [r3, #0]
 8017c6e:	461a      	mov	r2, r3
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	4413      	add	r3, r2
 8017c74:	7dfa      	ldrb	r2, [r7, #23]
 8017c76:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	b2da      	uxtb	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017c84:	7dfb      	ldrb	r3, [r7, #23]
 8017c86:	3301      	adds	r3, #1
 8017c88:	75fb      	strb	r3, [r7, #23]
 8017c8a:	7dfb      	ldrb	r3, [r7, #23]
 8017c8c:	2b07      	cmp	r3, #7
 8017c8e:	d9e4      	bls.n	8017c5a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017c90:	2300      	movs	r3, #0
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	371c      	adds	r7, #28
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bc80      	pop	{r7}
 8017c9a:	4770      	bx	lr

08017c9c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8017c9c:	b590      	push	{r4, r7, lr}
 8017c9e:	b089      	sub	sp, #36	; 0x24
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8017ca8:	2300      	movs	r3, #0
 8017caa:	617b      	str	r3, [r7, #20]
 8017cac:	2300      	movs	r3, #0
 8017cae:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d005      	beq.n	8017cc6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d002      	beq.n	8017cc6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d101      	bne.n	8017cca <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017cc6:	2303      	movs	r3, #3
 8017cc8:	e055      	b.n	8017d76 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8017cd0:	7f7b      	ldrb	r3, [r7, #29]
 8017cd2:	085b      	lsrs	r3, r3, #1
 8017cd4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8017cd6:	7f7b      	ldrb	r3, [r7, #29]
 8017cd8:	f003 0301 	and.w	r3, r3, #1
 8017cdc:	b2db      	uxtb	r3, r3
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d107      	bne.n	8017cf2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8017ce2:	7f3b      	ldrb	r3, [r7, #28]
 8017ce4:	005b      	lsls	r3, r3, #1
 8017ce6:	68fa      	ldr	r2, [r7, #12]
 8017ce8:	4413      	add	r3, r2
 8017cea:	881b      	ldrh	r3, [r3, #0]
 8017cec:	b2db      	uxtb	r3, r3
 8017cee:	83fb      	strh	r3, [r7, #30]
 8017cf0:	e006      	b.n	8017d00 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8017cf2:	7f3b      	ldrb	r3, [r7, #28]
 8017cf4:	005b      	lsls	r3, r3, #1
 8017cf6:	68fa      	ldr	r2, [r7, #12]
 8017cf8:	4413      	add	r3, r2
 8017cfa:	881b      	ldrh	r3, [r3, #0]
 8017cfc:	0a1b      	lsrs	r3, r3, #8
 8017cfe:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017d00:	f107 0213 	add.w	r2, r7, #19
 8017d04:	f107 0114 	add.w	r1, r7, #20
 8017d08:	8bfb      	ldrh	r3, [r7, #30]
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7ff ff90 	bl	8017c30 <FindAvailable125kHzChannels>
 8017d10:	4603      	mov	r3, r0
 8017d12:	2b03      	cmp	r3, #3
 8017d14:	d101      	bne.n	8017d1a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d16:	2303      	movs	r3, #3
 8017d18:	e02d      	b.n	8017d76 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8017d1a:	7cfb      	ldrb	r3, [r7, #19]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d011      	beq.n	8017d44 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017d20:	7f7b      	ldrb	r3, [r7, #29]
 8017d22:	00db      	lsls	r3, r3, #3
 8017d24:	b2dc      	uxtb	r4, r3
 8017d26:	7cfb      	ldrb	r3, [r7, #19]
 8017d28:	3b01      	subs	r3, #1
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	f003 fc01 	bl	801b534 <randr>
 8017d32:	4603      	mov	r3, r0
 8017d34:	3320      	adds	r3, #32
 8017d36:	443b      	add	r3, r7
 8017d38:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017d3c:	4423      	add	r3, r4
 8017d3e:	b2da      	uxtb	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8017d44:	7f7b      	ldrb	r3, [r7, #29]
 8017d46:	3301      	adds	r3, #1
 8017d48:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8017d4a:	7f7b      	ldrb	r3, [r7, #29]
 8017d4c:	2b07      	cmp	r3, #7
 8017d4e:	d901      	bls.n	8017d54 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017d50:	2300      	movs	r3, #0
 8017d52:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8017d54:	7cfb      	ldrb	r3, [r7, #19]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d104      	bne.n	8017d64 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	781b      	ldrb	r3, [r3, #0]
 8017d5e:	7f7a      	ldrb	r2, [r7, #29]
 8017d60:	429a      	cmp	r2, r3
 8017d62:	d1b5      	bne.n	8017cd0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8017d64:	7cfb      	ldrb	r3, [r7, #19]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d004      	beq.n	8017d74 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	7f7a      	ldrb	r2, [r7, #29]
 8017d6e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017d70:	2300      	movs	r3, #0
 8017d72:	e000      	b.n	8017d76 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d74:	2303      	movs	r3, #3
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3724      	adds	r7, #36	; 0x24
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd90      	pop	{r4, r7, pc}

08017d7e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017d7e:	b480      	push	{r7}
 8017d80:	b085      	sub	sp, #20
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	4603      	mov	r3, r0
 8017d86:	60b9      	str	r1, [r7, #8]
 8017d88:	607a      	str	r2, [r7, #4]
 8017d8a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017d8c:	7bfb      	ldrb	r3, [r7, #15]
 8017d8e:	687a      	ldr	r2, [r7, #4]
 8017d90:	fb03 f202 	mul.w	r2, r3, r2
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	4413      	add	r3, r2
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3714      	adds	r7, #20
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bc80      	pop	{r7}
 8017da0:	4770      	bx	lr

08017da2 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017da2:	b480      	push	{r7}
 8017da4:	b087      	sub	sp, #28
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	60f8      	str	r0, [r7, #12]
 8017daa:	4608      	mov	r0, r1
 8017dac:	4639      	mov	r1, r7
 8017dae:	e881 000c 	stmia.w	r1, {r2, r3}
 8017db2:	4603      	mov	r3, r0
 8017db4:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	881b      	ldrh	r3, [r3, #0]
 8017dba:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017dbc:	7afb      	ldrb	r3, [r7, #11]
 8017dbe:	f083 0301 	eor.w	r3, r3, #1
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d01b      	beq.n	8017e00 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017dc8:	f242 7310 	movw	r3, #10000	; 0x2710
 8017dcc:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017dd4:	d202      	bcs.n	8017ddc <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017dd6:	2364      	movs	r3, #100	; 0x64
 8017dd8:	82bb      	strh	r3, [r7, #20]
 8017dda:	e00b      	b.n	8017df4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017de2:	4293      	cmp	r3, r2
 8017de4:	d803      	bhi.n	8017dee <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017dea:	82bb      	strh	r3, [r7, #20]
 8017dec:	e002      	b.n	8017df4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017dee:	f242 7310 	movw	r3, #10000	; 0x2710
 8017df2:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017df4:	8aba      	ldrh	r2, [r7, #20]
 8017df6:	8afb      	ldrh	r3, [r7, #22]
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	bf38      	it	cc
 8017dfc:	4613      	movcc	r3, r2
 8017dfe:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017e00:	8afb      	ldrh	r3, [r7, #22]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d101      	bne.n	8017e0a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017e06:	2301      	movs	r3, #1
 8017e08:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017e0a:	8afb      	ldrh	r3, [r7, #22]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	371c      	adds	r7, #28
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bc80      	pop	{r7}
 8017e14:	4770      	bx	lr
	...

08017e18 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b08e      	sub	sp, #56	; 0x38
 8017e1c:	af02      	add	r7, sp, #8
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	4608      	mov	r0, r1
 8017e22:	4639      	mov	r1, r7
 8017e24:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e28:	4603      	mov	r3, r0
 8017e2a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	881b      	ldrh	r3, [r3, #0]
 8017e30:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017e32:	4b4b      	ldr	r3, [pc, #300]	; (8017f60 <SetMaxTimeCredits+0x148>)
 8017e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017e36:	463b      	mov	r3, r7
 8017e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017e3c:	f007 fb00 	bl	801f440 <SysTimeToMs>
 8017e40:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017e42:	f107 0314 	add.w	r3, r7, #20
 8017e46:	2200      	movs	r2, #0
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017e4c:	7af9      	ldrb	r1, [r7, #11]
 8017e4e:	463b      	mov	r3, r7
 8017e50:	cb0c      	ldmia	r3, {r2, r3}
 8017e52:	68f8      	ldr	r0, [r7, #12]
 8017e54:	f7ff ffa5 	bl	8017da2 <GetDutyCycle>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017e5c:	7afb      	ldrb	r3, [r7, #11]
 8017e5e:	f083 0301 	eor.w	r3, r3, #1
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d062      	beq.n	8017f2e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e6a:	2b64      	cmp	r3, #100	; 0x64
 8017e6c:	d105      	bne.n	8017e7a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017e6e:	4b3c      	ldr	r3, [pc, #240]	; (8017f60 <SetMaxTimeCredits+0x148>)
 8017e70:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e76:	609a      	str	r2, [r3, #8]
 8017e78:	e00b      	b.n	8017e92 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017e80:	d105      	bne.n	8017e8e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017e82:	4b38      	ldr	r3, [pc, #224]	; (8017f64 <SetMaxTimeCredits+0x14c>)
 8017e84:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e8a:	609a      	str	r2, [r3, #8]
 8017e8c:	e001      	b.n	8017e92 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017e8e:	4b36      	ldr	r3, [pc, #216]	; (8017f68 <SetMaxTimeCredits+0x150>)
 8017e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	689a      	ldr	r2, [r3, #8]
 8017e96:	f107 031c 	add.w	r3, r7, #28
 8017e9a:	4611      	mov	r1, r2
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f007 faf7 	bl	801f490 <SysTimeFromMs>
 8017ea2:	f107 0014 	add.w	r0, r7, #20
 8017ea6:	6a3b      	ldr	r3, [r7, #32]
 8017ea8:	9300      	str	r3, [sp, #0]
 8017eaa:	69fb      	ldr	r3, [r7, #28]
 8017eac:	463a      	mov	r2, r7
 8017eae:	ca06      	ldmia	r2, {r1, r2}
 8017eb0:	f007 fa07 	bl	801f2c2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017eb4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017eb8:	f083 0301 	eor.w	r3, r3, #1
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d006      	beq.n	8017ed0 <SetMaxTimeCredits+0xb8>
 8017ec2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017ec6:	f083 0301 	eor.w	r3, r3, #1
 8017eca:	b2db      	uxtb	r3, r3
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d108      	bne.n	8017ee2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d103      	bne.n	8017ee2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017eda:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017edc:	4a23      	ldr	r2, [pc, #140]	; (8017f6c <SetMaxTimeCredits+0x154>)
 8017ede:	4293      	cmp	r3, r2
 8017ee0:	d92f      	bls.n	8017f42 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ee6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	4a21      	ldr	r2, [pc, #132]	; (8017f70 <SetMaxTimeCredits+0x158>)
 8017eec:	4293      	cmp	r3, r2
 8017eee:	d928      	bls.n	8017f42 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017ef6:	3b30      	subs	r3, #48	; 0x30
 8017ef8:	4a1e      	ldr	r2, [pc, #120]	; (8017f74 <SetMaxTimeCredits+0x15c>)
 8017efa:	fba2 2303 	umull	r2, r3, r2, r3
 8017efe:	0c1b      	lsrs	r3, r3, #16
 8017f00:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	4a1c      	ldr	r2, [pc, #112]	; (8017f78 <SetMaxTimeCredits+0x160>)
 8017f06:	fb02 f303 	mul.w	r3, r2, r3
 8017f0a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017f12:	3330      	adds	r3, #48	; 0x30
 8017f14:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017f16:	2300      	movs	r3, #0
 8017f18:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017f1a:	f107 0314 	add.w	r3, r7, #20
 8017f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f22:	f007 fa8d 	bl	801f440 <SysTimeToMs>
 8017f26:	4602      	mov	r2, r0
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	609a      	str	r2, [r3, #8]
 8017f2c:	e009      	b.n	8017f42 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017f2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f32:	f083 0301 	eor.w	r3, r3, #1
 8017f36:	b2db      	uxtb	r3, r3
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d002      	beq.n	8017f42 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f40:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d102      	bne.n	8017f50 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f4e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f54:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017f56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	3730      	adds	r7, #48	; 0x30
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	001b7740 	.word	0x001b7740
 8017f64:	0112a880 	.word	0x0112a880
 8017f68:	02932e00 	.word	0x02932e00
 8017f6c:	0001517f 	.word	0x0001517f
 8017f70:	0001ec2f 	.word	0x0001ec2f
 8017f74:	c22e4507 	.word	0xc22e4507
 8017f78:	00015180 	.word	0x00015180

08017f7c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b086      	sub	sp, #24
 8017f80:	af02      	add	r7, sp, #8
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	4608      	mov	r0, r1
 8017f86:	4611      	mov	r1, r2
 8017f88:	461a      	mov	r2, r3
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	70fb      	strb	r3, [r7, #3]
 8017f8e:	460b      	mov	r3, r1
 8017f90:	70bb      	strb	r3, [r7, #2]
 8017f92:	4613      	mov	r3, r2
 8017f94:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017f96:	78f9      	ldrb	r1, [r7, #3]
 8017f98:	787b      	ldrb	r3, [r7, #1]
 8017f9a:	9301      	str	r3, [sp, #4]
 8017f9c:	78bb      	ldrb	r3, [r7, #2]
 8017f9e:	9300      	str	r3, [sp, #0]
 8017fa0:	f107 0318 	add.w	r3, r7, #24
 8017fa4:	cb0c      	ldmia	r3, {r2, r3}
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f7ff ff36 	bl	8017e18 <SetMaxTimeCredits>
 8017fac:	4603      	mov	r3, r0
 8017fae:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017fb0:	78fb      	ldrb	r3, [r7, #3]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d00a      	beq.n	8017fcc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f007 fe3c 	bl	801fc38 <UTIL_TIMER_GetElapsedTime>
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	68db      	ldr	r3, [r3, #12]
 8017fc6:	441a      	add	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	68da      	ldr	r2, [r3, #12]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	691b      	ldr	r3, [r3, #16]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d903      	bls.n	8017fe0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	691a      	ldr	r2, [r3, #16]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6a3a      	ldr	r2, [r7, #32]
 8017fe4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3710      	adds	r7, #16
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}

08017ff0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017ff0:	b480      	push	{r7}
 8017ff2:	b085      	sub	sp, #20
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	460a      	mov	r2, r1
 8017ffa:	80fb      	strh	r3, [r7, #6]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8018000:	2300      	movs	r3, #0
 8018002:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8018004:	2300      	movs	r3, #0
 8018006:	73bb      	strb	r3, [r7, #14]
 8018008:	e011      	b.n	801802e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801800a:	88fa      	ldrh	r2, [r7, #6]
 801800c:	7bbb      	ldrb	r3, [r7, #14]
 801800e:	2101      	movs	r1, #1
 8018010:	fa01 f303 	lsl.w	r3, r1, r3
 8018014:	401a      	ands	r2, r3
 8018016:	7bbb      	ldrb	r3, [r7, #14]
 8018018:	2101      	movs	r1, #1
 801801a:	fa01 f303 	lsl.w	r3, r1, r3
 801801e:	429a      	cmp	r2, r3
 8018020:	d102      	bne.n	8018028 <CountChannels+0x38>
        {
            nbActiveBits++;
 8018022:	7bfb      	ldrb	r3, [r7, #15]
 8018024:	3301      	adds	r3, #1
 8018026:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8018028:	7bbb      	ldrb	r3, [r7, #14]
 801802a:	3301      	adds	r3, #1
 801802c:	73bb      	strb	r3, [r7, #14]
 801802e:	7bba      	ldrb	r2, [r7, #14]
 8018030:	797b      	ldrb	r3, [r7, #5]
 8018032:	429a      	cmp	r2, r3
 8018034:	d3e9      	bcc.n	801800a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8018036:	7bfb      	ldrb	r3, [r7, #15]
}
 8018038:	4618      	mov	r0, r3
 801803a:	3714      	adds	r7, #20
 801803c:	46bd      	mov	sp, r7
 801803e:	bc80      	pop	{r7}
 8018040:	4770      	bx	lr

08018042 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8018042:	b580      	push	{r7, lr}
 8018044:	b084      	sub	sp, #16
 8018046:	af00      	add	r7, sp, #0
 8018048:	6039      	str	r1, [r7, #0]
 801804a:	4611      	mov	r1, r2
 801804c:	461a      	mov	r2, r3
 801804e:	4603      	mov	r3, r0
 8018050:	71fb      	strb	r3, [r7, #7]
 8018052:	460b      	mov	r3, r1
 8018054:	71bb      	strb	r3, [r7, #6]
 8018056:	4613      	mov	r3, r2
 8018058:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801805a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801805e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8018062:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018066:	4618      	mov	r0, r3
 8018068:	f000 f85d 	bl	8018126 <RegionCommonValueInRange>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d101      	bne.n	8018076 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8018072:	2300      	movs	r3, #0
 8018074:	e053      	b.n	801811e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018076:	2300      	movs	r3, #0
 8018078:	73fb      	strb	r3, [r7, #15]
 801807a:	2300      	movs	r3, #0
 801807c:	73bb      	strb	r3, [r7, #14]
 801807e:	e049      	b.n	8018114 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018080:	2300      	movs	r3, #0
 8018082:	737b      	strb	r3, [r7, #13]
 8018084:	e03d      	b.n	8018102 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8018086:	7bbb      	ldrb	r3, [r7, #14]
 8018088:	005b      	lsls	r3, r3, #1
 801808a:	683a      	ldr	r2, [r7, #0]
 801808c:	4413      	add	r3, r2
 801808e:	881b      	ldrh	r3, [r3, #0]
 8018090:	461a      	mov	r2, r3
 8018092:	7b7b      	ldrb	r3, [r7, #13]
 8018094:	fa42 f303 	asr.w	r3, r2, r3
 8018098:	f003 0301 	and.w	r3, r3, #1
 801809c:	2b00      	cmp	r3, #0
 801809e:	d02d      	beq.n	80180fc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80180a0:	7bfa      	ldrb	r2, [r7, #15]
 80180a2:	7b7b      	ldrb	r3, [r7, #13]
 80180a4:	4413      	add	r3, r2
 80180a6:	461a      	mov	r2, r3
 80180a8:	4613      	mov	r3, r2
 80180aa:	005b      	lsls	r3, r3, #1
 80180ac:	4413      	add	r3, r2
 80180ae:	009b      	lsls	r3, r3, #2
 80180b0:	461a      	mov	r2, r3
 80180b2:	69fb      	ldr	r3, [r7, #28]
 80180b4:	4413      	add	r3, r2
 80180b6:	7a1b      	ldrb	r3, [r3, #8]
 80180b8:	f343 0303 	sbfx	r3, r3, #0, #4
 80180bc:	b25b      	sxtb	r3, r3
 80180be:	f003 030f 	and.w	r3, r3, #15
 80180c2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80180c4:	7bfa      	ldrb	r2, [r7, #15]
 80180c6:	7b7b      	ldrb	r3, [r7, #13]
 80180c8:	4413      	add	r3, r2
 80180ca:	461a      	mov	r2, r3
 80180cc:	4613      	mov	r3, r2
 80180ce:	005b      	lsls	r3, r3, #1
 80180d0:	4413      	add	r3, r2
 80180d2:	009b      	lsls	r3, r3, #2
 80180d4:	461a      	mov	r2, r3
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	4413      	add	r3, r2
 80180da:	7a1b      	ldrb	r3, [r3, #8]
 80180dc:	f343 1303 	sbfx	r3, r3, #4, #4
 80180e0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80180e2:	f003 030f 	and.w	r3, r3, #15
 80180e6:	b25a      	sxtb	r2, r3
 80180e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80180ec:	4618      	mov	r0, r3
 80180ee:	f000 f81a 	bl	8018126 <RegionCommonValueInRange>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d101      	bne.n	80180fc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80180f8:	2301      	movs	r3, #1
 80180fa:	e010      	b.n	801811e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80180fc:	7b7b      	ldrb	r3, [r7, #13]
 80180fe:	3301      	adds	r3, #1
 8018100:	737b      	strb	r3, [r7, #13]
 8018102:	7b7b      	ldrb	r3, [r7, #13]
 8018104:	2b0f      	cmp	r3, #15
 8018106:	d9be      	bls.n	8018086 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018108:	7bfb      	ldrb	r3, [r7, #15]
 801810a:	3310      	adds	r3, #16
 801810c:	73fb      	strb	r3, [r7, #15]
 801810e:	7bbb      	ldrb	r3, [r7, #14]
 8018110:	3301      	adds	r3, #1
 8018112:	73bb      	strb	r3, [r7, #14]
 8018114:	7bfa      	ldrb	r2, [r7, #15]
 8018116:	79fb      	ldrb	r3, [r7, #7]
 8018118:	429a      	cmp	r2, r3
 801811a:	d3b1      	bcc.n	8018080 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801811c:	2300      	movs	r3, #0
}
 801811e:	4618      	mov	r0, r3
 8018120:	3710      	adds	r7, #16
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}

08018126 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8018126:	b480      	push	{r7}
 8018128:	b083      	sub	sp, #12
 801812a:	af00      	add	r7, sp, #0
 801812c:	4603      	mov	r3, r0
 801812e:	71fb      	strb	r3, [r7, #7]
 8018130:	460b      	mov	r3, r1
 8018132:	71bb      	strb	r3, [r7, #6]
 8018134:	4613      	mov	r3, r2
 8018136:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8018138:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801813c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018140:	429a      	cmp	r2, r3
 8018142:	db07      	blt.n	8018154 <RegionCommonValueInRange+0x2e>
 8018144:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018148:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801814c:	429a      	cmp	r2, r3
 801814e:	dc01      	bgt.n	8018154 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8018150:	2301      	movs	r3, #1
 8018152:	e000      	b.n	8018156 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8018154:	2300      	movs	r3, #0
}
 8018156:	4618      	mov	r0, r3
 8018158:	370c      	adds	r7, #12
 801815a:	46bd      	mov	sp, r7
 801815c:	bc80      	pop	{r7}
 801815e:	4770      	bx	lr

08018160 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8018160:	b480      	push	{r7}
 8018162:	b085      	sub	sp, #20
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
 8018168:	460b      	mov	r3, r1
 801816a:	70fb      	strb	r3, [r7, #3]
 801816c:	4613      	mov	r3, r2
 801816e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8018170:	78fb      	ldrb	r3, [r7, #3]
 8018172:	091b      	lsrs	r3, r3, #4
 8018174:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8018176:	78bb      	ldrb	r3, [r7, #2]
 8018178:	091b      	lsrs	r3, r3, #4
 801817a:	b2db      	uxtb	r3, r3
 801817c:	7bfa      	ldrb	r2, [r7, #15]
 801817e:	429a      	cmp	r2, r3
 8018180:	d803      	bhi.n	801818a <RegionCommonChanDisable+0x2a>
 8018182:	78fa      	ldrb	r2, [r7, #3]
 8018184:	78bb      	ldrb	r3, [r7, #2]
 8018186:	429a      	cmp	r2, r3
 8018188:	d301      	bcc.n	801818e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801818a:	2300      	movs	r3, #0
 801818c:	e017      	b.n	80181be <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801818e:	7bfb      	ldrb	r3, [r7, #15]
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	687a      	ldr	r2, [r7, #4]
 8018194:	4413      	add	r3, r2
 8018196:	881b      	ldrh	r3, [r3, #0]
 8018198:	b21a      	sxth	r2, r3
 801819a:	78fb      	ldrb	r3, [r7, #3]
 801819c:	f003 030f 	and.w	r3, r3, #15
 80181a0:	2101      	movs	r1, #1
 80181a2:	fa01 f303 	lsl.w	r3, r1, r3
 80181a6:	b21b      	sxth	r3, r3
 80181a8:	43db      	mvns	r3, r3
 80181aa:	b21b      	sxth	r3, r3
 80181ac:	4013      	ands	r3, r2
 80181ae:	b219      	sxth	r1, r3
 80181b0:	7bfb      	ldrb	r3, [r7, #15]
 80181b2:	005b      	lsls	r3, r3, #1
 80181b4:	687a      	ldr	r2, [r7, #4]
 80181b6:	4413      	add	r3, r2
 80181b8:	b28a      	uxth	r2, r1
 80181ba:	801a      	strh	r2, [r3, #0]

    return true;
 80181bc:	2301      	movs	r3, #1
}
 80181be:	4618      	mov	r0, r3
 80181c0:	3714      	adds	r7, #20
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bc80      	pop	{r7}
 80181c6:	4770      	bx	lr

080181c8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b084      	sub	sp, #16
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	460b      	mov	r3, r1
 80181d2:	70fb      	strb	r3, [r7, #3]
 80181d4:	4613      	mov	r3, r2
 80181d6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80181d8:	2300      	movs	r3, #0
 80181da:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d101      	bne.n	80181e6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	e018      	b.n	8018218 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80181e6:	78fb      	ldrb	r3, [r7, #3]
 80181e8:	73bb      	strb	r3, [r7, #14]
 80181ea:	e010      	b.n	801820e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80181ec:	7bbb      	ldrb	r3, [r7, #14]
 80181ee:	005b      	lsls	r3, r3, #1
 80181f0:	687a      	ldr	r2, [r7, #4]
 80181f2:	4413      	add	r3, r2
 80181f4:	881b      	ldrh	r3, [r3, #0]
 80181f6:	2110      	movs	r1, #16
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff fef9 	bl	8017ff0 <CountChannels>
 80181fe:	4603      	mov	r3, r0
 8018200:	461a      	mov	r2, r3
 8018202:	7bfb      	ldrb	r3, [r7, #15]
 8018204:	4413      	add	r3, r2
 8018206:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018208:	7bbb      	ldrb	r3, [r7, #14]
 801820a:	3301      	adds	r3, #1
 801820c:	73bb      	strb	r3, [r7, #14]
 801820e:	7bba      	ldrb	r2, [r7, #14]
 8018210:	78bb      	ldrb	r3, [r7, #2]
 8018212:	429a      	cmp	r2, r3
 8018214:	d3ea      	bcc.n	80181ec <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8018216:	7bfb      	ldrb	r3, [r7, #15]
}
 8018218:	4618      	mov	r0, r3
 801821a:	3710      	adds	r7, #16
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}

08018220 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8018220:	b480      	push	{r7}
 8018222:	b087      	sub	sp, #28
 8018224:	af00      	add	r7, sp, #0
 8018226:	60f8      	str	r0, [r7, #12]
 8018228:	60b9      	str	r1, [r7, #8]
 801822a:	4613      	mov	r3, r2
 801822c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d016      	beq.n	8018262 <RegionCommonChanMaskCopy+0x42>
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d013      	beq.n	8018262 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801823a:	2300      	movs	r3, #0
 801823c:	75fb      	strb	r3, [r7, #23]
 801823e:	e00c      	b.n	801825a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	005b      	lsls	r3, r3, #1
 8018244:	68ba      	ldr	r2, [r7, #8]
 8018246:	441a      	add	r2, r3
 8018248:	7dfb      	ldrb	r3, [r7, #23]
 801824a:	005b      	lsls	r3, r3, #1
 801824c:	68f9      	ldr	r1, [r7, #12]
 801824e:	440b      	add	r3, r1
 8018250:	8812      	ldrh	r2, [r2, #0]
 8018252:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8018254:	7dfb      	ldrb	r3, [r7, #23]
 8018256:	3301      	adds	r3, #1
 8018258:	75fb      	strb	r3, [r7, #23]
 801825a:	7dfa      	ldrb	r2, [r7, #23]
 801825c:	79fb      	ldrb	r3, [r7, #7]
 801825e:	429a      	cmp	r2, r3
 8018260:	d3ee      	bcc.n	8018240 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8018262:	bf00      	nop
 8018264:	371c      	adds	r7, #28
 8018266:	46bd      	mov	sp, r7
 8018268:	bc80      	pop	{r7}
 801826a:	4770      	bx	lr

0801826c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801826c:	b082      	sub	sp, #8
 801826e:	b580      	push	{r7, lr}
 8018270:	b086      	sub	sp, #24
 8018272:	af00      	add	r7, sp, #0
 8018274:	60f8      	str	r0, [r7, #12]
 8018276:	60b9      	str	r1, [r7, #8]
 8018278:	627b      	str	r3, [r7, #36]	; 0x24
 801827a:	4613      	mov	r3, r2
 801827c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801827e:	79f9      	ldrb	r1, [r7, #7]
 8018280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018284:	cb0c      	ldmia	r3, {r2, r3}
 8018286:	68f8      	ldr	r0, [r7, #12]
 8018288:	f7ff fd8b 	bl	8017da2 <GetDutyCycle>
 801828c:	4603      	mov	r3, r0
 801828e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	68da      	ldr	r2, [r3, #12]
 8018294:	8afb      	ldrh	r3, [r7, #22]
 8018296:	68b9      	ldr	r1, [r7, #8]
 8018298:	fb01 f303 	mul.w	r3, r1, r3
 801829c:	429a      	cmp	r2, r3
 801829e:	d909      	bls.n	80182b4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	68da      	ldr	r2, [r3, #12]
 80182a4:	8afb      	ldrh	r3, [r7, #22]
 80182a6:	68b9      	ldr	r1, [r7, #8]
 80182a8:	fb01 f303 	mul.w	r3, r1, r3
 80182ac:	1ad2      	subs	r2, r2, r3
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80182b2:	e002      	b.n	80182ba <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	2200      	movs	r2, #0
 80182b8:	60da      	str	r2, [r3, #12]
}
 80182ba:	bf00      	nop
 80182bc:	3718      	adds	r7, #24
 80182be:	46bd      	mov	sp, r7
 80182c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80182c4:	b002      	add	sp, #8
 80182c6:	4770      	bx	lr

080182c8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80182c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ca:	b08f      	sub	sp, #60	; 0x3c
 80182cc:	af04      	add	r7, sp, #16
 80182ce:	6039      	str	r1, [r7, #0]
 80182d0:	4611      	mov	r1, r2
 80182d2:	461a      	mov	r2, r3
 80182d4:	4603      	mov	r3, r0
 80182d6:	71fb      	strb	r3, [r7, #7]
 80182d8:	460b      	mov	r3, r1
 80182da:	71bb      	strb	r3, [r7, #6]
 80182dc:	4613      	mov	r3, r2
 80182de:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80182e0:	f04f 33ff 	mov.w	r3, #4294967295
 80182e4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80182e6:	f007 fc95 	bl	801fc14 <UTIL_TIMER_GetCurrentTime>
 80182ea:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80182ec:	2300      	movs	r3, #0
 80182ee:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80182f0:	2301      	movs	r3, #1
 80182f2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80182f4:	2300      	movs	r3, #0
 80182f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80182fa:	2300      	movs	r3, #0
 80182fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018300:	e0ba      	b.n	8018478 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018302:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018306:	4613      	mov	r3, r2
 8018308:	005b      	lsls	r3, r3, #1
 801830a:	4413      	add	r3, r2
 801830c:	00db      	lsls	r3, r3, #3
 801830e:	461a      	mov	r2, r3
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	189c      	adds	r4, r3, r2
 8018314:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018318:	797a      	ldrb	r2, [r7, #5]
 801831a:	79fd      	ldrb	r5, [r7, #7]
 801831c:	69fb      	ldr	r3, [r7, #28]
 801831e:	9302      	str	r3, [sp, #8]
 8018320:	46ec      	mov	ip, sp
 8018322:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018326:	e893 0003 	ldmia.w	r3, {r0, r1}
 801832a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801832e:	4633      	mov	r3, r6
 8018330:	4629      	mov	r1, r5
 8018332:	4620      	mov	r0, r4
 8018334:	f7ff fe22 	bl	8017f7c <UpdateTimeCredits>
 8018338:	4603      	mov	r3, r0
 801833a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801833c:	8afa      	ldrh	r2, [r7, #22]
 801833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018340:	fb02 f303 	mul.w	r3, r2, r3
 8018344:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8018346:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801834a:	4613      	mov	r3, r2
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	4413      	add	r3, r2
 8018350:	00db      	lsls	r3, r3, #3
 8018352:	461a      	mov	r2, r3
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	4413      	add	r3, r2
 8018358:	68db      	ldr	r3, [r3, #12]
 801835a:	69ba      	ldr	r2, [r7, #24]
 801835c:	429a      	cmp	r2, r3
 801835e:	d308      	bcc.n	8018372 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018360:	797b      	ldrb	r3, [r7, #5]
 8018362:	f083 0301 	eor.w	r3, r3, #1
 8018366:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8018368:	2b00      	cmp	r3, #0
 801836a:	d013      	beq.n	8018394 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801836c:	79fb      	ldrb	r3, [r7, #7]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d010      	beq.n	8018394 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8018372:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018376:	4613      	mov	r3, r2
 8018378:	005b      	lsls	r3, r3, #1
 801837a:	4413      	add	r3, r2
 801837c:	00db      	lsls	r3, r3, #3
 801837e:	461a      	mov	r2, r3
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	4413      	add	r3, r2
 8018384:	2201      	movs	r2, #1
 8018386:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801838c:	3301      	adds	r3, #1
 801838e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018392:	e06c      	b.n	801846e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018394:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018398:	4613      	mov	r3, r2
 801839a:	005b      	lsls	r3, r3, #1
 801839c:	4413      	add	r3, r2
 801839e:	00db      	lsls	r3, r3, #3
 80183a0:	461a      	mov	r2, r3
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	4413      	add	r3, r2
 80183a6:	2200      	movs	r2, #0
 80183a8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80183aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183ae:	4613      	mov	r3, r2
 80183b0:	005b      	lsls	r3, r3, #1
 80183b2:	4413      	add	r3, r2
 80183b4:	00db      	lsls	r3, r3, #3
 80183b6:	461a      	mov	r2, r3
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	4413      	add	r3, r2
 80183bc:	691b      	ldr	r3, [r3, #16]
 80183be:	69ba      	ldr	r2, [r7, #24]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d215      	bcs.n	80183f0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80183c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183c8:	4613      	mov	r3, r2
 80183ca:	005b      	lsls	r3, r3, #1
 80183cc:	4413      	add	r3, r2
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	461a      	mov	r2, r3
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	4413      	add	r3, r2
 80183d6:	68db      	ldr	r3, [r3, #12]
 80183d8:	69ba      	ldr	r2, [r7, #24]
 80183da:	1ad3      	subs	r3, r2, r3
 80183dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183de:	4293      	cmp	r3, r2
 80183e0:	bf28      	it	cs
 80183e2:	4613      	movcs	r3, r2
 80183e4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80183e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80183ea:	3301      	adds	r3, #1
 80183ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80183f0:	79fb      	ldrb	r3, [r7, #7]
 80183f2:	f083 0301 	eor.w	r3, r3, #1
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d038      	beq.n	801846e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80183fc:	2300      	movs	r3, #0
 80183fe:	60fb      	str	r3, [r7, #12]
 8018400:	2300      	movs	r3, #0
 8018402:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018404:	8afb      	ldrh	r3, [r7, #22]
 8018406:	2b64      	cmp	r3, #100	; 0x64
 8018408:	d103      	bne.n	8018412 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801840a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801840e:	60fb      	str	r3, [r7, #12]
 8018410:	e009      	b.n	8018426 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018412:	8afb      	ldrh	r3, [r7, #22]
 8018414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018418:	d103      	bne.n	8018422 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801841a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801841e:	60fb      	str	r3, [r7, #12]
 8018420:	e001      	b.n	8018426 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018422:	4b1e      	ldr	r3, [pc, #120]	; (801849c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018424:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018428:	4a1c      	ldr	r2, [pc, #112]	; (801849c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801842a:	4293      	cmp	r3, r2
 801842c:	d90e      	bls.n	801844c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801842e:	68fa      	ldr	r2, [r7, #12]
 8018430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018432:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018436:	3b30      	subs	r3, #48	; 0x30
 8018438:	4919      	ldr	r1, [pc, #100]	; (80184a0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801843a:	fba1 1303 	umull	r1, r3, r1, r3
 801843e:	0c1b      	lsrs	r3, r3, #16
 8018440:	3301      	adds	r3, #1
 8018442:	4918      	ldr	r1, [pc, #96]	; (80184a4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018444:	fb01 f303 	mul.w	r3, r1, r3
 8018448:	4413      	add	r3, r2
 801844a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801844c:	f107 000c 	add.w	r0, r7, #12
 8018450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018452:	9300      	str	r3, [sp, #0]
 8018454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018456:	f107 020c 	add.w	r2, r7, #12
 801845a:	ca06      	ldmia	r2, {r1, r2}
 801845c:	f006 ff31 	bl	801f2c2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8018460:	f107 030c 	add.w	r3, r7, #12
 8018464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018468:	f006 ffea 	bl	801f440 <SysTimeToMs>
 801846c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801846e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018472:	3301      	adds	r3, #1
 8018474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018478:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801847c:	79bb      	ldrb	r3, [r7, #6]
 801847e:	429a      	cmp	r2, r3
 8018480:	f4ff af3f 	bcc.w	8018302 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8018484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018488:	2b00      	cmp	r3, #0
 801848a:	d102      	bne.n	8018492 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801848c:	f04f 33ff 	mov.w	r3, #4294967295
 8018490:	e000      	b.n	8018494 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8018492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018494:	4618      	mov	r0, r3
 8018496:	372c      	adds	r7, #44	; 0x2c
 8018498:	46bd      	mov	sp, r7
 801849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801849c:	0001ec30 	.word	0x0001ec30
 80184a0:	c22e4507 	.word	0xc22e4507
 80184a4:	00015180 	.word	0x00015180

080184a8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80184a8:	b480      	push	{r7}
 80184aa:	b085      	sub	sp, #20
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
 80184b0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80184b2:	2300      	movs	r3, #0
 80184b4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	781b      	ldrb	r3, [r3, #0]
 80184ba:	2b03      	cmp	r3, #3
 80184bc:	d13f      	bne.n	801853e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	3301      	adds	r3, #1
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	b25a      	sxtb	r2, r3
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80184ca:	683b      	ldr	r3, [r7, #0]
 80184cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184d0:	f003 030f 	and.w	r3, r3, #15
 80184d4:	b25a      	sxtb	r2, r3
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184e0:	b2db      	uxtb	r3, r3
 80184e2:	091b      	lsrs	r3, r3, #4
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	b25a      	sxtb	r2, r3
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	3302      	adds	r3, #2
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	b29a      	uxth	r2, r3
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	889b      	ldrh	r3, [r3, #4]
 80184fc:	b21a      	sxth	r2, r3
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	3303      	adds	r3, #3
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	021b      	lsls	r3, r3, #8
 8018506:	b21b      	sxth	r3, r3
 8018508:	4313      	orrs	r3, r2
 801850a:	b21b      	sxth	r3, r3
 801850c:	b29a      	uxth	r2, r3
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	791a      	ldrb	r2, [r3, #4]
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	091b      	lsrs	r3, r3, #4
 8018520:	b2db      	uxtb	r3, r3
 8018522:	f003 0307 	and.w	r3, r3, #7
 8018526:	b2da      	uxtb	r2, r3
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	781b      	ldrb	r3, [r3, #0]
 8018530:	f003 030f 	and.w	r3, r3, #15
 8018534:	b2da      	uxtb	r2, r3
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801853a:	2305      	movs	r3, #5
 801853c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018540:	4618      	mov	r0, r3
 8018542:	3714      	adds	r7, #20
 8018544:	46bd      	mov	sp, r7
 8018546:	bc80      	pop	{r7}
 8018548:	4770      	bx	lr

0801854a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801854a:	b5b0      	push	{r4, r5, r7, lr}
 801854c:	b088      	sub	sp, #32
 801854e:	af02      	add	r7, sp, #8
 8018550:	60f8      	str	r0, [r7, #12]
 8018552:	60b9      	str	r1, [r7, #8]
 8018554:	607a      	str	r2, [r7, #4]
 8018556:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	791b      	ldrb	r3, [r3, #4]
 801855c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	799b      	ldrb	r3, [r3, #6]
 8018562:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	79db      	ldrb	r3, [r3, #7]
 8018568:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	7a1b      	ldrb	r3, [r3, #8]
 801856e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	795b      	ldrb	r3, [r3, #5]
 8018574:	f083 0301 	eor.w	r3, r3, #1
 8018578:	b2db      	uxtb	r3, r3
 801857a:	2b00      	cmp	r3, #0
 801857c:	d008      	beq.n	8018590 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	7adb      	ldrb	r3, [r3, #11]
 8018582:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	7a5b      	ldrb	r3, [r3, #9]
 8018588:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	7a9b      	ldrb	r3, [r3, #10]
 801858e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018590:	7dfb      	ldrb	r3, [r7, #23]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d03a      	beq.n	801860c <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	7b18      	ldrb	r0, [r3, #12]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	6919      	ldr	r1, [r3, #16]
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80185aa:	68fa      	ldr	r2, [r7, #12]
 80185ac:	6992      	ldr	r2, [r2, #24]
 80185ae:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80185b2:	9201      	str	r2, [sp, #4]
 80185b4:	9300      	str	r3, [sp, #0]
 80185b6:	462b      	mov	r3, r5
 80185b8:	4622      	mov	r2, r4
 80185ba:	f7ff fd42 	bl	8018042 <RegionCommonChanVerifyDr>
 80185be:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80185c0:	f083 0301 	eor.w	r3, r3, #1
 80185c4:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d003      	beq.n	80185d2 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 80185ca:	7dfb      	ldrb	r3, [r7, #23]
 80185cc:	f023 0302 	bic.w	r3, r3, #2
 80185d0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80185de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7ff fd9f 	bl	8018126 <RegionCommonValueInRange>
 80185e8:	4603      	mov	r3, r0
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d10e      	bne.n	801860c <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80185f4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	da03      	bge.n	8018604 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	7f5b      	ldrb	r3, [r3, #29]
 8018600:	757b      	strb	r3, [r7, #21]
 8018602:	e003      	b.n	801860c <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018604:	7dfb      	ldrb	r3, [r7, #23]
 8018606:	f023 0304 	bic.w	r3, r3, #4
 801860a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801860c:	7dfb      	ldrb	r3, [r7, #23]
 801860e:	2b07      	cmp	r3, #7
 8018610:	d105      	bne.n	801861e <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8018612:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d101      	bne.n	801861e <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801861a:	2301      	movs	r3, #1
 801861c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801861e:	68bb      	ldr	r3, [r7, #8]
 8018620:	7dba      	ldrb	r2, [r7, #22]
 8018622:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	7d7a      	ldrb	r2, [r7, #21]
 8018628:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801862a:	7d3a      	ldrb	r2, [r7, #20]
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	701a      	strb	r2, [r3, #0]

    return status;
 8018630:	7dfb      	ldrb	r3, [r7, #23]
}
 8018632:	4618      	mov	r0, r3
 8018634:	3718      	adds	r7, #24
 8018636:	46bd      	mov	sp, r7
 8018638:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801863c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801863c:	b480      	push	{r7}
 801863e:	b083      	sub	sp, #12
 8018640:	af00      	add	r7, sp, #0
 8018642:	4603      	mov	r3, r0
 8018644:	6039      	str	r1, [r7, #0]
 8018646:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018648:	79fb      	ldrb	r3, [r7, #7]
 801864a:	4a06      	ldr	r2, [pc, #24]	; (8018664 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801864c:	fa02 f303 	lsl.w	r3, r2, r3
 8018650:	461a      	mov	r2, r3
 8018652:	683b      	ldr	r3, [r7, #0]
 8018654:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018658:	4618      	mov	r0, r3
 801865a:	370c      	adds	r7, #12
 801865c:	46bd      	mov	sp, r7
 801865e:	bc80      	pop	{r7}
 8018660:	4770      	bx	lr
 8018662:	bf00      	nop
 8018664:	000f4240 	.word	0x000f4240

08018668 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	4603      	mov	r3, r0
 8018670:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8018672:	79fb      	ldrb	r3, [r7, #7]
 8018674:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018678:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801867c:	4618      	mov	r0, r3
 801867e:	370c      	adds	r7, #12
 8018680:	46bd      	mov	sp, r7
 8018682:	bc80      	pop	{r7}
 8018684:	4770      	bx	lr
	...

08018688 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018688:	b480      	push	{r7}
 801868a:	b085      	sub	sp, #20
 801868c:	af00      	add	r7, sp, #0
 801868e:	60f8      	str	r0, [r7, #12]
 8018690:	607a      	str	r2, [r7, #4]
 8018692:	603b      	str	r3, [r7, #0]
 8018694:	460b      	mov	r3, r1
 8018696:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018698:	7afa      	ldrb	r2, [r7, #11]
 801869a:	7afb      	ldrb	r3, [r7, #11]
 801869c:	3b04      	subs	r3, #4
 801869e:	4619      	mov	r1, r3
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	fb03 f101 	mul.w	r1, r3, r1
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80186ac:	fb00 f303 	mul.w	r3, r0, r3
 80186b0:	440b      	add	r3, r1
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d013      	beq.n	80186e0 <RegionCommonComputeRxWindowParameters+0x58>
 80186b8:	7afb      	ldrb	r3, [r7, #11]
 80186ba:	3b04      	subs	r3, #4
 80186bc:	4619      	mov	r1, r3
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	fb03 f101 	mul.w	r1, r3, r1
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80186ca:	fb00 f303 	mul.w	r3, r0, r3
 80186ce:	440b      	add	r3, r1
 80186d0:	0059      	lsls	r1, r3, #1
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	440b      	add	r3, r1
 80186d6:	1e59      	subs	r1, r3, #1
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	fbb1 f3f3 	udiv	r3, r1, r3
 80186de:	e00f      	b.n	8018700 <RegionCommonComputeRxWindowParameters+0x78>
 80186e0:	7afb      	ldrb	r3, [r7, #11]
 80186e2:	3b04      	subs	r3, #4
 80186e4:	4619      	mov	r1, r3
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	fb03 f101 	mul.w	r1, r3, r1
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80186f2:	fb00 f303 	mul.w	r3, r0, r3
 80186f6:	440b      	add	r3, r1
 80186f8:	0059      	lsls	r1, r3, #1
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8018700:	429a      	cmp	r2, r3
 8018702:	bf38      	it	cc
 8018704:	461a      	movcc	r2, r3
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	4619      	mov	r1, r3
 8018710:	69bb      	ldr	r3, [r7, #24]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	68fa      	ldr	r2, [r7, #12]
 8018716:	fb02 f303 	mul.w	r3, r2, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	d007      	beq.n	801872e <RegionCommonComputeRxWindowParameters+0xa6>
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	68fa      	ldr	r2, [r7, #12]
 8018724:	fb02 f303 	mul.w	r3, r2, r3
 8018728:	3301      	adds	r3, #1
 801872a:	085b      	lsrs	r3, r3, #1
 801872c:	e005      	b.n	801873a <RegionCommonComputeRxWindowParameters+0xb2>
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	68fa      	ldr	r2, [r7, #12]
 8018734:	fb02 f303 	mul.w	r3, r2, r3
 8018738:	085b      	lsrs	r3, r3, #1
 801873a:	1acb      	subs	r3, r1, r3
 801873c:	683a      	ldr	r2, [r7, #0]
 801873e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018742:	fb01 f202 	mul.w	r2, r1, r2
 8018746:	1a9b      	subs	r3, r3, r2
 8018748:	2b00      	cmp	r3, #0
 801874a:	dd27      	ble.n	801879c <RegionCommonComputeRxWindowParameters+0x114>
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	4619      	mov	r1, r3
 8018752:	69bb      	ldr	r3, [r7, #24]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	68fa      	ldr	r2, [r7, #12]
 8018758:	fb02 f303 	mul.w	r3, r2, r3
 801875c:	2b00      	cmp	r3, #0
 801875e:	d007      	beq.n	8018770 <RegionCommonComputeRxWindowParameters+0xe8>
 8018760:	69bb      	ldr	r3, [r7, #24]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	68fa      	ldr	r2, [r7, #12]
 8018766:	fb02 f303 	mul.w	r3, r2, r3
 801876a:	3301      	adds	r3, #1
 801876c:	085b      	lsrs	r3, r3, #1
 801876e:	e005      	b.n	801877c <RegionCommonComputeRxWindowParameters+0xf4>
 8018770:	69bb      	ldr	r3, [r7, #24]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	68fa      	ldr	r2, [r7, #12]
 8018776:	fb02 f303 	mul.w	r3, r2, r3
 801877a:	085b      	lsrs	r3, r3, #1
 801877c:	1acb      	subs	r3, r1, r3
 801877e:	683a      	ldr	r2, [r7, #0]
 8018780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018784:	fb01 f202 	mul.w	r2, r1, r2
 8018788:	1a9b      	subs	r3, r3, r2
 801878a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801878e:	4a19      	ldr	r2, [pc, #100]	; (80187f4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018790:	fb82 1203 	smull	r1, r2, r2, r3
 8018794:	1192      	asrs	r2, r2, #6
 8018796:	17db      	asrs	r3, r3, #31
 8018798:	1ad3      	subs	r3, r2, r3
 801879a:	e024      	b.n	80187e6 <RegionCommonComputeRxWindowParameters+0x15e>
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	009b      	lsls	r3, r3, #2
 80187a0:	4619      	mov	r1, r3
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	68fa      	ldr	r2, [r7, #12]
 80187a8:	fb02 f303 	mul.w	r3, r2, r3
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d007      	beq.n	80187c0 <RegionCommonComputeRxWindowParameters+0x138>
 80187b0:	69bb      	ldr	r3, [r7, #24]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	68fa      	ldr	r2, [r7, #12]
 80187b6:	fb02 f303 	mul.w	r3, r2, r3
 80187ba:	3301      	adds	r3, #1
 80187bc:	085b      	lsrs	r3, r3, #1
 80187be:	e005      	b.n	80187cc <RegionCommonComputeRxWindowParameters+0x144>
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	68fa      	ldr	r2, [r7, #12]
 80187c6:	fb02 f303 	mul.w	r3, r2, r3
 80187ca:	085b      	lsrs	r3, r3, #1
 80187cc:	1acb      	subs	r3, r1, r3
 80187ce:	683a      	ldr	r2, [r7, #0]
 80187d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80187d4:	fb01 f202 	mul.w	r2, r1, r2
 80187d8:	1a9b      	subs	r3, r3, r2
 80187da:	4a06      	ldr	r2, [pc, #24]	; (80187f4 <RegionCommonComputeRxWindowParameters+0x16c>)
 80187dc:	fb82 1203 	smull	r1, r2, r2, r3
 80187e0:	1192      	asrs	r2, r2, #6
 80187e2:	17db      	asrs	r3, r3, #31
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	69fa      	ldr	r2, [r7, #28]
 80187e8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80187ea:	bf00      	nop
 80187ec:	3714      	adds	r7, #20
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bc80      	pop	{r7}
 80187f2:	4770      	bx	lr
 80187f4:	10624dd3 	.word	0x10624dd3

080187f8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b086      	sub	sp, #24
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	4603      	mov	r3, r0
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	607a      	str	r2, [r7, #4]
 8018804:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018806:	2300      	movs	r3, #0
 8018808:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801880a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801880e:	005b      	lsls	r3, r3, #1
 8018810:	4618      	mov	r0, r3
 8018812:	f7e7 ffdf 	bl	80007d4 <__aeabi_ui2f>
 8018816:	4603      	mov	r3, r0
 8018818:	4619      	mov	r1, r3
 801881a:	68b8      	ldr	r0, [r7, #8]
 801881c:	f7e7 ff28 	bl	8000670 <__aeabi_fsub>
 8018820:	4603      	mov	r3, r0
 8018822:	6879      	ldr	r1, [r7, #4]
 8018824:	4618      	mov	r0, r3
 8018826:	f7e7 ff23 	bl	8000670 <__aeabi_fsub>
 801882a:	4603      	mov	r3, r0
 801882c:	4618      	mov	r0, r3
 801882e:	f7e7 fe13 	bl	8000458 <__aeabi_f2d>
 8018832:	4602      	mov	r2, r0
 8018834:	460b      	mov	r3, r1
 8018836:	4610      	mov	r0, r2
 8018838:	4619      	mov	r1, r3
 801883a:	f008 f939 	bl	8020ab0 <floor>
 801883e:	4602      	mov	r2, r0
 8018840:	460b      	mov	r3, r1
 8018842:	4610      	mov	r0, r2
 8018844:	4619      	mov	r1, r3
 8018846:	f7e7 fee7 	bl	8000618 <__aeabi_d2iz>
 801884a:	4603      	mov	r3, r0
 801884c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801884e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018852:	4618      	mov	r0, r3
 8018854:	3718      	adds	r7, #24
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}

0801885a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801885a:	b590      	push	{r4, r7, lr}
 801885c:	b087      	sub	sp, #28
 801885e:	af00      	add	r7, sp, #0
 8018860:	60f8      	str	r0, [r7, #12]
 8018862:	60b9      	str	r1, [r7, #8]
 8018864:	607a      	str	r2, [r7, #4]
 8018866:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018868:	2300      	movs	r3, #0
 801886a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801886c:	2300      	movs	r3, #0
 801886e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018870:	2300      	movs	r3, #0
 8018872:	757b      	strb	r3, [r7, #21]
 8018874:	2300      	movs	r3, #0
 8018876:	753b      	strb	r3, [r7, #20]
 8018878:	e09c      	b.n	80189b4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801887a:	2300      	movs	r3, #0
 801887c:	74fb      	strb	r3, [r7, #19]
 801887e:	e08f      	b.n	80189a0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	685a      	ldr	r2, [r3, #4]
 8018884:	7d3b      	ldrb	r3, [r7, #20]
 8018886:	005b      	lsls	r3, r3, #1
 8018888:	4413      	add	r3, r2
 801888a:	881b      	ldrh	r3, [r3, #0]
 801888c:	461a      	mov	r2, r3
 801888e:	7cfb      	ldrb	r3, [r7, #19]
 8018890:	fa42 f303 	asr.w	r3, r2, r3
 8018894:	f003 0301 	and.w	r3, r3, #1
 8018898:	2b00      	cmp	r3, #0
 801889a:	d07e      	beq.n	801899a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	689a      	ldr	r2, [r3, #8]
 80188a0:	7d79      	ldrb	r1, [r7, #21]
 80188a2:	7cfb      	ldrb	r3, [r7, #19]
 80188a4:	440b      	add	r3, r1
 80188a6:	4619      	mov	r1, r3
 80188a8:	460b      	mov	r3, r1
 80188aa:	005b      	lsls	r3, r3, #1
 80188ac:	440b      	add	r3, r1
 80188ae:	009b      	lsls	r3, r3, #2
 80188b0:	4413      	add	r3, r2
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d06b      	beq.n	8018990 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	781b      	ldrb	r3, [r3, #0]
 80188bc:	f083 0301 	eor.w	r3, r3, #1
 80188c0:	b2db      	uxtb	r3, r3
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d011      	beq.n	80188ea <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d00d      	beq.n	80188ea <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	695a      	ldr	r2, [r3, #20]
 80188d2:	7d3b      	ldrb	r3, [r7, #20]
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	881b      	ldrh	r3, [r3, #0]
 80188da:	461a      	mov	r2, r3
 80188dc:	7cfb      	ldrb	r3, [r7, #19]
 80188de:	fa42 f303 	asr.w	r3, r2, r3
 80188e2:	f003 0301 	and.w	r3, r3, #1
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d054      	beq.n	8018994 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	785b      	ldrb	r3, [r3, #1]
 80188ee:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	689a      	ldr	r2, [r3, #8]
 80188f4:	7d79      	ldrb	r1, [r7, #21]
 80188f6:	7cfb      	ldrb	r3, [r7, #19]
 80188f8:	440b      	add	r3, r1
 80188fa:	4619      	mov	r1, r3
 80188fc:	460b      	mov	r3, r1
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	440b      	add	r3, r1
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	4413      	add	r3, r2
 8018906:	7a1b      	ldrb	r3, [r3, #8]
 8018908:	f343 0303 	sbfx	r3, r3, #0, #4
 801890c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801890e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	689a      	ldr	r2, [r3, #8]
 8018914:	7d79      	ldrb	r1, [r7, #21]
 8018916:	7cfb      	ldrb	r3, [r7, #19]
 8018918:	440b      	add	r3, r1
 801891a:	4619      	mov	r1, r3
 801891c:	460b      	mov	r3, r1
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	440b      	add	r3, r1
 8018922:	009b      	lsls	r3, r3, #2
 8018924:	4413      	add	r3, r2
 8018926:	7a1b      	ldrb	r3, [r3, #8]
 8018928:	f343 1303 	sbfx	r3, r3, #4, #4
 801892c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801892e:	461a      	mov	r2, r3
 8018930:	4621      	mov	r1, r4
 8018932:	f7ff fbf8 	bl	8018126 <RegionCommonValueInRange>
 8018936:	4603      	mov	r3, r0
 8018938:	2b00      	cmp	r3, #0
 801893a:	d02d      	beq.n	8018998 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	68da      	ldr	r2, [r3, #12]
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	6899      	ldr	r1, [r3, #8]
 8018944:	7d78      	ldrb	r0, [r7, #21]
 8018946:	7cfb      	ldrb	r3, [r7, #19]
 8018948:	4403      	add	r3, r0
 801894a:	4618      	mov	r0, r3
 801894c:	4603      	mov	r3, r0
 801894e:	005b      	lsls	r3, r3, #1
 8018950:	4403      	add	r3, r0
 8018952:	009b      	lsls	r3, r3, #2
 8018954:	440b      	add	r3, r1
 8018956:	7a5b      	ldrb	r3, [r3, #9]
 8018958:	4619      	mov	r1, r3
 801895a:	460b      	mov	r3, r1
 801895c:	005b      	lsls	r3, r3, #1
 801895e:	440b      	add	r3, r1
 8018960:	00db      	lsls	r3, r3, #3
 8018962:	4413      	add	r3, r2
 8018964:	7d1b      	ldrb	r3, [r3, #20]
 8018966:	f083 0301 	eor.w	r3, r3, #1
 801896a:	b2db      	uxtb	r3, r3
 801896c:	2b00      	cmp	r3, #0
 801896e:	d003      	beq.n	8018978 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018970:	7dbb      	ldrb	r3, [r7, #22]
 8018972:	3301      	adds	r3, #1
 8018974:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018976:	e010      	b.n	801899a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018978:	7dfb      	ldrb	r3, [r7, #23]
 801897a:	1c5a      	adds	r2, r3, #1
 801897c:	75fa      	strb	r2, [r7, #23]
 801897e:	461a      	mov	r2, r3
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	4413      	add	r3, r2
 8018984:	7d79      	ldrb	r1, [r7, #21]
 8018986:	7cfa      	ldrb	r2, [r7, #19]
 8018988:	440a      	add	r2, r1
 801898a:	b2d2      	uxtb	r2, r2
 801898c:	701a      	strb	r2, [r3, #0]
 801898e:	e004      	b.n	801899a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018990:	bf00      	nop
 8018992:	e002      	b.n	801899a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018994:	bf00      	nop
 8018996:	e000      	b.n	801899a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018998:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801899a:	7cfb      	ldrb	r3, [r7, #19]
 801899c:	3301      	adds	r3, #1
 801899e:	74fb      	strb	r3, [r7, #19]
 80189a0:	7cfb      	ldrb	r3, [r7, #19]
 80189a2:	2b0f      	cmp	r3, #15
 80189a4:	f67f af6c 	bls.w	8018880 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80189a8:	7d7b      	ldrb	r3, [r7, #21]
 80189aa:	3310      	adds	r3, #16
 80189ac:	757b      	strb	r3, [r7, #21]
 80189ae:	7d3b      	ldrb	r3, [r7, #20]
 80189b0:	3301      	adds	r3, #1
 80189b2:	753b      	strb	r3, [r7, #20]
 80189b4:	7d7b      	ldrb	r3, [r7, #21]
 80189b6:	b29a      	uxth	r2, r3
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	8a1b      	ldrh	r3, [r3, #16]
 80189bc:	429a      	cmp	r2, r3
 80189be:	f4ff af5c 	bcc.w	801887a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	7dfa      	ldrb	r2, [r7, #23]
 80189c6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80189c8:	683b      	ldr	r3, [r7, #0]
 80189ca:	7dba      	ldrb	r2, [r7, #22]
 80189cc:	701a      	strb	r2, [r3, #0]
}
 80189ce:	bf00      	nop
 80189d0:	371c      	adds	r7, #28
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd90      	pop	{r4, r7, pc}

080189d6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80189d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189d8:	b08b      	sub	sp, #44	; 0x2c
 80189da:	af04      	add	r7, sp, #16
 80189dc:	60f8      	str	r0, [r7, #12]
 80189de:	60b9      	str	r1, [r7, #8]
 80189e0:	607a      	str	r2, [r7, #4]
 80189e2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	4618      	mov	r0, r3
 80189ea:	f007 f925 	bl	801fc38 <UTIL_TIMER_GetElapsedTime>
 80189ee:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	697b      	ldr	r3, [r7, #20]
 80189f6:	1ad2      	subs	r2, r2, r3
 80189f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189fa:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80189fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189fe:	2201      	movs	r2, #1
 8018a00:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	2200      	movs	r2, #0
 8018a06:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d004      	beq.n	8018a1a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a14:	697a      	ldr	r2, [r7, #20]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d32b      	bcc.n	8018a72 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	69db      	ldr	r3, [r3, #28]
 8018a24:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a2a:	68dd      	ldr	r5, [r3, #12]
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	7a5e      	ldrb	r6, [r3, #9]
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	7d1b      	ldrb	r3, [r3, #20]
 8018a3a:	68fa      	ldr	r2, [r7, #12]
 8018a3c:	6992      	ldr	r2, [r2, #24]
 8018a3e:	9203      	str	r2, [sp, #12]
 8018a40:	68fa      	ldr	r2, [r7, #12]
 8018a42:	f10d 0e04 	add.w	lr, sp, #4
 8018a46:	320c      	adds	r2, #12
 8018a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a4c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018a50:	9300      	str	r3, [sp, #0]
 8018a52:	4663      	mov	r3, ip
 8018a54:	4632      	mov	r2, r6
 8018a56:	4629      	mov	r1, r5
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f7ff fc35 	bl	80182c8 <RegionCommonUpdateBandTimeOff>
 8018a5e:	4602      	mov	r2, r0
 8018a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a62:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	69d8      	ldr	r0, [r3, #28]
 8018a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6a:	683a      	ldr	r2, [r7, #0]
 8018a6c:	6879      	ldr	r1, [r7, #4]
 8018a6e:	f7ff fef4 	bl	801885a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d004      	beq.n	8018a84 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018a80:	2300      	movs	r3, #0
 8018a82:	e006      	b.n	8018a92 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d001      	beq.n	8018a90 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018a8c:	230b      	movs	r3, #11
 8018a8e:	e000      	b.n	8018a92 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018a90:	230c      	movs	r3, #12
    }
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	371c      	adds	r7, #28
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018a9a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018a9a:	b5b0      	push	{r4, r5, r7, lr}
 8018a9c:	b086      	sub	sp, #24
 8018a9e:	af02      	add	r7, sp, #8
 8018aa0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	f993 2000 	ldrsb.w	r2, [r3]
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018ab4:	429a      	cmp	r2, r3
 8018ab6:	d103      	bne.n	8018ac0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018abe:	e026      	b.n	8018b0e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018ac0:	7bfb      	ldrb	r3, [r7, #15]
 8018ac2:	3b01      	subs	r3, #1
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018ace:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d019      	beq.n	8018b0a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	78d8      	ldrb	r0, [r3, #3]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6859      	ldr	r1, [r3, #4]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	6892      	ldr	r2, [r2, #8]
 8018aee:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018af2:	9201      	str	r2, [sp, #4]
 8018af4:	9300      	str	r3, [sp, #0]
 8018af6:	462b      	mov	r3, r5
 8018af8:	4622      	mov	r2, r4
 8018afa:	f7ff faa2 	bl	8018042 <RegionCommonChanVerifyDr>
 8018afe:	4603      	mov	r3, r0
 8018b00:	f083 0301 	eor.w	r3, r3, #1
 8018b04:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d1da      	bne.n	8018ac0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3710      	adds	r7, #16
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bdb0      	pop	{r4, r5, r7, pc}

08018b16 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018b16:	b480      	push	{r7}
 8018b18:	b083      	sub	sp, #12
 8018b1a:	af00      	add	r7, sp, #0
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	460a      	mov	r2, r1
 8018b20:	71fb      	strb	r3, [r7, #7]
 8018b22:	4613      	mov	r3, r2
 8018b24:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018b26:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b2e:	4293      	cmp	r3, r2
 8018b30:	bfb8      	it	lt
 8018b32:	4613      	movlt	r3, r2
 8018b34:	b25b      	sxtb	r3, r3
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	370c      	adds	r7, #12
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bc80      	pop	{r7}
 8018b3e:	4770      	bx	lr

08018b40 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018b40:	b480      	push	{r7}
 8018b42:	b083      	sub	sp, #12
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	009b      	lsls	r3, r3, #2
 8018b4e:	683a      	ldr	r2, [r7, #0]
 8018b50:	4413      	add	r3, r2
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	4a07      	ldr	r2, [pc, #28]	; (8018b74 <RegionCommonGetBandwidth+0x34>)
 8018b56:	4293      	cmp	r3, r2
 8018b58:	d004      	beq.n	8018b64 <RegionCommonGetBandwidth+0x24>
 8018b5a:	4a07      	ldr	r2, [pc, #28]	; (8018b78 <RegionCommonGetBandwidth+0x38>)
 8018b5c:	4293      	cmp	r3, r2
 8018b5e:	d003      	beq.n	8018b68 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018b60:	2300      	movs	r3, #0
 8018b62:	e002      	b.n	8018b6a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018b64:	2301      	movs	r3, #1
 8018b66:	e000      	b.n	8018b6a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018b68:	2302      	movs	r3, #2
    }
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	370c      	adds	r7, #12
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bc80      	pop	{r7}
 8018b72:	4770      	bx	lr
 8018b74:	0003d090 	.word	0x0003d090
 8018b78:	0007a120 	.word	0x0007a120

08018b7c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018b7c:	b5b0      	push	{r4, r5, r7, lr}
 8018b7e:	b08c      	sub	sp, #48	; 0x30
 8018b80:	af04      	add	r7, sp, #16
 8018b82:	4603      	mov	r3, r0
 8018b84:	6039      	str	r1, [r7, #0]
 8018b86:	71fb      	strb	r3, [r7, #7]
 8018b88:	4613      	mov	r3, r2
 8018b8a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8018b8c:	4b17      	ldr	r3, [pc, #92]	; (8018bec <RegionCommonRxConfigPrint+0x70>)
 8018b8e:	f107 0408 	add.w	r4, r7, #8
 8018b92:	461d      	mov	r5, r3
 8018b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018b9c:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8018ba0:	79fb      	ldrb	r3, [r7, #7]
 8018ba2:	2b05      	cmp	r3, #5
 8018ba4:	d812      	bhi.n	8018bcc <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8018ba6:	79fb      	ldrb	r3, [r7, #7]
 8018ba8:	009b      	lsls	r3, r3, #2
 8018baa:	3320      	adds	r3, #32
 8018bac:	443b      	add	r3, r7
 8018bae:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8018bb2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018bb6:	9202      	str	r2, [sp, #8]
 8018bb8:	683a      	ldr	r2, [r7, #0]
 8018bba:	9201      	str	r2, [sp, #4]
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	4b0c      	ldr	r3, [pc, #48]	; (8018bf0 <RegionCommonRxConfigPrint+0x74>)
 8018bc0:	2201      	movs	r2, #1
 8018bc2:	2100      	movs	r1, #0
 8018bc4:	2002      	movs	r0, #2
 8018bc6:	f005 fe33 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018bca:	e00a      	b.n	8018be2 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018bcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bd0:	9301      	str	r3, [sp, #4]
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	9300      	str	r3, [sp, #0]
 8018bd6:	4b07      	ldr	r3, [pc, #28]	; (8018bf4 <RegionCommonRxConfigPrint+0x78>)
 8018bd8:	2201      	movs	r2, #1
 8018bda:	2100      	movs	r1, #0
 8018bdc:	2002      	movs	r0, #2
 8018bde:	f005 fe27 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8018be2:	bf00      	nop
 8018be4:	3720      	adds	r7, #32
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bdb0      	pop	{r4, r5, r7, pc}
 8018bea:	bf00      	nop
 8018bec:	080228f0 	.word	0x080228f0
 8018bf0:	08022894 	.word	0x08022894
 8018bf4:	080228b4 	.word	0x080228b4

08018bf8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b084      	sub	sp, #16
 8018bfc:	af02      	add	r7, sp, #8
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c08:	9301      	str	r3, [sp, #4]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	9300      	str	r3, [sp, #0]
 8018c0e:	4b05      	ldr	r3, [pc, #20]	; (8018c24 <RegionCommonTxConfigPrint+0x2c>)
 8018c10:	2201      	movs	r2, #1
 8018c12:	2100      	movs	r1, #0
 8018c14:	2002      	movs	r0, #2
 8018c16:	f005 fe0b 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
}
 8018c1a:	bf00      	nop
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	08022908 	.word	0x08022908

08018c28 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018c32:	4b2d      	ldr	r3, [pc, #180]	; (8018ce8 <VerifyRfFreq+0xc0>)
 8018c34:	6a1b      	ldr	r3, [r3, #32]
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	4798      	blx	r3
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	f083 0301 	eor.w	r3, r3, #1
 8018c40:	b2db      	uxtb	r3, r3
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d001      	beq.n	8018c4a <VerifyRfFreq+0x22>
    {
        return false;
 8018c46:	2300      	movs	r3, #0
 8018c48:	e04a      	b.n	8018ce0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	4a27      	ldr	r2, [pc, #156]	; (8018cec <VerifyRfFreq+0xc4>)
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d307      	bcc.n	8018c62 <VerifyRfFreq+0x3a>
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	4a26      	ldr	r2, [pc, #152]	; (8018cf0 <VerifyRfFreq+0xc8>)
 8018c56:	4293      	cmp	r3, r2
 8018c58:	d803      	bhi.n	8018c62 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	2202      	movs	r2, #2
 8018c5e:	701a      	strb	r2, [r3, #0]
 8018c60:	e03d      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	4a22      	ldr	r2, [pc, #136]	; (8018cf0 <VerifyRfFreq+0xc8>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d907      	bls.n	8018c7a <VerifyRfFreq+0x52>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	4a21      	ldr	r2, [pc, #132]	; (8018cf4 <VerifyRfFreq+0xcc>)
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d803      	bhi.n	8018c7a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	2200      	movs	r2, #0
 8018c76:	701a      	strb	r2, [r3, #0]
 8018c78:	e031      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	4a1d      	ldr	r2, [pc, #116]	; (8018cf4 <VerifyRfFreq+0xcc>)
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d907      	bls.n	8018c92 <VerifyRfFreq+0x6a>
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	4a1c      	ldr	r2, [pc, #112]	; (8018cf8 <VerifyRfFreq+0xd0>)
 8018c86:	4293      	cmp	r3, r2
 8018c88:	d803      	bhi.n	8018c92 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	2201      	movs	r2, #1
 8018c8e:	701a      	strb	r2, [r3, #0]
 8018c90:	e025      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	4a19      	ldr	r2, [pc, #100]	; (8018cfc <VerifyRfFreq+0xd4>)
 8018c96:	4293      	cmp	r3, r2
 8018c98:	d907      	bls.n	8018caa <VerifyRfFreq+0x82>
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	4a18      	ldr	r2, [pc, #96]	; (8018d00 <VerifyRfFreq+0xd8>)
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	d803      	bhi.n	8018caa <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	2205      	movs	r2, #5
 8018ca6:	701a      	strb	r2, [r3, #0]
 8018ca8:	e019      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	4a15      	ldr	r2, [pc, #84]	; (8018d04 <VerifyRfFreq+0xdc>)
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	d907      	bls.n	8018cc2 <VerifyRfFreq+0x9a>
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	4a14      	ldr	r2, [pc, #80]	; (8018d08 <VerifyRfFreq+0xe0>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d803      	bhi.n	8018cc2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	2203      	movs	r2, #3
 8018cbe:	701a      	strb	r2, [r3, #0]
 8018cc0:	e00d      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4a11      	ldr	r2, [pc, #68]	; (8018d0c <VerifyRfFreq+0xe4>)
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d307      	bcc.n	8018cda <VerifyRfFreq+0xb2>
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	4a10      	ldr	r2, [pc, #64]	; (8018d10 <VerifyRfFreq+0xe8>)
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	d803      	bhi.n	8018cda <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	2204      	movs	r2, #4
 8018cd6:	701a      	strb	r2, [r3, #0]
 8018cd8:	e001      	b.n	8018cde <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018cda:	2300      	movs	r3, #0
 8018cdc:	e000      	b.n	8018ce0 <VerifyRfFreq+0xb8>
    }
    return true;
 8018cde:	2301      	movs	r3, #1
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	080232e4 	.word	0x080232e4
 8018cec:	337055c0 	.word	0x337055c0
 8018cf0:	338eda3f 	.word	0x338eda3f
 8018cf4:	33bca100 	.word	0x33bca100
 8018cf8:	33c5c8c0 	.word	0x33c5c8c0
 8018cfc:	33c74f5f 	.word	0x33c74f5f
 8018d00:	33cef080 	.word	0x33cef080
 8018d04:	33d1fdbf 	.word	0x33d1fdbf
 8018d08:	33d5ce50 	.word	0x33d5ce50
 8018d0c:	33d691a0 	.word	0x33d691a0
 8018d10:	33db2580 	.word	0x33db2580

08018d14 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d14:	b590      	push	{r4, r7, lr}
 8018d16:	b08b      	sub	sp, #44	; 0x2c
 8018d18:	af04      	add	r7, sp, #16
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	460a      	mov	r2, r1
 8018d1e:	71fb      	strb	r3, [r7, #7]
 8018d20:	4613      	mov	r3, r2
 8018d22:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d28:	4a1f      	ldr	r2, [pc, #124]	; (8018da8 <GetTimeOnAir+0x94>)
 8018d2a:	5cd3      	ldrb	r3, [r2, r3]
 8018d2c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d32:	491e      	ldr	r1, [pc, #120]	; (8018dac <GetTimeOnAir+0x98>)
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7ff ff03 	bl	8018b40 <RegionCommonGetBandwidth>
 8018d3a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d44:	2b07      	cmp	r3, #7
 8018d46:	d118      	bne.n	8018d7a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018d48:	4b19      	ldr	r3, [pc, #100]	; (8018db0 <GetTimeOnAir+0x9c>)
 8018d4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018d4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d54:	fb02 f303 	mul.w	r3, r2, r3
 8018d58:	4619      	mov	r1, r3
 8018d5a:	88bb      	ldrh	r3, [r7, #4]
 8018d5c:	b2db      	uxtb	r3, r3
 8018d5e:	2201      	movs	r2, #1
 8018d60:	9203      	str	r2, [sp, #12]
 8018d62:	9302      	str	r3, [sp, #8]
 8018d64:	2300      	movs	r3, #0
 8018d66:	9301      	str	r3, [sp, #4]
 8018d68:	2305      	movs	r3, #5
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	460a      	mov	r2, r1
 8018d70:	68f9      	ldr	r1, [r7, #12]
 8018d72:	2000      	movs	r0, #0
 8018d74:	47a0      	blx	r4
 8018d76:	6178      	str	r0, [r7, #20]
 8018d78:	e011      	b.n	8018d9e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018d7a:	4b0d      	ldr	r3, [pc, #52]	; (8018db0 <GetTimeOnAir+0x9c>)
 8018d7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018d7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018d82:	88bb      	ldrh	r3, [r7, #4]
 8018d84:	b2db      	uxtb	r3, r3
 8018d86:	2101      	movs	r1, #1
 8018d88:	9103      	str	r1, [sp, #12]
 8018d8a:	9302      	str	r3, [sp, #8]
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	9301      	str	r3, [sp, #4]
 8018d90:	2308      	movs	r3, #8
 8018d92:	9300      	str	r3, [sp, #0]
 8018d94:	2301      	movs	r3, #1
 8018d96:	68f9      	ldr	r1, [r7, #12]
 8018d98:	2001      	movs	r0, #1
 8018d9a:	47a0      	blx	r4
 8018d9c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018d9e:	697b      	ldr	r3, [r7, #20]
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	371c      	adds	r7, #28
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd90      	pop	{r4, r7, pc}
 8018da8:	08023228 	.word	0x08023228
 8018dac:	08023230 	.word	0x08023230
 8018db0:	080232e4 	.word	0x080232e4

08018db4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b088      	sub	sp, #32
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	3b01      	subs	r3, #1
 8018dc6:	2b38      	cmp	r3, #56	; 0x38
 8018dc8:	f200 8128 	bhi.w	801901c <RegionEU868GetPhyParam+0x268>
 8018dcc:	a201      	add	r2, pc, #4	; (adr r2, 8018dd4 <RegionEU868GetPhyParam+0x20>)
 8018dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dd2:	bf00      	nop
 8018dd4:	08018eb9 	.word	0x08018eb9
 8018dd8:	08018ebf 	.word	0x08018ebf
 8018ddc:	0801901d 	.word	0x0801901d
 8018de0:	0801901d 	.word	0x0801901d
 8018de4:	0801901d 	.word	0x0801901d
 8018de8:	08018ec5 	.word	0x08018ec5
 8018dec:	0801901d 	.word	0x0801901d
 8018df0:	08018eff 	.word	0x08018eff
 8018df4:	0801901d 	.word	0x0801901d
 8018df8:	08018f05 	.word	0x08018f05
 8018dfc:	08018f0b 	.word	0x08018f0b
 8018e00:	08018f11 	.word	0x08018f11
 8018e04:	08018f17 	.word	0x08018f17
 8018e08:	08018f27 	.word	0x08018f27
 8018e0c:	08018f37 	.word	0x08018f37
 8018e10:	08018f3d 	.word	0x08018f3d
 8018e14:	08018f45 	.word	0x08018f45
 8018e18:	08018f4d 	.word	0x08018f4d
 8018e1c:	08018f55 	.word	0x08018f55
 8018e20:	08018f5d 	.word	0x08018f5d
 8018e24:	08018f65 	.word	0x08018f65
 8018e28:	08018f6d 	.word	0x08018f6d
 8018e2c:	08018f81 	.word	0x08018f81
 8018e30:	08018f87 	.word	0x08018f87
 8018e34:	08018f8d 	.word	0x08018f8d
 8018e38:	08018f93 	.word	0x08018f93
 8018e3c:	08018f9f 	.word	0x08018f9f
 8018e40:	08018fab 	.word	0x08018fab
 8018e44:	08018fb1 	.word	0x08018fb1
 8018e48:	08018fb9 	.word	0x08018fb9
 8018e4c:	08018fbf 	.word	0x08018fbf
 8018e50:	08018fc5 	.word	0x08018fc5
 8018e54:	08018fcd 	.word	0x08018fcd
 8018e58:	08018ecb 	.word	0x08018ecb
 8018e5c:	0801901d 	.word	0x0801901d
 8018e60:	0801901d 	.word	0x0801901d
 8018e64:	0801901d 	.word	0x0801901d
 8018e68:	0801901d 	.word	0x0801901d
 8018e6c:	0801901d 	.word	0x0801901d
 8018e70:	0801901d 	.word	0x0801901d
 8018e74:	0801901d 	.word	0x0801901d
 8018e78:	0801901d 	.word	0x0801901d
 8018e7c:	0801901d 	.word	0x0801901d
 8018e80:	0801901d 	.word	0x0801901d
 8018e84:	0801901d 	.word	0x0801901d
 8018e88:	0801901d 	.word	0x0801901d
 8018e8c:	0801901d 	.word	0x0801901d
 8018e90:	08018fd3 	.word	0x08018fd3
 8018e94:	08018fd9 	.word	0x08018fd9
 8018e98:	08018fe7 	.word	0x08018fe7
 8018e9c:	0801901d 	.word	0x0801901d
 8018ea0:	0801901d 	.word	0x0801901d
 8018ea4:	08018fed 	.word	0x08018fed
 8018ea8:	08018ff3 	.word	0x08018ff3
 8018eac:	0801901d 	.word	0x0801901d
 8018eb0:	08018ff9 	.word	0x08018ff9
 8018eb4:	08019009 	.word	0x08019009
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	61bb      	str	r3, [r7, #24]
            break;
 8018ebc:	e0af      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	61bb      	str	r3, [r7, #24]
            break;
 8018ec2:	e0ac      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	61bb      	str	r3, [r7, #24]
            break;
 8018ec8:	e0a9      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018ed0:	733b      	strb	r3, [r7, #12]
 8018ed2:	2307      	movs	r3, #7
 8018ed4:	737b      	strb	r3, [r7, #13]
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	73bb      	strb	r3, [r7, #14]
 8018eda:	2310      	movs	r3, #16
 8018edc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018ede:	4b53      	ldr	r3, [pc, #332]	; (801902c <RegionEU868GetPhyParam+0x278>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018ee6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018ee8:	4b50      	ldr	r3, [pc, #320]	; (801902c <RegionEU868GetPhyParam+0x278>)
 8018eea:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018eec:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018eee:	f107 030c 	add.w	r3, r7, #12
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7ff fdd1 	bl	8018a9a <RegionCommonGetNextLowerTxDr>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	61bb      	str	r3, [r7, #24]
            break;
 8018efc:	e08f      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018efe:	2300      	movs	r3, #0
 8018f00:	61bb      	str	r3, [r7, #24]
            break;
 8018f02:	e08c      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018f04:	2300      	movs	r3, #0
 8018f06:	61bb      	str	r3, [r7, #24]
            break;
 8018f08:	e089      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018f0a:	2340      	movs	r3, #64	; 0x40
 8018f0c:	61bb      	str	r3, [r7, #24]
            break;
 8018f0e:	e086      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018f10:	2320      	movs	r3, #32
 8018f12:	61bb      	str	r3, [r7, #24]
            break;
 8018f14:	e083      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f1c:	461a      	mov	r2, r3
 8018f1e:	4b44      	ldr	r3, [pc, #272]	; (8019030 <RegionEU868GetPhyParam+0x27c>)
 8018f20:	5c9b      	ldrb	r3, [r3, r2]
 8018f22:	61bb      	str	r3, [r7, #24]
            break;
 8018f24:	e07b      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	4b41      	ldr	r3, [pc, #260]	; (8019034 <RegionEU868GetPhyParam+0x280>)
 8018f30:	5c9b      	ldrb	r3, [r3, r2]
 8018f32:	61bb      	str	r3, [r7, #24]
            break;
 8018f34:	e073      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018f36:	2301      	movs	r3, #1
 8018f38:	61bb      	str	r3, [r7, #24]
            break;
 8018f3a:	e070      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018f3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018f40:	61bb      	str	r3, [r7, #24]
            break;
 8018f42:	e06c      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f48:	61bb      	str	r3, [r7, #24]
            break;
 8018f4a:	e068      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018f4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018f50:	61bb      	str	r3, [r7, #24]
            break;
 8018f52:	e064      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018f54:	f241 3388 	movw	r3, #5000	; 0x1388
 8018f58:	61bb      	str	r3, [r7, #24]
            break;
 8018f5a:	e060      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018f5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8018f60:	61bb      	str	r3, [r7, #24]
            break;
 8018f62:	e05c      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018f68:	61bb      	str	r3, [r7, #24]
            break;
 8018f6a:	e058      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018f70:	4831      	ldr	r0, [pc, #196]	; (8019038 <RegionEU868GetPhyParam+0x284>)
 8018f72:	f002 fadf 	bl	801b534 <randr>
 8018f76:	4603      	mov	r3, r0
 8018f78:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018f7c:	61bb      	str	r3, [r7, #24]
            break;
 8018f7e:	e04e      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018f80:	2300      	movs	r3, #0
 8018f82:	61bb      	str	r3, [r7, #24]
            break;
 8018f84:	e04b      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018f86:	4b2d      	ldr	r3, [pc, #180]	; (801903c <RegionEU868GetPhyParam+0x288>)
 8018f88:	61bb      	str	r3, [r7, #24]
            break;
 8018f8a:	e048      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	61bb      	str	r3, [r7, #24]
            break;
 8018f90:	e045      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018f92:	4b26      	ldr	r3, [pc, #152]	; (801902c <RegionEU868GetPhyParam+0x278>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018f9a:	61bb      	str	r3, [r7, #24]
            break;
 8018f9c:	e03f      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018f9e:	4b23      	ldr	r3, [pc, #140]	; (801902c <RegionEU868GetPhyParam+0x278>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018fa6:	61bb      	str	r3, [r7, #24]
            break;
 8018fa8:	e039      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018faa:	2310      	movs	r3, #16
 8018fac:	61bb      	str	r3, [r7, #24]
            break;
 8018fae:	e036      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018fb0:	4b1e      	ldr	r3, [pc, #120]	; (801902c <RegionEU868GetPhyParam+0x278>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	61bb      	str	r3, [r7, #24]
            break;
 8018fb6:	e032      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	61bb      	str	r3, [r7, #24]
            break;
 8018fbc:	e02f      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	61bb      	str	r3, [r7, #24]
            break;
 8018fc2:	e02c      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018fc4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018fc8:	61bb      	str	r3, [r7, #24]
            break;
 8018fca:	e028      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018fcc:	4b1c      	ldr	r3, [pc, #112]	; (8019040 <RegionEU868GetPhyParam+0x28c>)
 8018fce:	61bb      	str	r3, [r7, #24]
            break;
 8018fd0:	e025      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018fd2:	4b1a      	ldr	r3, [pc, #104]	; (801903c <RegionEU868GetPhyParam+0x288>)
 8018fd4:	61bb      	str	r3, [r7, #24]
            break;
 8018fd6:	e022      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018fd8:	2311      	movs	r3, #17
 8018fda:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018fdc:	2302      	movs	r3, #2
 8018fde:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	76bb      	strb	r3, [r7, #26]
            break;
 8018fe4:	e01b      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018fe6:	2303      	movs	r3, #3
 8018fe8:	61bb      	str	r3, [r7, #24]
            break;
 8018fea:	e018      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018fec:	4b13      	ldr	r3, [pc, #76]	; (801903c <RegionEU868GetPhyParam+0x288>)
 8018fee:	61bb      	str	r3, [r7, #24]
            break;
 8018ff0:	e015      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018ff2:	2303      	movs	r3, #3
 8018ff4:	61bb      	str	r3, [r7, #24]
            break;
 8018ff6:	e012      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ffe:	461a      	mov	r2, r3
 8019000:	4b10      	ldr	r3, [pc, #64]	; (8019044 <RegionEU868GetPhyParam+0x290>)
 8019002:	5c9b      	ldrb	r3, [r3, r2]
 8019004:	61bb      	str	r3, [r7, #24]
            break;
 8019006:	e00a      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801900e:	490e      	ldr	r1, [pc, #56]	; (8019048 <RegionEU868GetPhyParam+0x294>)
 8019010:	4618      	mov	r0, r3
 8019012:	f7ff fd95 	bl	8018b40 <RegionCommonGetBandwidth>
 8019016:	4603      	mov	r3, r0
 8019018:	61bb      	str	r3, [r7, #24]
            break;
 801901a:	e000      	b.n	801901e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 801901c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801901e:	69bb      	ldr	r3, [r7, #24]
 8019020:	61fb      	str	r3, [r7, #28]
 8019022:	69fb      	ldr	r3, [r7, #28]
}
 8019024:	4618      	mov	r0, r3
 8019026:	3720      	adds	r7, #32
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}
 801902c:	20004048 	.word	0x20004048
 8019030:	08023250 	.word	0x08023250
 8019034:	08023258 	.word	0x08023258
 8019038:	fffffc18 	.word	0xfffffc18
 801903c:	33d3e608 	.word	0x33d3e608
 8019040:	4009999a 	.word	0x4009999a
 8019044:	08023228 	.word	0x08023228
 8019048:	08023230 	.word	0x08023230

0801904c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801904c:	b590      	push	{r4, r7, lr}
 801904e:	b085      	sub	sp, #20
 8019050:	af02      	add	r7, sp, #8
 8019052:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8019054:	4b11      	ldr	r3, [pc, #68]	; (801909c <RegionEU868SetBandTxDone+0x50>)
 8019056:	681a      	ldr	r2, [r3, #0]
 8019058:	4b11      	ldr	r3, [pc, #68]	; (80190a0 <RegionEU868SetBandTxDone+0x54>)
 801905a:	6819      	ldr	r1, [r3, #0]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	781b      	ldrb	r3, [r3, #0]
 8019060:	4618      	mov	r0, r3
 8019062:	4603      	mov	r3, r0
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	4403      	add	r3, r0
 8019068:	009b      	lsls	r3, r3, #2
 801906a:	440b      	add	r3, r1
 801906c:	3309      	adds	r3, #9
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	4619      	mov	r1, r3
 8019072:	460b      	mov	r3, r1
 8019074:	005b      	lsls	r3, r3, #1
 8019076:	440b      	add	r3, r1
 8019078:	00db      	lsls	r3, r3, #3
 801907a:	18d0      	adds	r0, r2, r3
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6899      	ldr	r1, [r3, #8]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	785c      	ldrb	r4, [r3, #1]
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	691a      	ldr	r2, [r3, #16]
 8019088:	9200      	str	r2, [sp, #0]
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	4622      	mov	r2, r4
 801908e:	f7ff f8ed 	bl	801826c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8019092:	bf00      	nop
 8019094:	370c      	adds	r7, #12
 8019096:	46bd      	mov	sp, r7
 8019098:	bd90      	pop	{r4, r7, pc}
 801909a:	bf00      	nop
 801909c:	20004044 	.word	0x20004044
 80190a0:	20004048 	.word	0x20004048

080190a4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b0b0      	sub	sp, #192	; 0xc0
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80190ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190b0:	2290      	movs	r2, #144	; 0x90
 80190b2:	2100      	movs	r1, #0
 80190b4:	4618      	mov	r0, r3
 80190b6:	f007 fcbd 	bl	8020a34 <memset>
 80190ba:	2364      	movs	r3, #100	; 0x64
 80190bc:	863b      	strh	r3, [r7, #48]	; 0x30
 80190be:	2364      	movs	r3, #100	; 0x64
 80190c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80190c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80190c8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80190cc:	230a      	movs	r3, #10
 80190ce:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80190d2:	2364      	movs	r3, #100	; 0x64
 80190d4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80190d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80190dc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	7a1b      	ldrb	r3, [r3, #8]
 80190e4:	2b02      	cmp	r3, #2
 80190e6:	d05e      	beq.n	80191a6 <RegionEU868InitDefaults+0x102>
 80190e8:	2b02      	cmp	r3, #2
 80190ea:	dc6b      	bgt.n	80191c4 <RegionEU868InitDefaults+0x120>
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d002      	beq.n	80190f6 <RegionEU868InitDefaults+0x52>
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	d03f      	beq.n	8019174 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80190f4:	e066      	b.n	80191c4 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d063      	beq.n	80191c6 <RegionEU868InitDefaults+0x122>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	685b      	ldr	r3, [r3, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d05f      	beq.n	80191c6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4a30      	ldr	r2, [pc, #192]	; (80191cc <RegionEU868InitDefaults+0x128>)
 801910c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	4a2f      	ldr	r2, [pc, #188]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019114:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8019116:	4b2d      	ldr	r3, [pc, #180]	; (80191cc <RegionEU868InitDefaults+0x128>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	4618      	mov	r0, r3
 801911c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019120:	2290      	movs	r2, #144	; 0x90
 8019122:	4619      	mov	r1, r3
 8019124:	f002 fa1d 	bl	801b562 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8019128:	4b29      	ldr	r3, [pc, #164]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	4a29      	ldr	r2, [pc, #164]	; (80191d4 <RegionEU868InitDefaults+0x130>)
 801912e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8019134:	4b26      	ldr	r3, [pc, #152]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	4a27      	ldr	r2, [pc, #156]	; (80191d8 <RegionEU868InitDefaults+0x134>)
 801913a:	330c      	adds	r3, #12
 801913c:	ca07      	ldmia	r2, {r0, r1, r2}
 801913e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8019142:	4b23      	ldr	r3, [pc, #140]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a25      	ldr	r2, [pc, #148]	; (80191dc <RegionEU868InitDefaults+0x138>)
 8019148:	3318      	adds	r3, #24
 801914a:	ca07      	ldmia	r2, {r0, r1, r2}
 801914c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8019150:	4b1f      	ldr	r3, [pc, #124]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2207      	movs	r2, #7
 8019156:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801915a:	4b1d      	ldr	r3, [pc, #116]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019162:	4b1b      	ldr	r3, [pc, #108]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801916a:	2201      	movs	r2, #1
 801916c:	4619      	mov	r1, r3
 801916e:	f7ff f857 	bl	8018220 <RegionCommonChanMaskCopy>
 8019172:	e028      	b.n	80191c6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8019174:	4b16      	ldr	r3, [pc, #88]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2200      	movs	r2, #0
 801917a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801917c:	4b14      	ldr	r3, [pc, #80]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	2200      	movs	r2, #0
 8019182:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8019184:	4b12      	ldr	r3, [pc, #72]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	2200      	movs	r2, #0
 801918a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801918c:	4b10      	ldr	r3, [pc, #64]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019194:	4b0e      	ldr	r3, [pc, #56]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801919c:	2201      	movs	r2, #1
 801919e:	4619      	mov	r1, r3
 80191a0:	f7ff f83e 	bl	8018220 <RegionCommonChanMaskCopy>
            break;
 80191a4:	e00f      	b.n	80191c6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80191a6:	4b0a      	ldr	r3, [pc, #40]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 80191ae:	4b08      	ldr	r3, [pc, #32]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80191b6:	4b06      	ldr	r3, [pc, #24]	; (80191d0 <RegionEU868InitDefaults+0x12c>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	430a      	orrs	r2, r1
 80191bc:	b292      	uxth	r2, r2
 80191be:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 80191c2:	e000      	b.n	80191c6 <RegionEU868InitDefaults+0x122>
            break;
 80191c4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80191c6:	37c0      	adds	r7, #192	; 0xc0
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	20004044 	.word	0x20004044
 80191d0:	20004048 	.word	0x20004048
 80191d4:	08022924 	.word	0x08022924
 80191d8:	08022930 	.word	0x08022930
 80191dc:	0802293c 	.word	0x0802293c

080191e0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b084      	sub	sp, #16
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	460b      	mov	r3, r1
 80191ea:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80191ec:	78fb      	ldrb	r3, [r7, #3]
 80191ee:	2b0f      	cmp	r3, #15
 80191f0:	d86c      	bhi.n	80192cc <RegionEU868Verify+0xec>
 80191f2:	a201      	add	r2, pc, #4	; (adr r2, 80191f8 <RegionEU868Verify+0x18>)
 80191f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191f8:	08019239 	.word	0x08019239
 80191fc:	080192cd 	.word	0x080192cd
 8019200:	080192cd 	.word	0x080192cd
 8019204:	080192cd 	.word	0x080192cd
 8019208:	080192cd 	.word	0x080192cd
 801920c:	08019251 	.word	0x08019251
 8019210:	0801926f 	.word	0x0801926f
 8019214:	0801928d 	.word	0x0801928d
 8019218:	080192cd 	.word	0x080192cd
 801921c:	080192ab 	.word	0x080192ab
 8019220:	080192ab 	.word	0x080192ab
 8019224:	080192cd 	.word	0x080192cd
 8019228:	080192cd 	.word	0x080192cd
 801922c:	080192cd 	.word	0x080192cd
 8019230:	080192cd 	.word	0x080192cd
 8019234:	080192c9 	.word	0x080192c9
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8019238:	2300      	movs	r3, #0
 801923a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	f107 020f 	add.w	r2, r7, #15
 8019244:	4611      	mov	r1, r2
 8019246:	4618      	mov	r0, r3
 8019248:	f7ff fcee 	bl	8018c28 <VerifyRfFreq>
 801924c:	4603      	mov	r3, r0
 801924e:	e03e      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	f993 3000 	ldrsb.w	r3, [r3]
 8019256:	2207      	movs	r2, #7
 8019258:	2100      	movs	r1, #0
 801925a:	4618      	mov	r0, r3
 801925c:	f7fe ff63 	bl	8018126 <RegionCommonValueInRange>
 8019260:	4603      	mov	r3, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	bf14      	ite	ne
 8019266:	2301      	movne	r3, #1
 8019268:	2300      	moveq	r3, #0
 801926a:	b2db      	uxtb	r3, r3
 801926c:	e02f      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f993 3000 	ldrsb.w	r3, [r3]
 8019274:	2205      	movs	r2, #5
 8019276:	2100      	movs	r1, #0
 8019278:	4618      	mov	r0, r3
 801927a:	f7fe ff54 	bl	8018126 <RegionCommonValueInRange>
 801927e:	4603      	mov	r3, r0
 8019280:	2b00      	cmp	r3, #0
 8019282:	bf14      	ite	ne
 8019284:	2301      	movne	r3, #1
 8019286:	2300      	moveq	r3, #0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	e020      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	f993 3000 	ldrsb.w	r3, [r3]
 8019292:	2207      	movs	r2, #7
 8019294:	2100      	movs	r1, #0
 8019296:	4618      	mov	r0, r3
 8019298:	f7fe ff45 	bl	8018126 <RegionCommonValueInRange>
 801929c:	4603      	mov	r3, r0
 801929e:	2b00      	cmp	r3, #0
 80192a0:	bf14      	ite	ne
 80192a2:	2301      	movne	r3, #1
 80192a4:	2300      	moveq	r3, #0
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	e011      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f993 3000 	ldrsb.w	r3, [r3]
 80192b0:	2207      	movs	r2, #7
 80192b2:	2100      	movs	r1, #0
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7fe ff36 	bl	8018126 <RegionCommonValueInRange>
 80192ba:	4603      	mov	r3, r0
 80192bc:	2b00      	cmp	r3, #0
 80192be:	bf14      	ite	ne
 80192c0:	2301      	movne	r3, #1
 80192c2:	2300      	moveq	r3, #0
 80192c4:	b2db      	uxtb	r3, r3
 80192c6:	e002      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80192c8:	2301      	movs	r3, #1
 80192ca:	e000      	b.n	80192ce <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80192cc:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3710      	adds	r7, #16
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	bf00      	nop

080192d8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b08a      	sub	sp, #40	; 0x28
 80192dc:	af00      	add	r7, sp, #0
 80192de:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80192e0:	2350      	movs	r3, #80	; 0x50
 80192e2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	791b      	ldrb	r3, [r3, #4]
 80192ea:	2b10      	cmp	r3, #16
 80192ec:	d162      	bne.n	80193b4 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	330f      	adds	r3, #15
 80192f4:	781b      	ldrb	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d15e      	bne.n	80193b8 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80192fa:	2300      	movs	r3, #0
 80192fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019300:	2303      	movs	r3, #3
 8019302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019306:	e050      	b.n	80193aa <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801930c:	2b07      	cmp	r3, #7
 801930e:	d824      	bhi.n	801935a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	681a      	ldr	r2, [r3, #0]
 8019314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019318:	4413      	add	r3, r2
 801931a:	781b      	ldrb	r3, [r3, #0]
 801931c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801931e:	69ba      	ldr	r2, [r7, #24]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	6819      	ldr	r1, [r3, #0]
 8019324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019328:	3301      	adds	r3, #1
 801932a:	440b      	add	r3, r1
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	021b      	lsls	r3, r3, #8
 8019330:	4313      	orrs	r3, r2
 8019332:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019334:	69ba      	ldr	r2, [r7, #24]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	6819      	ldr	r1, [r3, #0]
 801933a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801933e:	3302      	adds	r3, #2
 8019340:	440b      	add	r3, r1
 8019342:	781b      	ldrb	r3, [r3, #0]
 8019344:	041b      	lsls	r3, r3, #16
 8019346:	4313      	orrs	r3, r2
 8019348:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801934a:	69bb      	ldr	r3, [r7, #24]
 801934c:	2264      	movs	r2, #100	; 0x64
 801934e:	fb02 f303 	mul.w	r3, r2, r3
 8019352:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8019354:	2300      	movs	r3, #0
 8019356:	61fb      	str	r3, [r7, #28]
 8019358:	e006      	b.n	8019368 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801935a:	2300      	movs	r3, #0
 801935c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801935e:	2300      	movs	r3, #0
 8019360:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8019364:	2300      	movs	r3, #0
 8019366:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8019368:	69bb      	ldr	r3, [r7, #24]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d00b      	beq.n	8019386 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801936e:	f107 0318 	add.w	r3, r7, #24
 8019372:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8019374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019378:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801937a:	f107 0310 	add.w	r3, r7, #16
 801937e:	4618      	mov	r0, r3
 8019380:	f000 fd0e 	bl	8019da0 <RegionEU868ChannelAdd>
 8019384:	e007      	b.n	8019396 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8019386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801938a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801938c:	f107 030c 	add.w	r3, r7, #12
 8019390:	4618      	mov	r0, r3
 8019392:	f000 fda7 	bl	8019ee4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801939a:	3303      	adds	r3, #3
 801939c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80193a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193a4:	3301      	adds	r3, #1
 80193a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80193aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193ae:	2b0f      	cmp	r3, #15
 80193b0:	d9aa      	bls.n	8019308 <RegionEU868ApplyCFList+0x30>
 80193b2:	e002      	b.n	80193ba <RegionEU868ApplyCFList+0xe2>
        return;
 80193b4:	bf00      	nop
 80193b6:	e000      	b.n	80193ba <RegionEU868ApplyCFList+0xe2>
        return;
 80193b8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80193ba:	3728      	adds	r7, #40	; 0x28
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}

080193c0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b082      	sub	sp, #8
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	791b      	ldrb	r3, [r3, #4]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d002      	beq.n	80193d6 <RegionEU868ChanMaskSet+0x16>
 80193d0:	2b01      	cmp	r3, #1
 80193d2:	d00b      	beq.n	80193ec <RegionEU868ChanMaskSet+0x2c>
 80193d4:	e015      	b.n	8019402 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80193d6:	4b0e      	ldr	r3, [pc, #56]	; (8019410 <RegionEU868ChanMaskSet+0x50>)
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2201      	movs	r2, #1
 80193e4:	4619      	mov	r1, r3
 80193e6:	f7fe ff1b 	bl	8018220 <RegionCommonChanMaskCopy>
            break;
 80193ea:	e00c      	b.n	8019406 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80193ec:	4b08      	ldr	r3, [pc, #32]	; (8019410 <RegionEU868ChanMaskSet+0x50>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2201      	movs	r2, #1
 80193fa:	4619      	mov	r1, r3
 80193fc:	f7fe ff10 	bl	8018220 <RegionCommonChanMaskCopy>
            break;
 8019400:	e001      	b.n	8019406 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019402:	2300      	movs	r3, #0
 8019404:	e000      	b.n	8019408 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019406:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019408:	4618      	mov	r0, r3
 801940a:	3708      	adds	r7, #8
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	20004048 	.word	0x20004048

08019414 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b088      	sub	sp, #32
 8019418:	af02      	add	r7, sp, #8
 801941a:	60ba      	str	r2, [r7, #8]
 801941c:	607b      	str	r3, [r7, #4]
 801941e:	4603      	mov	r3, r0
 8019420:	73fb      	strb	r3, [r7, #15]
 8019422:	460b      	mov	r3, r1
 8019424:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8019426:	2300      	movs	r3, #0
 8019428:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801942a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801942e:	2b07      	cmp	r3, #7
 8019430:	bfa8      	it	ge
 8019432:	2307      	movge	r3, #7
 8019434:	b25a      	sxtb	r2, r3
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019440:	491e      	ldr	r1, [pc, #120]	; (80194bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019442:	4618      	mov	r0, r3
 8019444:	f7ff fb7c 	bl	8018b40 <RegionCommonGetBandwidth>
 8019448:	4603      	mov	r3, r0
 801944a:	b2da      	uxtb	r2, r3
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019456:	2b07      	cmp	r3, #7
 8019458:	d10a      	bne.n	8019470 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019460:	461a      	mov	r2, r3
 8019462:	4b17      	ldr	r3, [pc, #92]	; (80194c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 8019464:	5c9b      	ldrb	r3, [r3, r2]
 8019466:	4618      	mov	r0, r3
 8019468:	f7ff f8fe 	bl	8018668 <RegionCommonComputeSymbolTimeFsk>
 801946c:	6178      	str	r0, [r7, #20]
 801946e:	e011      	b.n	8019494 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019476:	461a      	mov	r2, r3
 8019478:	4b11      	ldr	r3, [pc, #68]	; (80194c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 801947a:	5c9a      	ldrb	r2, [r3, r2]
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019482:	4619      	mov	r1, r3
 8019484:	4b0d      	ldr	r3, [pc, #52]	; (80194bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019486:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801948a:	4619      	mov	r1, r3
 801948c:	4610      	mov	r0, r2
 801948e:	f7ff f8d5 	bl	801863c <RegionCommonComputeSymbolTimeLoRa>
 8019492:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019494:	4b0b      	ldr	r3, [pc, #44]	; (80194c4 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8019496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019498:	4798      	blx	r3
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	3308      	adds	r3, #8
 801949e:	687a      	ldr	r2, [r7, #4]
 80194a0:	320c      	adds	r2, #12
 80194a2:	7bb9      	ldrb	r1, [r7, #14]
 80194a4:	9201      	str	r2, [sp, #4]
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	4603      	mov	r3, r0
 80194aa:	68ba      	ldr	r2, [r7, #8]
 80194ac:	6978      	ldr	r0, [r7, #20]
 80194ae:	f7ff f8eb 	bl	8018688 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80194b2:	bf00      	nop
 80194b4:	3718      	adds	r7, #24
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	bf00      	nop
 80194bc:	08023230 	.word	0x08023230
 80194c0:	08023228 	.word	0x08023228
 80194c4:	080232e4 	.word	0x080232e4

080194c8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80194c8:	b5b0      	push	{r4, r5, r7, lr}
 80194ca:	b090      	sub	sp, #64	; 0x40
 80194cc:	af0a      	add	r7, sp, #40	; 0x28
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	785b      	ldrb	r3, [r3, #1]
 80194d6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80194d8:	2300      	movs	r3, #0
 80194da:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80194dc:	2300      	movs	r3, #0
 80194de:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	685b      	ldr	r3, [r3, #4]
 80194e4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80194e6:	4b5a      	ldr	r3, [pc, #360]	; (8019650 <RegionEU868RxConfig+0x188>)
 80194e8:	685b      	ldr	r3, [r3, #4]
 80194ea:	4798      	blx	r3
 80194ec:	4603      	mov	r3, r0
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d001      	beq.n	80194f6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80194f2:	2300      	movs	r3, #0
 80194f4:	e0a8      	b.n	8019648 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	7cdb      	ldrb	r3, [r3, #19]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d126      	bne.n	801954c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80194fe:	4b55      	ldr	r3, [pc, #340]	; (8019654 <RegionEU868RxConfig+0x18c>)
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	4619      	mov	r1, r3
 8019508:	460b      	mov	r3, r1
 801950a:	005b      	lsls	r3, r3, #1
 801950c:	440b      	add	r3, r1
 801950e:	009b      	lsls	r3, r3, #2
 8019510:	4413      	add	r3, r2
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019516:	4b4f      	ldr	r3, [pc, #316]	; (8019654 <RegionEU868RxConfig+0x18c>)
 8019518:	681a      	ldr	r2, [r3, #0]
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	4619      	mov	r1, r3
 8019520:	460b      	mov	r3, r1
 8019522:	005b      	lsls	r3, r3, #1
 8019524:	440b      	add	r3, r1
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	4413      	add	r3, r2
 801952a:	3304      	adds	r3, #4
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d00c      	beq.n	801954c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8019532:	4b48      	ldr	r3, [pc, #288]	; (8019654 <RegionEU868RxConfig+0x18c>)
 8019534:	681a      	ldr	r2, [r3, #0]
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	781b      	ldrb	r3, [r3, #0]
 801953a:	4619      	mov	r1, r3
 801953c:	460b      	mov	r3, r1
 801953e:	005b      	lsls	r3, r3, #1
 8019540:	440b      	add	r3, r1
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	4413      	add	r3, r2
 8019546:	3304      	adds	r3, #4
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801954c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019550:	4a41      	ldr	r2, [pc, #260]	; (8019658 <RegionEU868RxConfig+0x190>)
 8019552:	5cd3      	ldrb	r3, [r2, r3]
 8019554:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8019556:	4b3e      	ldr	r3, [pc, #248]	; (8019650 <RegionEU868RxConfig+0x188>)
 8019558:	68db      	ldr	r3, [r3, #12]
 801955a:	6938      	ldr	r0, [r7, #16]
 801955c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801955e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019562:	2b07      	cmp	r3, #7
 8019564:	d128      	bne.n	80195b8 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8019566:	2300      	movs	r3, #0
 8019568:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801956a:	4b39      	ldr	r3, [pc, #228]	; (8019650 <RegionEU868RxConfig+0x188>)
 801956c:	699c      	ldr	r4, [r3, #24]
 801956e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019576:	fb02 f303 	mul.w	r3, r2, r3
 801957a:	4619      	mov	r1, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	689b      	ldr	r3, [r3, #8]
 8019580:	b29b      	uxth	r3, r3
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	7c92      	ldrb	r2, [r2, #18]
 8019586:	7df8      	ldrb	r0, [r7, #23]
 8019588:	9209      	str	r2, [sp, #36]	; 0x24
 801958a:	2200      	movs	r2, #0
 801958c:	9208      	str	r2, [sp, #32]
 801958e:	2200      	movs	r2, #0
 8019590:	9207      	str	r2, [sp, #28]
 8019592:	2200      	movs	r2, #0
 8019594:	9206      	str	r2, [sp, #24]
 8019596:	2201      	movs	r2, #1
 8019598:	9205      	str	r2, [sp, #20]
 801959a:	2200      	movs	r2, #0
 801959c:	9204      	str	r2, [sp, #16]
 801959e:	2200      	movs	r2, #0
 80195a0:	9203      	str	r2, [sp, #12]
 80195a2:	9302      	str	r3, [sp, #8]
 80195a4:	2305      	movs	r3, #5
 80195a6:	9301      	str	r3, [sp, #4]
 80195a8:	4b2c      	ldr	r3, [pc, #176]	; (801965c <RegionEU868RxConfig+0x194>)
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	2300      	movs	r3, #0
 80195ae:	460a      	mov	r2, r1
 80195b0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80195b4:	47a0      	blx	r4
 80195b6:	e024      	b.n	8019602 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80195b8:	2301      	movs	r3, #1
 80195ba:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80195bc:	4b24      	ldr	r3, [pc, #144]	; (8019650 <RegionEU868RxConfig+0x188>)
 80195be:	699c      	ldr	r4, [r3, #24]
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	789b      	ldrb	r3, [r3, #2]
 80195c4:	461d      	mov	r5, r3
 80195c6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	689b      	ldr	r3, [r3, #8]
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	7c92      	ldrb	r2, [r2, #18]
 80195d4:	7df8      	ldrb	r0, [r7, #23]
 80195d6:	9209      	str	r2, [sp, #36]	; 0x24
 80195d8:	2201      	movs	r2, #1
 80195da:	9208      	str	r2, [sp, #32]
 80195dc:	2200      	movs	r2, #0
 80195de:	9207      	str	r2, [sp, #28]
 80195e0:	2200      	movs	r2, #0
 80195e2:	9206      	str	r2, [sp, #24]
 80195e4:	2200      	movs	r2, #0
 80195e6:	9205      	str	r2, [sp, #20]
 80195e8:	2200      	movs	r2, #0
 80195ea:	9204      	str	r2, [sp, #16]
 80195ec:	2200      	movs	r2, #0
 80195ee:	9203      	str	r2, [sp, #12]
 80195f0:	9302      	str	r3, [sp, #8]
 80195f2:	2308      	movs	r3, #8
 80195f4:	9301      	str	r3, [sp, #4]
 80195f6:	2300      	movs	r3, #0
 80195f8:	9300      	str	r3, [sp, #0]
 80195fa:	2301      	movs	r3, #1
 80195fc:	460a      	mov	r2, r1
 80195fe:	4629      	mov	r1, r5
 8019600:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	7c5b      	ldrb	r3, [r3, #17]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d005      	beq.n	8019616 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801960a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801960e:	4a14      	ldr	r2, [pc, #80]	; (8019660 <RegionEU868RxConfig+0x198>)
 8019610:	5cd3      	ldrb	r3, [r2, r3]
 8019612:	75bb      	strb	r3, [r7, #22]
 8019614:	e004      	b.n	8019620 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801961a:	4a12      	ldr	r2, [pc, #72]	; (8019664 <RegionEU868RxConfig+0x19c>)
 801961c:	5cd3      	ldrb	r3, [r2, r3]
 801961e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019620:	4b0b      	ldr	r3, [pc, #44]	; (8019650 <RegionEU868RxConfig+0x188>)
 8019622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019624:	7dba      	ldrb	r2, [r7, #22]
 8019626:	320d      	adds	r2, #13
 8019628:	b2d1      	uxtb	r1, r2
 801962a:	7dfa      	ldrb	r2, [r7, #23]
 801962c:	4610      	mov	r0, r2
 801962e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	7cdb      	ldrb	r3, [r3, #19]
 8019634:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019638:	6939      	ldr	r1, [r7, #16]
 801963a:	4618      	mov	r0, r3
 801963c:	f7ff fa9e 	bl	8018b7c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	7bfa      	ldrb	r2, [r7, #15]
 8019644:	701a      	strb	r2, [r3, #0]
    return true;
 8019646:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019648:	4618      	mov	r0, r3
 801964a:	3718      	adds	r7, #24
 801964c:	46bd      	mov	sp, r7
 801964e:	bdb0      	pop	{r4, r5, r7, pc}
 8019650:	080232e4 	.word	0x080232e4
 8019654:	20004048 	.word	0x20004048
 8019658:	08023228 	.word	0x08023228
 801965c:	00014585 	.word	0x00014585
 8019660:	08023258 	.word	0x08023258
 8019664:	08023250 	.word	0x08023250

08019668 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019668:	b590      	push	{r4, r7, lr}
 801966a:	b093      	sub	sp, #76	; 0x4c
 801966c:	af0a      	add	r7, sp, #40	; 0x28
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801967a:	461a      	mov	r2, r3
 801967c:	4b5d      	ldr	r3, [pc, #372]	; (80197f4 <RegionEU868TxConfig+0x18c>)
 801967e:	5c9b      	ldrb	r3, [r3, r2]
 8019680:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019688:	4b5b      	ldr	r3, [pc, #364]	; (80197f8 <RegionEU868TxConfig+0x190>)
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	4b5b      	ldr	r3, [pc, #364]	; (80197fc <RegionEU868TxConfig+0x194>)
 801968e:	6819      	ldr	r1, [r3, #0]
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	461c      	mov	r4, r3
 8019696:	4623      	mov	r3, r4
 8019698:	005b      	lsls	r3, r3, #1
 801969a:	4423      	add	r3, r4
 801969c:	009b      	lsls	r3, r3, #2
 801969e:	440b      	add	r3, r1
 80196a0:	3309      	adds	r3, #9
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	4619      	mov	r1, r3
 80196a6:	460b      	mov	r3, r1
 80196a8:	005b      	lsls	r3, r3, #1
 80196aa:	440b      	add	r3, r1
 80196ac:	00db      	lsls	r3, r3, #3
 80196ae:	4413      	add	r3, r2
 80196b0:	3302      	adds	r3, #2
 80196b2:	f993 3000 	ldrsb.w	r3, [r3]
 80196b6:	4619      	mov	r1, r3
 80196b8:	f7ff fa2d 	bl	8018b16 <RegionCommonLimitTxPower>
 80196bc:	4603      	mov	r3, r0
 80196be:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80196c6:	494e      	ldr	r1, [pc, #312]	; (8019800 <RegionEU868TxConfig+0x198>)
 80196c8:	4618      	mov	r0, r3
 80196ca:	f7ff fa39 	bl	8018b40 <RegionCommonGetBandwidth>
 80196ce:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80196d0:	2300      	movs	r3, #0
 80196d2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	6859      	ldr	r1, [r3, #4]
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	689a      	ldr	r2, [r3, #8]
 80196dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7ff f889 	bl	80187f8 <RegionCommonComputeTxPower>
 80196e6:	4603      	mov	r3, r0
 80196e8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80196ea:	4b46      	ldr	r3, [pc, #280]	; (8019804 <RegionEU868TxConfig+0x19c>)
 80196ec:	68da      	ldr	r2, [r3, #12]
 80196ee:	4b43      	ldr	r3, [pc, #268]	; (80197fc <RegionEU868TxConfig+0x194>)
 80196f0:	6819      	ldr	r1, [r3, #0]
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	4618      	mov	r0, r3
 80196f8:	4603      	mov	r3, r0
 80196fa:	005b      	lsls	r3, r3, #1
 80196fc:	4403      	add	r3, r0
 80196fe:	009b      	lsls	r3, r3, #2
 8019700:	440b      	add	r3, r1
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	4618      	mov	r0, r3
 8019706:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801970e:	2b07      	cmp	r3, #7
 8019710:	d124      	bne.n	801975c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019712:	2300      	movs	r3, #0
 8019714:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019716:	4b3b      	ldr	r3, [pc, #236]	; (8019804 <RegionEU868TxConfig+0x19c>)
 8019718:	69dc      	ldr	r4, [r3, #28]
 801971a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801971e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019722:	fb02 f303 	mul.w	r3, r2, r3
 8019726:	461a      	mov	r2, r3
 8019728:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801972c:	7ff8      	ldrb	r0, [r7, #31]
 801972e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019732:	9308      	str	r3, [sp, #32]
 8019734:	2300      	movs	r3, #0
 8019736:	9307      	str	r3, [sp, #28]
 8019738:	2300      	movs	r3, #0
 801973a:	9306      	str	r3, [sp, #24]
 801973c:	2300      	movs	r3, #0
 801973e:	9305      	str	r3, [sp, #20]
 8019740:	2301      	movs	r3, #1
 8019742:	9304      	str	r3, [sp, #16]
 8019744:	2300      	movs	r3, #0
 8019746:	9303      	str	r3, [sp, #12]
 8019748:	2305      	movs	r3, #5
 801974a:	9302      	str	r3, [sp, #8]
 801974c:	2300      	movs	r3, #0
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	9200      	str	r2, [sp, #0]
 8019752:	69bb      	ldr	r3, [r7, #24]
 8019754:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8019758:	47a0      	blx	r4
 801975a:	e01d      	b.n	8019798 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 801975c:	2301      	movs	r3, #1
 801975e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019760:	4b28      	ldr	r3, [pc, #160]	; (8019804 <RegionEU868TxConfig+0x19c>)
 8019762:	69dc      	ldr	r4, [r3, #28]
 8019764:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019768:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801976c:	7ff8      	ldrb	r0, [r7, #31]
 801976e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019772:	9208      	str	r2, [sp, #32]
 8019774:	2200      	movs	r2, #0
 8019776:	9207      	str	r2, [sp, #28]
 8019778:	2200      	movs	r2, #0
 801977a:	9206      	str	r2, [sp, #24]
 801977c:	2200      	movs	r2, #0
 801977e:	9205      	str	r2, [sp, #20]
 8019780:	2201      	movs	r2, #1
 8019782:	9204      	str	r2, [sp, #16]
 8019784:	2200      	movs	r2, #0
 8019786:	9203      	str	r2, [sp, #12]
 8019788:	2208      	movs	r2, #8
 801978a:	9202      	str	r2, [sp, #8]
 801978c:	2201      	movs	r2, #1
 801978e:	9201      	str	r2, [sp, #4]
 8019790:	9300      	str	r3, [sp, #0]
 8019792:	69bb      	ldr	r3, [r7, #24]
 8019794:	2200      	movs	r2, #0
 8019796:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019798:	4b18      	ldr	r3, [pc, #96]	; (80197fc <RegionEU868TxConfig+0x194>)
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	4619      	mov	r1, r3
 80197a2:	460b      	mov	r3, r1
 80197a4:	005b      	lsls	r3, r3, #1
 80197a6:	440b      	add	r3, r1
 80197a8:	009b      	lsls	r3, r3, #2
 80197aa:	4413      	add	r3, r2
 80197ac:	681a      	ldr	r2, [r3, #0]
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197b4:	4619      	mov	r1, r3
 80197b6:	4610      	mov	r0, r2
 80197b8:	f7ff fa1e 	bl	8018bf8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	899b      	ldrh	r3, [r3, #12]
 80197c6:	4619      	mov	r1, r3
 80197c8:	4610      	mov	r0, r2
 80197ca:	f7ff faa3 	bl	8018d14 <GetTimeOnAir>
 80197ce:	4602      	mov	r2, r0
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80197d4:	4b0b      	ldr	r3, [pc, #44]	; (8019804 <RegionEU868TxConfig+0x19c>)
 80197d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80197d8:	68fa      	ldr	r2, [r7, #12]
 80197da:	8992      	ldrh	r2, [r2, #12]
 80197dc:	b2d1      	uxtb	r1, r2
 80197de:	7ffa      	ldrb	r2, [r7, #31]
 80197e0:	4610      	mov	r0, r2
 80197e2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80197e4:	68bb      	ldr	r3, [r7, #8]
 80197e6:	7f7a      	ldrb	r2, [r7, #29]
 80197e8:	701a      	strb	r2, [r3, #0]
    return true;
 80197ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3724      	adds	r7, #36	; 0x24
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd90      	pop	{r4, r7, pc}
 80197f4:	08023228 	.word	0x08023228
 80197f8:	20004044 	.word	0x20004044
 80197fc:	20004048 	.word	0x20004048
 8019800:	08023230 	.word	0x08023230
 8019804:	080232e4 	.word	0x080232e4

08019808 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019808:	b590      	push	{r4, r7, lr}
 801980a:	b093      	sub	sp, #76	; 0x4c
 801980c:	af00      	add	r7, sp, #0
 801980e:	60f8      	str	r0, [r7, #12]
 8019810:	60b9      	str	r1, [r7, #8]
 8019812:	607a      	str	r2, [r7, #4]
 8019814:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019816:	2307      	movs	r3, #7
 8019818:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801981c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019820:	2200      	movs	r2, #0
 8019822:	601a      	str	r2, [r3, #0]
 8019824:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019826:	2300      	movs	r3, #0
 8019828:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801982c:	2300      	movs	r3, #0
 801982e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019832:	2300      	movs	r3, #0
 8019834:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019836:	e085      	b.n	8019944 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	685a      	ldr	r2, [r3, #4]
 801983c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019840:	4413      	add	r3, r2
 8019842:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019846:	4611      	mov	r1, r2
 8019848:	4618      	mov	r0, r3
 801984a:	f7fe fe2d 	bl	80184a8 <RegionCommonParseLinkAdrReq>
 801984e:	4603      	mov	r3, r0
 8019850:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019854:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019858:	2b00      	cmp	r3, #0
 801985a:	d07b      	beq.n	8019954 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801985c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019860:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019864:	4413      	add	r3, r2
 8019866:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801986a:	2307      	movs	r3, #7
 801986c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019874:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019876:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801987a:	2b00      	cmp	r3, #0
 801987c:	d109      	bne.n	8019892 <RegionEU868LinkAdrReq+0x8a>
 801987e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019880:	2b00      	cmp	r3, #0
 8019882:	d106      	bne.n	8019892 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019888:	f023 0301 	bic.w	r3, r3, #1
 801988c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019890:	e058      	b.n	8019944 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019896:	2b00      	cmp	r3, #0
 8019898:	d003      	beq.n	80198a2 <RegionEU868LinkAdrReq+0x9a>
 801989a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801989e:	2b05      	cmp	r3, #5
 80198a0:	d903      	bls.n	80198aa <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80198a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198a6:	2b06      	cmp	r3, #6
 80198a8:	d906      	bls.n	80198b8 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80198aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198ae:	f023 0301 	bic.w	r3, r3, #1
 80198b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80198b6:	e045      	b.n	8019944 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80198b8:	2300      	movs	r3, #0
 80198ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80198be:	e03d      	b.n	801993c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80198c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198c4:	2b06      	cmp	r3, #6
 80198c6:	d118      	bne.n	80198fa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80198c8:	4b5f      	ldr	r3, [pc, #380]	; (8019a48 <RegionEU868LinkAdrReq+0x240>)
 80198ca:	6819      	ldr	r1, [r3, #0]
 80198cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80198d0:	4613      	mov	r3, r2
 80198d2:	005b      	lsls	r3, r3, #1
 80198d4:	4413      	add	r3, r2
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	440b      	add	r3, r1
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d028      	beq.n	8019932 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80198e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80198e4:	2201      	movs	r2, #1
 80198e6:	fa02 f303 	lsl.w	r3, r2, r3
 80198ea:	b21a      	sxth	r2, r3
 80198ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198ee:	b21b      	sxth	r3, r3
 80198f0:	4313      	orrs	r3, r2
 80198f2:	b21b      	sxth	r3, r3
 80198f4:	b29b      	uxth	r3, r3
 80198f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80198f8:	e01b      	b.n	8019932 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80198fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198fc:	461a      	mov	r2, r3
 80198fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019902:	fa42 f303 	asr.w	r3, r2, r3
 8019906:	f003 0301 	and.w	r3, r3, #1
 801990a:	2b00      	cmp	r3, #0
 801990c:	d011      	beq.n	8019932 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801990e:	4b4e      	ldr	r3, [pc, #312]	; (8019a48 <RegionEU868LinkAdrReq+0x240>)
 8019910:	6819      	ldr	r1, [r3, #0]
 8019912:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019916:	4613      	mov	r3, r2
 8019918:	005b      	lsls	r3, r3, #1
 801991a:	4413      	add	r3, r2
 801991c:	009b      	lsls	r3, r3, #2
 801991e:	440b      	add	r3, r1
 8019920:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019922:	2b00      	cmp	r3, #0
 8019924:	d105      	bne.n	8019932 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019926:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801992a:	f023 0301 	bic.w	r3, r3, #1
 801992e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019932:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019936:	3301      	adds	r3, #1
 8019938:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801993c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019940:	2b0f      	cmp	r3, #15
 8019942:	d9bd      	bls.n	80198c0 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	7a1b      	ldrb	r3, [r3, #8]
 8019948:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801994c:	429a      	cmp	r2, r3
 801994e:	f4ff af73 	bcc.w	8019838 <RegionEU868LinkAdrReq+0x30>
 8019952:	e000      	b.n	8019956 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019954:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019956:	2302      	movs	r3, #2
 8019958:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	7a5b      	ldrb	r3, [r3, #9]
 8019960:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019964:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019968:	4618      	mov	r0, r3
 801996a:	f7ff fa23 	bl	8018db4 <RegionEU868GetPhyParam>
 801996e:	4603      	mov	r3, r0
 8019970:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019976:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	7a9b      	ldrb	r3, [r3, #10]
 801997c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801997e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019982:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019984:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019988:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801998a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801998e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019996:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801999e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	7b5b      	ldrb	r3, [r3, #13]
 80199a4:	b25b      	sxtb	r3, r3
 80199a6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80199a8:	2310      	movs	r3, #16
 80199aa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80199ac:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80199b0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80199b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199b4:	b25b      	sxtb	r3, r3
 80199b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80199ba:	2307      	movs	r3, #7
 80199bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80199c0:	4b21      	ldr	r3, [pc, #132]	; (8019a48 <RegionEU868LinkAdrReq+0x240>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80199c6:	2307      	movs	r3, #7
 80199c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80199cc:	2300      	movs	r3, #0
 80199ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80199d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80199dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80199e0:	1c9a      	adds	r2, r3, #2
 80199e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80199e6:	1c59      	adds	r1, r3, #1
 80199e8:	f107 0010 	add.w	r0, r7, #16
 80199ec:	4623      	mov	r3, r4
 80199ee:	f7fe fdac 	bl	801854a <RegionCommonLinkAdrReqVerifyParams>
 80199f2:	4603      	mov	r3, r0
 80199f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80199f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80199fc:	2b07      	cmp	r3, #7
 80199fe:	d10d      	bne.n	8019a1c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019a00:	4b11      	ldr	r3, [pc, #68]	; (8019a48 <RegionEU868LinkAdrReq+0x240>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019a08:	220c      	movs	r2, #12
 8019a0a:	2100      	movs	r1, #0
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f001 fde3 	bl	801b5d8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019a12:	4b0d      	ldr	r3, [pc, #52]	; (8019a48 <RegionEU868LinkAdrReq+0x240>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019a18:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019a1c:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019a24:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019a2c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019a30:	683b      	ldr	r3, [r7, #0]
 8019a32:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019a36:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019a3a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	374c      	adds	r7, #76	; 0x4c
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd90      	pop	{r4, r7, pc}
 8019a48:	20004048 	.word	0x20004048

08019a4c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b084      	sub	sp, #16
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019a54:	2307      	movs	r3, #7
 8019a56:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019a58:	2300      	movs	r3, #0
 8019a5a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	f107 020e 	add.w	r2, r7, #14
 8019a64:	4611      	mov	r1, r2
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7ff f8de 	bl	8018c28 <VerifyRfFreq>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	f083 0301 	eor.w	r3, r3, #1
 8019a72:	b2db      	uxtb	r3, r3
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d003      	beq.n	8019a80 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019a78:	7bfb      	ldrb	r3, [r7, #15]
 8019a7a:	f023 0301 	bic.w	r3, r3, #1
 8019a7e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	f993 3000 	ldrsb.w	r3, [r3]
 8019a86:	2207      	movs	r2, #7
 8019a88:	2100      	movs	r1, #0
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7fe fb4b 	bl	8018126 <RegionCommonValueInRange>
 8019a90:	4603      	mov	r3, r0
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d103      	bne.n	8019a9e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019a96:	7bfb      	ldrb	r3, [r7, #15]
 8019a98:	f023 0302 	bic.w	r3, r3, #2
 8019a9c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019aa4:	2205      	movs	r2, #5
 8019aa6:	2100      	movs	r1, #0
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7fe fb3c 	bl	8018126 <RegionCommonValueInRange>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d103      	bne.n	8019abc <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019ab4:	7bfb      	ldrb	r3, [r7, #15]
 8019ab6:	f023 0304 	bic.w	r3, r3, #4
 8019aba:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3710      	adds	r7, #16
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}
	...

08019ac8 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b086      	sub	sp, #24
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019ad0:	2303      	movs	r3, #3
 8019ad2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d114      	bne.n	8019b08 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019ae8:	f107 0308 	add.w	r3, r7, #8
 8019aec:	4618      	mov	r0, r3
 8019aee:	f000 f9f9 	bl	8019ee4 <RegionEU868ChannelsRemove>
 8019af2:	4603      	mov	r3, r0
 8019af4:	f083 0301 	eor.w	r3, r3, #1
 8019af8:	b2db      	uxtb	r3, r3
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d03b      	beq.n	8019b76 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019afe:	7dfb      	ldrb	r3, [r7, #23]
 8019b00:	f023 0303 	bic.w	r3, r3, #3
 8019b04:	75fb      	strb	r3, [r7, #23]
 8019b06:	e036      	b.n	8019b76 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b14:	b2db      	uxtb	r3, r3
 8019b16:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019b18:	f107 030c 	add.w	r3, r7, #12
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f000 f93f 	bl	8019da0 <RegionEU868ChannelAdd>
 8019b22:	4603      	mov	r3, r0
 8019b24:	2b06      	cmp	r3, #6
 8019b26:	d820      	bhi.n	8019b6a <RegionEU868NewChannelReq+0xa2>
 8019b28:	a201      	add	r2, pc, #4	; (adr r2, 8019b30 <RegionEU868NewChannelReq+0x68>)
 8019b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b2e:	bf00      	nop
 8019b30:	08019b75 	.word	0x08019b75
 8019b34:	08019b6b 	.word	0x08019b6b
 8019b38:	08019b6b 	.word	0x08019b6b
 8019b3c:	08019b6b 	.word	0x08019b6b
 8019b40:	08019b4d 	.word	0x08019b4d
 8019b44:	08019b57 	.word	0x08019b57
 8019b48:	08019b61 	.word	0x08019b61
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019b4c:	7dfb      	ldrb	r3, [r7, #23]
 8019b4e:	f023 0301 	bic.w	r3, r3, #1
 8019b52:	75fb      	strb	r3, [r7, #23]
                break;
 8019b54:	e00f      	b.n	8019b76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019b56:	7dfb      	ldrb	r3, [r7, #23]
 8019b58:	f023 0302 	bic.w	r3, r3, #2
 8019b5c:	75fb      	strb	r3, [r7, #23]
                break;
 8019b5e:	e00a      	b.n	8019b76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019b60:	7dfb      	ldrb	r3, [r7, #23]
 8019b62:	f023 0303 	bic.w	r3, r3, #3
 8019b66:	75fb      	strb	r3, [r7, #23]
                break;
 8019b68:	e005      	b.n	8019b76 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019b6a:	7dfb      	ldrb	r3, [r7, #23]
 8019b6c:	f023 0303 	bic.w	r3, r3, #3
 8019b70:	75fb      	strb	r3, [r7, #23]
                break;
 8019b72:	e000      	b.n	8019b76 <RegionEU868NewChannelReq+0xae>
                break;
 8019b74:	bf00      	nop
            }
        }
    }

    return status;
 8019b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3718      	adds	r7, #24
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop

08019b84 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019b84:	b480      	push	{r7}
 8019b86:	b083      	sub	sp, #12
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019b90:	4618      	mov	r0, r3
 8019b92:	370c      	adds	r7, #12
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bc80      	pop	{r7}
 8019b98:	4770      	bx	lr
	...

08019b9c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b084      	sub	sp, #16
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019ba4:	2303      	movs	r3, #3
 8019ba6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	685b      	ldr	r3, [r3, #4]
 8019bb0:	f107 020e 	add.w	r2, r7, #14
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7ff f836 	bl	8018c28 <VerifyRfFreq>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	f083 0301 	eor.w	r3, r3, #1
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d003      	beq.n	8019bd0 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019bc8:	7bfb      	ldrb	r3, [r7, #15]
 8019bca:	f023 0301 	bic.w	r3, r3, #1
 8019bce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019bd0:	4b13      	ldr	r3, [pc, #76]	; (8019c20 <RegionEU868DlChannelReq+0x84>)
 8019bd2:	681a      	ldr	r2, [r3, #0]
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	4619      	mov	r1, r3
 8019bda:	460b      	mov	r3, r1
 8019bdc:	005b      	lsls	r3, r3, #1
 8019bde:	440b      	add	r3, r1
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	4413      	add	r3, r2
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d103      	bne.n	8019bf2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8019bea:	7bfb      	ldrb	r3, [r7, #15]
 8019bec:	f023 0302 	bic.w	r3, r3, #2
 8019bf0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019bf2:	7bfb      	ldrb	r3, [r7, #15]
 8019bf4:	2b03      	cmp	r3, #3
 8019bf6:	d10d      	bne.n	8019c14 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019bf8:	4b09      	ldr	r3, [pc, #36]	; (8019c20 <RegionEU868DlChannelReq+0x84>)
 8019bfa:	6819      	ldr	r1, [r3, #0]
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	781b      	ldrb	r3, [r3, #0]
 8019c00:	4618      	mov	r0, r3
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	685a      	ldr	r2, [r3, #4]
 8019c06:	4603      	mov	r3, r0
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	4403      	add	r3, r0
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	440b      	add	r3, r1
 8019c10:	3304      	adds	r3, #4
 8019c12:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3710      	adds	r7, #16
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	20004048 	.word	0x20004048

08019c24 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019c24:	b480      	push	{r7}
 8019c26:	b083      	sub	sp, #12
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	460a      	mov	r2, r1
 8019c2e:	71fb      	strb	r3, [r7, #7]
 8019c30:	4613      	mov	r3, r2
 8019c32:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019c38:	4618      	mov	r0, r3
 8019c3a:	370c      	adds	r7, #12
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	bc80      	pop	{r7}
 8019c40:	4770      	bx	lr
	...

08019c44 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b09a      	sub	sp, #104	; 0x68
 8019c48:	af02      	add	r7, sp, #8
 8019c4a:	60f8      	str	r0, [r7, #12]
 8019c4c:	60b9      	str	r1, [r7, #8]
 8019c4e:	607a      	str	r2, [r7, #4]
 8019c50:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019c52:	2300      	movs	r3, #0
 8019c54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019c5e:	2300      	movs	r3, #0
 8019c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019c62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019c66:	2200      	movs	r2, #0
 8019c68:	601a      	str	r2, [r3, #0]
 8019c6a:	605a      	str	r2, [r3, #4]
 8019c6c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019c6e:	230c      	movs	r3, #12
 8019c70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019c74:	2307      	movs	r3, #7
 8019c76:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019c78:	4b47      	ldr	r3, [pc, #284]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019c80:	2201      	movs	r2, #1
 8019c82:	2100      	movs	r1, #0
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7fe fa9f 	bl	80181c8 <RegionCommonCountChannels>
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d10a      	bne.n	8019ca6 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019c90:	4b41      	ldr	r3, [pc, #260]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019c98:	4b3f      	ldr	r3, [pc, #252]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f042 0207 	orr.w	r2, r2, #7
 8019ca0:	b292      	uxth	r2, r2
 8019ca2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	7a5b      	ldrb	r3, [r3, #9]
 8019caa:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019cb6:	4b38      	ldr	r3, [pc, #224]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019cbe:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019cc0:	4b35      	ldr	r3, [pc, #212]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019cc6:	4b35      	ldr	r3, [pc, #212]	; (8019d9c <RegionEU868NextChannel+0x158>)
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019ccc:	2310      	movs	r3, #16
 8019cce:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019cd0:	f107 0312 	add.w	r3, r7, #18
 8019cd4:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	7a9b      	ldrb	r3, [r3, #10]
 8019ce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019cea:	2306      	movs	r3, #6
 8019cec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019cf0:	68fa      	ldr	r2, [r7, #12]
 8019cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019cf6:	320c      	adds	r2, #12
 8019cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cfc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	7d1b      	ldrb	r3, [r3, #20]
 8019d04:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	8adb      	ldrh	r3, [r3, #22]
 8019d12:	4619      	mov	r1, r3
 8019d14:	4610      	mov	r0, r2
 8019d16:	f7fe fffd 	bl	8018d14 <GetTimeOnAir>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019d1e:	f107 0314 	add.w	r3, r7, #20
 8019d22:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019d24:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019d28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019d2c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	9301      	str	r3, [sp, #4]
 8019d34:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019d38:	9300      	str	r3, [sp, #0]
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	6839      	ldr	r1, [r7, #0]
 8019d3e:	f7fe fe4a 	bl	80189d6 <RegionCommonIdentifyChannels>
 8019d42:	4603      	mov	r3, r0
 8019d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d10e      	bne.n	8019d6e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019d50:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019d54:	3b01      	subs	r3, #1
 8019d56:	4619      	mov	r1, r3
 8019d58:	2000      	movs	r0, #0
 8019d5a:	f001 fbeb 	bl	801b534 <randr>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	3360      	adds	r3, #96	; 0x60
 8019d62:	443b      	add	r3, r7
 8019d64:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019d68:	68bb      	ldr	r3, [r7, #8]
 8019d6a:	701a      	strb	r2, [r3, #0]
 8019d6c:	e00e      	b.n	8019d8c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019d72:	2b0c      	cmp	r3, #12
 8019d74:	d10a      	bne.n	8019d8c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019d76:	4b08      	ldr	r3, [pc, #32]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019d7e:	4b06      	ldr	r3, [pc, #24]	; (8019d98 <RegionEU868NextChannel+0x154>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	f042 0207 	orr.w	r2, r2, #7
 8019d86:	b292      	uxth	r2, r2
 8019d88:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8019d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3760      	adds	r7, #96	; 0x60
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	20004048 	.word	0x20004048
 8019d9c:	20004044 	.word	0x20004044

08019da0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b084      	sub	sp, #16
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019da8:	2300      	movs	r3, #0
 8019daa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019dac:	2300      	movs	r3, #0
 8019dae:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019db0:	2300      	movs	r3, #0
 8019db2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	791b      	ldrb	r3, [r3, #4]
 8019db8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019dba:	7b7b      	ldrb	r3, [r7, #13]
 8019dbc:	2b02      	cmp	r3, #2
 8019dbe:	d801      	bhi.n	8019dc4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019dc0:	2306      	movs	r3, #6
 8019dc2:	e089      	b.n	8019ed8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019dc4:	7b7b      	ldrb	r3, [r7, #13]
 8019dc6:	2b0f      	cmp	r3, #15
 8019dc8:	d901      	bls.n	8019dce <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019dca:	2303      	movs	r3, #3
 8019dcc:	e084      	b.n	8019ed8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	7a1b      	ldrb	r3, [r3, #8]
 8019dd4:	f343 0303 	sbfx	r3, r3, #0, #4
 8019dd8:	b25b      	sxtb	r3, r3
 8019dda:	2207      	movs	r2, #7
 8019ddc:	2100      	movs	r1, #0
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7fe f9a1 	bl	8018126 <RegionCommonValueInRange>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d101      	bne.n	8019dee <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019dea:	2301      	movs	r3, #1
 8019dec:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	7a1b      	ldrb	r3, [r3, #8]
 8019df4:	f343 1303 	sbfx	r3, r3, #4, #4
 8019df8:	b25b      	sxtb	r3, r3
 8019dfa:	2207      	movs	r2, #7
 8019dfc:	2100      	movs	r1, #0
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7fe f991 	bl	8018126 <RegionCommonValueInRange>
 8019e04:	4603      	mov	r3, r0
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d101      	bne.n	8019e0e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019e0a:	2301      	movs	r3, #1
 8019e0c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	7a1b      	ldrb	r3, [r3, #8]
 8019e14:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e18:	b25a      	sxtb	r2, r3
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	7a1b      	ldrb	r3, [r3, #8]
 8019e20:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e24:	b25b      	sxtb	r3, r3
 8019e26:	429a      	cmp	r2, r3
 8019e28:	dd01      	ble.n	8019e2e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019e2e:	7bbb      	ldrb	r3, [r7, #14]
 8019e30:	f083 0301 	eor.w	r3, r3, #1
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d010      	beq.n	8019e5c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	f107 020c 	add.w	r2, r7, #12
 8019e44:	4611      	mov	r1, r2
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fe feee 	bl	8018c28 <VerifyRfFreq>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	f083 0301 	eor.w	r3, r3, #1
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d001      	beq.n	8019e5c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019e58:	2301      	movs	r3, #1
 8019e5a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019e5c:	7bfb      	ldrb	r3, [r7, #15]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d004      	beq.n	8019e6c <RegionEU868ChannelAdd+0xcc>
 8019e62:	7bbb      	ldrb	r3, [r7, #14]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d001      	beq.n	8019e6c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019e68:	2306      	movs	r3, #6
 8019e6a:	e035      	b.n	8019ed8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019e6c:	7bfb      	ldrb	r3, [r7, #15]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d001      	beq.n	8019e76 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019e72:	2305      	movs	r3, #5
 8019e74:	e030      	b.n	8019ed8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019e76:	7bbb      	ldrb	r3, [r7, #14]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d001      	beq.n	8019e80 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019e7c:	2304      	movs	r3, #4
 8019e7e:	e02b      	b.n	8019ed8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019e80:	4b17      	ldr	r3, [pc, #92]	; (8019ee0 <RegionEU868ChannelAdd+0x140>)
 8019e82:	6819      	ldr	r1, [r3, #0]
 8019e84:	7b7a      	ldrb	r2, [r7, #13]
 8019e86:	4613      	mov	r3, r2
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	4413      	add	r3, r2
 8019e8c:	009b      	lsls	r3, r3, #2
 8019e8e:	18c8      	adds	r0, r1, r3
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	220c      	movs	r2, #12
 8019e96:	4619      	mov	r1, r3
 8019e98:	f001 fb63 	bl	801b562 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019e9c:	4b10      	ldr	r3, [pc, #64]	; (8019ee0 <RegionEU868ChannelAdd+0x140>)
 8019e9e:	6819      	ldr	r1, [r3, #0]
 8019ea0:	7b7a      	ldrb	r2, [r7, #13]
 8019ea2:	7b38      	ldrb	r0, [r7, #12]
 8019ea4:	4613      	mov	r3, r2
 8019ea6:	005b      	lsls	r3, r3, #1
 8019ea8:	4413      	add	r3, r2
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	440b      	add	r3, r1
 8019eae:	3309      	adds	r3, #9
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019eb4:	4b0a      	ldr	r3, [pc, #40]	; (8019ee0 <RegionEU868ChannelAdd+0x140>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8019ebc:	b21a      	sxth	r2, r3
 8019ebe:	7b7b      	ldrb	r3, [r7, #13]
 8019ec0:	2101      	movs	r1, #1
 8019ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8019ec6:	b21b      	sxth	r3, r3
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	b21a      	sxth	r2, r3
 8019ecc:	4b04      	ldr	r3, [pc, #16]	; (8019ee0 <RegionEU868ChannelAdd+0x140>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	b292      	uxth	r2, r2
 8019ed2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8019ed6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019ed8:	4618      	mov	r0, r3
 8019eda:	3710      	adds	r7, #16
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}
 8019ee0:	20004048 	.word	0x20004048

08019ee4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b086      	sub	sp, #24
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	781b      	ldrb	r3, [r3, #0]
 8019ef0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019ef2:	7dfb      	ldrb	r3, [r7, #23]
 8019ef4:	2b02      	cmp	r3, #2
 8019ef6:	d801      	bhi.n	8019efc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	e016      	b.n	8019f2a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019efc:	4b0d      	ldr	r3, [pc, #52]	; (8019f34 <RegionEU868ChannelsRemove+0x50>)
 8019efe:	6819      	ldr	r1, [r3, #0]
 8019f00:	7dfa      	ldrb	r2, [r7, #23]
 8019f02:	4613      	mov	r3, r2
 8019f04:	005b      	lsls	r3, r3, #1
 8019f06:	4413      	add	r3, r2
 8019f08:	009b      	lsls	r3, r3, #2
 8019f0a:	440b      	add	r3, r1
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	2300      	movs	r3, #0
 8019f10:	6013      	str	r3, [r2, #0]
 8019f12:	6053      	str	r3, [r2, #4]
 8019f14:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019f16:	4b07      	ldr	r3, [pc, #28]	; (8019f34 <RegionEU868ChannelsRemove+0x50>)
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019f1e:	7df9      	ldrb	r1, [r7, #23]
 8019f20:	2210      	movs	r2, #16
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7fe f91c 	bl	8018160 <RegionCommonChanDisable>
 8019f28:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3718      	adds	r7, #24
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}
 8019f32:	bf00      	nop
 8019f34:	20004048 	.word	0x20004048

08019f38 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019f38:	b590      	push	{r4, r7, lr}
 8019f3a:	b085      	sub	sp, #20
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019f46:	4b20      	ldr	r3, [pc, #128]	; (8019fc8 <RegionEU868SetContinuousWave+0x90>)
 8019f48:	681a      	ldr	r2, [r3, #0]
 8019f4a:	4b20      	ldr	r3, [pc, #128]	; (8019fcc <RegionEU868SetContinuousWave+0x94>)
 8019f4c:	6819      	ldr	r1, [r3, #0]
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	461c      	mov	r4, r3
 8019f54:	4623      	mov	r3, r4
 8019f56:	005b      	lsls	r3, r3, #1
 8019f58:	4423      	add	r3, r4
 8019f5a:	009b      	lsls	r3, r3, #2
 8019f5c:	440b      	add	r3, r1
 8019f5e:	3309      	adds	r3, #9
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	4619      	mov	r1, r3
 8019f64:	460b      	mov	r3, r1
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	440b      	add	r3, r1
 8019f6a:	00db      	lsls	r3, r3, #3
 8019f6c:	4413      	add	r3, r2
 8019f6e:	3302      	adds	r3, #2
 8019f70:	f993 3000 	ldrsb.w	r3, [r3]
 8019f74:	4619      	mov	r1, r3
 8019f76:	f7fe fdce 	bl	8018b16 <RegionCommonLimitTxPower>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019f82:	4b12      	ldr	r3, [pc, #72]	; (8019fcc <RegionEU868SetContinuousWave+0x94>)
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	781b      	ldrb	r3, [r3, #0]
 8019f8a:	4619      	mov	r1, r3
 8019f8c:	460b      	mov	r3, r1
 8019f8e:	005b      	lsls	r3, r3, #1
 8019f90:	440b      	add	r3, r1
 8019f92:	009b      	lsls	r3, r3, #2
 8019f94:	4413      	add	r3, r2
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	6859      	ldr	r1, [r3, #4]
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	689a      	ldr	r2, [r3, #8]
 8019fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7fe fc26 	bl	80187f8 <RegionCommonComputeTxPower>
 8019fac:	4603      	mov	r3, r0
 8019fae:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019fb0:	4b07      	ldr	r3, [pc, #28]	; (8019fd0 <RegionEU868SetContinuousWave+0x98>)
 8019fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	8992      	ldrh	r2, [r2, #12]
 8019fb8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019fbc:	68b8      	ldr	r0, [r7, #8]
 8019fbe:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019fc0:	bf00      	nop
 8019fc2:	3714      	adds	r7, #20
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd90      	pop	{r4, r7, pc}
 8019fc8:	20004044 	.word	0x20004044
 8019fcc:	20004048 	.word	0x20004048
 8019fd0:	080232e4 	.word	0x080232e4

08019fd4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	b085      	sub	sp, #20
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	71fb      	strb	r3, [r7, #7]
 8019fde:	460b      	mov	r3, r1
 8019fe0:	71bb      	strb	r3, [r7, #6]
 8019fe2:	4613      	mov	r3, r2
 8019fe4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019fe6:	79ba      	ldrb	r2, [r7, #6]
 8019fe8:	797b      	ldrb	r3, [r7, #5]
 8019fea:	1ad3      	subs	r3, r2, r3
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	da01      	bge.n	8019ffc <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019ffc:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3714      	adds	r7, #20
 801a002:	46bd      	mov	sp, r7
 801a004:	bc80      	pop	{r7}
 801a006:	4770      	bx	lr

0801a008 <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	603b      	str	r3, [r7, #0]
 801a010:	4603      	mov	r3, r0
 801a012:	71fb      	strb	r3, [r7, #7]
 801a014:	460b      	mov	r3, r1
 801a016:	71bb      	strb	r3, [r7, #6]
 801a018:	4613      	mov	r3, r2
 801a01a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a01c:	79fb      	ldrb	r3, [r7, #7]
 801a01e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a020:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a028:	4611      	mov	r1, r2
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7fe fd73 	bl	8018b16 <RegionCommonLimitTxPower>
 801a030:	4603      	mov	r3, r0
 801a032:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a034:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a038:	2b04      	cmp	r3, #4
 801a03a:	d106      	bne.n	801a04a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a040:	2b02      	cmp	r3, #2
 801a042:	bfb8      	it	lt
 801a044:	2302      	movlt	r3, #2
 801a046:	73fb      	strb	r3, [r7, #15]
 801a048:	e00d      	b.n	801a066 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a04a:	2204      	movs	r2, #4
 801a04c:	2100      	movs	r1, #0
 801a04e:	6838      	ldr	r0, [r7, #0]
 801a050:	f7fe f8ba 	bl	80181c8 <RegionCommonCountChannels>
 801a054:	4603      	mov	r3, r0
 801a056:	2b31      	cmp	r3, #49	; 0x31
 801a058:	d805      	bhi.n	801a066 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a05e:	2b05      	cmp	r3, #5
 801a060:	bfb8      	it	lt
 801a062:	2305      	movlt	r3, #5
 801a064:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a066:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a06a:	4618      	mov	r0, r3
 801a06c:	3710      	adds	r7, #16
 801a06e:	46bd      	mov	sp, r7
 801a070:	bd80      	pop	{r7, pc}
	...

0801a074 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b082      	sub	sp, #8
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a07c:	4b18      	ldr	r3, [pc, #96]	; (801a0e0 <VerifyRfFreq+0x6c>)
 801a07e:	6a1b      	ldr	r3, [r3, #32]
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	4798      	blx	r3
 801a084:	4603      	mov	r3, r0
 801a086:	f083 0301 	eor.w	r3, r3, #1
 801a08a:	b2db      	uxtb	r3, r3
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d001      	beq.n	801a094 <VerifyRfFreq+0x20>
    {
        return false;
 801a090:	2300      	movs	r3, #0
 801a092:	e021      	b.n	801a0d8 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	4a13      	ldr	r2, [pc, #76]	; (801a0e4 <VerifyRfFreq+0x70>)
 801a098:	4293      	cmp	r3, r2
 801a09a:	d910      	bls.n	801a0be <VerifyRfFreq+0x4a>
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	4a12      	ldr	r2, [pc, #72]	; (801a0e8 <VerifyRfFreq+0x74>)
 801a0a0:	4293      	cmp	r3, r2
 801a0a2:	d80c      	bhi.n	801a0be <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a0a4:	687a      	ldr	r2, [r7, #4]
 801a0a6:	4b11      	ldr	r3, [pc, #68]	; (801a0ec <VerifyRfFreq+0x78>)
 801a0a8:	4413      	add	r3, r2
 801a0aa:	4a11      	ldr	r2, [pc, #68]	; (801a0f0 <VerifyRfFreq+0x7c>)
 801a0ac:	fba2 1203 	umull	r1, r2, r2, r3
 801a0b0:	0c92      	lsrs	r2, r2, #18
 801a0b2:	4910      	ldr	r1, [pc, #64]	; (801a0f4 <VerifyRfFreq+0x80>)
 801a0b4:	fb01 f202 	mul.w	r2, r1, r2
 801a0b8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a0ba:	2a00      	cmp	r2, #0
 801a0bc:	d001      	beq.n	801a0c2 <VerifyRfFreq+0x4e>
    {
        return false;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	e00a      	b.n	801a0d8 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	4a0c      	ldr	r2, [pc, #48]	; (801a0f8 <VerifyRfFreq+0x84>)
 801a0c6:	4293      	cmp	r3, r2
 801a0c8:	d903      	bls.n	801a0d2 <VerifyRfFreq+0x5e>
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	4a06      	ldr	r2, [pc, #24]	; (801a0e8 <VerifyRfFreq+0x74>)
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d901      	bls.n	801a0d6 <VerifyRfFreq+0x62>
    {
        return false;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	e000      	b.n	801a0d8 <VerifyRfFreq+0x64>
    }
    return true;
 801a0d6:	2301      	movs	r3, #1
}
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}
 801a0e0:	080232e4 	.word	0x080232e4
 801a0e4:	3708709f 	.word	0x3708709f
 801a0e8:	374886e0 	.word	0x374886e0
 801a0ec:	c8f78f60 	.word	0xc8f78f60
 801a0f0:	6fd91d85 	.word	0x6fd91d85
 801a0f4:	000927c0 	.word	0x000927c0
 801a0f8:	35c8015f 	.word	0x35c8015f

0801a0fc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a0fc:	b590      	push	{r4, r7, lr}
 801a0fe:	b089      	sub	sp, #36	; 0x24
 801a100:	af04      	add	r7, sp, #16
 801a102:	4603      	mov	r3, r0
 801a104:	460a      	mov	r2, r1
 801a106:	71fb      	strb	r3, [r7, #7]
 801a108:	4613      	mov	r3, r2
 801a10a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a10c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a110:	4a0f      	ldr	r2, [pc, #60]	; (801a150 <GetTimeOnAir+0x54>)
 801a112:	5cd3      	ldrb	r3, [r2, r3]
 801a114:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a11a:	490e      	ldr	r1, [pc, #56]	; (801a154 <GetTimeOnAir+0x58>)
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7fe fd0f 	bl	8018b40 <RegionCommonGetBandwidth>
 801a122:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a124:	4b0c      	ldr	r3, [pc, #48]	; (801a158 <GetTimeOnAir+0x5c>)
 801a126:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a128:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a12c:	88bb      	ldrh	r3, [r7, #4]
 801a12e:	b2db      	uxtb	r3, r3
 801a130:	2101      	movs	r1, #1
 801a132:	9103      	str	r1, [sp, #12]
 801a134:	9302      	str	r3, [sp, #8]
 801a136:	2300      	movs	r3, #0
 801a138:	9301      	str	r3, [sp, #4]
 801a13a:	2308      	movs	r3, #8
 801a13c:	9300      	str	r3, [sp, #0]
 801a13e:	2301      	movs	r3, #1
 801a140:	68b9      	ldr	r1, [r7, #8]
 801a142:	2001      	movs	r0, #1
 801a144:	47a0      	blx	r4
 801a146:	4603      	mov	r3, r0
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3714      	adds	r7, #20
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd90      	pop	{r4, r7, pc}
 801a150:	08023260 	.word	0x08023260
 801a154:	08023270 	.word	0x08023270
 801a158:	080232e4 	.word	0x080232e4

0801a15c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b088      	sub	sp, #32
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a164:	2300      	movs	r3, #0
 801a166:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	781b      	ldrb	r3, [r3, #0]
 801a16c:	3b01      	subs	r3, #1
 801a16e:	2b38      	cmp	r3, #56	; 0x38
 801a170:	f200 813c 	bhi.w	801a3ec <RegionUS915GetPhyParam+0x290>
 801a174:	a201      	add	r2, pc, #4	; (adr r2, 801a17c <RegionUS915GetPhyParam+0x20>)
 801a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a17a:	bf00      	nop
 801a17c:	0801a261 	.word	0x0801a261
 801a180:	0801a267 	.word	0x0801a267
 801a184:	0801a3ed 	.word	0x0801a3ed
 801a188:	0801a3ed 	.word	0x0801a3ed
 801a18c:	0801a3ed 	.word	0x0801a3ed
 801a190:	0801a26d 	.word	0x0801a26d
 801a194:	0801a3ed 	.word	0x0801a3ed
 801a198:	0801a2a7 	.word	0x0801a2a7
 801a19c:	0801a3ed 	.word	0x0801a3ed
 801a1a0:	0801a2ad 	.word	0x0801a2ad
 801a1a4:	0801a2b3 	.word	0x0801a2b3
 801a1a8:	0801a2b9 	.word	0x0801a2b9
 801a1ac:	0801a2bf 	.word	0x0801a2bf
 801a1b0:	0801a2cf 	.word	0x0801a2cf
 801a1b4:	0801a2df 	.word	0x0801a2df
 801a1b8:	0801a2e5 	.word	0x0801a2e5
 801a1bc:	0801a2ed 	.word	0x0801a2ed
 801a1c0:	0801a2f5 	.word	0x0801a2f5
 801a1c4:	0801a2fd 	.word	0x0801a2fd
 801a1c8:	0801a305 	.word	0x0801a305
 801a1cc:	0801a30d 	.word	0x0801a30d
 801a1d0:	0801a315 	.word	0x0801a315
 801a1d4:	0801a329 	.word	0x0801a329
 801a1d8:	0801a32f 	.word	0x0801a32f
 801a1dc:	0801a335 	.word	0x0801a335
 801a1e0:	0801a33b 	.word	0x0801a33b
 801a1e4:	0801a347 	.word	0x0801a347
 801a1e8:	0801a353 	.word	0x0801a353
 801a1ec:	0801a359 	.word	0x0801a359
 801a1f0:	0801a361 	.word	0x0801a361
 801a1f4:	0801a367 	.word	0x0801a367
 801a1f8:	0801a36d 	.word	0x0801a36d
 801a1fc:	0801a373 	.word	0x0801a373
 801a200:	0801a273 	.word	0x0801a273
 801a204:	0801a3ed 	.word	0x0801a3ed
 801a208:	0801a3ed 	.word	0x0801a3ed
 801a20c:	0801a3ed 	.word	0x0801a3ed
 801a210:	0801a3ed 	.word	0x0801a3ed
 801a214:	0801a3ed 	.word	0x0801a3ed
 801a218:	0801a3ed 	.word	0x0801a3ed
 801a21c:	0801a3ed 	.word	0x0801a3ed
 801a220:	0801a3ed 	.word	0x0801a3ed
 801a224:	0801a3ed 	.word	0x0801a3ed
 801a228:	0801a3ed 	.word	0x0801a3ed
 801a22c:	0801a3ed 	.word	0x0801a3ed
 801a230:	0801a3ed 	.word	0x0801a3ed
 801a234:	0801a3ed 	.word	0x0801a3ed
 801a238:	0801a37b 	.word	0x0801a37b
 801a23c:	0801a38f 	.word	0x0801a38f
 801a240:	0801a39d 	.word	0x0801a39d
 801a244:	0801a3a3 	.word	0x0801a3a3
 801a248:	0801a3ed 	.word	0x0801a3ed
 801a24c:	0801a3a9 	.word	0x0801a3a9
 801a250:	0801a3bd 	.word	0x0801a3bd
 801a254:	0801a3c3 	.word	0x0801a3c3
 801a258:	0801a3c9 	.word	0x0801a3c9
 801a25c:	0801a3d9 	.word	0x0801a3d9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a260:	2308      	movs	r3, #8
 801a262:	61bb      	str	r3, [r7, #24]
            break;
 801a264:	e0c3      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a266:	2300      	movs	r3, #0
 801a268:	61bb      	str	r3, [r7, #24]
            break;
 801a26a:	e0c0      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a26c:	2300      	movs	r3, #0
 801a26e:	61bb      	str	r3, [r7, #24]
            break;
 801a270:	e0bd      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a278:	733b      	strb	r3, [r7, #12]
 801a27a:	2304      	movs	r3, #4
 801a27c:	737b      	strb	r3, [r7, #13]
 801a27e:	2300      	movs	r3, #0
 801a280:	73bb      	strb	r3, [r7, #14]
 801a282:	2348      	movs	r3, #72	; 0x48
 801a284:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a286:	4b5d      	ldr	r3, [pc, #372]	; (801a3fc <RegionUS915GetPhyParam+0x2a0>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a28e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a290:	4b5a      	ldr	r3, [pc, #360]	; (801a3fc <RegionUS915GetPhyParam+0x2a0>)
 801a292:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a294:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a296:	f107 030c 	add.w	r3, r7, #12
 801a29a:	4618      	mov	r0, r3
 801a29c:	f7fe fbfd 	bl	8018a9a <RegionCommonGetNextLowerTxDr>
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	61bb      	str	r3, [r7, #24]
            break;
 801a2a4:	e0a3      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	61bb      	str	r3, [r7, #24]
            break;
 801a2aa:	e0a0      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	61bb      	str	r3, [r7, #24]
            break;
 801a2b0:	e09d      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a2b2:	2340      	movs	r3, #64	; 0x40
 801a2b4:	61bb      	str	r3, [r7, #24]
            break;
 801a2b6:	e09a      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a2b8:	2320      	movs	r3, #32
 801a2ba:	61bb      	str	r3, [r7, #24]
            break;
 801a2bc:	e097      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a2c4:	461a      	mov	r2, r3
 801a2c6:	4b4e      	ldr	r3, [pc, #312]	; (801a400 <RegionUS915GetPhyParam+0x2a4>)
 801a2c8:	5c9b      	ldrb	r3, [r3, r2]
 801a2ca:	61bb      	str	r3, [r7, #24]
            break;
 801a2cc:	e08f      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a2d4:	461a      	mov	r2, r3
 801a2d6:	4b4b      	ldr	r3, [pc, #300]	; (801a404 <RegionUS915GetPhyParam+0x2a8>)
 801a2d8:	5c9b      	ldrb	r3, [r3, r2]
 801a2da:	61bb      	str	r3, [r7, #24]
            break;
 801a2dc:	e087      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	61bb      	str	r3, [r7, #24]
            break;
 801a2e2:	e084      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a2e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a2e8:	61bb      	str	r3, [r7, #24]
            break;
 801a2ea:	e080      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a2ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a2f0:	61bb      	str	r3, [r7, #24]
            break;
 801a2f2:	e07c      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a2f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a2f8:	61bb      	str	r3, [r7, #24]
            break;
 801a2fa:	e078      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a2fc:	f241 3388 	movw	r3, #5000	; 0x1388
 801a300:	61bb      	str	r3, [r7, #24]
            break;
 801a302:	e074      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a304:	f241 7370 	movw	r3, #6000	; 0x1770
 801a308:	61bb      	str	r3, [r7, #24]
            break;
 801a30a:	e070      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801a30c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a310:	61bb      	str	r3, [r7, #24]
            break;
 801a312:	e06c      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801a314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a318:	483b      	ldr	r0, [pc, #236]	; (801a408 <RegionUS915GetPhyParam+0x2ac>)
 801a31a:	f001 f90b 	bl	801b534 <randr>
 801a31e:	4603      	mov	r3, r0
 801a320:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a324:	61bb      	str	r3, [r7, #24]
            break;
 801a326:	e062      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a328:	2300      	movs	r3, #0
 801a32a:	61bb      	str	r3, [r7, #24]
            break;
 801a32c:	e05f      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a32e:	4b37      	ldr	r3, [pc, #220]	; (801a40c <RegionUS915GetPhyParam+0x2b0>)
 801a330:	61bb      	str	r3, [r7, #24]
            break;
 801a332:	e05c      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a334:	2308      	movs	r3, #8
 801a336:	61bb      	str	r3, [r7, #24]
            break;
 801a338:	e059      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a33a:	4b30      	ldr	r3, [pc, #192]	; (801a3fc <RegionUS915GetPhyParam+0x2a0>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a342:	61bb      	str	r3, [r7, #24]
            break;
 801a344:	e053      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a346:	4b2d      	ldr	r3, [pc, #180]	; (801a3fc <RegionUS915GetPhyParam+0x2a0>)
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a34e:	61bb      	str	r3, [r7, #24]
            break;
 801a350:	e04d      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a352:	2348      	movs	r3, #72	; 0x48
 801a354:	61bb      	str	r3, [r7, #24]
            break;
 801a356:	e04a      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a358:	4b28      	ldr	r3, [pc, #160]	; (801a3fc <RegionUS915GetPhyParam+0x2a0>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	61bb      	str	r3, [r7, #24]
            break;
 801a35e:	e046      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a360:	2300      	movs	r3, #0
 801a362:	61bb      	str	r3, [r7, #24]
            break;
 801a364:	e043      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a366:	2300      	movs	r3, #0
 801a368:	61bb      	str	r3, [r7, #24]
            break;
 801a36a:	e040      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a36c:	4b28      	ldr	r3, [pc, #160]	; (801a410 <RegionUS915GetPhyParam+0x2b4>)
 801a36e:	61bb      	str	r3, [r7, #24]
            break;
 801a370:	e03d      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a372:	f04f 0300 	mov.w	r3, #0
 801a376:	61bb      	str	r3, [r7, #24]
            break;
 801a378:	e039      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	791b      	ldrb	r3, [r3, #4]
 801a37e:	4a25      	ldr	r2, [pc, #148]	; (801a414 <RegionUS915GetPhyParam+0x2b8>)
 801a380:	4922      	ldr	r1, [pc, #136]	; (801a40c <RegionUS915GetPhyParam+0x2b0>)
 801a382:	4618      	mov	r0, r3
 801a384:	f7fd fcfb 	bl	8017d7e <RegionBaseUSCalcDownlinkFrequency>
 801a388:	4603      	mov	r3, r0
 801a38a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a38c:	e02f      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a38e:	2317      	movs	r3, #23
 801a390:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a392:	2305      	movs	r3, #5
 801a394:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a396:	2303      	movs	r3, #3
 801a398:	76bb      	strb	r3, [r7, #26]
            break;
 801a39a:	e028      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a39c:	2308      	movs	r3, #8
 801a39e:	61bb      	str	r3, [r7, #24]
            break;
 801a3a0:	e025      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a3a2:	2308      	movs	r3, #8
 801a3a4:	61bb      	str	r3, [r7, #24]
            break;
 801a3a6:	e022      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	791b      	ldrb	r3, [r3, #4]
 801a3ac:	4a19      	ldr	r2, [pc, #100]	; (801a414 <RegionUS915GetPhyParam+0x2b8>)
 801a3ae:	4917      	ldr	r1, [pc, #92]	; (801a40c <RegionUS915GetPhyParam+0x2b0>)
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f7fd fce4 	bl	8017d7e <RegionBaseUSCalcDownlinkFrequency>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a3ba:	e018      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a3bc:	2308      	movs	r3, #8
 801a3be:	61bb      	str	r3, [r7, #24]
            break;
 801a3c0:	e015      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a3c2:	2308      	movs	r3, #8
 801a3c4:	61bb      	str	r3, [r7, #24]
            break;
 801a3c6:	e012      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a3ce:	461a      	mov	r2, r3
 801a3d0:	4b11      	ldr	r3, [pc, #68]	; (801a418 <RegionUS915GetPhyParam+0x2bc>)
 801a3d2:	5c9b      	ldrb	r3, [r3, r2]
 801a3d4:	61bb      	str	r3, [r7, #24]
            break;
 801a3d6:	e00a      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a3de:	490f      	ldr	r1, [pc, #60]	; (801a41c <RegionUS915GetPhyParam+0x2c0>)
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	f7fe fbad 	bl	8018b40 <RegionCommonGetBandwidth>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	61bb      	str	r3, [r7, #24]
            break;
 801a3ea:	e000      	b.n	801a3ee <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 801a3ec:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	61fb      	str	r3, [r7, #28]
 801a3f2:	69fb      	ldr	r3, [r7, #28]
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	3720      	adds	r7, #32
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bd80      	pop	{r7, pc}
 801a3fc:	20004050 	.word	0x20004050
 801a400:	080232c4 	.word	0x080232c4
 801a404:	080232d4 	.word	0x080232d4
 801a408:	fffffc18 	.word	0xfffffc18
 801a40c:	370870a0 	.word	0x370870a0
 801a410:	4200999a 	.word	0x4200999a
 801a414:	000927c0 	.word	0x000927c0
 801a418:	08023260 	.word	0x08023260
 801a41c:	08023270 	.word	0x08023270

0801a420 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a420:	b590      	push	{r4, r7, lr}
 801a422:	b085      	sub	sp, #20
 801a424:	af02      	add	r7, sp, #8
 801a426:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a428:	4b11      	ldr	r3, [pc, #68]	; (801a470 <RegionUS915SetBandTxDone+0x50>)
 801a42a:	681a      	ldr	r2, [r3, #0]
 801a42c:	4b11      	ldr	r3, [pc, #68]	; (801a474 <RegionUS915SetBandTxDone+0x54>)
 801a42e:	6819      	ldr	r1, [r3, #0]
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	781b      	ldrb	r3, [r3, #0]
 801a434:	4618      	mov	r0, r3
 801a436:	4603      	mov	r3, r0
 801a438:	005b      	lsls	r3, r3, #1
 801a43a:	4403      	add	r3, r0
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	440b      	add	r3, r1
 801a440:	3309      	adds	r3, #9
 801a442:	781b      	ldrb	r3, [r3, #0]
 801a444:	4619      	mov	r1, r3
 801a446:	460b      	mov	r3, r1
 801a448:	005b      	lsls	r3, r3, #1
 801a44a:	440b      	add	r3, r1
 801a44c:	00db      	lsls	r3, r3, #3
 801a44e:	18d0      	adds	r0, r2, r3
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6899      	ldr	r1, [r3, #8]
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	785c      	ldrb	r4, [r3, #1]
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	691a      	ldr	r2, [r3, #16]
 801a45c:	9200      	str	r2, [sp, #0]
 801a45e:	68db      	ldr	r3, [r3, #12]
 801a460:	4622      	mov	r2, r4
 801a462:	f7fd ff03 	bl	801826c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 801a466:	bf00      	nop
 801a468:	370c      	adds	r7, #12
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd90      	pop	{r4, r7, pc}
 801a46e:	bf00      	nop
 801a470:	2000404c 	.word	0x2000404c
 801a474:	20004050 	.word	0x20004050

0801a478 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b08a      	sub	sp, #40	; 0x28
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a480:	2301      	movs	r3, #1
 801a482:	81bb      	strh	r3, [r7, #12]
 801a484:	2300      	movs	r3, #0
 801a486:	73bb      	strb	r3, [r7, #14]
 801a488:	2300      	movs	r3, #0
 801a48a:	613b      	str	r3, [r7, #16]
 801a48c:	2300      	movs	r3, #0
 801a48e:	617b      	str	r3, [r7, #20]
 801a490:	2300      	movs	r3, #0
 801a492:	61bb      	str	r3, [r7, #24]
 801a494:	2300      	movs	r3, #0
 801a496:	61fb      	str	r3, [r7, #28]
 801a498:	2300      	movs	r3, #0
 801a49a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	7a1b      	ldrb	r3, [r3, #8]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d007      	beq.n	801a4b6 <RegionUS915InitDefaults+0x3e>
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	f2c0 8106 	blt.w	801a6b8 <RegionUS915InitDefaults+0x240>
 801a4ac:	3b01      	subs	r3, #1
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	f200 8102 	bhi.w	801a6b8 <RegionUS915InitDefaults+0x240>
 801a4b4:	e0ce      	b.n	801a654 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	f000 80fe 	beq.w	801a6bc <RegionUS915InitDefaults+0x244>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	f000 80f9 	beq.w	801a6bc <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	4a7d      	ldr	r2, [pc, #500]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a4d0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	685b      	ldr	r3, [r3, #4]
 801a4d6:	4a7c      	ldr	r2, [pc, #496]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a4d8:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a4da:	4b7a      	ldr	r3, [pc, #488]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a4e4:	4b77      	ldr	r3, [pc, #476]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a4ee:	4b75      	ldr	r3, [pc, #468]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f107 030c 	add.w	r3, r7, #12
 801a4f8:	2218      	movs	r2, #24
 801a4fa:	4619      	mov	r1, r3
 801a4fc:	f001 f831 	bl	801b562 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a500:	2300      	movs	r3, #0
 801a502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a506:	e02e      	b.n	801a566 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a50c:	4a6f      	ldr	r2, [pc, #444]	; (801a6cc <RegionUS915InitDefaults+0x254>)
 801a50e:	fb03 f202 	mul.w	r2, r3, r2
 801a512:	4b6f      	ldr	r3, [pc, #444]	; (801a6d0 <RegionUS915InitDefaults+0x258>)
 801a514:	4413      	add	r3, r2
 801a516:	4a6c      	ldr	r2, [pc, #432]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a518:	6811      	ldr	r1, [r2, #0]
 801a51a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a51e:	4618      	mov	r0, r3
 801a520:	4613      	mov	r3, r2
 801a522:	005b      	lsls	r3, r3, #1
 801a524:	4413      	add	r3, r2
 801a526:	009b      	lsls	r3, r3, #2
 801a528:	440b      	add	r3, r1
 801a52a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a52c:	4b66      	ldr	r3, [pc, #408]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a52e:	6819      	ldr	r1, [r3, #0]
 801a530:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a534:	4613      	mov	r3, r2
 801a536:	005b      	lsls	r3, r3, #1
 801a538:	4413      	add	r3, r2
 801a53a:	009b      	lsls	r3, r3, #2
 801a53c:	440b      	add	r3, r1
 801a53e:	3308      	adds	r3, #8
 801a540:	2230      	movs	r2, #48	; 0x30
 801a542:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a544:	4b60      	ldr	r3, [pc, #384]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a546:	6819      	ldr	r1, [r3, #0]
 801a548:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a54c:	4613      	mov	r3, r2
 801a54e:	005b      	lsls	r3, r3, #1
 801a550:	4413      	add	r3, r2
 801a552:	009b      	lsls	r3, r3, #2
 801a554:	440b      	add	r3, r1
 801a556:	3309      	adds	r3, #9
 801a558:	2200      	movs	r2, #0
 801a55a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a560:	3301      	adds	r3, #1
 801a562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a56a:	2b3f      	cmp	r3, #63	; 0x3f
 801a56c:	d9cc      	bls.n	801a508 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a56e:	2340      	movs	r3, #64	; 0x40
 801a570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a574:	e02f      	b.n	801a5d6 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a576:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a57a:	3b40      	subs	r3, #64	; 0x40
 801a57c:	4a55      	ldr	r2, [pc, #340]	; (801a6d4 <RegionUS915InitDefaults+0x25c>)
 801a57e:	fb03 f202 	mul.w	r2, r3, r2
 801a582:	4b55      	ldr	r3, [pc, #340]	; (801a6d8 <RegionUS915InitDefaults+0x260>)
 801a584:	4413      	add	r3, r2
 801a586:	4a50      	ldr	r2, [pc, #320]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a588:	6811      	ldr	r1, [r2, #0]
 801a58a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a58e:	4618      	mov	r0, r3
 801a590:	4613      	mov	r3, r2
 801a592:	005b      	lsls	r3, r3, #1
 801a594:	4413      	add	r3, r2
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	440b      	add	r3, r1
 801a59a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a59c:	4b4a      	ldr	r3, [pc, #296]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a59e:	6819      	ldr	r1, [r3, #0]
 801a5a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a5a4:	4613      	mov	r3, r2
 801a5a6:	005b      	lsls	r3, r3, #1
 801a5a8:	4413      	add	r3, r2
 801a5aa:	009b      	lsls	r3, r3, #2
 801a5ac:	440b      	add	r3, r1
 801a5ae:	3308      	adds	r3, #8
 801a5b0:	2244      	movs	r2, #68	; 0x44
 801a5b2:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a5b4:	4b44      	ldr	r3, [pc, #272]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a5b6:	6819      	ldr	r1, [r3, #0]
 801a5b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a5bc:	4613      	mov	r3, r2
 801a5be:	005b      	lsls	r3, r3, #1
 801a5c0:	4413      	add	r3, r2
 801a5c2:	009b      	lsls	r3, r3, #2
 801a5c4:	440b      	add	r3, r1
 801a5c6:	3309      	adds	r3, #9
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5d0:	3301      	adds	r3, #1
 801a5d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a5d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5da:	2b47      	cmp	r3, #71	; 0x47
 801a5dc:	d9cb      	bls.n	801a576 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a5de:	4b3a      	ldr	r3, [pc, #232]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5e6:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a5ea:	4b37      	ldr	r3, [pc, #220]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5f2:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a5f6:	4b34      	ldr	r3, [pc, #208]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5fe:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a602:	4b31      	ldr	r3, [pc, #196]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a60a:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a60e:	4b2e      	ldr	r3, [pc, #184]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	22ff      	movs	r2, #255	; 0xff
 801a614:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a618:	4b2b      	ldr	r3, [pc, #172]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2200      	movs	r2, #0
 801a61e:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a622:	4b29      	ldr	r3, [pc, #164]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a62a:	4b27      	ldr	r3, [pc, #156]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a632:	2206      	movs	r2, #6
 801a634:	4619      	mov	r1, r3
 801a636:	f7fd fdf3 	bl	8018220 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a63a:	4b22      	ldr	r3, [pc, #136]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801a642:	4b21      	ldr	r3, [pc, #132]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a64a:	2206      	movs	r2, #6
 801a64c:	4619      	mov	r1, r3
 801a64e:	f7fd fde7 	bl	8018220 <RegionCommonChanMaskCopy>
            break;
 801a652:	e034      	b.n	801a6be <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a654:	4b1c      	ldr	r3, [pc, #112]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a65c:	4b1a      	ldr	r3, [pc, #104]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a664:	2206      	movs	r2, #6
 801a666:	4619      	mov	r1, r3
 801a668:	f7fd fdda 	bl	8018220 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a66c:	2300      	movs	r3, #0
 801a66e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a672:	e01c      	b.n	801a6ae <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a674:	4b13      	ldr	r3, [pc, #76]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a67c:	3248      	adds	r2, #72	; 0x48
 801a67e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a682:	4b11      	ldr	r3, [pc, #68]	; (801a6c8 <RegionUS915InitDefaults+0x250>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a68a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a68e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a692:	4b0c      	ldr	r3, [pc, #48]	; (801a6c4 <RegionUS915InitDefaults+0x24c>)
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a69a:	4001      	ands	r1, r0
 801a69c:	b289      	uxth	r1, r1
 801a69e:	3248      	adds	r2, #72	; 0x48
 801a6a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a6a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a6ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6b2:	2b05      	cmp	r3, #5
 801a6b4:	d9de      	bls.n	801a674 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a6b6:	e002      	b.n	801a6be <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 801a6b8:	bf00      	nop
 801a6ba:	e000      	b.n	801a6be <RegionUS915InitDefaults+0x246>
                return;
 801a6bc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a6be:	3728      	adds	r7, #40	; 0x28
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	bd80      	pop	{r7, pc}
 801a6c4:	2000404c 	.word	0x2000404c
 801a6c8:	20004050 	.word	0x20004050
 801a6cc:	00030d40 	.word	0x00030d40
 801a6d0:	35c80160 	.word	0x35c80160
 801a6d4:	00186a00 	.word	0x00186a00
 801a6d8:	35d2afc0 	.word	0x35d2afc0

0801a6dc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b082      	sub	sp, #8
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801a6e8:	78fb      	ldrb	r3, [r7, #3]
 801a6ea:	2b0f      	cmp	r3, #15
 801a6ec:	d858      	bhi.n	801a7a0 <RegionUS915Verify+0xc4>
 801a6ee:	a201      	add	r2, pc, #4	; (adr r2, 801a6f4 <RegionUS915Verify+0x18>)
 801a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6f4:	0801a735 	.word	0x0801a735
 801a6f8:	0801a7a1 	.word	0x0801a7a1
 801a6fc:	0801a7a1 	.word	0x0801a7a1
 801a700:	0801a7a1 	.word	0x0801a7a1
 801a704:	0801a7a1 	.word	0x0801a7a1
 801a708:	0801a743 	.word	0x0801a743
 801a70c:	0801a743 	.word	0x0801a743
 801a710:	0801a761 	.word	0x0801a761
 801a714:	0801a7a1 	.word	0x0801a7a1
 801a718:	0801a77f 	.word	0x0801a77f
 801a71c:	0801a77f 	.word	0x0801a77f
 801a720:	0801a7a1 	.word	0x0801a7a1
 801a724:	0801a7a1 	.word	0x0801a7a1
 801a728:	0801a7a1 	.word	0x0801a7a1
 801a72c:	0801a7a1 	.word	0x0801a7a1
 801a730:	0801a79d 	.word	0x0801a79d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	4618      	mov	r0, r3
 801a73a:	f7ff fc9b 	bl	801a074 <VerifyRfFreq>
 801a73e:	4603      	mov	r3, r0
 801a740:	e02f      	b.n	801a7a2 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	f993 3000 	ldrsb.w	r3, [r3]
 801a748:	2204      	movs	r2, #4
 801a74a:	2100      	movs	r1, #0
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7fd fcea 	bl	8018126 <RegionCommonValueInRange>
 801a752:	4603      	mov	r3, r0
 801a754:	2b00      	cmp	r3, #0
 801a756:	bf14      	ite	ne
 801a758:	2301      	movne	r3, #1
 801a75a:	2300      	moveq	r3, #0
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	e020      	b.n	801a7a2 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f993 3000 	ldrsb.w	r3, [r3]
 801a766:	220d      	movs	r2, #13
 801a768:	2108      	movs	r1, #8
 801a76a:	4618      	mov	r0, r3
 801a76c:	f7fd fcdb 	bl	8018126 <RegionCommonValueInRange>
 801a770:	4603      	mov	r3, r0
 801a772:	2b00      	cmp	r3, #0
 801a774:	bf14      	ite	ne
 801a776:	2301      	movne	r3, #1
 801a778:	2300      	moveq	r3, #0
 801a77a:	b2db      	uxtb	r3, r3
 801a77c:	e011      	b.n	801a7a2 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	f993 3000 	ldrsb.w	r3, [r3]
 801a784:	220e      	movs	r2, #14
 801a786:	2100      	movs	r1, #0
 801a788:	4618      	mov	r0, r3
 801a78a:	f7fd fccc 	bl	8018126 <RegionCommonValueInRange>
 801a78e:	4603      	mov	r3, r0
 801a790:	2b00      	cmp	r3, #0
 801a792:	bf14      	ite	ne
 801a794:	2301      	movne	r3, #1
 801a796:	2300      	moveq	r3, #0
 801a798:	b2db      	uxtb	r3, r3
 801a79a:	e002      	b.n	801a7a2 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801a79c:	2300      	movs	r3, #0
 801a79e:	e000      	b.n	801a7a2 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 801a7a0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	3708      	adds	r7, #8
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
 801a7aa:	bf00      	nop

0801a7ac <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b085      	sub	sp, #20
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	791b      	ldrb	r3, [r3, #4]
 801a7b8:	2b10      	cmp	r3, #16
 801a7ba:	d162      	bne.n	801a882 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	330f      	adds	r3, #15
 801a7c2:	781b      	ldrb	r3, [r3, #0]
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d15e      	bne.n	801a886 <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	73fb      	strb	r3, [r7, #15]
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	73bb      	strb	r3, [r7, #14]
 801a7d0:	e053      	b.n	801a87a <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681a      	ldr	r2, [r3, #0]
 801a7d6:	7bbb      	ldrb	r3, [r7, #14]
 801a7d8:	4413      	add	r3, r2
 801a7da:	7819      	ldrb	r1, [r3, #0]
 801a7dc:	4b2c      	ldr	r3, [pc, #176]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	7bfa      	ldrb	r2, [r7, #15]
 801a7e2:	b289      	uxth	r1, r1
 801a7e4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801a7ec:	4b28      	ldr	r3, [pc, #160]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	7bfa      	ldrb	r2, [r7, #15]
 801a7f2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7f6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681a      	ldr	r2, [r3, #0]
 801a7fe:	7bbb      	ldrb	r3, [r7, #14]
 801a800:	3301      	adds	r3, #1
 801a802:	4413      	add	r3, r2
 801a804:	781b      	ldrb	r3, [r3, #0]
 801a806:	b29b      	uxth	r3, r3
 801a808:	021b      	lsls	r3, r3, #8
 801a80a:	b299      	uxth	r1, r3
 801a80c:	4b20      	ldr	r3, [pc, #128]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	7bfa      	ldrb	r2, [r7, #15]
 801a812:	4301      	orrs	r1, r0
 801a814:	b289      	uxth	r1, r1
 801a816:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a81a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801a81e:	7bfb      	ldrb	r3, [r7, #15]
 801a820:	2b04      	cmp	r3, #4
 801a822:	d10f      	bne.n	801a844 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801a824:	4b1a      	ldr	r3, [pc, #104]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	7bfa      	ldrb	r2, [r7, #15]
 801a82a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a82e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a832:	4b17      	ldr	r3, [pc, #92]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	7bfa      	ldrb	r2, [r7, #15]
 801a838:	b2c9      	uxtb	r1, r1
 801a83a:	b289      	uxth	r1, r1
 801a83c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801a844:	4b13      	ldr	r3, [pc, #76]	; (801a894 <RegionUS915ApplyCFList+0xe8>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	7bfa      	ldrb	r2, [r7, #15]
 801a84a:	3248      	adds	r2, #72	; 0x48
 801a84c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a850:	4b0f      	ldr	r3, [pc, #60]	; (801a890 <RegionUS915ApplyCFList+0xe4>)
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	7bfa      	ldrb	r2, [r7, #15]
 801a856:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a85a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a85e:	4b0d      	ldr	r3, [pc, #52]	; (801a894 <RegionUS915ApplyCFList+0xe8>)
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	7bfa      	ldrb	r2, [r7, #15]
 801a864:	4001      	ands	r1, r0
 801a866:	b289      	uxth	r1, r1
 801a868:	3248      	adds	r2, #72	; 0x48
 801a86a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a86e:	7bfb      	ldrb	r3, [r7, #15]
 801a870:	3301      	adds	r3, #1
 801a872:	73fb      	strb	r3, [r7, #15]
 801a874:	7bbb      	ldrb	r3, [r7, #14]
 801a876:	3302      	adds	r3, #2
 801a878:	73bb      	strb	r3, [r7, #14]
 801a87a:	7bfb      	ldrb	r3, [r7, #15]
 801a87c:	2b04      	cmp	r3, #4
 801a87e:	d9a8      	bls.n	801a7d2 <RegionUS915ApplyCFList+0x26>
 801a880:	e002      	b.n	801a888 <RegionUS915ApplyCFList+0xdc>
        return;
 801a882:	bf00      	nop
 801a884:	e000      	b.n	801a888 <RegionUS915ApplyCFList+0xdc>
        return;
 801a886:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801a888:	3714      	adds	r7, #20
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bc80      	pop	{r7}
 801a88e:	4770      	bx	lr
 801a890:	20004050 	.word	0x20004050
 801a894:	2000404c 	.word	0x2000404c

0801a898 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b084      	sub	sp, #16
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	2204      	movs	r2, #4
 801a8a6:	2100      	movs	r1, #0
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7fd fc8d 	bl	80181c8 <RegionCommonCountChannels>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801a8b2:	7bbb      	ldrb	r3, [r7, #14]
 801a8b4:	2b01      	cmp	r3, #1
 801a8b6:	d804      	bhi.n	801a8c2 <RegionUS915ChanMaskSet+0x2a>
 801a8b8:	7bbb      	ldrb	r3, [r7, #14]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d001      	beq.n	801a8c2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801a8be:	2300      	movs	r3, #0
 801a8c0:	e04c      	b.n	801a95c <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	791b      	ldrb	r3, [r3, #4]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d002      	beq.n	801a8d0 <RegionUS915ChanMaskSet+0x38>
 801a8ca:	2b01      	cmp	r3, #1
 801a8cc:	d038      	beq.n	801a940 <RegionUS915ChanMaskSet+0xa8>
 801a8ce:	e042      	b.n	801a956 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a8d0:	4b24      	ldr	r3, [pc, #144]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	2206      	movs	r2, #6
 801a8de:	4619      	mov	r1, r3
 801a8e0:	f7fd fc9e 	bl	8018220 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801a8e4:	4b1f      	ldr	r3, [pc, #124]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801a8ec:	4b1d      	ldr	r3, [pc, #116]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	b2d2      	uxtb	r2, r2
 801a8f2:	b292      	uxth	r2, r2
 801a8f4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a8f8:	4b1a      	ldr	r3, [pc, #104]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a902:	2300      	movs	r3, #0
 801a904:	73fb      	strb	r3, [r7, #15]
 801a906:	e017      	b.n	801a938 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a908:	4b17      	ldr	r3, [pc, #92]	; (801a968 <RegionUS915ChanMaskSet+0xd0>)
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	7bfa      	ldrb	r2, [r7, #15]
 801a90e:	3248      	adds	r2, #72	; 0x48
 801a910:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a914:	4b13      	ldr	r3, [pc, #76]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	7bfa      	ldrb	r2, [r7, #15]
 801a91a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a91e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a922:	4b11      	ldr	r3, [pc, #68]	; (801a968 <RegionUS915ChanMaskSet+0xd0>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	7bfa      	ldrb	r2, [r7, #15]
 801a928:	4001      	ands	r1, r0
 801a92a:	b289      	uxth	r1, r1
 801a92c:	3248      	adds	r2, #72	; 0x48
 801a92e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a932:	7bfb      	ldrb	r3, [r7, #15]
 801a934:	3301      	adds	r3, #1
 801a936:	73fb      	strb	r3, [r7, #15]
 801a938:	7bfb      	ldrb	r3, [r7, #15]
 801a93a:	2b05      	cmp	r3, #5
 801a93c:	d9e4      	bls.n	801a908 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801a93e:	e00c      	b.n	801a95a <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a940:	4b08      	ldr	r3, [pc, #32]	; (801a964 <RegionUS915ChanMaskSet+0xcc>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	2206      	movs	r2, #6
 801a94e:	4619      	mov	r1, r3
 801a950:	f7fd fc66 	bl	8018220 <RegionCommonChanMaskCopy>
            break;
 801a954:	e001      	b.n	801a95a <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 801a956:	2300      	movs	r3, #0
 801a958:	e000      	b.n	801a95c <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801a95a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801a95c:	4618      	mov	r0, r3
 801a95e:	3710      	adds	r7, #16
 801a960:	46bd      	mov	sp, r7
 801a962:	bd80      	pop	{r7, pc}
 801a964:	20004050 	.word	0x20004050
 801a968:	2000404c 	.word	0x2000404c

0801a96c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b088      	sub	sp, #32
 801a970:	af02      	add	r7, sp, #8
 801a972:	60ba      	str	r2, [r7, #8]
 801a974:	607b      	str	r3, [r7, #4]
 801a976:	4603      	mov	r3, r0
 801a978:	73fb      	strb	r3, [r7, #15]
 801a97a:	460b      	mov	r3, r1
 801a97c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801a97e:	2300      	movs	r3, #0
 801a980:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801a982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a986:	2b0d      	cmp	r3, #13
 801a988:	bfa8      	it	ge
 801a98a:	230d      	movge	r3, #13
 801a98c:	b25a      	sxtb	r2, r3
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a998:	4916      	ldr	r1, [pc, #88]	; (801a9f4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7fe f8d0 	bl	8018b40 <RegionCommonGetBandwidth>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	b2da      	uxtb	r2, r3
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a9ae:	461a      	mov	r2, r3
 801a9b0:	4b11      	ldr	r3, [pc, #68]	; (801a9f8 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801a9b2:	5c9a      	ldrb	r2, [r3, r2]
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a9ba:	4619      	mov	r1, r3
 801a9bc:	4b0d      	ldr	r3, [pc, #52]	; (801a9f4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a9be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	4610      	mov	r0, r2
 801a9c6:	f7fd fe39 	bl	801863c <RegionCommonComputeSymbolTimeLoRa>
 801a9ca:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a9cc:	4b0b      	ldr	r3, [pc, #44]	; (801a9fc <RegionUS915ComputeRxWindowParameters+0x90>)
 801a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9d0:	4798      	blx	r3
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	3308      	adds	r3, #8
 801a9d6:	687a      	ldr	r2, [r7, #4]
 801a9d8:	320c      	adds	r2, #12
 801a9da:	7bb9      	ldrb	r1, [r7, #14]
 801a9dc:	9201      	str	r2, [sp, #4]
 801a9de:	9300      	str	r3, [sp, #0]
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	68ba      	ldr	r2, [r7, #8]
 801a9e4:	6978      	ldr	r0, [r7, #20]
 801a9e6:	f7fd fe4f 	bl	8018688 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801a9ea:	bf00      	nop
 801a9ec:	3718      	adds	r7, #24
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}
 801a9f2:	bf00      	nop
 801a9f4:	08023270 	.word	0x08023270
 801a9f8:	08023260 	.word	0x08023260
 801a9fc:	080232e4 	.word	0x080232e4

0801aa00 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801aa00:	b590      	push	{r4, r7, lr}
 801aa02:	b091      	sub	sp, #68	; 0x44
 801aa04:	af0a      	add	r7, sp, #40	; 0x28
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	785b      	ldrb	r3, [r3, #1]
 801aa0e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801aa10:	2300      	movs	r3, #0
 801aa12:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801aa14:	2300      	movs	r3, #0
 801aa16:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	685b      	ldr	r3, [r3, #4]
 801aa1c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801aa1e:	4b34      	ldr	r3, [pc, #208]	; (801aaf0 <RegionUS915RxConfig+0xf0>)
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	4798      	blx	r3
 801aa24:	4603      	mov	r3, r0
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d001      	beq.n	801aa2e <RegionUS915RxConfig+0x2e>
    {
        return false;
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	e05c      	b.n	801aae8 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	7cdb      	ldrb	r3, [r3, #19]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d109      	bne.n	801aa4a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	781b      	ldrb	r3, [r3, #0]
 801aa3a:	f003 0307 	and.w	r3, r3, #7
 801aa3e:	4a2d      	ldr	r2, [pc, #180]	; (801aaf4 <RegionUS915RxConfig+0xf4>)
 801aa40:	fb03 f202 	mul.w	r2, r3, r2
 801aa44:	4b2c      	ldr	r3, [pc, #176]	; (801aaf8 <RegionUS915RxConfig+0xf8>)
 801aa46:	4413      	add	r3, r2
 801aa48:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801aa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa4e:	4a2b      	ldr	r2, [pc, #172]	; (801aafc <RegionUS915RxConfig+0xfc>)
 801aa50:	5cd3      	ldrb	r3, [r2, r3]
 801aa52:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801aa54:	4b26      	ldr	r3, [pc, #152]	; (801aaf0 <RegionUS915RxConfig+0xf0>)
 801aa56:	68db      	ldr	r3, [r3, #12]
 801aa58:	6938      	ldr	r0, [r7, #16]
 801aa5a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801aa5c:	4b24      	ldr	r3, [pc, #144]	; (801aaf0 <RegionUS915RxConfig+0xf0>)
 801aa5e:	699c      	ldr	r4, [r3, #24]
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	789b      	ldrb	r3, [r3, #2]
 801aa64:	4618      	mov	r0, r3
 801aa66:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	689b      	ldr	r3, [r3, #8]
 801aa6e:	b29b      	uxth	r3, r3
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	7c92      	ldrb	r2, [r2, #18]
 801aa74:	9209      	str	r2, [sp, #36]	; 0x24
 801aa76:	2201      	movs	r2, #1
 801aa78:	9208      	str	r2, [sp, #32]
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	9207      	str	r2, [sp, #28]
 801aa7e:	2200      	movs	r2, #0
 801aa80:	9206      	str	r2, [sp, #24]
 801aa82:	2200      	movs	r2, #0
 801aa84:	9205      	str	r2, [sp, #20]
 801aa86:	2200      	movs	r2, #0
 801aa88:	9204      	str	r2, [sp, #16]
 801aa8a:	2200      	movs	r2, #0
 801aa8c:	9203      	str	r2, [sp, #12]
 801aa8e:	9302      	str	r3, [sp, #8]
 801aa90:	2308      	movs	r3, #8
 801aa92:	9301      	str	r3, [sp, #4]
 801aa94:	2300      	movs	r3, #0
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	2301      	movs	r3, #1
 801aa9a:	460a      	mov	r2, r1
 801aa9c:	4601      	mov	r1, r0
 801aa9e:	2001      	movs	r0, #1
 801aaa0:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	7c5b      	ldrb	r3, [r3, #17]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d005      	beq.n	801aab6 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801aaaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aaae:	4a14      	ldr	r2, [pc, #80]	; (801ab00 <RegionUS915RxConfig+0x100>)
 801aab0:	5cd3      	ldrb	r3, [r2, r3]
 801aab2:	75fb      	strb	r3, [r7, #23]
 801aab4:	e004      	b.n	801aac0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801aab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aaba:	4a12      	ldr	r2, [pc, #72]	; (801ab04 <RegionUS915RxConfig+0x104>)
 801aabc:	5cd3      	ldrb	r3, [r2, r3]
 801aabe:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801aac0:	4b0b      	ldr	r3, [pc, #44]	; (801aaf0 <RegionUS915RxConfig+0xf0>)
 801aac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aac4:	7dfa      	ldrb	r2, [r7, #23]
 801aac6:	320d      	adds	r2, #13
 801aac8:	b2d2      	uxtb	r2, r2
 801aaca:	4611      	mov	r1, r2
 801aacc:	2001      	movs	r0, #1
 801aace:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	7cdb      	ldrb	r3, [r3, #19]
 801aad4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801aad8:	6939      	ldr	r1, [r7, #16]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7fe f84e 	bl	8018b7c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	7bfa      	ldrb	r2, [r7, #15]
 801aae4:	701a      	strb	r2, [r3, #0]
    return true;
 801aae6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801aae8:	4618      	mov	r0, r3
 801aaea:	371c      	adds	r7, #28
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd90      	pop	{r4, r7, pc}
 801aaf0:	080232e4 	.word	0x080232e4
 801aaf4:	000927c0 	.word	0x000927c0
 801aaf8:	370870a0 	.word	0x370870a0
 801aafc:	08023260 	.word	0x08023260
 801ab00:	080232d4 	.word	0x080232d4
 801ab04:	080232c4 	.word	0x080232c4

0801ab08 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ab08:	b590      	push	{r4, r7, lr}
 801ab0a:	b093      	sub	sp, #76	; 0x4c
 801ab0c:	af0a      	add	r7, sp, #40	; 0x28
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	60b9      	str	r1, [r7, #8]
 801ab12:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ab1a:	461a      	mov	r2, r3
 801ab1c:	4b4a      	ldr	r3, [pc, #296]	; (801ac48 <RegionUS915TxConfig+0x140>)
 801ab1e:	5c9b      	ldrb	r3, [r3, r2]
 801ab20:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ab28:	4b48      	ldr	r3, [pc, #288]	; (801ac4c <RegionUS915TxConfig+0x144>)
 801ab2a:	681a      	ldr	r2, [r3, #0]
 801ab2c:	4b48      	ldr	r3, [pc, #288]	; (801ac50 <RegionUS915TxConfig+0x148>)
 801ab2e:	6819      	ldr	r1, [r3, #0]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	461c      	mov	r4, r3
 801ab36:	4623      	mov	r3, r4
 801ab38:	005b      	lsls	r3, r3, #1
 801ab3a:	4423      	add	r3, r4
 801ab3c:	009b      	lsls	r3, r3, #2
 801ab3e:	440b      	add	r3, r1
 801ab40:	3309      	adds	r3, #9
 801ab42:	781b      	ldrb	r3, [r3, #0]
 801ab44:	4619      	mov	r1, r3
 801ab46:	460b      	mov	r3, r1
 801ab48:	005b      	lsls	r3, r3, #1
 801ab4a:	440b      	add	r3, r1
 801ab4c:	00db      	lsls	r3, r3, #3
 801ab4e:	4413      	add	r3, r2
 801ab50:	3302      	adds	r3, #2
 801ab52:	f993 1000 	ldrsb.w	r1, [r3]
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ab5c:	4b3c      	ldr	r3, [pc, #240]	; (801ac50 <RegionUS915TxConfig+0x148>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ab64:	f7ff fa50 	bl	801a008 <LimitTxPower>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ab72:	4938      	ldr	r1, [pc, #224]	; (801ac54 <RegionUS915TxConfig+0x14c>)
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7fd ffe3 	bl	8018b40 <RegionCommonGetBandwidth>
 801ab7a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ab80:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ab84:	f04f 0200 	mov.w	r2, #0
 801ab88:	4933      	ldr	r1, [pc, #204]	; (801ac58 <RegionUS915TxConfig+0x150>)
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7fd fe34 	bl	80187f8 <RegionCommonComputeTxPower>
 801ab90:	4603      	mov	r3, r0
 801ab92:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ab94:	4b31      	ldr	r3, [pc, #196]	; (801ac5c <RegionUS915TxConfig+0x154>)
 801ab96:	68da      	ldr	r2, [r3, #12]
 801ab98:	4b2d      	ldr	r3, [pc, #180]	; (801ac50 <RegionUS915TxConfig+0x148>)
 801ab9a:	6819      	ldr	r1, [r3, #0]
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	781b      	ldrb	r3, [r3, #0]
 801aba0:	4618      	mov	r0, r3
 801aba2:	4603      	mov	r3, r0
 801aba4:	005b      	lsls	r3, r3, #1
 801aba6:	4403      	add	r3, r0
 801aba8:	009b      	lsls	r3, r3, #2
 801abaa:	440b      	add	r3, r1
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	4618      	mov	r0, r3
 801abb0:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801abb2:	4b2a      	ldr	r3, [pc, #168]	; (801ac5c <RegionUS915TxConfig+0x154>)
 801abb4:	69dc      	ldr	r4, [r3, #28]
 801abb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801abba:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801abbe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801abc2:	9208      	str	r2, [sp, #32]
 801abc4:	2200      	movs	r2, #0
 801abc6:	9207      	str	r2, [sp, #28]
 801abc8:	2200      	movs	r2, #0
 801abca:	9206      	str	r2, [sp, #24]
 801abcc:	2200      	movs	r2, #0
 801abce:	9205      	str	r2, [sp, #20]
 801abd0:	2201      	movs	r2, #1
 801abd2:	9204      	str	r2, [sp, #16]
 801abd4:	2200      	movs	r2, #0
 801abd6:	9203      	str	r2, [sp, #12]
 801abd8:	2208      	movs	r2, #8
 801abda:	9202      	str	r2, [sp, #8]
 801abdc:	2201      	movs	r2, #1
 801abde:	9201      	str	r2, [sp, #4]
 801abe0:	9300      	str	r3, [sp, #0]
 801abe2:	69bb      	ldr	r3, [r7, #24]
 801abe4:	2200      	movs	r2, #0
 801abe6:	2001      	movs	r0, #1
 801abe8:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801abea:	4b19      	ldr	r3, [pc, #100]	; (801ac50 <RegionUS915TxConfig+0x148>)
 801abec:	681a      	ldr	r2, [r3, #0]
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	781b      	ldrb	r3, [r3, #0]
 801abf2:	4619      	mov	r1, r3
 801abf4:	460b      	mov	r3, r1
 801abf6:	005b      	lsls	r3, r3, #1
 801abf8:	440b      	add	r3, r1
 801abfa:	009b      	lsls	r3, r3, #2
 801abfc:	4413      	add	r3, r2
 801abfe:	681a      	ldr	r2, [r3, #0]
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ac06:	4619      	mov	r1, r3
 801ac08:	4610      	mov	r0, r2
 801ac0a:	f7fd fff5 	bl	8018bf8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801ac0e:	4b13      	ldr	r3, [pc, #76]	; (801ac5c <RegionUS915TxConfig+0x154>)
 801ac10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac12:	68fa      	ldr	r2, [r7, #12]
 801ac14:	8992      	ldrh	r2, [r2, #12]
 801ac16:	b2d2      	uxtb	r2, r2
 801ac18:	4611      	mov	r1, r2
 801ac1a:	2001      	movs	r0, #1
 801ac1c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	899b      	ldrh	r3, [r3, #12]
 801ac28:	4619      	mov	r1, r3
 801ac2a:	4610      	mov	r0, r2
 801ac2c:	f7ff fa66 	bl	801a0fc <GetTimeOnAir>
 801ac30:	4602      	mov	r2, r0
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801ac36:	68bb      	ldr	r3, [r7, #8]
 801ac38:	7fba      	ldrb	r2, [r7, #30]
 801ac3a:	701a      	strb	r2, [r3, #0]
    return true;
 801ac3c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac3e:	4618      	mov	r0, r3
 801ac40:	3724      	adds	r7, #36	; 0x24
 801ac42:	46bd      	mov	sp, r7
 801ac44:	bd90      	pop	{r4, r7, pc}
 801ac46:	bf00      	nop
 801ac48:	08023260 	.word	0x08023260
 801ac4c:	2000404c 	.word	0x2000404c
 801ac50:	20004050 	.word	0x20004050
 801ac54:	08023270 	.word	0x08023270
 801ac58:	41f00000 	.word	0x41f00000
 801ac5c:	080232e4 	.word	0x080232e4

0801ac60 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801ac60:	b590      	push	{r4, r7, lr}
 801ac62:	b097      	sub	sp, #92	; 0x5c
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	60f8      	str	r0, [r7, #12]
 801ac68:	60b9      	str	r1, [r7, #8]
 801ac6a:	607a      	str	r2, [r7, #4]
 801ac6c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801ac6e:	2307      	movs	r3, #7
 801ac70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801ac74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac78:	2200      	movs	r2, #0
 801ac7a:	601a      	str	r2, [r3, #0]
 801ac7c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801ac84:	2300      	movs	r3, #0
 801ac86:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801ac8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac8e:	2200      	movs	r2, #0
 801ac90:	601a      	str	r2, [r3, #0]
 801ac92:	605a      	str	r2, [r3, #4]
 801ac94:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801ac96:	4b97      	ldr	r3, [pc, #604]	; (801aef4 <RegionUS915LinkAdrReq+0x294>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801ac9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801aca2:	2206      	movs	r2, #6
 801aca4:	4618      	mov	r0, r3
 801aca6:	f7fd fabb 	bl	8018220 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801acaa:	e11b      	b.n	801aee4 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	685a      	ldr	r2, [r3, #4]
 801acb0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801acb4:	4413      	add	r3, r2
 801acb6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801acba:	4611      	mov	r1, r2
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7fd fbf3 	bl	80184a8 <RegionCommonParseLinkAdrReq>
 801acc2:	4603      	mov	r3, r0
 801acc4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801acc8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801accc:	2b00      	cmp	r3, #0
 801acce:	f000 8113 	beq.w	801aef8 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801acd2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801acd6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801acda:	4413      	add	r3, r2
 801acdc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801ace0:	2307      	movs	r3, #7
 801ace2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801ace6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801acea:	2b06      	cmp	r3, #6
 801acec:	d116      	bne.n	801ad1c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801acee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801acf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801acfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801ad06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ad0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad1a:	e0e3      	b.n	801aee4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801ad1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad20:	2b07      	cmp	r3, #7
 801ad22:	d112      	bne.n	801ad4a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801ad24:	2300      	movs	r3, #0
 801ad26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801ad2a:	2300      	movs	r3, #0
 801ad2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801ad30:	2300      	movs	r3, #0
 801ad32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801ad36:	2300      	movs	r3, #0
 801ad38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ad3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad40:	b2db      	uxtb	r3, r3
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad48:	e0cc      	b.n	801aee4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801ad4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad4e:	2b05      	cmp	r3, #5
 801ad50:	f040 80bf 	bne.w	801aed2 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801ad54:	2301      	movs	r3, #1
 801ad56:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801ad60:	2300      	movs	r3, #0
 801ad62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ad66:	e0ae      	b.n	801aec6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801ad68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad6c:	b2da      	uxtb	r2, r3
 801ad6e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ad72:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad76:	fa01 f303 	lsl.w	r3, r1, r3
 801ad7a:	4013      	ands	r3, r2
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d04d      	beq.n	801ae1c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801ad80:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad84:	f003 0301 	and.w	r3, r3, #1
 801ad88:	b2db      	uxtb	r3, r3
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d120      	bne.n	801add0 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801ad8e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad92:	005b      	lsls	r3, r3, #1
 801ad94:	3358      	adds	r3, #88	; 0x58
 801ad96:	443b      	add	r3, r7
 801ad98:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ad9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ada0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801ada4:	b292      	uxth	r2, r2
 801ada6:	005b      	lsls	r3, r3, #1
 801ada8:	3358      	adds	r3, #88	; 0x58
 801adaa:	443b      	add	r3, r7
 801adac:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801adb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801adb4:	b21a      	sxth	r2, r3
 801adb6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801adba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801adbe:	fa01 f303 	lsl.w	r3, r1, r3
 801adc2:	b21b      	sxth	r3, r3
 801adc4:	4313      	orrs	r3, r2
 801adc6:	b21b      	sxth	r3, r3
 801adc8:	b29b      	uxth	r3, r3
 801adca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801adce:	e075      	b.n	801aebc <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801add0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801add4:	005b      	lsls	r3, r3, #1
 801add6:	3358      	adds	r3, #88	; 0x58
 801add8:	443b      	add	r3, r7
 801adda:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801adde:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ade2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801ade6:	b292      	uxth	r2, r2
 801ade8:	005b      	lsls	r3, r3, #1
 801adea:	3358      	adds	r3, #88	; 0x58
 801adec:	443b      	add	r3, r7
 801adee:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801adf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801adf6:	b21a      	sxth	r2, r3
 801adf8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801adfc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae00:	fa01 f303 	lsl.w	r3, r1, r3
 801ae04:	b21b      	sxth	r3, r3
 801ae06:	4313      	orrs	r3, r2
 801ae08:	b21b      	sxth	r3, r3
 801ae0a:	b29b      	uxth	r3, r3
 801ae0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801ae10:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae14:	3301      	adds	r3, #1
 801ae16:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801ae1a:	e04f      	b.n	801aebc <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801ae1c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae20:	f003 0301 	and.w	r3, r3, #1
 801ae24:	b2db      	uxtb	r3, r3
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d122      	bne.n	801ae70 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801ae2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae2e:	005b      	lsls	r3, r3, #1
 801ae30:	3358      	adds	r3, #88	; 0x58
 801ae32:	443b      	add	r3, r7
 801ae34:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ae40:	b292      	uxth	r2, r2
 801ae42:	005b      	lsls	r3, r3, #1
 801ae44:	3358      	adds	r3, #88	; 0x58
 801ae46:	443b      	add	r3, r7
 801ae48:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae50:	b21a      	sxth	r2, r3
 801ae52:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 801ae5e:	b21b      	sxth	r3, r3
 801ae60:	43db      	mvns	r3, r3
 801ae62:	b21b      	sxth	r3, r3
 801ae64:	4013      	ands	r3, r2
 801ae66:	b21b      	sxth	r3, r3
 801ae68:	b29b      	uxth	r3, r3
 801ae6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ae6e:	e025      	b.n	801aebc <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801ae70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	3358      	adds	r3, #88	; 0x58
 801ae78:	443b      	add	r3, r7
 801ae7a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae7e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae82:	b2d2      	uxtb	r2, r2
 801ae84:	b292      	uxth	r2, r2
 801ae86:	005b      	lsls	r3, r3, #1
 801ae88:	3358      	adds	r3, #88	; 0x58
 801ae8a:	443b      	add	r3, r7
 801ae8c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae94:	b21a      	sxth	r2, r3
 801ae96:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae9a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 801aea2:	b21b      	sxth	r3, r3
 801aea4:	43db      	mvns	r3, r3
 801aea6:	b21b      	sxth	r3, r3
 801aea8:	4013      	ands	r3, r2
 801aeaa:	b21b      	sxth	r3, r3
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801aeb2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801aebc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801aec0:	3301      	adds	r3, #1
 801aec2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aec6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801aeca:	2b07      	cmp	r3, #7
 801aecc:	f67f af4c 	bls.w	801ad68 <RegionUS915LinkAdrReq+0x108>
 801aed0:	e008      	b.n	801aee4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801aed2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801aed6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801aeda:	005b      	lsls	r3, r3, #1
 801aedc:	3358      	adds	r3, #88	; 0x58
 801aede:	443b      	add	r3, r7
 801aee0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	7a1b      	ldrb	r3, [r3, #8]
 801aee8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801aeec:	429a      	cmp	r2, r3
 801aeee:	f4ff aedd 	bcc.w	801acac <RegionUS915LinkAdrReq+0x4c>
 801aef2:	e002      	b.n	801aefa <RegionUS915LinkAdrReq+0x29a>
 801aef4:	20004050 	.word	0x20004050
            break; // break loop, since no more request has been found
 801aef8:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801aefa:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801aefe:	2b03      	cmp	r3, #3
 801af00:	dc0f      	bgt.n	801af22 <RegionUS915LinkAdrReq+0x2c2>
 801af02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af06:	2204      	movs	r2, #4
 801af08:	2100      	movs	r1, #0
 801af0a:	4618      	mov	r0, r3
 801af0c:	f7fd f95c 	bl	80181c8 <RegionCommonCountChannels>
 801af10:	4603      	mov	r3, r0
 801af12:	2b01      	cmp	r3, #1
 801af14:	d805      	bhi.n	801af22 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801af16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af1a:	f023 0301 	bic.w	r3, r3, #1
 801af1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801af22:	2302      	movs	r3, #2
 801af24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	7a5b      	ldrb	r3, [r3, #9]
 801af2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801af30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801af34:	4618      	mov	r0, r3
 801af36:	f7ff f911 	bl	801a15c <RegionUS915GetPhyParam>
 801af3a:	4603      	mov	r3, r0
 801af3c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801af3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af42:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	7a9b      	ldrb	r3, [r3, #10]
 801af48:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801af4a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801af4e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801af50:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801af54:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801af56:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801af5a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801af62:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801af6a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	7b5b      	ldrb	r3, [r3, #13]
 801af70:	b25b      	sxtb	r3, r3
 801af72:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801af74:	2348      	movs	r3, #72	; 0x48
 801af76:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801af7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af7e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af82:	b25b      	sxtb	r3, r3
 801af84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801af88:	2304      	movs	r3, #4
 801af8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801af8e:	4b44      	ldr	r3, [pc, #272]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801af94:	230e      	movs	r3, #14
 801af96:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801af9a:	2300      	movs	r3, #0
 801af9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801afa6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801afaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801afae:	1c9a      	adds	r2, r3, #2
 801afb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801afb4:	1c59      	adds	r1, r3, #1
 801afb6:	f107 0014 	add.w	r0, r7, #20
 801afba:	4623      	mov	r3, r4
 801afbc:	f7fd fac5 	bl	801854a <RegionCommonLinkAdrReqVerifyParams>
 801afc0:	4603      	mov	r3, r0
 801afc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801afc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801afca:	2b07      	cmp	r3, #7
 801afcc:	d151      	bne.n	801b072 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801afce:	4b34      	ldr	r3, [pc, #208]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801afd6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801afda:	2206      	movs	r2, #6
 801afdc:	4618      	mov	r0, r3
 801afde:	f7fd f91f 	bl	8018220 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801afe2:	4b30      	ldr	r3, [pc, #192]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 801afea:	4b2d      	ldr	r3, [pc, #180]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801aff2:	4b2c      	ldr	r3, [pc, #176]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	400a      	ands	r2, r1
 801aff8:	b292      	uxth	r2, r2
 801affa:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801affe:	4b29      	ldr	r3, [pc, #164]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 801b006:	4b26      	ldr	r3, [pc, #152]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b00e:	4b25      	ldr	r3, [pc, #148]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	400a      	ands	r2, r1
 801b014:	b292      	uxth	r2, r2
 801b016:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b01a:	4b22      	ldr	r3, [pc, #136]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 801b022:	4b1f      	ldr	r3, [pc, #124]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b02a:	4b1e      	ldr	r3, [pc, #120]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	400a      	ands	r2, r1
 801b030:	b292      	uxth	r2, r2
 801b032:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b036:	4b1b      	ldr	r3, [pc, #108]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 801b03e:	4b18      	ldr	r3, [pc, #96]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b046:	4b17      	ldr	r3, [pc, #92]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	400a      	ands	r2, r1
 801b04c:	b292      	uxth	r2, r2
 801b04e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b052:	4b13      	ldr	r3, [pc, #76]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801b054:	681a      	ldr	r2, [r3, #0]
 801b056:	4b13      	ldr	r3, [pc, #76]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b05e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b062:	4b0f      	ldr	r3, [pc, #60]	; (801b0a0 <RegionUS915LinkAdrReq+0x440>)
 801b064:	681a      	ldr	r2, [r3, #0]
 801b066:	4b0f      	ldr	r3, [pc, #60]	; (801b0a4 <RegionUS915LinkAdrReq+0x444>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b06e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b072:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b076:	68bb      	ldr	r3, [r7, #8]
 801b078:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b07a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b082:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b086:	683b      	ldr	r3, [r7, #0]
 801b088:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b08a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b08c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b090:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b096:	4618      	mov	r0, r3
 801b098:	375c      	adds	r7, #92	; 0x5c
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd90      	pop	{r4, r7, pc}
 801b09e:	bf00      	nop
 801b0a0:	20004050 	.word	0x20004050
 801b0a4:	2000404c 	.word	0x2000404c

0801b0a8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b084      	sub	sp, #16
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b0b0:	2307      	movs	r3, #7
 801b0b2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	685b      	ldr	r3, [r3, #4]
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	f7fe ffdb 	bl	801a074 <VerifyRfFreq>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	f083 0301 	eor.w	r3, r3, #1
 801b0c4:	b2db      	uxtb	r3, r3
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d003      	beq.n	801b0d2 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b0ca:	7bfb      	ldrb	r3, [r7, #15]
 801b0cc:	f023 0301 	bic.w	r3, r3, #1
 801b0d0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	f993 3000 	ldrsb.w	r3, [r3]
 801b0d8:	220d      	movs	r2, #13
 801b0da:	2108      	movs	r1, #8
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7fd f822 	bl	8018126 <RegionCommonValueInRange>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d103      	bne.n	801b0f0 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b0e8:	7bfb      	ldrb	r3, [r7, #15]
 801b0ea:	f023 0302 	bic.w	r3, r3, #2
 801b0ee:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	f993 3000 	ldrsb.w	r3, [r3]
 801b0f6:	2207      	movs	r2, #7
 801b0f8:	2105      	movs	r1, #5
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	f7fd f813 	bl	8018126 <RegionCommonValueInRange>
 801b100:	4603      	mov	r3, r0
 801b102:	2b01      	cmp	r3, #1
 801b104:	d004      	beq.n	801b110 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b10c:	2b0d      	cmp	r3, #13
 801b10e:	dd03      	ble.n	801b118 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b110:	7bfb      	ldrb	r3, [r7, #15]
 801b112:	f023 0302 	bic.w	r3, r3, #2
 801b116:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b11e:	2203      	movs	r2, #3
 801b120:	2100      	movs	r1, #0
 801b122:	4618      	mov	r0, r3
 801b124:	f7fc ffff 	bl	8018126 <RegionCommonValueInRange>
 801b128:	4603      	mov	r3, r0
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d103      	bne.n	801b136 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b12e:	7bfb      	ldrb	r3, [r7, #15]
 801b130:	f023 0304 	bic.w	r3, r3, #4
 801b134:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b136:	7bfb      	ldrb	r3, [r7, #15]
}
 801b138:	4618      	mov	r0, r3
 801b13a:	3710      	adds	r7, #16
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bd80      	pop	{r7, pc}

0801b140 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b140:	b480      	push	{r7}
 801b142:	b083      	sub	sp, #12
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b148:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b14c:	4618      	mov	r0, r3
 801b14e:	370c      	adds	r7, #12
 801b150:	46bd      	mov	sp, r7
 801b152:	bc80      	pop	{r7}
 801b154:	4770      	bx	lr

0801b156 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b156:	b480      	push	{r7}
 801b158:	b083      	sub	sp, #12
 801b15a:	af00      	add	r7, sp, #0
 801b15c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b15e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b162:	4618      	mov	r0, r3
 801b164:	370c      	adds	r7, #12
 801b166:	46bd      	mov	sp, r7
 801b168:	bc80      	pop	{r7}
 801b16a:	4770      	bx	lr

0801b16c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b16c:	b480      	push	{r7}
 801b16e:	b083      	sub	sp, #12
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b174:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b178:	4618      	mov	r0, r3
 801b17a:	370c      	adds	r7, #12
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bc80      	pop	{r7}
 801b180:	4770      	bx	lr
	...

0801b184 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b184:	b480      	push	{r7}
 801b186:	b083      	sub	sp, #12
 801b188:	af00      	add	r7, sp, #0
 801b18a:	4603      	mov	r3, r0
 801b18c:	460a      	mov	r2, r1
 801b18e:	71fb      	strb	r3, [r7, #7]
 801b190:	4613      	mov	r3, r2
 801b192:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b194:	79bb      	ldrb	r3, [r7, #6]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d108      	bne.n	801b1ac <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b19a:	4b16      	ldr	r3, [pc, #88]	; (801b1f4 <RegionUS915AlternateDr+0x70>)
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b1a2:	3201      	adds	r2, #1
 801b1a4:	b2d2      	uxtb	r2, r2
 801b1a6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 801b1aa:	e007      	b.n	801b1bc <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b1ac:	4b11      	ldr	r3, [pc, #68]	; (801b1f4 <RegionUS915AlternateDr+0x70>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b1b4:	3a01      	subs	r2, #1
 801b1b6:	b2d2      	uxtb	r2, r2
 801b1b8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b1bc:	4b0d      	ldr	r3, [pc, #52]	; (801b1f4 <RegionUS915AlternateDr+0x70>)
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b1c4:	4b0c      	ldr	r3, [pc, #48]	; (801b1f8 <RegionUS915AlternateDr+0x74>)
 801b1c6:	fba3 1302 	umull	r1, r3, r3, r2
 801b1ca:	0859      	lsrs	r1, r3, #1
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	00db      	lsls	r3, r3, #3
 801b1d0:	440b      	add	r3, r1
 801b1d2:	1ad3      	subs	r3, r2, r3
 801b1d4:	b2db      	uxtb	r3, r3
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d102      	bne.n	801b1e0 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b1da:	2304      	movs	r3, #4
 801b1dc:	71fb      	strb	r3, [r7, #7]
 801b1de:	e001      	b.n	801b1e4 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b1e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	370c      	adds	r7, #12
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bc80      	pop	{r7}
 801b1f0:	4770      	bx	lr
 801b1f2:	bf00      	nop
 801b1f4:	2000404c 	.word	0x2000404c
 801b1f8:	38e38e39 	.word	0x38e38e39

0801b1fc <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b0a8      	sub	sp, #160	; 0xa0
 801b200:	af02      	add	r7, sp, #8
 801b202:	60f8      	str	r0, [r7, #12]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	607a      	str	r2, [r7, #4]
 801b208:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b20a:	2300      	movs	r3, #0
 801b20c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b210:	2300      	movs	r3, #0
 801b212:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b216:	2300      	movs	r3, #0
 801b218:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b21a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b21e:	2244      	movs	r2, #68	; 0x44
 801b220:	2100      	movs	r1, #0
 801b222:	4618      	mov	r0, r3
 801b224:	f005 fc06 	bl	8020a34 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b228:	230c      	movs	r3, #12
 801b22a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b22e:	4b6b      	ldr	r3, [pc, #428]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	3390      	adds	r3, #144	; 0x90
 801b234:	2204      	movs	r2, #4
 801b236:	2100      	movs	r1, #0
 801b238:	4618      	mov	r0, r3
 801b23a:	f7fc ffc5 	bl	80181c8 <RegionCommonCountChannels>
 801b23e:	4603      	mov	r3, r0
 801b240:	2b00      	cmp	r3, #0
 801b242:	d110      	bne.n	801b266 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b244:	4b65      	ldr	r3, [pc, #404]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801b24c:	4b64      	ldr	r3, [pc, #400]	; (801b3e0 <RegionUS915NextChannel+0x1e4>)
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b254:	2204      	movs	r2, #4
 801b256:	4619      	mov	r1, r3
 801b258:	f7fc ffe2 	bl	8018220 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b25c:	4b5f      	ldr	r3, [pc, #380]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2200      	movs	r2, #0
 801b262:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b26c:	2b03      	cmp	r3, #3
 801b26e:	dd0e      	ble.n	801b28e <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b270:	4b5a      	ldr	r3, [pc, #360]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801b278:	b2db      	uxtb	r3, r3
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d107      	bne.n	801b28e <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b27e:	4b58      	ldr	r3, [pc, #352]	; (801b3e0 <RegionUS915NextChannel+0x1e4>)
 801b280:	681a      	ldr	r2, [r3, #0]
 801b282:	4b56      	ldr	r3, [pc, #344]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b28a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	7a5b      	ldrb	r3, [r3, #9]
 801b292:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b29a:	b2db      	uxtb	r3, r3
 801b29c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b29e:	4b4f      	ldr	r3, [pc, #316]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	3390      	adds	r3, #144	; 0x90
 801b2a4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b2a6:	4b4e      	ldr	r3, [pc, #312]	; (801b3e0 <RegionUS915NextChannel+0x1e4>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801b2ac:	4b4b      	ldr	r3, [pc, #300]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b2b2:	2348      	movs	r3, #72	; 0x48
 801b2b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	685b      	ldr	r3, [r3, #4]
 801b2c4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	7a9b      	ldrb	r3, [r3, #10]
 801b2ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b2ce:	2301      	movs	r3, #1
 801b2d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b2d4:	68fa      	ldr	r2, [r7, #12]
 801b2d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b2da:	320c      	adds	r2, #12
 801b2dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b2e0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	7d1b      	ldrb	r3, [r3, #20]
 801b2e8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	8adb      	ldrh	r3, [r3, #22]
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	4610      	mov	r0, r2
 801b2fa:	f7fe feff 	bl	801a0fc <GetTimeOnAir>
 801b2fe:	4603      	mov	r3, r0
 801b300:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b302:	f107 0314 	add.w	r3, r7, #20
 801b306:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b308:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b30c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b310:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	9301      	str	r3, [sp, #4]
 801b318:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b31c:	9300      	str	r3, [sp, #0]
 801b31e:	460b      	mov	r3, r1
 801b320:	6839      	ldr	r1, [r7, #0]
 801b322:	f7fd fb58 	bl	80189d6 <RegionCommonIdentifyChannels>
 801b326:	4603      	mov	r3, r0
 801b328:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b32c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b330:	2b00      	cmp	r3, #0
 801b332:	d14d      	bne.n	801b3d0 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	7a5b      	ldrb	r3, [r3, #9]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d00e      	beq.n	801b35a <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b33c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b340:	3b01      	subs	r3, #1
 801b342:	4619      	mov	r1, r3
 801b344:	2000      	movs	r0, #0
 801b346:	f000 f8f5 	bl	801b534 <randr>
 801b34a:	4603      	mov	r3, r0
 801b34c:	3398      	adds	r3, #152	; 0x98
 801b34e:	443b      	add	r3, r7
 801b350:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b354:	68bb      	ldr	r3, [r7, #8]
 801b356:	701a      	strb	r2, [r3, #0]
 801b358:	e030      	b.n	801b3bc <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d10f      	bne.n	801b384 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b364:	4b1d      	ldr	r3, [pc, #116]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b36c:	4b1b      	ldr	r3, [pc, #108]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b36e:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b370:	339c      	adds	r3, #156	; 0x9c
 801b372:	68ba      	ldr	r2, [r7, #8]
 801b374:	4619      	mov	r1, r3
 801b376:	f7fc fc91 	bl	8017c9c <RegionBaseUSComputeNext125kHzJoinChannel>
 801b37a:	4603      	mov	r3, r0
 801b37c:	2b03      	cmp	r3, #3
 801b37e:	d11d      	bne.n	801b3bc <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b380:	2303      	movs	r3, #3
 801b382:	e027      	b.n	801b3d4 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b384:	2300      	movs	r3, #0
 801b386:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b38a:	e004      	b.n	801b396 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 801b38c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b390:	3301      	adds	r3, #1
 801b392:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b396:	4b11      	ldr	r3, [pc, #68]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801b39e:	b2da      	uxtb	r2, r3
 801b3a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b3a4:	fa42 f303 	asr.w	r3, r2, r3
 801b3a8:	f003 0301 	and.w	r3, r3, #1
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d0ed      	beq.n	801b38c <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 801b3b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b3b4:	3340      	adds	r3, #64	; 0x40
 801b3b6:	b2da      	uxtb	r2, r3
 801b3b8:	68bb      	ldr	r3, [r7, #8]
 801b3ba:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b3bc:	4b07      	ldr	r3, [pc, #28]	; (801b3dc <RegionUS915NextChannel+0x1e0>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	781b      	ldrb	r3, [r3, #0]
 801b3c8:	2248      	movs	r2, #72	; 0x48
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	f7fc fec8 	bl	8018160 <RegionCommonChanDisable>
    }
    return status;
 801b3d0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3798      	adds	r7, #152	; 0x98
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd80      	pop	{r7, pc}
 801b3dc:	2000404c 	.word	0x2000404c
 801b3e0:	20004050 	.word	0x20004050

0801b3e4 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801b3e4:	b590      	push	{r4, r7, lr}
 801b3e6:	b085      	sub	sp, #20
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801b3f2:	4b23      	ldr	r3, [pc, #140]	; (801b480 <RegionUS915SetContinuousWave+0x9c>)
 801b3f4:	681a      	ldr	r2, [r3, #0]
 801b3f6:	4b23      	ldr	r3, [pc, #140]	; (801b484 <RegionUS915SetContinuousWave+0xa0>)
 801b3f8:	6819      	ldr	r1, [r3, #0]
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	461c      	mov	r4, r3
 801b400:	4623      	mov	r3, r4
 801b402:	005b      	lsls	r3, r3, #1
 801b404:	4423      	add	r3, r4
 801b406:	009b      	lsls	r3, r3, #2
 801b408:	440b      	add	r3, r1
 801b40a:	3309      	adds	r3, #9
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	4619      	mov	r1, r3
 801b410:	460b      	mov	r3, r1
 801b412:	005b      	lsls	r3, r3, #1
 801b414:	440b      	add	r3, r1
 801b416:	00db      	lsls	r3, r3, #3
 801b418:	4413      	add	r3, r2
 801b41a:	3302      	adds	r3, #2
 801b41c:	f993 1000 	ldrsb.w	r1, [r3]
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b426:	4b17      	ldr	r3, [pc, #92]	; (801b484 <RegionUS915SetContinuousWave+0xa0>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b42e:	f7fe fdeb 	bl	801a008 <LimitTxPower>
 801b432:	4603      	mov	r3, r0
 801b434:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801b436:	2300      	movs	r3, #0
 801b438:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801b43a:	4b12      	ldr	r3, [pc, #72]	; (801b484 <RegionUS915SetContinuousWave+0xa0>)
 801b43c:	681a      	ldr	r2, [r3, #0]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	781b      	ldrb	r3, [r3, #0]
 801b442:	4619      	mov	r1, r3
 801b444:	460b      	mov	r3, r1
 801b446:	005b      	lsls	r3, r3, #1
 801b448:	440b      	add	r3, r1
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	4413      	add	r3, r2
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801b452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b456:	f04f 0200 	mov.w	r2, #0
 801b45a:	490b      	ldr	r1, [pc, #44]	; (801b488 <RegionUS915SetContinuousWave+0xa4>)
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7fd f9cb 	bl	80187f8 <RegionCommonComputeTxPower>
 801b462:	4603      	mov	r3, r0
 801b464:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801b466:	4b09      	ldr	r3, [pc, #36]	; (801b48c <RegionUS915SetContinuousWave+0xa8>)
 801b468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b46a:	687a      	ldr	r2, [r7, #4]
 801b46c:	8992      	ldrh	r2, [r2, #12]
 801b46e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801b472:	68b8      	ldr	r0, [r7, #8]
 801b474:	4798      	blx	r3
#endif /* REGION_US915 */
}
 801b476:	bf00      	nop
 801b478:	3714      	adds	r7, #20
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd90      	pop	{r4, r7, pc}
 801b47e:	bf00      	nop
 801b480:	2000404c 	.word	0x2000404c
 801b484:	20004050 	.word	0x20004050
 801b488:	41f00000 	.word	0x41f00000
 801b48c:	080232e4 	.word	0x080232e4

0801b490 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b490:	b480      	push	{r7}
 801b492:	b085      	sub	sp, #20
 801b494:	af00      	add	r7, sp, #0
 801b496:	4603      	mov	r3, r0
 801b498:	71fb      	strb	r3, [r7, #7]
 801b49a:	460b      	mov	r3, r1
 801b49c:	71bb      	strb	r3, [r7, #6]
 801b49e:	4613      	mov	r3, r2
 801b4a0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b4a2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b4a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b4aa:	4909      	ldr	r1, [pc, #36]	; (801b4d0 <RegionUS915ApplyDrOffset+0x40>)
 801b4ac:	0092      	lsls	r2, r2, #2
 801b4ae:	440a      	add	r2, r1
 801b4b0:	4413      	add	r3, r2
 801b4b2:	781b      	ldrb	r3, [r3, #0]
 801b4b4:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	da01      	bge.n	801b4c2 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b4be:	2300      	movs	r3, #0
 801b4c0:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b4c2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	3714      	adds	r7, #20
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bc80      	pop	{r7}
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	080232b0 	.word	0x080232b0

0801b4d4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b4d4:	b480      	push	{r7}
 801b4d6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b4d8:	4b0d      	ldr	r3, [pc, #52]	; (801b510 <rand1+0x3c>)
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	4a0d      	ldr	r2, [pc, #52]	; (801b514 <rand1+0x40>)
 801b4de:	fb02 f303 	mul.w	r3, r2, r3
 801b4e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b4e6:	3339      	adds	r3, #57	; 0x39
 801b4e8:	4a09      	ldr	r2, [pc, #36]	; (801b510 <rand1+0x3c>)
 801b4ea:	6013      	str	r3, [r2, #0]
 801b4ec:	4b08      	ldr	r3, [pc, #32]	; (801b510 <rand1+0x3c>)
 801b4ee:	681a      	ldr	r2, [r3, #0]
 801b4f0:	2303      	movs	r3, #3
 801b4f2:	fba3 1302 	umull	r1, r3, r3, r2
 801b4f6:	1ad1      	subs	r1, r2, r3
 801b4f8:	0849      	lsrs	r1, r1, #1
 801b4fa:	440b      	add	r3, r1
 801b4fc:	0f99      	lsrs	r1, r3, #30
 801b4fe:	460b      	mov	r3, r1
 801b500:	07db      	lsls	r3, r3, #31
 801b502:	1a5b      	subs	r3, r3, r1
 801b504:	1ad1      	subs	r1, r2, r3
 801b506:	460b      	mov	r3, r1
}
 801b508:	4618      	mov	r0, r3
 801b50a:	46bd      	mov	sp, r7
 801b50c:	bc80      	pop	{r7}
 801b50e:	4770      	bx	lr
 801b510:	2000010c 	.word	0x2000010c
 801b514:	41c64e6d 	.word	0x41c64e6d

0801b518 <srand1>:

void srand1( uint32_t seed )
{
 801b518:	b480      	push	{r7}
 801b51a:	b083      	sub	sp, #12
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
    next = seed;
 801b520:	4a03      	ldr	r2, [pc, #12]	; (801b530 <srand1+0x18>)
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6013      	str	r3, [r2, #0]
}
 801b526:	bf00      	nop
 801b528:	370c      	adds	r7, #12
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bc80      	pop	{r7}
 801b52e:	4770      	bx	lr
 801b530:	2000010c 	.word	0x2000010c

0801b534 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b082      	sub	sp, #8
 801b538:	af00      	add	r7, sp, #0
 801b53a:	6078      	str	r0, [r7, #4]
 801b53c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b53e:	f7ff ffc9 	bl	801b4d4 <rand1>
 801b542:	4602      	mov	r2, r0
 801b544:	6839      	ldr	r1, [r7, #0]
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	1acb      	subs	r3, r1, r3
 801b54a:	3301      	adds	r3, #1
 801b54c:	fb92 f1f3 	sdiv	r1, r2, r3
 801b550:	fb01 f303 	mul.w	r3, r1, r3
 801b554:	1ad2      	subs	r2, r2, r3
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	4413      	add	r3, r2
}
 801b55a:	4618      	mov	r0, r3
 801b55c:	3708      	adds	r7, #8
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}

0801b562 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b562:	b480      	push	{r7}
 801b564:	b085      	sub	sp, #20
 801b566:	af00      	add	r7, sp, #0
 801b568:	60f8      	str	r0, [r7, #12]
 801b56a:	60b9      	str	r1, [r7, #8]
 801b56c:	4613      	mov	r3, r2
 801b56e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b570:	e007      	b.n	801b582 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b572:	68ba      	ldr	r2, [r7, #8]
 801b574:	1c53      	adds	r3, r2, #1
 801b576:	60bb      	str	r3, [r7, #8]
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	1c59      	adds	r1, r3, #1
 801b57c:	60f9      	str	r1, [r7, #12]
 801b57e:	7812      	ldrb	r2, [r2, #0]
 801b580:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b582:	88fb      	ldrh	r3, [r7, #6]
 801b584:	1e5a      	subs	r2, r3, #1
 801b586:	80fa      	strh	r2, [r7, #6]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d1f2      	bne.n	801b572 <memcpy1+0x10>
    }
}
 801b58c:	bf00      	nop
 801b58e:	bf00      	nop
 801b590:	3714      	adds	r7, #20
 801b592:	46bd      	mov	sp, r7
 801b594:	bc80      	pop	{r7}
 801b596:	4770      	bx	lr

0801b598 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b598:	b480      	push	{r7}
 801b59a:	b085      	sub	sp, #20
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	60b9      	str	r1, [r7, #8]
 801b5a2:	4613      	mov	r3, r2
 801b5a4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b5a6:	88fb      	ldrh	r3, [r7, #6]
 801b5a8:	3b01      	subs	r3, #1
 801b5aa:	68fa      	ldr	r2, [r7, #12]
 801b5ac:	4413      	add	r3, r2
 801b5ae:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b5b0:	e007      	b.n	801b5c2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b5b2:	68ba      	ldr	r2, [r7, #8]
 801b5b4:	1c53      	adds	r3, r2, #1
 801b5b6:	60bb      	str	r3, [r7, #8]
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	1e59      	subs	r1, r3, #1
 801b5bc:	60f9      	str	r1, [r7, #12]
 801b5be:	7812      	ldrb	r2, [r2, #0]
 801b5c0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b5c2:	88fb      	ldrh	r3, [r7, #6]
 801b5c4:	1e5a      	subs	r2, r3, #1
 801b5c6:	80fa      	strh	r2, [r7, #6]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d1f2      	bne.n	801b5b2 <memcpyr+0x1a>
    }
}
 801b5cc:	bf00      	nop
 801b5ce:	bf00      	nop
 801b5d0:	3714      	adds	r7, #20
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bc80      	pop	{r7}
 801b5d6:	4770      	bx	lr

0801b5d8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b5d8:	b480      	push	{r7}
 801b5da:	b083      	sub	sp, #12
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
 801b5e0:	460b      	mov	r3, r1
 801b5e2:	70fb      	strb	r3, [r7, #3]
 801b5e4:	4613      	mov	r3, r2
 801b5e6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b5e8:	e004      	b.n	801b5f4 <memset1+0x1c>
    {
        *dst++ = value;
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	1c5a      	adds	r2, r3, #1
 801b5ee:	607a      	str	r2, [r7, #4]
 801b5f0:	78fa      	ldrb	r2, [r7, #3]
 801b5f2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b5f4:	883b      	ldrh	r3, [r7, #0]
 801b5f6:	1e5a      	subs	r2, r3, #1
 801b5f8:	803a      	strh	r2, [r7, #0]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d1f5      	bne.n	801b5ea <memset1+0x12>
    }
}
 801b5fe:	bf00      	nop
 801b600:	bf00      	nop
 801b602:	370c      	adds	r7, #12
 801b604:	46bd      	mov	sp, r7
 801b606:	bc80      	pop	{r7}
 801b608:	4770      	bx	lr
	...

0801b60c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b60c:	b480      	push	{r7}
 801b60e:	b087      	sub	sp, #28
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
 801b614:	460b      	mov	r3, r1
 801b616:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 801b618:	4b1a      	ldr	r3, [pc, #104]	; (801b684 <Crc32+0x78>)
 801b61a:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b61c:	f04f 33ff 	mov.w	r3, #4294967295
 801b620:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d101      	bne.n	801b62c <Crc32+0x20>
    {
        return 0;
 801b628:	2300      	movs	r3, #0
 801b62a:	e026      	b.n	801b67a <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b62c:	2300      	movs	r3, #0
 801b62e:	827b      	strh	r3, [r7, #18]
 801b630:	e01d      	b.n	801b66e <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801b632:	8a7b      	ldrh	r3, [r7, #18]
 801b634:	687a      	ldr	r2, [r7, #4]
 801b636:	4413      	add	r3, r2
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	461a      	mov	r2, r3
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	4053      	eors	r3, r2
 801b640:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801b642:	2300      	movs	r3, #0
 801b644:	823b      	strh	r3, [r7, #16]
 801b646:	e00c      	b.n	801b662 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b648:	697b      	ldr	r3, [r7, #20]
 801b64a:	085a      	lsrs	r2, r3, #1
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	f003 0301 	and.w	r3, r3, #1
 801b652:	4259      	negs	r1, r3
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	400b      	ands	r3, r1
 801b658:	4053      	eors	r3, r2
 801b65a:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801b65c:	8a3b      	ldrh	r3, [r7, #16]
 801b65e:	3301      	adds	r3, #1
 801b660:	823b      	strh	r3, [r7, #16]
 801b662:	8a3b      	ldrh	r3, [r7, #16]
 801b664:	2b07      	cmp	r3, #7
 801b666:	d9ef      	bls.n	801b648 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 801b668:	8a7b      	ldrh	r3, [r7, #18]
 801b66a:	3301      	adds	r3, #1
 801b66c:	827b      	strh	r3, [r7, #18]
 801b66e:	8a7a      	ldrh	r2, [r7, #18]
 801b670:	887b      	ldrh	r3, [r7, #2]
 801b672:	429a      	cmp	r2, r3
 801b674:	d3dd      	bcc.n	801b632 <Crc32+0x26>
        }
    }

    return ~crc;
 801b676:	697b      	ldr	r3, [r7, #20]
 801b678:	43db      	mvns	r3, r3
}
 801b67a:	4618      	mov	r0, r3
 801b67c:	371c      	adds	r7, #28
 801b67e:	46bd      	mov	sp, r7
 801b680:	bc80      	pop	{r7}
 801b682:	4770      	bx	lr
 801b684:	edb88320 	.word	0xedb88320

0801b688 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b084      	sub	sp, #16
 801b68c:	af02      	add	r7, sp, #8
 801b68e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b690:	4a21      	ldr	r2, [pc, #132]	; (801b718 <RadioInit+0x90>)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b696:	4b21      	ldr	r3, [pc, #132]	; (801b71c <RadioInit+0x94>)
 801b698:	2200      	movs	r2, #0
 801b69a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b69c:	4b1f      	ldr	r3, [pc, #124]	; (801b71c <RadioInit+0x94>)
 801b69e:	2200      	movs	r2, #0
 801b6a0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b6a2:	4b1e      	ldr	r3, [pc, #120]	; (801b71c <RadioInit+0x94>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801b6a8:	481d      	ldr	r0, [pc, #116]	; (801b720 <RadioInit+0x98>)
 801b6aa:	f001 febb 	bl	801d424 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801b6ae:	2000      	movs	r0, #0
 801b6b0:	f001 f81e 	bl	801c6f0 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 801b6b4:	f002 f94c 	bl	801d950 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b6b8:	2100      	movs	r1, #0
 801b6ba:	2000      	movs	r0, #0
 801b6bc:	f002 fcac 	bl	801e018 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801b6c0:	2204      	movs	r2, #4
 801b6c2:	2100      	movs	r1, #0
 801b6c4:	2001      	movs	r0, #1
 801b6c6:	f002 fad1 	bl	801dc6c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b6d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b6d6:	f002 fa01 	bl	801dadc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801b6da:	f000 fe9b 	bl	801c414 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b6de:	2300      	movs	r3, #0
 801b6e0:	9300      	str	r3, [sp, #0]
 801b6e2:	4b10      	ldr	r3, [pc, #64]	; (801b724 <RadioInit+0x9c>)
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	f04f 31ff 	mov.w	r1, #4294967295
 801b6ea:	480f      	ldr	r0, [pc, #60]	; (801b728 <RadioInit+0xa0>)
 801b6ec:	f004 f8d4 	bl	801f898 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	9300      	str	r3, [sp, #0]
 801b6f4:	4b0d      	ldr	r3, [pc, #52]	; (801b72c <RadioInit+0xa4>)
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	f04f 31ff 	mov.w	r1, #4294967295
 801b6fc:	480c      	ldr	r0, [pc, #48]	; (801b730 <RadioInit+0xa8>)
 801b6fe:	f004 f8cb 	bl	801f898 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b702:	4809      	ldr	r0, [pc, #36]	; (801b728 <RadioInit+0xa0>)
 801b704:	f004 f96c 	bl	801f9e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b708:	4809      	ldr	r0, [pc, #36]	; (801b730 <RadioInit+0xa8>)
 801b70a:	f004 f969 	bl	801f9e0 <UTIL_TIMER_Stop>
}
 801b70e:	bf00      	nop
 801b710:	3708      	adds	r7, #8
 801b712:	46bd      	mov	sp, r7
 801b714:	bd80      	pop	{r7, pc}
 801b716:	bf00      	nop
 801b718:	20004154 	.word	0x20004154
 801b71c:	20004158 	.word	0x20004158
 801b720:	0801c7d5 	.word	0x0801c7d5
 801b724:	0801c75d 	.word	0x0801c75d
 801b728:	200041b0 	.word	0x200041b0
 801b72c:	0801c771 	.word	0x0801c771
 801b730:	200041c8 	.word	0x200041c8

0801b734 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b734:	b580      	push	{r7, lr}
 801b736:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b738:	f001 feb6 	bl	801d4a8 <SUBGRF_GetOperatingMode>
 801b73c:	4603      	mov	r3, r0
 801b73e:	2b07      	cmp	r3, #7
 801b740:	d00a      	beq.n	801b758 <RadioGetStatus+0x24>
 801b742:	2b07      	cmp	r3, #7
 801b744:	dc0a      	bgt.n	801b75c <RadioGetStatus+0x28>
 801b746:	2b04      	cmp	r3, #4
 801b748:	d002      	beq.n	801b750 <RadioGetStatus+0x1c>
 801b74a:	2b05      	cmp	r3, #5
 801b74c:	d002      	beq.n	801b754 <RadioGetStatus+0x20>
 801b74e:	e005      	b.n	801b75c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b750:	2302      	movs	r3, #2
 801b752:	e004      	b.n	801b75e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b754:	2301      	movs	r3, #1
 801b756:	e002      	b.n	801b75e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b758:	2303      	movs	r3, #3
 801b75a:	e000      	b.n	801b75e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b75c:	2300      	movs	r3, #0
    }
}
 801b75e:	4618      	mov	r0, r3
 801b760:	bd80      	pop	{r7, pc}
	...

0801b764 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b082      	sub	sp, #8
 801b768:	af00      	add	r7, sp, #0
 801b76a:	4603      	mov	r3, r0
 801b76c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b76e:	4a25      	ldr	r2, [pc, #148]	; (801b804 <RadioSetModem+0xa0>)
 801b770:	79fb      	ldrb	r3, [r7, #7]
 801b772:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 801b774:	79fb      	ldrb	r3, [r7, #7]
 801b776:	4618      	mov	r0, r3
 801b778:	f003 f811 	bl	801e79e <RFW_SetRadioModem>
    switch( modem )
 801b77c:	79fb      	ldrb	r3, [r7, #7]
 801b77e:	3b01      	subs	r3, #1
 801b780:	2b03      	cmp	r3, #3
 801b782:	d80b      	bhi.n	801b79c <RadioSetModem+0x38>
 801b784:	a201      	add	r2, pc, #4	; (adr r2, 801b78c <RadioSetModem+0x28>)
 801b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b78a:	bf00      	nop
 801b78c:	0801b7ab 	.word	0x0801b7ab
 801b790:	0801b7d1 	.word	0x0801b7d1
 801b794:	0801b7df 	.word	0x0801b7df
 801b798:	0801b7ed 	.word	0x0801b7ed
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b79c:	2000      	movs	r0, #0
 801b79e:	f002 fa3f 	bl	801dc20 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b7a2:	4b18      	ldr	r3, [pc, #96]	; (801b804 <RadioSetModem+0xa0>)
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	735a      	strb	r2, [r3, #13]
        break;
 801b7a8:	e028      	b.n	801b7fc <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801b7aa:	2001      	movs	r0, #1
 801b7ac:	f002 fa38 	bl	801dc20 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801b7b0:	4b14      	ldr	r3, [pc, #80]	; (801b804 <RadioSetModem+0xa0>)
 801b7b2:	7b5a      	ldrb	r2, [r3, #13]
 801b7b4:	4b13      	ldr	r3, [pc, #76]	; (801b804 <RadioSetModem+0xa0>)
 801b7b6:	7b1b      	ldrb	r3, [r3, #12]
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	d01e      	beq.n	801b7fa <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801b7bc:	4b11      	ldr	r3, [pc, #68]	; (801b804 <RadioSetModem+0xa0>)
 801b7be:	7b1a      	ldrb	r2, [r3, #12]
 801b7c0:	4b10      	ldr	r3, [pc, #64]	; (801b804 <RadioSetModem+0xa0>)
 801b7c2:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801b7c4:	4b0f      	ldr	r3, [pc, #60]	; (801b804 <RadioSetModem+0xa0>)
 801b7c6:	7b5b      	ldrb	r3, [r3, #13]
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f000 ff91 	bl	801c6f0 <RadioSetPublicNetwork>
        }
        break;
 801b7ce:	e014      	b.n	801b7fa <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b7d0:	2002      	movs	r0, #2
 801b7d2:	f002 fa25 	bl	801dc20 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b7d6:	4b0b      	ldr	r3, [pc, #44]	; (801b804 <RadioSetModem+0xa0>)
 801b7d8:	2200      	movs	r2, #0
 801b7da:	735a      	strb	r2, [r3, #13]
        break;
 801b7dc:	e00e      	b.n	801b7fc <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b7de:	2002      	movs	r0, #2
 801b7e0:	f002 fa1e 	bl	801dc20 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b7e4:	4b07      	ldr	r3, [pc, #28]	; (801b804 <RadioSetModem+0xa0>)
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	735a      	strb	r2, [r3, #13]
        break;
 801b7ea:	e007      	b.n	801b7fc <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b7ec:	2000      	movs	r0, #0
 801b7ee:	f002 fa17 	bl	801dc20 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b7f2:	4b04      	ldr	r3, [pc, #16]	; (801b804 <RadioSetModem+0xa0>)
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	735a      	strb	r2, [r3, #13]
        break;
 801b7f8:	e000      	b.n	801b7fc <RadioSetModem+0x98>
        break;
 801b7fa:	bf00      	nop
    }
}
 801b7fc:	bf00      	nop
 801b7fe:	3708      	adds	r7, #8
 801b800:	46bd      	mov	sp, r7
 801b802:	bd80      	pop	{r7, pc}
 801b804:	20004158 	.word	0x20004158

0801b808 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b082      	sub	sp, #8
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	f002 f9bf 	bl	801db94 <SUBGRF_SetRfFrequency>
}
 801b816:	bf00      	nop
 801b818:	3708      	adds	r7, #8
 801b81a:	46bd      	mov	sp, r7
 801b81c:	bd80      	pop	{r7, pc}

0801b81e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801b81e:	b580      	push	{r7, lr}
 801b820:	b090      	sub	sp, #64	; 0x40
 801b822:	af0a      	add	r7, sp, #40	; 0x28
 801b824:	60f8      	str	r0, [r7, #12]
 801b826:	60b9      	str	r1, [r7, #8]
 801b828:	603b      	str	r3, [r7, #0]
 801b82a:	4613      	mov	r3, r2
 801b82c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801b82e:	2301      	movs	r3, #1
 801b830:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801b832:	2300      	movs	r3, #0
 801b834:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801b836:	2300      	movs	r3, #0
 801b838:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801b83a:	f000 fdfe 	bl	801c43a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801b83e:	2000      	movs	r0, #0
 801b840:	f7ff ff90 	bl	801b764 <RadioSetModem>

    RadioSetChannel( freq );
 801b844:	68f8      	ldr	r0, [r7, #12]
 801b846:	f7ff ffdf 	bl	801b808 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801b84a:	2301      	movs	r3, #1
 801b84c:	9309      	str	r3, [sp, #36]	; 0x24
 801b84e:	2300      	movs	r3, #0
 801b850:	9308      	str	r3, [sp, #32]
 801b852:	2300      	movs	r3, #0
 801b854:	9307      	str	r3, [sp, #28]
 801b856:	2300      	movs	r3, #0
 801b858:	9306      	str	r3, [sp, #24]
 801b85a:	2300      	movs	r3, #0
 801b85c:	9305      	str	r3, [sp, #20]
 801b85e:	2300      	movs	r3, #0
 801b860:	9304      	str	r3, [sp, #16]
 801b862:	2300      	movs	r3, #0
 801b864:	9303      	str	r3, [sp, #12]
 801b866:	2300      	movs	r3, #0
 801b868:	9302      	str	r3, [sp, #8]
 801b86a:	2303      	movs	r3, #3
 801b86c:	9301      	str	r3, [sp, #4]
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	9300      	str	r3, [sp, #0]
 801b872:	2300      	movs	r3, #0
 801b874:	f44f 7216 	mov.w	r2, #600	; 0x258
 801b878:	68b9      	ldr	r1, [r7, #8]
 801b87a:	2000      	movs	r0, #0
 801b87c:	f000 f840 	bl	801b900 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801b880:	2000      	movs	r0, #0
 801b882:	f000 fde1 	bl	801c448 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801b886:	f000 ff61 	bl	801c74c <RadioGetWakeupTime>
 801b88a:	4603      	mov	r3, r0
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7e6 f82c 	bl	80018ea <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801b892:	f004 f9bf 	bl	801fc14 <UTIL_TIMER_GetCurrentTime>
 801b896:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b898:	e00d      	b.n	801b8b6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801b89a:	2000      	movs	r0, #0
 801b89c:	f000 fea6 	bl	801c5ec <RadioRssi>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801b8a4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b8a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8ac:	429a      	cmp	r2, r3
 801b8ae:	dd02      	ble.n	801b8b6 <RadioIsChannelFree+0x98>
        {
            status = false;
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	75fb      	strb	r3, [r7, #23]
            break;
 801b8b4:	e006      	b.n	801b8c4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b8b6:	6938      	ldr	r0, [r7, #16]
 801b8b8:	f004 f9be 	bl	801fc38 <UTIL_TIMER_GetElapsedTime>
 801b8bc:	4602      	mov	r2, r0
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d8ea      	bhi.n	801b89a <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801b8c4:	f000 fdb9 	bl	801c43a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801b8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	3718      	adds	r7, #24
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	bd80      	pop	{r7, pc}

0801b8d2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801b8d2:	b580      	push	{r7, lr}
 801b8d4:	b082      	sub	sp, #8
 801b8d6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801b8d8:	2300      	movs	r3, #0
 801b8da:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 801b8dc:	2001      	movs	r0, #1
 801b8de:	f7ff ff41 	bl	801b764 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	2100      	movs	r1, #0
 801b8e8:	2000      	movs	r0, #0
 801b8ea:	f002 f8f7 	bl	801dadc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801b8ee:	f001 feac 	bl	801d64a <SUBGRF_GetRandom>
 801b8f2:	6078      	str	r0, [r7, #4]

    return rnd;
 801b8f4:	687b      	ldr	r3, [r7, #4]
}
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	3708      	adds	r7, #8
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	bd80      	pop	{r7, pc}
	...

0801b900 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801b900:	b580      	push	{r7, lr}
 801b902:	b08a      	sub	sp, #40	; 0x28
 801b904:	af00      	add	r7, sp, #0
 801b906:	60b9      	str	r1, [r7, #8]
 801b908:	607a      	str	r2, [r7, #4]
 801b90a:	461a      	mov	r2, r3
 801b90c:	4603      	mov	r3, r0
 801b90e:	73fb      	strb	r3, [r7, #15]
 801b910:	4613      	mov	r3, r2
 801b912:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 801b914:	4abd      	ldr	r2, [pc, #756]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b916:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b91a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801b91c:	f002 fefd 	bl	801e71a <RFW_DeInit>
    if( rxContinuous == true )
 801b920:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b924:	2b00      	cmp	r3, #0
 801b926:	d001      	beq.n	801b92c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801b928:	2300      	movs	r3, #0
 801b92a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801b92c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801b930:	2b00      	cmp	r3, #0
 801b932:	d004      	beq.n	801b93e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801b934:	4ab6      	ldr	r2, [pc, #728]	; (801bc10 <RadioSetRxConfig+0x310>)
 801b936:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801b93a:	7013      	strb	r3, [r2, #0]
 801b93c:	e002      	b.n	801b944 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801b93e:	4bb4      	ldr	r3, [pc, #720]	; (801bc10 <RadioSetRxConfig+0x310>)
 801b940:	22ff      	movs	r2, #255	; 0xff
 801b942:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801b944:	7bfb      	ldrb	r3, [r7, #15]
 801b946:	2b04      	cmp	r3, #4
 801b948:	d009      	beq.n	801b95e <RadioSetRxConfig+0x5e>
 801b94a:	2b04      	cmp	r3, #4
 801b94c:	f300 81da 	bgt.w	801bd04 <RadioSetRxConfig+0x404>
 801b950:	2b00      	cmp	r3, #0
 801b952:	f000 80bf 	beq.w	801bad4 <RadioSetRxConfig+0x1d4>
 801b956:	2b01      	cmp	r3, #1
 801b958:	f000 812c 	beq.w	801bbb4 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801b95c:	e1d2      	b.n	801bd04 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801b95e:	2001      	movs	r0, #1
 801b960:	f001 ffb8 	bl	801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b964:	4ba9      	ldr	r3, [pc, #676]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b966:	2200      	movs	r2, #0
 801b968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b96c:	4aa7      	ldr	r2, [pc, #668]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801b972:	4ba6      	ldr	r3, [pc, #664]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b974:	2209      	movs	r2, #9
 801b976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801b97a:	4ba4      	ldr	r3, [pc, #656]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b97c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b980:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801b982:	68b8      	ldr	r0, [r7, #8]
 801b984:	f002 fdfc 	bl	801e580 <SUBGRF_GetFskBandwidthRegValue>
 801b988:	4603      	mov	r3, r0
 801b98a:	461a      	mov	r2, r3
 801b98c:	4b9f      	ldr	r3, [pc, #636]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b992:	4b9e      	ldr	r3, [pc, #632]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b994:	2200      	movs	r2, #0
 801b996:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801b998:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b99a:	00db      	lsls	r3, r3, #3
 801b99c:	b29a      	uxth	r2, r3
 801b99e:	4b9b      	ldr	r3, [pc, #620]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9a0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801b9a2:	4b9a      	ldr	r3, [pc, #616]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801b9a8:	4b98      	ldr	r3, [pc, #608]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9aa:	2210      	movs	r2, #16
 801b9ac:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801b9ae:	4b97      	ldr	r3, [pc, #604]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801b9b4:	4b95      	ldr	r3, [pc, #596]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801b9ba:	4b95      	ldr	r3, [pc, #596]	; (801bc10 <RadioSetRxConfig+0x310>)
 801b9bc:	781a      	ldrb	r2, [r3, #0]
 801b9be:	4b93      	ldr	r3, [pc, #588]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9c0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801b9c2:	4b92      	ldr	r3, [pc, #584]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9c4:	2201      	movs	r2, #1
 801b9c6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801b9c8:	4b90      	ldr	r3, [pc, #576]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801b9ca:	2200      	movs	r2, #0
 801b9cc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801b9ce:	2004      	movs	r0, #4
 801b9d0:	f7ff fec8 	bl	801b764 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9d4:	488f      	ldr	r0, [pc, #572]	; (801bc14 <RadioSetRxConfig+0x314>)
 801b9d6:	f002 f9af 	bl	801dd38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b9da:	488f      	ldr	r0, [pc, #572]	; (801bc18 <RadioSetRxConfig+0x318>)
 801b9dc:	f002 fa7e 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801b9e0:	4a8e      	ldr	r2, [pc, #568]	; (801bc1c <RadioSetRxConfig+0x31c>)
 801b9e2:	f107 031c 	add.w	r3, r7, #28
 801b9e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b9ea:	e883 0003 	stmia.w	r3, {r0, r1}
 801b9ee:	f107 031c 	add.w	r3, r7, #28
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f001 fda7 	bl	801d546 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801b9f8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b9fc:	f001 fdf2 	bl	801d5e4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 801ba00:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ba04:	f000 fe11 	bl	801c62a <RadioRead>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801ba0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba12:	f023 0310 	bic.w	r3, r3, #16
 801ba16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801ba1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba1e:	4619      	mov	r1, r3
 801ba20:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ba24:	f000 fdef 	bl	801c606 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801ba28:	2104      	movs	r1, #4
 801ba2a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801ba2e:	f000 fdea 	bl	801c606 <RadioWrite>
            modReg= RadioRead(0x89b);
 801ba32:	f640 009b 	movw	r0, #2203	; 0x89b
 801ba36:	f000 fdf8 	bl	801c62a <RadioRead>
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801ba40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba44:	f023 031c 	bic.w	r3, r3, #28
 801ba48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 801ba4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba50:	f043 0308 	orr.w	r3, r3, #8
 801ba54:	b2db      	uxtb	r3, r3
 801ba56:	4619      	mov	r1, r3
 801ba58:	f640 009b 	movw	r0, #2203	; 0x89b
 801ba5c:	f000 fdd3 	bl	801c606 <RadioWrite>
            modReg= RadioRead(0x6d1);
 801ba60:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801ba64:	f000 fde1 	bl	801c62a <RadioRead>
 801ba68:	4603      	mov	r3, r0
 801ba6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801ba6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba72:	f023 0318 	bic.w	r3, r3, #24
 801ba76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 801ba7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba7e:	f043 0318 	orr.w	r3, r3, #24
 801ba82:	b2db      	uxtb	r3, r3
 801ba84:	4619      	mov	r1, r3
 801ba86:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801ba8a:	f000 fdbc 	bl	801c606 <RadioWrite>
            modReg= RadioRead(0x6ac);
 801ba8e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801ba92:	f000 fdca 	bl	801c62a <RadioRead>
 801ba96:	4603      	mov	r3, r0
 801ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801ba9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801baa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801baa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801baa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801baac:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801bab0:	b2db      	uxtb	r3, r3
 801bab2:	4619      	mov	r1, r3
 801bab4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bab8:	f000 fda5 	bl	801c606 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801babc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801babe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bac2:	fb02 f303 	mul.w	r3, r2, r3
 801bac6:	461a      	mov	r2, r3
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	fbb2 f3f3 	udiv	r3, r2, r3
 801bace:	4a4f      	ldr	r2, [pc, #316]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bad0:	6093      	str	r3, [r2, #8]
            break;
 801bad2:	e118      	b.n	801bd06 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bad4:	2000      	movs	r0, #0
 801bad6:	f001 fefd 	bl	801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bada:	4b4c      	ldr	r3, [pc, #304]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801badc:	2200      	movs	r2, #0
 801bade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bae2:	4a4a      	ldr	r2, [pc, #296]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bae8:	4b48      	ldr	r3, [pc, #288]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801baea:	220b      	movs	r2, #11
 801baec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801baf0:	68b8      	ldr	r0, [r7, #8]
 801baf2:	f002 fd45 	bl	801e580 <SUBGRF_GetFskBandwidthRegValue>
 801baf6:	4603      	mov	r3, r0
 801baf8:	461a      	mov	r2, r3
 801bafa:	4b44      	ldr	r3, [pc, #272]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bb00:	4b42      	ldr	r3, [pc, #264]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb02:	2200      	movs	r2, #0
 801bb04:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bb06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb08:	00db      	lsls	r3, r3, #3
 801bb0a:	b29a      	uxth	r2, r3
 801bb0c:	4b3f      	ldr	r3, [pc, #252]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb0e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bb10:	4b3e      	ldr	r3, [pc, #248]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb12:	2204      	movs	r2, #4
 801bb14:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bb16:	4b3d      	ldr	r3, [pc, #244]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb18:	2218      	movs	r2, #24
 801bb1a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bb1c:	4b3b      	ldr	r3, [pc, #236]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb1e:	2200      	movs	r2, #0
 801bb20:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bb22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bb26:	f083 0301 	eor.w	r3, r3, #1
 801bb2a:	b2db      	uxtb	r3, r3
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	4b37      	ldr	r3, [pc, #220]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb30:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bb32:	4b37      	ldr	r3, [pc, #220]	; (801bc10 <RadioSetRxConfig+0x310>)
 801bb34:	781a      	ldrb	r2, [r3, #0]
 801bb36:	4b35      	ldr	r3, [pc, #212]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb38:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bb3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d003      	beq.n	801bb4a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bb42:	4b32      	ldr	r3, [pc, #200]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb44:	22f2      	movs	r2, #242	; 0xf2
 801bb46:	75da      	strb	r2, [r3, #23]
 801bb48:	e002      	b.n	801bb50 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bb4a:	4b30      	ldr	r3, [pc, #192]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb4c:	2201      	movs	r2, #1
 801bb4e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bb50:	4b2e      	ldr	r3, [pc, #184]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb52:	2201      	movs	r2, #1
 801bb54:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bb56:	f000 fc70 	bl	801c43a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bb5a:	4b2c      	ldr	r3, [pc, #176]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bb5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	bf14      	ite	ne
 801bb64:	2301      	movne	r3, #1
 801bb66:	2300      	moveq	r3, #0
 801bb68:	b2db      	uxtb	r3, r3
 801bb6a:	4618      	mov	r0, r3
 801bb6c:	f7ff fdfa 	bl	801b764 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb70:	4828      	ldr	r0, [pc, #160]	; (801bc14 <RadioSetRxConfig+0x314>)
 801bb72:	f002 f8e1 	bl	801dd38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bb76:	4828      	ldr	r0, [pc, #160]	; (801bc18 <RadioSetRxConfig+0x318>)
 801bb78:	f002 f9b0 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bb7c:	4a28      	ldr	r2, [pc, #160]	; (801bc20 <RadioSetRxConfig+0x320>)
 801bb7e:	f107 0314 	add.w	r3, r7, #20
 801bb82:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bb86:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb8a:	f107 0314 	add.w	r3, r7, #20
 801bb8e:	4618      	mov	r0, r3
 801bb90:	f001 fcd9 	bl	801d546 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bb94:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bb98:	f001 fd24 	bl	801d5e4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bb9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bb9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bba2:	fb02 f303 	mul.w	r3, r2, r3
 801bba6:	461a      	mov	r2, r3
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbae:	4a17      	ldr	r2, [pc, #92]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bbb0:	6093      	str	r3, [r2, #8]
            break;
 801bbb2:	e0a8      	b.n	801bd06 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bbb4:	2000      	movs	r0, #0
 801bbb6:	f001 fe8d 	bl	801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bbba:	4b14      	ldr	r3, [pc, #80]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bbbc:	2201      	movs	r2, #1
 801bbbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	b2da      	uxtb	r2, r3
 801bbc6:	4b11      	ldr	r3, [pc, #68]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bbc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bbcc:	4a15      	ldr	r2, [pc, #84]	; (801bc24 <RadioSetRxConfig+0x324>)
 801bbce:	68bb      	ldr	r3, [r7, #8]
 801bbd0:	4413      	add	r3, r2
 801bbd2:	781a      	ldrb	r2, [r3, #0]
 801bbd4:	4b0d      	ldr	r3, [pc, #52]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bbd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bbda:	4a0c      	ldr	r2, [pc, #48]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bbdc:	7bbb      	ldrb	r3, [r7, #14]
 801bbde:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bbe2:	68bb      	ldr	r3, [r7, #8]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d105      	bne.n	801bbf4 <RadioSetRxConfig+0x2f4>
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	2b0b      	cmp	r3, #11
 801bbec:	d008      	beq.n	801bc00 <RadioSetRxConfig+0x300>
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	2b0c      	cmp	r3, #12
 801bbf2:	d005      	beq.n	801bc00 <RadioSetRxConfig+0x300>
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	2b01      	cmp	r3, #1
 801bbf8:	d116      	bne.n	801bc28 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2b0c      	cmp	r3, #12
 801bbfe:	d113      	bne.n	801bc28 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bc00:	4b02      	ldr	r3, [pc, #8]	; (801bc0c <RadioSetRxConfig+0x30c>)
 801bc02:	2201      	movs	r2, #1
 801bc04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bc08:	e012      	b.n	801bc30 <RadioSetRxConfig+0x330>
 801bc0a:	bf00      	nop
 801bc0c:	20004158 	.word	0x20004158
 801bc10:	20000110 	.word	0x20000110
 801bc14:	20004190 	.word	0x20004190
 801bc18:	20004166 	.word	0x20004166
 801bc1c:	08022948 	.word	0x08022948
 801bc20:	08022950 	.word	0x08022950
 801bc24:	08023368 	.word	0x08023368
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bc28:	4b39      	ldr	r3, [pc, #228]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc2a:	2200      	movs	r2, #0
 801bc2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bc30:	4b37      	ldr	r3, [pc, #220]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc32:	2201      	movs	r2, #1
 801bc34:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bc36:	4b36      	ldr	r3, [pc, #216]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bc3c:	2b05      	cmp	r3, #5
 801bc3e:	d004      	beq.n	801bc4a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bc40:	4b33      	ldr	r3, [pc, #204]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bc46:	2b06      	cmp	r3, #6
 801bc48:	d10a      	bne.n	801bc60 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 801bc4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc4c:	2b0b      	cmp	r3, #11
 801bc4e:	d803      	bhi.n	801bc58 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bc50:	4b2f      	ldr	r3, [pc, #188]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc52:	220c      	movs	r2, #12
 801bc54:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bc56:	e006      	b.n	801bc66 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bc58:	4a2d      	ldr	r2, [pc, #180]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc5c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bc5e:	e002      	b.n	801bc66 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bc60:	4a2b      	ldr	r2, [pc, #172]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc64:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bc66:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bc6a:	4b29      	ldr	r3, [pc, #164]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc6c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bc6e:	4b29      	ldr	r3, [pc, #164]	; (801bd14 <RadioSetRxConfig+0x414>)
 801bc70:	781a      	ldrb	r2, [r3, #0]
 801bc72:	4b27      	ldr	r3, [pc, #156]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc74:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bc76:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bc7a:	4b25      	ldr	r3, [pc, #148]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc7c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bc80:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bc84:	4b22      	ldr	r3, [pc, #136]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bc8a:	f000 fbd6 	bl	801c43a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bc8e:	4b20      	ldr	r3, [pc, #128]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bc90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	bf14      	ite	ne
 801bc98:	2301      	movne	r3, #1
 801bc9a:	2300      	moveq	r3, #0
 801bc9c:	b2db      	uxtb	r3, r3
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7ff fd60 	bl	801b764 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bca4:	481c      	ldr	r0, [pc, #112]	; (801bd18 <RadioSetRxConfig+0x418>)
 801bca6:	f002 f847 	bl	801dd38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bcaa:	481c      	ldr	r0, [pc, #112]	; (801bd1c <RadioSetRxConfig+0x41c>)
 801bcac:	f002 f916 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bcb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	f001 fe1c 	bl	801d8f2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bcba:	4b15      	ldr	r3, [pc, #84]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bcbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bcc0:	2b01      	cmp	r3, #1
 801bcc2:	d10d      	bne.n	801bce0 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801bcc4:	f240 7036 	movw	r0, #1846	; 0x736
 801bcc8:	f002 fa64 	bl	801e194 <SUBGRF_ReadRegister>
 801bccc:	4603      	mov	r3, r0
 801bcce:	f023 0304 	bic.w	r3, r3, #4
 801bcd2:	b2db      	uxtb	r3, r3
 801bcd4:	4619      	mov	r1, r3
 801bcd6:	f240 7036 	movw	r0, #1846	; 0x736
 801bcda:	f002 fa47 	bl	801e16c <SUBGRF_WriteRegister>
 801bcde:	e00c      	b.n	801bcfa <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801bce0:	f240 7036 	movw	r0, #1846	; 0x736
 801bce4:	f002 fa56 	bl	801e194 <SUBGRF_ReadRegister>
 801bce8:	4603      	mov	r3, r0
 801bcea:	f043 0304 	orr.w	r3, r3, #4
 801bcee:	b2db      	uxtb	r3, r3
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	f240 7036 	movw	r0, #1846	; 0x736
 801bcf6:	f002 fa39 	bl	801e16c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bcfa:	4b05      	ldr	r3, [pc, #20]	; (801bd10 <RadioSetRxConfig+0x410>)
 801bcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd00:	609a      	str	r2, [r3, #8]
            break;
 801bd02:	e000      	b.n	801bd06 <RadioSetRxConfig+0x406>
            break;
 801bd04:	bf00      	nop
    }
}
 801bd06:	bf00      	nop
 801bd08:	3728      	adds	r7, #40	; 0x28
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	bd80      	pop	{r7, pc}
 801bd0e:	bf00      	nop
 801bd10:	20004158 	.word	0x20004158
 801bd14:	20000110 	.word	0x20000110
 801bd18:	20004190 	.word	0x20004190
 801bd1c:	20004166 	.word	0x20004166

0801bd20 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b086      	sub	sp, #24
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	60ba      	str	r2, [r7, #8]
 801bd28:	607b      	str	r3, [r7, #4]
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	73fb      	strb	r3, [r7, #15]
 801bd2e:	460b      	mov	r3, r1
 801bd30:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801bd32:	f002 fcf2 	bl	801e71a <RFW_DeInit>
    switch( modem )
 801bd36:	7bfb      	ldrb	r3, [r7, #15]
 801bd38:	2b03      	cmp	r3, #3
 801bd3a:	f000 80d7 	beq.w	801beec <RadioSetTxConfig+0x1cc>
 801bd3e:	2b03      	cmp	r3, #3
 801bd40:	f300 80e6 	bgt.w	801bf10 <RadioSetTxConfig+0x1f0>
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d002      	beq.n	801bd4e <RadioSetTxConfig+0x2e>
 801bd48:	2b01      	cmp	r3, #1
 801bd4a:	d061      	beq.n	801be10 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 801bd4c:	e0e0      	b.n	801bf10 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd4e:	4b7c      	ldr	r3, [pc, #496]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd50:	2200      	movs	r2, #0
 801bd52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bd56:	4a7a      	ldr	r2, [pc, #488]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd58:	6a3b      	ldr	r3, [r7, #32]
 801bd5a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bd5c:	4b78      	ldr	r3, [pc, #480]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd5e:	220b      	movs	r2, #11
 801bd60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bd64:	6878      	ldr	r0, [r7, #4]
 801bd66:	f002 fc0b 	bl	801e580 <SUBGRF_GetFskBandwidthRegValue>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	461a      	mov	r2, r3
 801bd6e:	4b74      	ldr	r3, [pc, #464]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bd74:	4a72      	ldr	r2, [pc, #456]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd76:	68bb      	ldr	r3, [r7, #8]
 801bd78:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd7a:	4b71      	ldr	r3, [pc, #452]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bd80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd82:	00db      	lsls	r3, r3, #3
 801bd84:	b29a      	uxth	r2, r3
 801bd86:	4b6e      	ldr	r3, [pc, #440]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd88:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bd8a:	4b6d      	ldr	r3, [pc, #436]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd8c:	2204      	movs	r2, #4
 801bd8e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bd90:	4b6b      	ldr	r3, [pc, #428]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd92:	2218      	movs	r2, #24
 801bd94:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bd96:	4b6a      	ldr	r3, [pc, #424]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bd98:	2200      	movs	r2, #0
 801bd9a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bd9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801bda0:	f083 0301 	eor.w	r3, r3, #1
 801bda4:	b2db      	uxtb	r3, r3
 801bda6:	461a      	mov	r2, r3
 801bda8:	4b65      	ldr	r3, [pc, #404]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bdaa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801bdac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d003      	beq.n	801bdbc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bdb4:	4b62      	ldr	r3, [pc, #392]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bdb6:	22f2      	movs	r2, #242	; 0xf2
 801bdb8:	75da      	strb	r2, [r3, #23]
 801bdba:	e002      	b.n	801bdc2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bdbc:	4b60      	ldr	r3, [pc, #384]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bdbe:	2201      	movs	r2, #1
 801bdc0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bdc2:	4b5f      	ldr	r3, [pc, #380]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bdc4:	2201      	movs	r2, #1
 801bdc6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bdc8:	f000 fb37 	bl	801c43a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bdcc:	4b5c      	ldr	r3, [pc, #368]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bdce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	bf14      	ite	ne
 801bdd6:	2301      	movne	r3, #1
 801bdd8:	2300      	moveq	r3, #0
 801bdda:	b2db      	uxtb	r3, r3
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7ff fcc1 	bl	801b764 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bde2:	4858      	ldr	r0, [pc, #352]	; (801bf44 <RadioSetTxConfig+0x224>)
 801bde4:	f001 ffa8 	bl	801dd38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bde8:	4857      	ldr	r0, [pc, #348]	; (801bf48 <RadioSetTxConfig+0x228>)
 801bdea:	f002 f877 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bdee:	4a57      	ldr	r2, [pc, #348]	; (801bf4c <RadioSetTxConfig+0x22c>)
 801bdf0:	f107 0310 	add.w	r3, r7, #16
 801bdf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bdf8:	e883 0003 	stmia.w	r3, {r0, r1}
 801bdfc:	f107 0310 	add.w	r3, r7, #16
 801be00:	4618      	mov	r0, r3
 801be02:	f001 fba0 	bl	801d546 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801be06:	f240 10ff 	movw	r0, #511	; 0x1ff
 801be0a:	f001 fbeb 	bl	801d5e4 <SUBGRF_SetWhiteningSeed>
            break;
 801be0e:	e080      	b.n	801bf12 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801be10:	4b4b      	ldr	r3, [pc, #300]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be12:	2201      	movs	r2, #1
 801be14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801be18:	6a3b      	ldr	r3, [r7, #32]
 801be1a:	b2da      	uxtb	r2, r3
 801be1c:	4b48      	ldr	r3, [pc, #288]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801be22:	4a4b      	ldr	r2, [pc, #300]	; (801bf50 <RadioSetTxConfig+0x230>)
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	4413      	add	r3, r2
 801be28:	781a      	ldrb	r2, [r3, #0]
 801be2a:	4b45      	ldr	r3, [pc, #276]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801be30:	4a43      	ldr	r2, [pc, #268]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801be36:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d105      	bne.n	801be4c <RadioSetTxConfig+0x12c>
 801be40:	6a3b      	ldr	r3, [r7, #32]
 801be42:	2b0b      	cmp	r3, #11
 801be44:	d008      	beq.n	801be58 <RadioSetTxConfig+0x138>
 801be46:	6a3b      	ldr	r3, [r7, #32]
 801be48:	2b0c      	cmp	r3, #12
 801be4a:	d005      	beq.n	801be58 <RadioSetTxConfig+0x138>
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	2b01      	cmp	r3, #1
 801be50:	d107      	bne.n	801be62 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801be52:	6a3b      	ldr	r3, [r7, #32]
 801be54:	2b0c      	cmp	r3, #12
 801be56:	d104      	bne.n	801be62 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801be58:	4b39      	ldr	r3, [pc, #228]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be5a:	2201      	movs	r2, #1
 801be5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801be60:	e003      	b.n	801be6a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801be62:	4b37      	ldr	r3, [pc, #220]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be64:	2200      	movs	r2, #0
 801be66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801be6a:	4b35      	ldr	r3, [pc, #212]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be6c:	2201      	movs	r2, #1
 801be6e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801be70:	4b33      	ldr	r3, [pc, #204]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801be76:	2b05      	cmp	r3, #5
 801be78:	d004      	beq.n	801be84 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801be7a:	4b31      	ldr	r3, [pc, #196]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801be80:	2b06      	cmp	r3, #6
 801be82:	d10a      	bne.n	801be9a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 801be84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801be86:	2b0b      	cmp	r3, #11
 801be88:	d803      	bhi.n	801be92 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801be8a:	4b2d      	ldr	r3, [pc, #180]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be8c:	220c      	movs	r2, #12
 801be8e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801be90:	e006      	b.n	801bea0 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801be92:	4a2b      	ldr	r2, [pc, #172]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801be96:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801be98:	e002      	b.n	801bea0 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801be9a:	4a29      	ldr	r2, [pc, #164]	; (801bf40 <RadioSetTxConfig+0x220>)
 801be9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801be9e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bea0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801bea4:	4b26      	ldr	r3, [pc, #152]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bea6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bea8:	4b2a      	ldr	r3, [pc, #168]	; (801bf54 <RadioSetTxConfig+0x234>)
 801beaa:	781a      	ldrb	r2, [r3, #0]
 801beac:	4b24      	ldr	r3, [pc, #144]	; (801bf40 <RadioSetTxConfig+0x220>)
 801beae:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801beb0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801beb4:	4b22      	ldr	r3, [pc, #136]	; (801bf40 <RadioSetTxConfig+0x220>)
 801beb6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801beba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bebe:	4b20      	ldr	r3, [pc, #128]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bec4:	f000 fab9 	bl	801c43a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bec8:	4b1d      	ldr	r3, [pc, #116]	; (801bf40 <RadioSetTxConfig+0x220>)
 801beca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bece:	2b00      	cmp	r3, #0
 801bed0:	bf14      	ite	ne
 801bed2:	2301      	movne	r3, #1
 801bed4:	2300      	moveq	r3, #0
 801bed6:	b2db      	uxtb	r3, r3
 801bed8:	4618      	mov	r0, r3
 801beda:	f7ff fc43 	bl	801b764 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bede:	4819      	ldr	r0, [pc, #100]	; (801bf44 <RadioSetTxConfig+0x224>)
 801bee0:	f001 ff2a 	bl	801dd38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bee4:	4818      	ldr	r0, [pc, #96]	; (801bf48 <RadioSetTxConfig+0x228>)
 801bee6:	f001 fff9 	bl	801dedc <SUBGRF_SetPacketParams>
            break;
 801beea:	e012      	b.n	801bf12 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801beec:	2003      	movs	r0, #3
 801beee:	f7ff fc39 	bl	801b764 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bef2:	4b13      	ldr	r3, [pc, #76]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bef4:	2202      	movs	r2, #2
 801bef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801befa:	4a11      	ldr	r2, [pc, #68]	; (801bf40 <RadioSetTxConfig+0x220>)
 801befc:	6a3b      	ldr	r3, [r7, #32]
 801befe:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bf00:	4b0f      	ldr	r3, [pc, #60]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bf02:	2216      	movs	r2, #22
 801bf04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf08:	480e      	ldr	r0, [pc, #56]	; (801bf44 <RadioSetTxConfig+0x224>)
 801bf0a:	f001 ff15 	bl	801dd38 <SUBGRF_SetModulationParams>
            break;
 801bf0e:	e000      	b.n	801bf12 <RadioSetTxConfig+0x1f2>
            break;
 801bf10:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bf12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bf16:	4618      	mov	r0, r3
 801bf18:	f002 fa44 	bl	801e3a4 <SUBGRF_SetRfTxPower>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	461a      	mov	r2, r3
 801bf20:	4b07      	ldr	r3, [pc, #28]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bf22:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801bf26:	4b06      	ldr	r3, [pc, #24]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bf28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f002 fc08 	bl	801e742 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801bf32:	4a03      	ldr	r2, [pc, #12]	; (801bf40 <RadioSetTxConfig+0x220>)
 801bf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf36:	6053      	str	r3, [r2, #4]
}
 801bf38:	bf00      	nop
 801bf3a:	3718      	adds	r7, #24
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	bd80      	pop	{r7, pc}
 801bf40:	20004158 	.word	0x20004158
 801bf44:	20004190 	.word	0x20004190
 801bf48:	20004166 	.word	0x20004166
 801bf4c:	08022950 	.word	0x08022950
 801bf50:	08023368 	.word	0x08023368
 801bf54:	20000110 	.word	0x20000110

0801bf58 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801bf58:	b480      	push	{r7}
 801bf5a:	b083      	sub	sp, #12
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6078      	str	r0, [r7, #4]
    return true;
 801bf60:	2301      	movs	r3, #1
}
 801bf62:	4618      	mov	r0, r3
 801bf64:	370c      	adds	r7, #12
 801bf66:	46bd      	mov	sp, r7
 801bf68:	bc80      	pop	{r7}
 801bf6a:	4770      	bx	lr

0801bf6c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801bf6c:	b480      	push	{r7}
 801bf6e:	b085      	sub	sp, #20
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	4603      	mov	r3, r0
 801bf74:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801bf76:	2300      	movs	r3, #0
 801bf78:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801bf7a:	79fb      	ldrb	r3, [r7, #7]
 801bf7c:	2b0a      	cmp	r3, #10
 801bf7e:	d83e      	bhi.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
 801bf80:	a201      	add	r2, pc, #4	; (adr r2, 801bf88 <RadioGetLoRaBandwidthInHz+0x1c>)
 801bf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf86:	bf00      	nop
 801bf88:	0801bfb5 	.word	0x0801bfb5
 801bf8c:	0801bfc5 	.word	0x0801bfc5
 801bf90:	0801bfd5 	.word	0x0801bfd5
 801bf94:	0801bfe5 	.word	0x0801bfe5
 801bf98:	0801bfed 	.word	0x0801bfed
 801bf9c:	0801bff3 	.word	0x0801bff3
 801bfa0:	0801bff9 	.word	0x0801bff9
 801bfa4:	0801bfff 	.word	0x0801bfff
 801bfa8:	0801bfbd 	.word	0x0801bfbd
 801bfac:	0801bfcd 	.word	0x0801bfcd
 801bfb0:	0801bfdd 	.word	0x0801bfdd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801bfb4:	f641 6384 	movw	r3, #7812	; 0x1e84
 801bfb8:	60fb      	str	r3, [r7, #12]
        break;
 801bfba:	e020      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801bfbc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801bfc0:	60fb      	str	r3, [r7, #12]
        break;
 801bfc2:	e01c      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801bfc4:	f643 5309 	movw	r3, #15625	; 0x3d09
 801bfc8:	60fb      	str	r3, [r7, #12]
        break;
 801bfca:	e018      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801bfcc:	f245 1361 	movw	r3, #20833	; 0x5161
 801bfd0:	60fb      	str	r3, [r7, #12]
        break;
 801bfd2:	e014      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801bfd4:	f647 2312 	movw	r3, #31250	; 0x7a12
 801bfd8:	60fb      	str	r3, [r7, #12]
        break;
 801bfda:	e010      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801bfdc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801bfe0:	60fb      	str	r3, [r7, #12]
        break;
 801bfe2:	e00c      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801bfe4:	f24f 4324 	movw	r3, #62500	; 0xf424
 801bfe8:	60fb      	str	r3, [r7, #12]
        break;
 801bfea:	e008      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801bfec:	4b07      	ldr	r3, [pc, #28]	; (801c00c <RadioGetLoRaBandwidthInHz+0xa0>)
 801bfee:	60fb      	str	r3, [r7, #12]
        break;
 801bff0:	e005      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801bff2:	4b07      	ldr	r3, [pc, #28]	; (801c010 <RadioGetLoRaBandwidthInHz+0xa4>)
 801bff4:	60fb      	str	r3, [r7, #12]
        break;
 801bff6:	e002      	b.n	801bffe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801bff8:	4b06      	ldr	r3, [pc, #24]	; (801c014 <RadioGetLoRaBandwidthInHz+0xa8>)
 801bffa:	60fb      	str	r3, [r7, #12]
        break;
 801bffc:	bf00      	nop
    }

    return bandwidthInHz;
 801bffe:	68fb      	ldr	r3, [r7, #12]
}
 801c000:	4618      	mov	r0, r3
 801c002:	3714      	adds	r7, #20
 801c004:	46bd      	mov	sp, r7
 801c006:	bc80      	pop	{r7}
 801c008:	4770      	bx	lr
 801c00a:	bf00      	nop
 801c00c:	0001e848 	.word	0x0001e848
 801c010:	0003d090 	.word	0x0003d090
 801c014:	0007a120 	.word	0x0007a120

0801c018 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c018:	b480      	push	{r7}
 801c01a:	b083      	sub	sp, #12
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
 801c020:	4608      	mov	r0, r1
 801c022:	4611      	mov	r1, r2
 801c024:	461a      	mov	r2, r3
 801c026:	4603      	mov	r3, r0
 801c028:	70fb      	strb	r3, [r7, #3]
 801c02a:	460b      	mov	r3, r1
 801c02c:	803b      	strh	r3, [r7, #0]
 801c02e:	4613      	mov	r3, r2
 801c030:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801c032:	883b      	ldrh	r3, [r7, #0]
 801c034:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c036:	78ba      	ldrb	r2, [r7, #2]
 801c038:	f082 0201 	eor.w	r2, r2, #1
 801c03c:	b2d2      	uxtb	r2, r2
 801c03e:	2a00      	cmp	r2, #0
 801c040:	d001      	beq.n	801c046 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c042:	2208      	movs	r2, #8
 801c044:	e000      	b.n	801c048 <RadioGetGfskTimeOnAirNumerator+0x30>
 801c046:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c048:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c04a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c04e:	7c3b      	ldrb	r3, [r7, #16]
 801c050:	7d39      	ldrb	r1, [r7, #20]
 801c052:	2900      	cmp	r1, #0
 801c054:	d001      	beq.n	801c05a <RadioGetGfskTimeOnAirNumerator+0x42>
 801c056:	2102      	movs	r1, #2
 801c058:	e000      	b.n	801c05c <RadioGetGfskTimeOnAirNumerator+0x44>
 801c05a:	2100      	movs	r1, #0
 801c05c:	440b      	add	r3, r1
 801c05e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c060:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801c062:	4618      	mov	r0, r3
 801c064:	370c      	adds	r7, #12
 801c066:	46bd      	mov	sp, r7
 801c068:	bc80      	pop	{r7}
 801c06a:	4770      	bx	lr

0801c06c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c06c:	b480      	push	{r7}
 801c06e:	b08b      	sub	sp, #44	; 0x2c
 801c070:	af00      	add	r7, sp, #0
 801c072:	60f8      	str	r0, [r7, #12]
 801c074:	60b9      	str	r1, [r7, #8]
 801c076:	4611      	mov	r1, r2
 801c078:	461a      	mov	r2, r3
 801c07a:	460b      	mov	r3, r1
 801c07c:	71fb      	strb	r3, [r7, #7]
 801c07e:	4613      	mov	r3, r2
 801c080:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c082:	79fb      	ldrb	r3, [r7, #7]
 801c084:	3304      	adds	r3, #4
 801c086:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c088:	2300      	movs	r3, #0
 801c08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c08e:	68bb      	ldr	r3, [r7, #8]
 801c090:	2b05      	cmp	r3, #5
 801c092:	d002      	beq.n	801c09a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	2b06      	cmp	r3, #6
 801c098:	d104      	bne.n	801c0a4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c09a:	88bb      	ldrh	r3, [r7, #4]
 801c09c:	2b0b      	cmp	r3, #11
 801c09e:	d801      	bhi.n	801c0a4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c0a0:	230c      	movs	r3, #12
 801c0a2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d105      	bne.n	801c0b6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	2b0b      	cmp	r3, #11
 801c0ae:	d008      	beq.n	801c0c2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	2b0c      	cmp	r3, #12
 801c0b4:	d005      	beq.n	801c0c2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	2b01      	cmp	r3, #1
 801c0ba:	d105      	bne.n	801c0c8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c0bc:	68bb      	ldr	r3, [r7, #8]
 801c0be:	2b0c      	cmp	r3, #12
 801c0c0:	d102      	bne.n	801c0c8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c0c2:	2301      	movs	r3, #1
 801c0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c0c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c0cc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c0ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c0d2:	2a00      	cmp	r2, #0
 801c0d4:	d001      	beq.n	801c0da <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c0d6:	2210      	movs	r2, #16
 801c0d8:	e000      	b.n	801c0dc <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c0da:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c0dc:	4413      	add	r3, r2
 801c0de:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c0e4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c0e6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c0ea:	2a00      	cmp	r2, #0
 801c0ec:	d001      	beq.n	801c0f2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	e000      	b.n	801c0f4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c0f2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c0f4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c0f6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	2b06      	cmp	r3, #6
 801c0fc:	d803      	bhi.n	801c106 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	623b      	str	r3, [r7, #32]
 801c104:	e00e      	b.n	801c124 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c106:	69fb      	ldr	r3, [r7, #28]
 801c108:	3308      	adds	r3, #8
 801c10a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c110:	2b00      	cmp	r3, #0
 801c112:	d004      	beq.n	801c11e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c114:	68bb      	ldr	r3, [r7, #8]
 801c116:	3b02      	subs	r3, #2
 801c118:	009b      	lsls	r3, r3, #2
 801c11a:	623b      	str	r3, [r7, #32]
 801c11c:	e002      	b.n	801c124 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	009b      	lsls	r3, r3, #2
 801c122:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c124:	69fb      	ldr	r3, [r7, #28]
 801c126:	2b00      	cmp	r3, #0
 801c128:	da01      	bge.n	801c12e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c12a:	2300      	movs	r3, #0
 801c12c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c12e:	69fa      	ldr	r2, [r7, #28]
 801c130:	6a3b      	ldr	r3, [r7, #32]
 801c132:	4413      	add	r3, r2
 801c134:	1e5a      	subs	r2, r3, #1
 801c136:	6a3b      	ldr	r3, [r7, #32]
 801c138:	fb92 f3f3 	sdiv	r3, r2, r3
 801c13c:	697a      	ldr	r2, [r7, #20]
 801c13e:	fb03 f202 	mul.w	r2, r3, r2
 801c142:	88bb      	ldrh	r3, [r7, #4]
 801c144:	4413      	add	r3, r2
    int32_t intermediate =
 801c146:	330c      	adds	r3, #12
 801c148:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	2b06      	cmp	r3, #6
 801c14e:	d802      	bhi.n	801c156 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c150:	69bb      	ldr	r3, [r7, #24]
 801c152:	3302      	adds	r3, #2
 801c154:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c156:	69bb      	ldr	r3, [r7, #24]
 801c158:	009b      	lsls	r3, r3, #2
 801c15a:	1c5a      	adds	r2, r3, #1
 801c15c:	68bb      	ldr	r3, [r7, #8]
 801c15e:	3b02      	subs	r3, #2
 801c160:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c164:	4618      	mov	r0, r3
 801c166:	372c      	adds	r7, #44	; 0x2c
 801c168:	46bd      	mov	sp, r7
 801c16a:	bc80      	pop	{r7}
 801c16c:	4770      	bx	lr
	...

0801c170 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b08a      	sub	sp, #40	; 0x28
 801c174:	af04      	add	r7, sp, #16
 801c176:	60b9      	str	r1, [r7, #8]
 801c178:	607a      	str	r2, [r7, #4]
 801c17a:	461a      	mov	r2, r3
 801c17c:	4603      	mov	r3, r0
 801c17e:	73fb      	strb	r3, [r7, #15]
 801c180:	4613      	mov	r3, r2
 801c182:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c184:	2300      	movs	r3, #0
 801c186:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c188:	2301      	movs	r3, #1
 801c18a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c18c:	7bfb      	ldrb	r3, [r7, #15]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d002      	beq.n	801c198 <RadioTimeOnAir+0x28>
 801c192:	2b01      	cmp	r3, #1
 801c194:	d017      	beq.n	801c1c6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c196:	e035      	b.n	801c204 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c198:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c19c:	8c3a      	ldrh	r2, [r7, #32]
 801c19e:	7bb9      	ldrb	r1, [r7, #14]
 801c1a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c1a4:	9301      	str	r3, [sp, #4]
 801c1a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c1aa:	9300      	str	r3, [sp, #0]
 801c1ac:	4603      	mov	r3, r0
 801c1ae:	6878      	ldr	r0, [r7, #4]
 801c1b0:	f7ff ff32 	bl	801c018 <RadioGetGfskTimeOnAirNumerator>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c1ba:	fb02 f303 	mul.w	r3, r2, r3
 801c1be:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	613b      	str	r3, [r7, #16]
        break;
 801c1c4:	e01e      	b.n	801c204 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c1c6:	8c39      	ldrh	r1, [r7, #32]
 801c1c8:	7bba      	ldrb	r2, [r7, #14]
 801c1ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c1ce:	9302      	str	r3, [sp, #8]
 801c1d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c1d4:	9301      	str	r3, [sp, #4]
 801c1d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c1da:	9300      	str	r3, [sp, #0]
 801c1dc:	460b      	mov	r3, r1
 801c1de:	6879      	ldr	r1, [r7, #4]
 801c1e0:	68b8      	ldr	r0, [r7, #8]
 801c1e2:	f7ff ff43 	bl	801c06c <RadioGetLoRaTimeOnAirNumerator>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c1ec:	fb02 f303 	mul.w	r3, r2, r3
 801c1f0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c1f2:	4a0a      	ldr	r2, [pc, #40]	; (801c21c <RadioTimeOnAir+0xac>)
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	4413      	add	r3, r2
 801c1f8:	781b      	ldrb	r3, [r3, #0]
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	f7ff feb6 	bl	801bf6c <RadioGetLoRaBandwidthInHz>
 801c200:	6138      	str	r0, [r7, #16]
        break;
 801c202:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 801c204:	697a      	ldr	r2, [r7, #20]
 801c206:	693b      	ldr	r3, [r7, #16]
 801c208:	4413      	add	r3, r2
 801c20a:	1e5a      	subs	r2, r3, #1
 801c20c:	693b      	ldr	r3, [r7, #16]
 801c20e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c212:	4618      	mov	r0, r3
 801c214:	3718      	adds	r7, #24
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}
 801c21a:	bf00      	nop
 801c21c:	08023368 	.word	0x08023368

0801c220 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801c220:	b580      	push	{r7, lr}
 801c222:	b084      	sub	sp, #16
 801c224:	af00      	add	r7, sp, #0
 801c226:	6078      	str	r0, [r7, #4]
 801c228:	460b      	mov	r3, r1
 801c22a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c22c:	2300      	movs	r3, #0
 801c22e:	2200      	movs	r2, #0
 801c230:	f240 2101 	movw	r1, #513	; 0x201
 801c234:	f240 2001 	movw	r0, #513	; 0x201
 801c238:	f001 fc50 	bl	801dadc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 801c23c:	4b70      	ldr	r3, [pc, #448]	; (801c400 <RadioSend+0x1e0>)
 801c23e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c242:	2101      	movs	r1, #1
 801c244:	4618      	mov	r0, r3
 801c246:	f002 f885 	bl	801e354 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 801c24a:	4b6d      	ldr	r3, [pc, #436]	; (801c400 <RadioSend+0x1e0>)
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	2b01      	cmp	r3, #1
 801c250:	d112      	bne.n	801c278 <RadioSend+0x58>
 801c252:	4b6b      	ldr	r3, [pc, #428]	; (801c400 <RadioSend+0x1e0>)
 801c254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c258:	2b06      	cmp	r3, #6
 801c25a:	d10d      	bne.n	801c278 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801c25c:	f640 0089 	movw	r0, #2185	; 0x889
 801c260:	f001 ff98 	bl	801e194 <SUBGRF_ReadRegister>
 801c264:	4603      	mov	r3, r0
 801c266:	f023 0304 	bic.w	r3, r3, #4
 801c26a:	b2db      	uxtb	r3, r3
 801c26c:	4619      	mov	r1, r3
 801c26e:	f640 0089 	movw	r0, #2185	; 0x889
 801c272:	f001 ff7b 	bl	801e16c <SUBGRF_WriteRegister>
 801c276:	e00c      	b.n	801c292 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801c278:	f640 0089 	movw	r0, #2185	; 0x889
 801c27c:	f001 ff8a 	bl	801e194 <SUBGRF_ReadRegister>
 801c280:	4603      	mov	r3, r0
 801c282:	f043 0304 	orr.w	r3, r3, #4
 801c286:	b2db      	uxtb	r3, r3
 801c288:	4619      	mov	r1, r3
 801c28a:	f640 0089 	movw	r0, #2185	; 0x889
 801c28e:	f001 ff6d 	bl	801e16c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 801c292:	4b5b      	ldr	r3, [pc, #364]	; (801c400 <RadioSend+0x1e0>)
 801c294:	781b      	ldrb	r3, [r3, #0]
 801c296:	2b03      	cmp	r3, #3
 801c298:	f200 80a5 	bhi.w	801c3e6 <RadioSend+0x1c6>
 801c29c:	a201      	add	r2, pc, #4	; (adr r2, 801c2a4 <RadioSend+0x84>)
 801c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2a2:	bf00      	nop
 801c2a4:	0801c2cf 	.word	0x0801c2cf
 801c2a8:	0801c2b5 	.word	0x0801c2b5
 801c2ac:	0801c32f 	.word	0x0801c32f
 801c2b0:	0801c34f 	.word	0x0801c34f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c2b4:	4a52      	ldr	r2, [pc, #328]	; (801c400 <RadioSend+0x1e0>)
 801c2b6:	78fb      	ldrb	r3, [r7, #3]
 801c2b8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c2ba:	4852      	ldr	r0, [pc, #328]	; (801c404 <RadioSend+0x1e4>)
 801c2bc:	f001 fe0e 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c2c0:	78fb      	ldrb	r3, [r7, #3]
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	4619      	mov	r1, r3
 801c2c6:	6878      	ldr	r0, [r7, #4]
 801c2c8:	f001 f92a 	bl	801d520 <SUBGRF_SendPayload>
            break;
 801c2cc:	e08c      	b.n	801c3e8 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c2ce:	f002 fa2a 	bl	801e726 <RFW_Is_Init>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	2b01      	cmp	r3, #1
 801c2d6:	d11d      	bne.n	801c314 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c2d8:	f107 020d 	add.w	r2, r7, #13
 801c2dc:	78fb      	ldrb	r3, [r7, #3]
 801c2de:	4619      	mov	r1, r3
 801c2e0:	6878      	ldr	r0, [r7, #4]
 801c2e2:	f002 fa38 	bl	801e756 <RFW_TransmitInit>
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d10c      	bne.n	801c306 <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c2ec:	7b7a      	ldrb	r2, [r7, #13]
 801c2ee:	4b44      	ldr	r3, [pc, #272]	; (801c400 <RadioSend+0x1e0>)
 801c2f0:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c2f2:	4844      	ldr	r0, [pc, #272]	; (801c404 <RadioSend+0x1e4>)
 801c2f4:	f001 fdf2 	bl	801dedc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801c2f8:	7b7b      	ldrb	r3, [r7, #13]
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	4619      	mov	r1, r3
 801c2fe:	6878      	ldr	r0, [r7, #4]
 801c300:	f001 f90e 	bl	801d520 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c304:	e070      	b.n	801c3e8 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801c306:	4b40      	ldr	r3, [pc, #256]	; (801c408 <RadioSend+0x1e8>)
 801c308:	2201      	movs	r2, #1
 801c30a:	2100      	movs	r1, #0
 801c30c:	2002      	movs	r0, #2
 801c30e:	f002 fa8f 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
 801c312:	e072      	b.n	801c3fa <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c314:	4a3a      	ldr	r2, [pc, #232]	; (801c400 <RadioSend+0x1e0>)
 801c316:	78fb      	ldrb	r3, [r7, #3]
 801c318:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c31a:	483a      	ldr	r0, [pc, #232]	; (801c404 <RadioSend+0x1e4>)
 801c31c:	f001 fdde 	bl	801dedc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801c320:	78fb      	ldrb	r3, [r7, #3]
 801c322:	2200      	movs	r2, #0
 801c324:	4619      	mov	r1, r3
 801c326:	6878      	ldr	r0, [r7, #4]
 801c328:	f001 f8fa 	bl	801d520 <SUBGRF_SendPayload>
            break;
 801c32c:	e05c      	b.n	801c3e8 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c32e:	4b34      	ldr	r3, [pc, #208]	; (801c400 <RadioSend+0x1e0>)
 801c330:	2202      	movs	r2, #2
 801c332:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c334:	4a32      	ldr	r2, [pc, #200]	; (801c400 <RadioSend+0x1e0>)
 801c336:	78fb      	ldrb	r3, [r7, #3]
 801c338:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c33a:	4832      	ldr	r0, [pc, #200]	; (801c404 <RadioSend+0x1e4>)
 801c33c:	f001 fdce 	bl	801dedc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c340:	78fb      	ldrb	r3, [r7, #3]
 801c342:	2200      	movs	r2, #0
 801c344:	4619      	mov	r1, r3
 801c346:	6878      	ldr	r0, [r7, #4]
 801c348:	f001 f8ea 	bl	801d520 <SUBGRF_SendPayload>
            break;
 801c34c:	e04c      	b.n	801c3e8 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c34e:	78fb      	ldrb	r3, [r7, #3]
 801c350:	461a      	mov	r2, r3
 801c352:	6879      	ldr	r1, [r7, #4]
 801c354:	482d      	ldr	r0, [pc, #180]	; (801c40c <RadioSend+0x1ec>)
 801c356:	f000 fc6a 	bl	801cc2e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c35a:	4b29      	ldr	r3, [pc, #164]	; (801c400 <RadioSend+0x1e0>)
 801c35c:	2202      	movs	r2, #2
 801c35e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c360:	78fb      	ldrb	r3, [r7, #3]
 801c362:	3301      	adds	r3, #1
 801c364:	b2da      	uxtb	r2, r3
 801c366:	4b26      	ldr	r3, [pc, #152]	; (801c400 <RadioSend+0x1e0>)
 801c368:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c36a:	4826      	ldr	r0, [pc, #152]	; (801c404 <RadioSend+0x1e4>)
 801c36c:	f001 fdb6 	bl	801dedc <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801c370:	2100      	movs	r1, #0
 801c372:	20f1      	movs	r0, #241	; 0xf1
 801c374:	f000 f947 	bl	801c606 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 801c378:	2100      	movs	r1, #0
 801c37a:	20f0      	movs	r0, #240	; 0xf0
 801c37c:	f000 f943 	bl	801c606 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c380:	4b1f      	ldr	r3, [pc, #124]	; (801c400 <RadioSend+0x1e0>)
 801c382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c384:	2b64      	cmp	r3, #100	; 0x64
 801c386:	d108      	bne.n	801c39a <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 801c388:	2170      	movs	r1, #112	; 0x70
 801c38a:	20f3      	movs	r0, #243	; 0xf3
 801c38c:	f000 f93b 	bl	801c606 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801c390:	211d      	movs	r1, #29
 801c392:	20f2      	movs	r0, #242	; 0xf2
 801c394:	f000 f937 	bl	801c606 <RadioWrite>
 801c398:	e007      	b.n	801c3aa <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 801c39a:	21e1      	movs	r1, #225	; 0xe1
 801c39c:	20f3      	movs	r0, #243	; 0xf3
 801c39e:	f000 f932 	bl	801c606 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801c3a2:	2104      	movs	r1, #4
 801c3a4:	20f2      	movs	r0, #242	; 0xf2
 801c3a6:	f000 f92e 	bl	801c606 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c3aa:	78fb      	ldrb	r3, [r7, #3]
 801c3ac:	b29b      	uxth	r3, r3
 801c3ae:	00db      	lsls	r3, r3, #3
 801c3b0:	b29b      	uxth	r3, r3
 801c3b2:	3302      	adds	r3, #2
 801c3b4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c3b6:	89fb      	ldrh	r3, [r7, #14]
 801c3b8:	0a1b      	lsrs	r3, r3, #8
 801c3ba:	b29b      	uxth	r3, r3
 801c3bc:	b2db      	uxtb	r3, r3
 801c3be:	4619      	mov	r1, r3
 801c3c0:	20f4      	movs	r0, #244	; 0xf4
 801c3c2:	f000 f920 	bl	801c606 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801c3c6:	89fb      	ldrh	r3, [r7, #14]
 801c3c8:	b2db      	uxtb	r3, r3
 801c3ca:	4619      	mov	r1, r3
 801c3cc:	20f5      	movs	r0, #245	; 0xf5
 801c3ce:	f000 f91a 	bl	801c606 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801c3d2:	78fb      	ldrb	r3, [r7, #3]
 801c3d4:	3301      	adds	r3, #1
 801c3d6:	b2db      	uxtb	r3, r3
 801c3d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c3dc:	4619      	mov	r1, r3
 801c3de:	480b      	ldr	r0, [pc, #44]	; (801c40c <RadioSend+0x1ec>)
 801c3e0:	f001 f89e 	bl	801d520 <SUBGRF_SendPayload>
            break;
 801c3e4:	e000      	b.n	801c3e8 <RadioSend+0x1c8>
        }
        default:
            break;
 801c3e6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c3e8:	4b05      	ldr	r3, [pc, #20]	; (801c400 <RadioSend+0x1e0>)
 801c3ea:	685b      	ldr	r3, [r3, #4]
 801c3ec:	4619      	mov	r1, r3
 801c3ee:	4808      	ldr	r0, [pc, #32]	; (801c410 <RadioSend+0x1f0>)
 801c3f0:	f003 fb66 	bl	801fac0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c3f4:	4806      	ldr	r0, [pc, #24]	; (801c410 <RadioSend+0x1f0>)
 801c3f6:	f003 fa85 	bl	801f904 <UTIL_TIMER_Start>
}
 801c3fa:	3710      	adds	r7, #16
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	bd80      	pop	{r7, pc}
 801c400:	20004158 	.word	0x20004158
 801c404:	20004166 	.word	0x20004166
 801c408:	08022958 	.word	0x08022958
 801c40c:	20004054 	.word	0x20004054
 801c410:	200041b0 	.word	0x200041b0

0801c414 <RadioSleep>:

static void RadioSleep( void )
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b082      	sub	sp, #8
 801c418:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c41a:	2300      	movs	r3, #0
 801c41c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c41e:	793b      	ldrb	r3, [r7, #4]
 801c420:	f043 0304 	orr.w	r3, r3, #4
 801c424:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c426:	7938      	ldrb	r0, [r7, #4]
 801c428:	f001 f956 	bl	801d6d8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c42c:	2002      	movs	r0, #2
 801c42e:	f7e5 fa5c 	bl	80018ea <HAL_Delay>
}
 801c432:	bf00      	nop
 801c434:	3708      	adds	r7, #8
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}

0801c43a <RadioStandby>:

static void RadioStandby( void )
{
 801c43a:	b580      	push	{r7, lr}
 801c43c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c43e:	2000      	movs	r0, #0
 801c440:	f001 f97c 	bl	801d73c <SUBGRF_SetStandby>
}
 801c444:	bf00      	nop
 801c446:	bd80      	pop	{r7, pc}

0801c448 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c448:	b580      	push	{r7, lr}
 801c44a:	b082      	sub	sp, #8
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 801c450:	f002 f969 	bl	801e726 <RFW_Is_Init>
 801c454:	4603      	mov	r3, r0
 801c456:	2b01      	cmp	r3, #1
 801c458:	d102      	bne.n	801c460 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801c45a:	f002 f98c 	bl	801e776 <RFW_ReceiveInit>
 801c45e:	e007      	b.n	801c470 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c460:	2300      	movs	r3, #0
 801c462:	2200      	movs	r2, #0
 801c464:	f240 2162 	movw	r1, #610	; 0x262
 801c468:	f240 2062 	movw	r0, #610	; 0x262
 801c46c:	f001 fb36 	bl	801dadc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d006      	beq.n	801c484 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c476:	6879      	ldr	r1, [r7, #4]
 801c478:	480f      	ldr	r0, [pc, #60]	; (801c4b8 <RadioRx+0x70>)
 801c47a:	f003 fb21 	bl	801fac0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c47e:	480e      	ldr	r0, [pc, #56]	; (801c4b8 <RadioRx+0x70>)
 801c480:	f003 fa40 	bl	801f904 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c484:	4b0d      	ldr	r3, [pc, #52]	; (801c4bc <RadioRx+0x74>)
 801c486:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c48a:	2100      	movs	r1, #0
 801c48c:	4618      	mov	r0, r3
 801c48e:	f001 ff61 	bl	801e354 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801c492:	4b0a      	ldr	r3, [pc, #40]	; (801c4bc <RadioRx+0x74>)
 801c494:	785b      	ldrb	r3, [r3, #1]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d004      	beq.n	801c4a4 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c49a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c49e:	f001 f989 	bl	801d7b4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c4a2:	e005      	b.n	801c4b0 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c4a4:	4b05      	ldr	r3, [pc, #20]	; (801c4bc <RadioRx+0x74>)
 801c4a6:	689b      	ldr	r3, [r3, #8]
 801c4a8:	019b      	lsls	r3, r3, #6
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f001 f982 	bl	801d7b4 <SUBGRF_SetRx>
}
 801c4b0:	bf00      	nop
 801c4b2:	3708      	adds	r7, #8
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	200041c8 	.word	0x200041c8
 801c4bc:	20004158 	.word	0x20004158

0801c4c0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b082      	sub	sp, #8
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801c4c8:	f002 f92d 	bl	801e726 <RFW_Is_Init>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	2b01      	cmp	r3, #1
 801c4d0:	d102      	bne.n	801c4d8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801c4d2:	f002 f950 	bl	801e776 <RFW_ReceiveInit>
 801c4d6:	e007      	b.n	801c4e8 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c4d8:	2300      	movs	r3, #0
 801c4da:	2200      	movs	r2, #0
 801c4dc:	f240 2162 	movw	r1, #610	; 0x262
 801c4e0:	f240 2062 	movw	r0, #610	; 0x262
 801c4e4:	f001 fafa 	bl	801dadc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d006      	beq.n	801c4fc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c4ee:	6879      	ldr	r1, [r7, #4]
 801c4f0:	480f      	ldr	r0, [pc, #60]	; (801c530 <RadioRxBoosted+0x70>)
 801c4f2:	f003 fae5 	bl	801fac0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c4f6:	480e      	ldr	r0, [pc, #56]	; (801c530 <RadioRxBoosted+0x70>)
 801c4f8:	f003 fa04 	bl	801f904 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c4fc:	4b0d      	ldr	r3, [pc, #52]	; (801c534 <RadioRxBoosted+0x74>)
 801c4fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c502:	2100      	movs	r1, #0
 801c504:	4618      	mov	r0, r3
 801c506:	f001 ff25 	bl	801e354 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c50a:	4b0a      	ldr	r3, [pc, #40]	; (801c534 <RadioRxBoosted+0x74>)
 801c50c:	785b      	ldrb	r3, [r3, #1]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d004      	beq.n	801c51c <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c512:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c516:	f001 f96d 	bl	801d7f4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c51a:	e005      	b.n	801c528 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c51c:	4b05      	ldr	r3, [pc, #20]	; (801c534 <RadioRxBoosted+0x74>)
 801c51e:	689b      	ldr	r3, [r3, #8]
 801c520:	019b      	lsls	r3, r3, #6
 801c522:	4618      	mov	r0, r3
 801c524:	f001 f966 	bl	801d7f4 <SUBGRF_SetRxBoosted>
}
 801c528:	bf00      	nop
 801c52a:	3708      	adds	r7, #8
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bd80      	pop	{r7, pc}
 801c530:	200041c8 	.word	0x200041c8
 801c534:	20004158 	.word	0x20004158

0801c538 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c538:	b580      	push	{r7, lr}
 801c53a:	b082      	sub	sp, #8
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	6078      	str	r0, [r7, #4]
 801c540:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c542:	4b07      	ldr	r3, [pc, #28]	; (801c560 <RadioSetRxDutyCycle+0x28>)
 801c544:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c548:	2100      	movs	r1, #0
 801c54a:	4618      	mov	r0, r3
 801c54c:	f001 ff02 	bl	801e354 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c550:	6839      	ldr	r1, [r7, #0]
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f001 f972 	bl	801d83c <SUBGRF_SetRxDutyCycle>
}
 801c558:	bf00      	nop
 801c55a:	3708      	adds	r7, #8
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bd80      	pop	{r7, pc}
 801c560:	20004158 	.word	0x20004158

0801c564 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c564:	b580      	push	{r7, lr}
 801c566:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c568:	4b09      	ldr	r3, [pc, #36]	; (801c590 <RadioStartCad+0x2c>)
 801c56a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c56e:	2100      	movs	r1, #0
 801c570:	4618      	mov	r0, r3
 801c572:	f001 feef 	bl	801e354 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c576:	2300      	movs	r3, #0
 801c578:	2200      	movs	r2, #0
 801c57a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c57e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c582:	f001 faab 	bl	801dadc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c586:	f001 f985 	bl	801d894 <SUBGRF_SetCad>
}
 801c58a:	bf00      	nop
 801c58c:	bd80      	pop	{r7, pc}
 801c58e:	bf00      	nop
 801c590:	20004158 	.word	0x20004158

0801c594 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b084      	sub	sp, #16
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
 801c59c:	460b      	mov	r3, r1
 801c59e:	70fb      	strb	r3, [r7, #3]
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801c5a4:	883b      	ldrh	r3, [r7, #0]
 801c5a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c5aa:	fb02 f303 	mul.w	r3, r2, r3
 801c5ae:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c5b0:	6878      	ldr	r0, [r7, #4]
 801c5b2:	f001 faef 	bl	801db94 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c5b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f001 fef2 	bl	801e3a4 <SUBGRF_SetRfTxPower>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801c5c4:	7afb      	ldrb	r3, [r7, #11]
 801c5c6:	2101      	movs	r1, #1
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f001 fec3 	bl	801e354 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c5ce:	f001 f96f 	bl	801d8b0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c5d2:	68f9      	ldr	r1, [r7, #12]
 801c5d4:	4804      	ldr	r0, [pc, #16]	; (801c5e8 <RadioSetTxContinuousWave+0x54>)
 801c5d6:	f003 fa73 	bl	801fac0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c5da:	4803      	ldr	r0, [pc, #12]	; (801c5e8 <RadioSetTxContinuousWave+0x54>)
 801c5dc:	f003 f992 	bl	801f904 <UTIL_TIMER_Start>
}
 801c5e0:	bf00      	nop
 801c5e2:	3710      	adds	r7, #16
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}
 801c5e8:	200041b0 	.word	0x200041b0

0801c5ec <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b082      	sub	sp, #8
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c5f6:	f001 fd26 	bl	801e046 <SUBGRF_GetRssiInst>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	b21b      	sxth	r3, r3
}
 801c5fe:	4618      	mov	r0, r3
 801c600:	3708      	adds	r7, #8
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}

0801c606 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c606:	b580      	push	{r7, lr}
 801c608:	b082      	sub	sp, #8
 801c60a:	af00      	add	r7, sp, #0
 801c60c:	4603      	mov	r3, r0
 801c60e:	460a      	mov	r2, r1
 801c610:	80fb      	strh	r3, [r7, #6]
 801c612:	4613      	mov	r3, r2
 801c614:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801c616:	797a      	ldrb	r2, [r7, #5]
 801c618:	88fb      	ldrh	r3, [r7, #6]
 801c61a:	4611      	mov	r1, r2
 801c61c:	4618      	mov	r0, r3
 801c61e:	f001 fda5 	bl	801e16c <SUBGRF_WriteRegister>
}
 801c622:	bf00      	nop
 801c624:	3708      	adds	r7, #8
 801c626:	46bd      	mov	sp, r7
 801c628:	bd80      	pop	{r7, pc}

0801c62a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c62a:	b580      	push	{r7, lr}
 801c62c:	b082      	sub	sp, #8
 801c62e:	af00      	add	r7, sp, #0
 801c630:	4603      	mov	r3, r0
 801c632:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801c634:	88fb      	ldrh	r3, [r7, #6]
 801c636:	4618      	mov	r0, r3
 801c638:	f001 fdac 	bl	801e194 <SUBGRF_ReadRegister>
 801c63c:	4603      	mov	r3, r0
}
 801c63e:	4618      	mov	r0, r3
 801c640:	3708      	adds	r7, #8
 801c642:	46bd      	mov	sp, r7
 801c644:	bd80      	pop	{r7, pc}

0801c646 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c646:	b580      	push	{r7, lr}
 801c648:	b082      	sub	sp, #8
 801c64a:	af00      	add	r7, sp, #0
 801c64c:	4603      	mov	r3, r0
 801c64e:	6039      	str	r1, [r7, #0]
 801c650:	80fb      	strh	r3, [r7, #6]
 801c652:	4613      	mov	r3, r2
 801c654:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c656:	797b      	ldrb	r3, [r7, #5]
 801c658:	b29a      	uxth	r2, r3
 801c65a:	88fb      	ldrh	r3, [r7, #6]
 801c65c:	6839      	ldr	r1, [r7, #0]
 801c65e:	4618      	mov	r0, r3
 801c660:	f001 fdac 	bl	801e1bc <SUBGRF_WriteRegisters>
}
 801c664:	bf00      	nop
 801c666:	3708      	adds	r7, #8
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}

0801c66c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b082      	sub	sp, #8
 801c670:	af00      	add	r7, sp, #0
 801c672:	4603      	mov	r3, r0
 801c674:	6039      	str	r1, [r7, #0]
 801c676:	80fb      	strh	r3, [r7, #6]
 801c678:	4613      	mov	r3, r2
 801c67a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c67c:	797b      	ldrb	r3, [r7, #5]
 801c67e:	b29a      	uxth	r2, r3
 801c680:	88fb      	ldrh	r3, [r7, #6]
 801c682:	6839      	ldr	r1, [r7, #0]
 801c684:	4618      	mov	r0, r3
 801c686:	f001 fdbb 	bl	801e200 <SUBGRF_ReadRegisters>
}
 801c68a:	bf00      	nop
 801c68c:	3708      	adds	r7, #8
 801c68e:	46bd      	mov	sp, r7
 801c690:	bd80      	pop	{r7, pc}
	...

0801c694 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b082      	sub	sp, #8
 801c698:	af00      	add	r7, sp, #0
 801c69a:	4603      	mov	r3, r0
 801c69c:	460a      	mov	r2, r1
 801c69e:	71fb      	strb	r3, [r7, #7]
 801c6a0:	4613      	mov	r3, r2
 801c6a2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c6a4:	79fb      	ldrb	r3, [r7, #7]
 801c6a6:	2b01      	cmp	r3, #1
 801c6a8:	d10a      	bne.n	801c6c0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c6aa:	4a0e      	ldr	r2, [pc, #56]	; (801c6e4 <RadioSetMaxPayloadLength+0x50>)
 801c6ac:	79bb      	ldrb	r3, [r7, #6]
 801c6ae:	7013      	strb	r3, [r2, #0]
 801c6b0:	4b0c      	ldr	r3, [pc, #48]	; (801c6e4 <RadioSetMaxPayloadLength+0x50>)
 801c6b2:	781a      	ldrb	r2, [r3, #0]
 801c6b4:	4b0c      	ldr	r3, [pc, #48]	; (801c6e8 <RadioSetMaxPayloadLength+0x54>)
 801c6b6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c6b8:	480c      	ldr	r0, [pc, #48]	; (801c6ec <RadioSetMaxPayloadLength+0x58>)
 801c6ba:	f001 fc0f 	bl	801dedc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c6be:	e00d      	b.n	801c6dc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c6c0:	4b09      	ldr	r3, [pc, #36]	; (801c6e8 <RadioSetMaxPayloadLength+0x54>)
 801c6c2:	7d5b      	ldrb	r3, [r3, #21]
 801c6c4:	2b01      	cmp	r3, #1
 801c6c6:	d109      	bne.n	801c6dc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c6c8:	4a06      	ldr	r2, [pc, #24]	; (801c6e4 <RadioSetMaxPayloadLength+0x50>)
 801c6ca:	79bb      	ldrb	r3, [r7, #6]
 801c6cc:	7013      	strb	r3, [r2, #0]
 801c6ce:	4b05      	ldr	r3, [pc, #20]	; (801c6e4 <RadioSetMaxPayloadLength+0x50>)
 801c6d0:	781a      	ldrb	r2, [r3, #0]
 801c6d2:	4b05      	ldr	r3, [pc, #20]	; (801c6e8 <RadioSetMaxPayloadLength+0x54>)
 801c6d4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c6d6:	4805      	ldr	r0, [pc, #20]	; (801c6ec <RadioSetMaxPayloadLength+0x58>)
 801c6d8:	f001 fc00 	bl	801dedc <SUBGRF_SetPacketParams>
}
 801c6dc:	bf00      	nop
 801c6de:	3708      	adds	r7, #8
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}
 801c6e4:	20000110 	.word	0x20000110
 801c6e8:	20004158 	.word	0x20004158
 801c6ec:	20004166 	.word	0x20004166

0801c6f0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b082      	sub	sp, #8
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c6fa:	4a13      	ldr	r2, [pc, #76]	; (801c748 <RadioSetPublicNetwork+0x58>)
 801c6fc:	79fb      	ldrb	r3, [r7, #7]
 801c6fe:	7313      	strb	r3, [r2, #12]
 801c700:	4b11      	ldr	r3, [pc, #68]	; (801c748 <RadioSetPublicNetwork+0x58>)
 801c702:	7b1a      	ldrb	r2, [r3, #12]
 801c704:	4b10      	ldr	r3, [pc, #64]	; (801c748 <RadioSetPublicNetwork+0x58>)
 801c706:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c708:	2001      	movs	r0, #1
 801c70a:	f7ff f82b 	bl	801b764 <RadioSetModem>
    if( enable == true )
 801c70e:	79fb      	ldrb	r3, [r7, #7]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d00a      	beq.n	801c72a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c714:	2134      	movs	r1, #52	; 0x34
 801c716:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c71a:	f001 fd27 	bl	801e16c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c71e:	2144      	movs	r1, #68	; 0x44
 801c720:	f240 7041 	movw	r0, #1857	; 0x741
 801c724:	f001 fd22 	bl	801e16c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c728:	e009      	b.n	801c73e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c72a:	2114      	movs	r1, #20
 801c72c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c730:	f001 fd1c 	bl	801e16c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c734:	2124      	movs	r1, #36	; 0x24
 801c736:	f240 7041 	movw	r0, #1857	; 0x741
 801c73a:	f001 fd17 	bl	801e16c <SUBGRF_WriteRegister>
}
 801c73e:	bf00      	nop
 801c740:	3708      	adds	r7, #8
 801c742:	46bd      	mov	sp, r7
 801c744:	bd80      	pop	{r7, pc}
 801c746:	bf00      	nop
 801c748:	20004158 	.word	0x20004158

0801c74c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c74c:	b580      	push	{r7, lr}
 801c74e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c750:	f001 fe5c 	bl	801e40c <SUBGRF_GetRadioWakeUpTime>
 801c754:	4603      	mov	r3, r0
 801c756:	3303      	adds	r3, #3
}
 801c758:	4618      	mov	r0, r3
 801c75a:	bd80      	pop	{r7, pc}

0801c75c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b082      	sub	sp, #8
 801c760:	af00      	add	r7, sp, #0
 801c762:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c764:	f000 f80e 	bl	801c784 <RadioOnTxTimeoutProcess>
}
 801c768:	bf00      	nop
 801c76a:	3708      	adds	r7, #8
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}

0801c770 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b082      	sub	sp, #8
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801c778:	f000 f818 	bl	801c7ac <RadioOnRxTimeoutProcess>
}
 801c77c:	bf00      	nop
 801c77e:	3708      	adds	r7, #8
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}

0801c784 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801c784:	b580      	push	{r7, lr}
 801c786:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c788:	4b07      	ldr	r3, [pc, #28]	; (801c7a8 <RadioOnTxTimeoutProcess+0x24>)
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d008      	beq.n	801c7a2 <RadioOnTxTimeoutProcess+0x1e>
 801c790:	4b05      	ldr	r3, [pc, #20]	; (801c7a8 <RadioOnTxTimeoutProcess+0x24>)
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d003      	beq.n	801c7a2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801c79a:	4b03      	ldr	r3, [pc, #12]	; (801c7a8 <RadioOnTxTimeoutProcess+0x24>)
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	685b      	ldr	r3, [r3, #4]
 801c7a0:	4798      	blx	r3
    }
}
 801c7a2:	bf00      	nop
 801c7a4:	bd80      	pop	{r7, pc}
 801c7a6:	bf00      	nop
 801c7a8:	20004154 	.word	0x20004154

0801c7ac <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c7b0:	4b07      	ldr	r3, [pc, #28]	; (801c7d0 <RadioOnRxTimeoutProcess+0x24>)
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d008      	beq.n	801c7ca <RadioOnRxTimeoutProcess+0x1e>
 801c7b8:	4b05      	ldr	r3, [pc, #20]	; (801c7d0 <RadioOnRxTimeoutProcess+0x24>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	68db      	ldr	r3, [r3, #12]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d003      	beq.n	801c7ca <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801c7c2:	4b03      	ldr	r3, [pc, #12]	; (801c7d0 <RadioOnRxTimeoutProcess+0x24>)
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	68db      	ldr	r3, [r3, #12]
 801c7c8:	4798      	blx	r3
    }
}
 801c7ca:	bf00      	nop
 801c7cc:	bd80      	pop	{r7, pc}
 801c7ce:	bf00      	nop
 801c7d0:	20004154 	.word	0x20004154

0801c7d4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801c7d4:	b580      	push	{r7, lr}
 801c7d6:	b082      	sub	sp, #8
 801c7d8:	af00      	add	r7, sp, #0
 801c7da:	4603      	mov	r3, r0
 801c7dc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801c7de:	4a05      	ldr	r2, [pc, #20]	; (801c7f4 <RadioOnDioIrq+0x20>)
 801c7e0:	88fb      	ldrh	r3, [r7, #6]
 801c7e2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801c7e6:	f000 f807 	bl	801c7f8 <RadioIrqProcess>
}
 801c7ea:	bf00      	nop
 801c7ec:	3708      	adds	r7, #8
 801c7ee:	46bd      	mov	sp, r7
 801c7f0:	bd80      	pop	{r7, pc}
 801c7f2:	bf00      	nop
 801c7f4:	20004158 	.word	0x20004158

0801c7f8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801c7f8:	b5b0      	push	{r4, r5, r7, lr}
 801c7fa:	b082      	sub	sp, #8
 801c7fc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801c7fe:	2300      	movs	r3, #0
 801c800:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801c802:	2300      	movs	r3, #0
 801c804:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801c806:	4bb6      	ldr	r3, [pc, #728]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c808:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801c80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c810:	f000 810d 	beq.w	801ca2e <RadioIrqProcess+0x236>
 801c814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c818:	f300 81b7 	bgt.w	801cb8a <RadioIrqProcess+0x392>
 801c81c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c820:	f000 80f1 	beq.w	801ca06 <RadioIrqProcess+0x20e>
 801c824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c828:	f300 81af 	bgt.w	801cb8a <RadioIrqProcess+0x392>
 801c82c:	2b80      	cmp	r3, #128	; 0x80
 801c82e:	f000 80d6 	beq.w	801c9de <RadioIrqProcess+0x1e6>
 801c832:	2b80      	cmp	r3, #128	; 0x80
 801c834:	f300 81a9 	bgt.w	801cb8a <RadioIrqProcess+0x392>
 801c838:	2b20      	cmp	r3, #32
 801c83a:	dc49      	bgt.n	801c8d0 <RadioIrqProcess+0xd8>
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	f340 81a4 	ble.w	801cb8a <RadioIrqProcess+0x392>
 801c842:	3b01      	subs	r3, #1
 801c844:	2b1f      	cmp	r3, #31
 801c846:	f200 81a0 	bhi.w	801cb8a <RadioIrqProcess+0x392>
 801c84a:	a201      	add	r2, pc, #4	; (adr r2, 801c850 <RadioIrqProcess+0x58>)
 801c84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c850:	0801c8d9 	.word	0x0801c8d9
 801c854:	0801c913 	.word	0x0801c913
 801c858:	0801cb8b 	.word	0x0801cb8b
 801c85c:	0801caa9 	.word	0x0801caa9
 801c860:	0801cb8b 	.word	0x0801cb8b
 801c864:	0801cb8b 	.word	0x0801cb8b
 801c868:	0801cb8b 	.word	0x0801cb8b
 801c86c:	0801cab7 	.word	0x0801cab7
 801c870:	0801cb8b 	.word	0x0801cb8b
 801c874:	0801cb8b 	.word	0x0801cb8b
 801c878:	0801cb8b 	.word	0x0801cb8b
 801c87c:	0801cb8b 	.word	0x0801cb8b
 801c880:	0801cb8b 	.word	0x0801cb8b
 801c884:	0801cb8b 	.word	0x0801cb8b
 801c888:	0801cb8b 	.word	0x0801cb8b
 801c88c:	0801cad3 	.word	0x0801cad3
 801c890:	0801cb8b 	.word	0x0801cb8b
 801c894:	0801cb8b 	.word	0x0801cb8b
 801c898:	0801cb8b 	.word	0x0801cb8b
 801c89c:	0801cb8b 	.word	0x0801cb8b
 801c8a0:	0801cb8b 	.word	0x0801cb8b
 801c8a4:	0801cb8b 	.word	0x0801cb8b
 801c8a8:	0801cb8b 	.word	0x0801cb8b
 801c8ac:	0801cb8b 	.word	0x0801cb8b
 801c8b0:	0801cb8b 	.word	0x0801cb8b
 801c8b4:	0801cb8b 	.word	0x0801cb8b
 801c8b8:	0801cb8b 	.word	0x0801cb8b
 801c8bc:	0801cb8b 	.word	0x0801cb8b
 801c8c0:	0801cb8b 	.word	0x0801cb8b
 801c8c4:	0801cb8b 	.word	0x0801cb8b
 801c8c8:	0801cb8b 	.word	0x0801cb8b
 801c8cc:	0801cb0d 	.word	0x0801cb0d
 801c8d0:	2b40      	cmp	r3, #64	; 0x40
 801c8d2:	f000 813c 	beq.w	801cb4e <RadioIrqProcess+0x356>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801c8d6:	e158      	b.n	801cb8a <RadioIrqProcess+0x392>
        TimerStop( &TxTimeoutTimer );
 801c8d8:	4882      	ldr	r0, [pc, #520]	; (801cae4 <RadioIrqProcess+0x2ec>)
 801c8da:	f003 f881 	bl	801f9e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801c8de:	2000      	movs	r0, #0
 801c8e0:	f000 ff2c 	bl	801d73c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801c8e4:	f001 ff26 	bl	801e734 <RFW_Is_LongPacketModeEnabled>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	2b01      	cmp	r3, #1
 801c8ec:	d101      	bne.n	801c8f2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801c8ee:	f001 ff4a 	bl	801e786 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801c8f2:	4b7d      	ldr	r3, [pc, #500]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	f000 8149 	beq.w	801cb8e <RadioIrqProcess+0x396>
 801c8fc:	4b7a      	ldr	r3, [pc, #488]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	2b00      	cmp	r3, #0
 801c904:	f000 8143 	beq.w	801cb8e <RadioIrqProcess+0x396>
            RadioEvents->TxDone( );
 801c908:	4b77      	ldr	r3, [pc, #476]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	4798      	blx	r3
        break;
 801c910:	e13d      	b.n	801cb8e <RadioIrqProcess+0x396>
        TimerStop( &RxTimeoutTimer );
 801c912:	4876      	ldr	r0, [pc, #472]	; (801caec <RadioIrqProcess+0x2f4>)
 801c914:	f003 f864 	bl	801f9e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801c918:	4b71      	ldr	r3, [pc, #452]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c91a:	785b      	ldrb	r3, [r3, #1]
 801c91c:	f083 0301 	eor.w	r3, r3, #1
 801c920:	b2db      	uxtb	r3, r3
 801c922:	2b00      	cmp	r3, #0
 801c924:	d014      	beq.n	801c950 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801c926:	2000      	movs	r0, #0
 801c928:	f000 ff08 	bl	801d73c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801c92c:	2100      	movs	r1, #0
 801c92e:	f640 1002 	movw	r0, #2306	; 0x902
 801c932:	f001 fc1b 	bl	801e16c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801c936:	f640 1044 	movw	r0, #2372	; 0x944
 801c93a:	f001 fc2b 	bl	801e194 <SUBGRF_ReadRegister>
 801c93e:	4603      	mov	r3, r0
 801c940:	f043 0302 	orr.w	r3, r3, #2
 801c944:	b2db      	uxtb	r3, r3
 801c946:	4619      	mov	r1, r3
 801c948:	f640 1044 	movw	r0, #2372	; 0x944
 801c94c:	f001 fc0e 	bl	801e16c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801c950:	1dfb      	adds	r3, r7, #7
 801c952:	22ff      	movs	r2, #255	; 0xff
 801c954:	4619      	mov	r1, r3
 801c956:	4866      	ldr	r0, [pc, #408]	; (801caf0 <RadioIrqProcess+0x2f8>)
 801c958:	f000 fdc0 	bl	801d4dc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801c95c:	4865      	ldr	r0, [pc, #404]	; (801caf4 <RadioIrqProcess+0x2fc>)
 801c95e:	f001 fbb3 	bl	801e0c8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801c962:	4b61      	ldr	r3, [pc, #388]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	2b00      	cmp	r3, #0
 801c968:	f000 8113 	beq.w	801cb92 <RadioIrqProcess+0x39a>
 801c96c:	4b5e      	ldr	r3, [pc, #376]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	689b      	ldr	r3, [r3, #8]
 801c972:	2b00      	cmp	r3, #0
 801c974:	f000 810d 	beq.w	801cb92 <RadioIrqProcess+0x39a>
            switch ( SubgRf.PacketStatus.packetType )
 801c978:	4b59      	ldr	r3, [pc, #356]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c97a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c97e:	2b01      	cmp	r3, #1
 801c980:	d10e      	bne.n	801c9a0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801c982:	4b59      	ldr	r3, [pc, #356]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	689c      	ldr	r4, [r3, #8]
 801c988:	79fb      	ldrb	r3, [r7, #7]
 801c98a:	b299      	uxth	r1, r3
 801c98c:	4b54      	ldr	r3, [pc, #336]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c98e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801c992:	b21a      	sxth	r2, r3
 801c994:	4b52      	ldr	r3, [pc, #328]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c996:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801c99a:	4855      	ldr	r0, [pc, #340]	; (801caf0 <RadioIrqProcess+0x2f8>)
 801c99c:	47a0      	blx	r4
                break;
 801c99e:	e01d      	b.n	801c9dc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801c9a0:	4b4f      	ldr	r3, [pc, #316]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9a4:	463a      	mov	r2, r7
 801c9a6:	4611      	mov	r1, r2
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f001 fe11 	bl	801e5d0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801c9ae:	4b4e      	ldr	r3, [pc, #312]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	689c      	ldr	r4, [r3, #8]
 801c9b4:	79fb      	ldrb	r3, [r7, #7]
 801c9b6:	b299      	uxth	r1, r3
 801c9b8:	4b49      	ldr	r3, [pc, #292]	; (801cae0 <RadioIrqProcess+0x2e8>)
 801c9ba:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801c9be:	b218      	sxth	r0, r3
 801c9c0:	683b      	ldr	r3, [r7, #0]
 801c9c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801c9c6:	4a4c      	ldr	r2, [pc, #304]	; (801caf8 <RadioIrqProcess+0x300>)
 801c9c8:	fb82 5203 	smull	r5, r2, r2, r3
 801c9cc:	1192      	asrs	r2, r2, #6
 801c9ce:	17db      	asrs	r3, r3, #31
 801c9d0:	1ad3      	subs	r3, r2, r3
 801c9d2:	b25b      	sxtb	r3, r3
 801c9d4:	4602      	mov	r2, r0
 801c9d6:	4846      	ldr	r0, [pc, #280]	; (801caf0 <RadioIrqProcess+0x2f8>)
 801c9d8:	47a0      	blx	r4
                break;
 801c9da:	bf00      	nop
        break;
 801c9dc:	e0d9      	b.n	801cb92 <RadioIrqProcess+0x39a>
        SUBGRF_SetStandby( STDBY_RC );
 801c9de:	2000      	movs	r0, #0
 801c9e0:	f000 feac 	bl	801d73c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c9e4:	4b40      	ldr	r3, [pc, #256]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	f000 80d4 	beq.w	801cb96 <RadioIrqProcess+0x39e>
 801c9ee:	4b3e      	ldr	r3, [pc, #248]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	699b      	ldr	r3, [r3, #24]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	f000 80ce 	beq.w	801cb96 <RadioIrqProcess+0x39e>
            RadioEvents->CadDone( false );
 801c9fa:	4b3b      	ldr	r3, [pc, #236]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	699b      	ldr	r3, [r3, #24]
 801ca00:	2000      	movs	r0, #0
 801ca02:	4798      	blx	r3
        break;
 801ca04:	e0c7      	b.n	801cb96 <RadioIrqProcess+0x39e>
        SUBGRF_SetStandby( STDBY_RC );
 801ca06:	2000      	movs	r0, #0
 801ca08:	f000 fe98 	bl	801d73c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ca0c:	4b36      	ldr	r3, [pc, #216]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	f000 80c2 	beq.w	801cb9a <RadioIrqProcess+0x3a2>
 801ca16:	4b34      	ldr	r3, [pc, #208]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	699b      	ldr	r3, [r3, #24]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	f000 80bc 	beq.w	801cb9a <RadioIrqProcess+0x3a2>
            RadioEvents->CadDone( true );
 801ca22:	4b31      	ldr	r3, [pc, #196]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	699b      	ldr	r3, [r3, #24]
 801ca28:	2001      	movs	r0, #1
 801ca2a:	4798      	blx	r3
        break;
 801ca2c:	e0b5      	b.n	801cb9a <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ca2e:	4b33      	ldr	r3, [pc, #204]	; (801cafc <RadioIrqProcess+0x304>)
 801ca30:	2201      	movs	r2, #1
 801ca32:	2100      	movs	r1, #0
 801ca34:	2002      	movs	r0, #2
 801ca36:	f001 fefb 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ca3a:	f000 fd35 	bl	801d4a8 <SUBGRF_GetOperatingMode>
 801ca3e:	4603      	mov	r3, r0
 801ca40:	2b04      	cmp	r3, #4
 801ca42:	d115      	bne.n	801ca70 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801ca44:	4827      	ldr	r0, [pc, #156]	; (801cae4 <RadioIrqProcess+0x2ec>)
 801ca46:	f002 ffcb 	bl	801f9e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ca4a:	2000      	movs	r0, #0
 801ca4c:	f000 fe76 	bl	801d73c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ca50:	4b25      	ldr	r3, [pc, #148]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	f000 80a2 	beq.w	801cb9e <RadioIrqProcess+0x3a6>
 801ca5a:	4b23      	ldr	r3, [pc, #140]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	685b      	ldr	r3, [r3, #4]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	f000 809c 	beq.w	801cb9e <RadioIrqProcess+0x3a6>
                RadioEvents->TxTimeout( );
 801ca66:	4b20      	ldr	r3, [pc, #128]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	685b      	ldr	r3, [r3, #4]
 801ca6c:	4798      	blx	r3
        break;
 801ca6e:	e096      	b.n	801cb9e <RadioIrqProcess+0x3a6>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801ca70:	f000 fd1a 	bl	801d4a8 <SUBGRF_GetOperatingMode>
 801ca74:	4603      	mov	r3, r0
 801ca76:	2b05      	cmp	r3, #5
 801ca78:	f040 8091 	bne.w	801cb9e <RadioIrqProcess+0x3a6>
            TimerStop( &RxTimeoutTimer );
 801ca7c:	481b      	ldr	r0, [pc, #108]	; (801caec <RadioIrqProcess+0x2f4>)
 801ca7e:	f002 ffaf 	bl	801f9e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ca82:	2000      	movs	r0, #0
 801ca84:	f000 fe5a 	bl	801d73c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ca88:	4b17      	ldr	r3, [pc, #92]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	f000 8086 	beq.w	801cb9e <RadioIrqProcess+0x3a6>
 801ca92:	4b15      	ldr	r3, [pc, #84]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	68db      	ldr	r3, [r3, #12]
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	f000 8080 	beq.w	801cb9e <RadioIrqProcess+0x3a6>
                RadioEvents->RxTimeout( );
 801ca9e:	4b12      	ldr	r3, [pc, #72]	; (801cae8 <RadioIrqProcess+0x2f0>)
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	68db      	ldr	r3, [r3, #12]
 801caa4:	4798      	blx	r3
        break;
 801caa6:	e07a      	b.n	801cb9e <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801caa8:	4b15      	ldr	r3, [pc, #84]	; (801cb00 <RadioIrqProcess+0x308>)
 801caaa:	2201      	movs	r2, #1
 801caac:	2100      	movs	r1, #0
 801caae:	2002      	movs	r0, #2
 801cab0:	f001 febe 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cab4:	e07a      	b.n	801cbac <RadioIrqProcess+0x3b4>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801cab6:	4b13      	ldr	r3, [pc, #76]	; (801cb04 <RadioIrqProcess+0x30c>)
 801cab8:	2201      	movs	r2, #1
 801caba:	2100      	movs	r1, #0
 801cabc:	2002      	movs	r0, #2
 801cabe:	f001 feb7 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801cac2:	f001 fe30 	bl	801e726 <RFW_Is_Init>
 801cac6:	4603      	mov	r3, r0
 801cac8:	2b01      	cmp	r3, #1
 801caca:	d16a      	bne.n	801cba2 <RadioIrqProcess+0x3aa>
            RFW_ReceivePayload( );
 801cacc:	f001 fe61 	bl	801e792 <RFW_ReceivePayload>
        break;
 801cad0:	e067      	b.n	801cba2 <RadioIrqProcess+0x3aa>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801cad2:	4b0d      	ldr	r3, [pc, #52]	; (801cb08 <RadioIrqProcess+0x310>)
 801cad4:	2201      	movs	r2, #1
 801cad6:	2100      	movs	r1, #0
 801cad8:	2002      	movs	r0, #2
 801cada:	f001 fea9 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cade:	e065      	b.n	801cbac <RadioIrqProcess+0x3b4>
 801cae0:	20004158 	.word	0x20004158
 801cae4:	200041b0 	.word	0x200041b0
 801cae8:	20004154 	.word	0x20004154
 801caec:	200041c8 	.word	0x200041c8
 801caf0:	20004054 	.word	0x20004054
 801caf4:	2000417c 	.word	0x2000417c
 801caf8:	10624dd3 	.word	0x10624dd3
 801cafc:	08022970 	.word	0x08022970
 801cb00:	08022984 	.word	0x08022984
 801cb04:	08022990 	.word	0x08022990
 801cb08:	0802299c 	.word	0x0802299c
        TimerStop( &RxTimeoutTimer );
 801cb0c:	4829      	ldr	r0, [pc, #164]	; (801cbb4 <RadioIrqProcess+0x3bc>)
 801cb0e:	f002 ff67 	bl	801f9e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cb12:	4b29      	ldr	r3, [pc, #164]	; (801cbb8 <RadioIrqProcess+0x3c0>)
 801cb14:	785b      	ldrb	r3, [r3, #1]
 801cb16:	f083 0301 	eor.w	r3, r3, #1
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d002      	beq.n	801cb26 <RadioIrqProcess+0x32e>
            SUBGRF_SetStandby( STDBY_RC );
 801cb20:	2000      	movs	r0, #0
 801cb22:	f000 fe0b 	bl	801d73c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cb26:	4b25      	ldr	r3, [pc, #148]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d03b      	beq.n	801cba6 <RadioIrqProcess+0x3ae>
 801cb2e:	4b23      	ldr	r3, [pc, #140]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	68db      	ldr	r3, [r3, #12]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d036      	beq.n	801cba6 <RadioIrqProcess+0x3ae>
            RadioEvents->RxTimeout( );
 801cb38:	4b20      	ldr	r3, [pc, #128]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	68db      	ldr	r3, [r3, #12]
 801cb3e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cb40:	4b1f      	ldr	r3, [pc, #124]	; (801cbc0 <RadioIrqProcess+0x3c8>)
 801cb42:	2201      	movs	r2, #1
 801cb44:	2100      	movs	r1, #0
 801cb46:	2002      	movs	r0, #2
 801cb48:	f001 fe72 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cb4c:	e02b      	b.n	801cba6 <RadioIrqProcess+0x3ae>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801cb4e:	4b1d      	ldr	r3, [pc, #116]	; (801cbc4 <RadioIrqProcess+0x3cc>)
 801cb50:	2201      	movs	r2, #1
 801cb52:	2100      	movs	r1, #0
 801cb54:	2002      	movs	r0, #2
 801cb56:	f001 fe6b 	bl	801e830 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cb5a:	4b17      	ldr	r3, [pc, #92]	; (801cbb8 <RadioIrqProcess+0x3c0>)
 801cb5c:	785b      	ldrb	r3, [r3, #1]
 801cb5e:	f083 0301 	eor.w	r3, r3, #1
 801cb62:	b2db      	uxtb	r3, r3
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d002      	beq.n	801cb6e <RadioIrqProcess+0x376>
            SUBGRF_SetStandby( STDBY_RC );
 801cb68:	2000      	movs	r0, #0
 801cb6a:	f000 fde7 	bl	801d73c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801cb6e:	4b13      	ldr	r3, [pc, #76]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d019      	beq.n	801cbaa <RadioIrqProcess+0x3b2>
 801cb76:	4b11      	ldr	r3, [pc, #68]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	691b      	ldr	r3, [r3, #16]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d014      	beq.n	801cbaa <RadioIrqProcess+0x3b2>
            RadioEvents->RxError( );
 801cb80:	4b0e      	ldr	r3, [pc, #56]	; (801cbbc <RadioIrqProcess+0x3c4>)
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	691b      	ldr	r3, [r3, #16]
 801cb86:	4798      	blx	r3
        break;
 801cb88:	e00f      	b.n	801cbaa <RadioIrqProcess+0x3b2>
        break;
 801cb8a:	bf00      	nop
 801cb8c:	e00e      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cb8e:	bf00      	nop
 801cb90:	e00c      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cb92:	bf00      	nop
 801cb94:	e00a      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cb96:	bf00      	nop
 801cb98:	e008      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cb9a:	bf00      	nop
 801cb9c:	e006      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cb9e:	bf00      	nop
 801cba0:	e004      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cba2:	bf00      	nop
 801cba4:	e002      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cba6:	bf00      	nop
 801cba8:	e000      	b.n	801cbac <RadioIrqProcess+0x3b4>
        break;
 801cbaa:	bf00      	nop
  }
}
 801cbac:	bf00      	nop
 801cbae:	3708      	adds	r7, #8
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bdb0      	pop	{r4, r5, r7, pc}
 801cbb4:	200041c8 	.word	0x200041c8
 801cbb8:	20004158 	.word	0x20004158
 801cbbc:	20004154 	.word	0x20004154
 801cbc0:	080229a8 	.word	0x080229a8
 801cbc4:	080229b4 	.word	0x080229b4

0801cbc8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cbc8:	b580      	push	{r7, lr}
 801cbca:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cbcc:	4b09      	ldr	r3, [pc, #36]	; (801cbf4 <RadioTxPrbs+0x2c>)
 801cbce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cbd2:	2101      	movs	r1, #1
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f001 fbbd 	bl	801e354 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 801cbda:	4b07      	ldr	r3, [pc, #28]	; (801cbf8 <RadioTxPrbs+0x30>)
 801cbdc:	212d      	movs	r1, #45	; 0x2d
 801cbde:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cbe2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cbe4:	f000 fe6d 	bl	801d8c2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cbe8:	4804      	ldr	r0, [pc, #16]	; (801cbfc <RadioTxPrbs+0x34>)
 801cbea:	f000 fdc3 	bl	801d774 <SUBGRF_SetTx>
}
 801cbee:	bf00      	nop
 801cbf0:	bd80      	pop	{r7, pc}
 801cbf2:	bf00      	nop
 801cbf4:	20004158 	.word	0x20004158
 801cbf8:	0801c607 	.word	0x0801c607
 801cbfc:	000fffff 	.word	0x000fffff

0801cc00 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b084      	sub	sp, #16
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	4603      	mov	r3, r0
 801cc08:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cc0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f001 fbc8 	bl	801e3a4 <SUBGRF_SetRfTxPower>
 801cc14:	4603      	mov	r3, r0
 801cc16:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cc18:	7bfb      	ldrb	r3, [r7, #15]
 801cc1a:	2101      	movs	r1, #1
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	f001 fb99 	bl	801e354 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cc22:	f000 fe45 	bl	801d8b0 <SUBGRF_SetTxContinuousWave>
}
 801cc26:	bf00      	nop
 801cc28:	3710      	adds	r7, #16
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}

0801cc2e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cc2e:	b480      	push	{r7}
 801cc30:	b089      	sub	sp, #36	; 0x24
 801cc32:	af00      	add	r7, sp, #0
 801cc34:	60f8      	str	r0, [r7, #12]
 801cc36:	60b9      	str	r1, [r7, #8]
 801cc38:	4613      	mov	r3, r2
 801cc3a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801cc40:	2300      	movs	r3, #0
 801cc42:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 801cc44:	2300      	movs	r3, #0
 801cc46:	61bb      	str	r3, [r7, #24]
 801cc48:	e011      	b.n	801cc6e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cc4a:	69bb      	ldr	r3, [r7, #24]
 801cc4c:	68ba      	ldr	r2, [r7, #8]
 801cc4e:	4413      	add	r3, r2
 801cc50:	781a      	ldrb	r2, [r3, #0]
 801cc52:	69bb      	ldr	r3, [r7, #24]
 801cc54:	68b9      	ldr	r1, [r7, #8]
 801cc56:	440b      	add	r3, r1
 801cc58:	43d2      	mvns	r2, r2
 801cc5a:	b2d2      	uxtb	r2, r2
 801cc5c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cc5e:	69bb      	ldr	r3, [r7, #24]
 801cc60:	68fa      	ldr	r2, [r7, #12]
 801cc62:	4413      	add	r3, r2
 801cc64:	2200      	movs	r2, #0
 801cc66:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801cc68:	69bb      	ldr	r3, [r7, #24]
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	61bb      	str	r3, [r7, #24]
 801cc6e:	79fb      	ldrb	r3, [r7, #7]
 801cc70:	69ba      	ldr	r2, [r7, #24]
 801cc72:	429a      	cmp	r2, r3
 801cc74:	dbe9      	blt.n	801cc4a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801cc76:	2300      	movs	r3, #0
 801cc78:	61bb      	str	r3, [r7, #24]
 801cc7a:	e049      	b.n	801cd10 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cc7c:	69bb      	ldr	r3, [r7, #24]
 801cc7e:	425a      	negs	r2, r3
 801cc80:	f003 0307 	and.w	r3, r3, #7
 801cc84:	f002 0207 	and.w	r2, r2, #7
 801cc88:	bf58      	it	pl
 801cc8a:	4253      	negpl	r3, r2
 801cc8c:	b2db      	uxtb	r3, r3
 801cc8e:	f1c3 0307 	rsb	r3, r3, #7
 801cc92:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801cc94:	69bb      	ldr	r3, [r7, #24]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	da00      	bge.n	801cc9c <payload_integration+0x6e>
 801cc9a:	3307      	adds	r3, #7
 801cc9c:	10db      	asrs	r3, r3, #3
 801cc9e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801cca0:	69bb      	ldr	r3, [r7, #24]
 801cca2:	3301      	adds	r3, #1
 801cca4:	425a      	negs	r2, r3
 801cca6:	f003 0307 	and.w	r3, r3, #7
 801ccaa:	f002 0207 	and.w	r2, r2, #7
 801ccae:	bf58      	it	pl
 801ccb0:	4253      	negpl	r3, r2
 801ccb2:	b2db      	uxtb	r3, r3
 801ccb4:	f1c3 0307 	rsb	r3, r3, #7
 801ccb8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801ccba:	69bb      	ldr	r3, [r7, #24]
 801ccbc:	3301      	adds	r3, #1
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	da00      	bge.n	801ccc4 <payload_integration+0x96>
 801ccc2:	3307      	adds	r3, #7
 801ccc4:	10db      	asrs	r3, r3, #3
 801ccc6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801ccc8:	7dbb      	ldrb	r3, [r7, #22]
 801ccca:	68ba      	ldr	r2, [r7, #8]
 801cccc:	4413      	add	r3, r2
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	461a      	mov	r2, r3
 801ccd2:	7dfb      	ldrb	r3, [r7, #23]
 801ccd4:	fa42 f303 	asr.w	r3, r2, r3
 801ccd8:	b2db      	uxtb	r3, r3
 801ccda:	f003 0301 	and.w	r3, r3, #1
 801ccde:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cce0:	7ffa      	ldrb	r2, [r7, #31]
 801cce2:	7cfb      	ldrb	r3, [r7, #19]
 801cce4:	4053      	eors	r3, r2
 801cce6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801cce8:	7d3b      	ldrb	r3, [r7, #20]
 801ccea:	68fa      	ldr	r2, [r7, #12]
 801ccec:	4413      	add	r3, r2
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	b25a      	sxtb	r2, r3
 801ccf2:	7ff9      	ldrb	r1, [r7, #31]
 801ccf4:	7d7b      	ldrb	r3, [r7, #21]
 801ccf6:	fa01 f303 	lsl.w	r3, r1, r3
 801ccfa:	b25b      	sxtb	r3, r3
 801ccfc:	4313      	orrs	r3, r2
 801ccfe:	b259      	sxtb	r1, r3
 801cd00:	7d3b      	ldrb	r3, [r7, #20]
 801cd02:	68fa      	ldr	r2, [r7, #12]
 801cd04:	4413      	add	r3, r2
 801cd06:	b2ca      	uxtb	r2, r1
 801cd08:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801cd0a:	69bb      	ldr	r3, [r7, #24]
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	61bb      	str	r3, [r7, #24]
 801cd10:	79fb      	ldrb	r3, [r7, #7]
 801cd12:	00db      	lsls	r3, r3, #3
 801cd14:	69ba      	ldr	r2, [r7, #24]
 801cd16:	429a      	cmp	r2, r3
 801cd18:	dbb0      	blt.n	801cc7c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801cd1a:	7ffb      	ldrb	r3, [r7, #31]
 801cd1c:	01db      	lsls	r3, r3, #7
 801cd1e:	b25a      	sxtb	r2, r3
 801cd20:	7ffb      	ldrb	r3, [r7, #31]
 801cd22:	019b      	lsls	r3, r3, #6
 801cd24:	b25b      	sxtb	r3, r3
 801cd26:	4313      	orrs	r3, r2
 801cd28:	b25b      	sxtb	r3, r3
 801cd2a:	7ffa      	ldrb	r2, [r7, #31]
 801cd2c:	2a00      	cmp	r2, #0
 801cd2e:	d101      	bne.n	801cd34 <payload_integration+0x106>
 801cd30:	2220      	movs	r2, #32
 801cd32:	e000      	b.n	801cd36 <payload_integration+0x108>
 801cd34:	2200      	movs	r2, #0
 801cd36:	4313      	orrs	r3, r2
 801cd38:	b259      	sxtb	r1, r3
 801cd3a:	79fb      	ldrb	r3, [r7, #7]
 801cd3c:	68fa      	ldr	r2, [r7, #12]
 801cd3e:	4413      	add	r3, r2
 801cd40:	b2ca      	uxtb	r2, r1
 801cd42:	701a      	strb	r2, [r3, #0]
}
 801cd44:	bf00      	nop
 801cd46:	3724      	adds	r7, #36	; 0x24
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bc80      	pop	{r7}
 801cd4c:	4770      	bx	lr
	...

0801cd50 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b08c      	sub	sp, #48	; 0x30
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	60b9      	str	r1, [r7, #8]
 801cd58:	607a      	str	r2, [r7, #4]
 801cd5a:	603b      	str	r3, [r7, #0]
 801cd5c:	4603      	mov	r3, r0
 801cd5e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801cd60:	2300      	movs	r3, #0
 801cd62:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 801cd64:	2300      	movs	r3, #0
 801cd66:	61fb      	str	r3, [r7, #28]
 801cd68:	2300      	movs	r3, #0
 801cd6a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801cd6c:	f001 fcd5 	bl	801e71a <RFW_DeInit>

    if( rxContinuous != 0 )
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d001      	beq.n	801cd7a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801cd76:	2300      	movs	r3, #0
 801cd78:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	bf14      	ite	ne
 801cd80:	2301      	movne	r3, #1
 801cd82:	2300      	moveq	r3, #0
 801cd84:	b2da      	uxtb	r2, r3
 801cd86:	4b9f      	ldr	r3, [pc, #636]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cd88:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801cd8a:	7bfb      	ldrb	r3, [r7, #15]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d003      	beq.n	801cd98 <RadioSetRxGenericConfig+0x48>
 801cd90:	2b01      	cmp	r3, #1
 801cd92:	f000 80e8 	beq.w	801cf66 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801cd96:	e1a0      	b.n	801d0da <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801cd98:	68bb      	ldr	r3, [r7, #8]
 801cd9a:	68db      	ldr	r3, [r3, #12]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d003      	beq.n	801cda8 <RadioSetRxGenericConfig+0x58>
 801cda0:	68bb      	ldr	r3, [r7, #8]
 801cda2:	691b      	ldr	r3, [r3, #16]
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d102      	bne.n	801cdae <RadioSetRxGenericConfig+0x5e>
            return -1;
 801cda8:	f04f 33ff 	mov.w	r3, #4294967295
 801cdac:	e196      	b.n	801d0dc <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801cdae:	68bb      	ldr	r3, [r7, #8]
 801cdb0:	7d5b      	ldrb	r3, [r3, #21]
 801cdb2:	2b08      	cmp	r3, #8
 801cdb4:	d902      	bls.n	801cdbc <RadioSetRxGenericConfig+0x6c>
            return -1;
 801cdb6:	f04f 33ff 	mov.w	r3, #4294967295
 801cdba:	e18f      	b.n	801d0dc <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdc0:	e00d      	b.n	801cdde <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801cdc2:	68bb      	ldr	r3, [r7, #8]
 801cdc4:	699a      	ldr	r2, [r3, #24]
 801cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdc8:	4413      	add	r3, r2
 801cdca:	7819      	ldrb	r1, [r3, #0]
 801cdcc:	f107 021c 	add.w	r2, r7, #28
 801cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdd2:	4413      	add	r3, r2
 801cdd4:	460a      	mov	r2, r1
 801cdd6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdda:	3301      	adds	r3, #1
 801cddc:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdde:	68bb      	ldr	r3, [r7, #8]
 801cde0:	7d5b      	ldrb	r3, [r3, #21]
 801cde2:	461a      	mov	r2, r3
 801cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cde6:	4293      	cmp	r3, r2
 801cde8:	dbeb      	blt.n	801cdc2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cdea:	68bb      	ldr	r3, [r7, #8]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	bf14      	ite	ne
 801cdf2:	2301      	movne	r3, #1
 801cdf4:	2300      	moveq	r3, #0
 801cdf6:	b2db      	uxtb	r3, r3
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	f000 fd6b 	bl	801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801cdfe:	4b81      	ldr	r3, [pc, #516]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce00:	2200      	movs	r2, #0
 801ce02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ce06:	68bb      	ldr	r3, [r7, #8]
 801ce08:	68db      	ldr	r3, [r3, #12]
 801ce0a:	4a7e      	ldr	r2, [pc, #504]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce0c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801ce0e:	68bb      	ldr	r3, [r7, #8]
 801ce10:	791a      	ldrb	r2, [r3, #4]
 801ce12:	4b7c      	ldr	r3, [pc, #496]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ce18:	68bb      	ldr	r3, [r7, #8]
 801ce1a:	689b      	ldr	r3, [r3, #8]
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f001 fbaf 	bl	801e580 <SUBGRF_GetFskBandwidthRegValue>
 801ce22:	4603      	mov	r3, r0
 801ce24:	461a      	mov	r2, r3
 801ce26:	4b77      	ldr	r3, [pc, #476]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ce2c:	4b75      	ldr	r3, [pc, #468]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce2e:	2200      	movs	r2, #0
 801ce30:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ce32:	68bb      	ldr	r3, [r7, #8]
 801ce34:	691b      	ldr	r3, [r3, #16]
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	00db      	lsls	r3, r3, #3
 801ce3a:	b29a      	uxth	r2, r3
 801ce3c:	4b71      	ldr	r3, [pc, #452]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce3e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ce40:	68bb      	ldr	r3, [r7, #8]
 801ce42:	7d1a      	ldrb	r2, [r3, #20]
 801ce44:	4b6f      	ldr	r3, [pc, #444]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce46:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ce48:	68bb      	ldr	r3, [r7, #8]
 801ce4a:	7d5b      	ldrb	r3, [r3, #21]
 801ce4c:	00db      	lsls	r3, r3, #3
 801ce4e:	b2da      	uxtb	r2, r3
 801ce50:	4b6c      	ldr	r3, [pc, #432]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce52:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ce54:	68bb      	ldr	r3, [r7, #8]
 801ce56:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801ce5a:	4b6a      	ldr	r3, [pc, #424]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce5c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ce5e:	68bb      	ldr	r3, [r7, #8]
 801ce60:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d105      	bne.n	801ce74 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ce68:	68bb      	ldr	r3, [r7, #8]
 801ce6a:	69db      	ldr	r3, [r3, #28]
 801ce6c:	b2da      	uxtb	r2, r3
 801ce6e:	4b65      	ldr	r3, [pc, #404]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce70:	759a      	strb	r2, [r3, #22]
 801ce72:	e00b      	b.n	801ce8c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ce74:	68bb      	ldr	r3, [r7, #8]
 801ce76:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce7a:	2b02      	cmp	r3, #2
 801ce7c:	d103      	bne.n	801ce86 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce7e:	4b61      	ldr	r3, [pc, #388]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce80:	22ff      	movs	r2, #255	; 0xff
 801ce82:	759a      	strb	r2, [r3, #22]
 801ce84:	e002      	b.n	801ce8c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce86:	4b5f      	ldr	r3, [pc, #380]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ce88:	22ff      	movs	r2, #255	; 0xff
 801ce8a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ce8c:	68bb      	ldr	r3, [r7, #8]
 801ce8e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801ce92:	2b02      	cmp	r3, #2
 801ce94:	d004      	beq.n	801cea0 <RadioSetRxGenericConfig+0x150>
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce9c:	2b02      	cmp	r3, #2
 801ce9e:	d12d      	bne.n	801cefc <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801cea0:	68bb      	ldr	r3, [r7, #8]
 801cea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cea6:	2bf1      	cmp	r3, #241	; 0xf1
 801cea8:	d00c      	beq.n	801cec4 <RadioSetRxGenericConfig+0x174>
 801ceaa:	68bb      	ldr	r3, [r7, #8]
 801ceac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ceb0:	2bf2      	cmp	r3, #242	; 0xf2
 801ceb2:	d007      	beq.n	801cec4 <RadioSetRxGenericConfig+0x174>
 801ceb4:	68bb      	ldr	r3, [r7, #8]
 801ceb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ceba:	2b01      	cmp	r3, #1
 801cebc:	d002      	beq.n	801cec4 <RadioSetRxGenericConfig+0x174>
            return -1;
 801cebe:	f04f 33ff 	mov.w	r3, #4294967295
 801cec2:	e10b      	b.n	801d0dc <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801cec4:	2300      	movs	r3, #0
 801cec6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801cec8:	68bb      	ldr	r3, [r7, #8]
 801ceca:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801cecc:	4b4e      	ldr	r3, [pc, #312]	; (801d008 <RadioSetRxGenericConfig+0x2b8>)
 801cece:	6819      	ldr	r1, [r3, #0]
 801ced0:	f107 0310 	add.w	r3, r7, #16
 801ced4:	4a4d      	ldr	r2, [pc, #308]	; (801d00c <RadioSetRxGenericConfig+0x2bc>)
 801ced6:	4618      	mov	r0, r3
 801ced8:	f001 fc12 	bl	801e700 <RFW_Init>
 801cedc:	4603      	mov	r3, r0
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d002      	beq.n	801cee8 <RadioSetRxGenericConfig+0x198>
            return -1;
 801cee2:	f04f 33ff 	mov.w	r3, #4294967295
 801cee6:	e0f9      	b.n	801d0dc <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801cee8:	4b46      	ldr	r3, [pc, #280]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801ceea:	2200      	movs	r2, #0
 801ceec:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ceee:	4b45      	ldr	r3, [pc, #276]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cef0:	2201      	movs	r2, #1
 801cef2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801cef4:	4b43      	ldr	r3, [pc, #268]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cef6:	2200      	movs	r2, #0
 801cef8:	755a      	strb	r2, [r3, #21]
        {
 801cefa:	e00e      	b.n	801cf1a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801cefc:	68bb      	ldr	r3, [r7, #8]
 801cefe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801cf02:	4b40      	ldr	r3, [pc, #256]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cf04:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801cf0c:	4b3d      	ldr	r3, [pc, #244]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cf0e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801cf10:	68bb      	ldr	r3, [r7, #8]
 801cf12:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801cf16:	4b3b      	ldr	r3, [pc, #236]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cf18:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801cf1a:	f7ff fa8e 	bl	801c43a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801cf1e:	2000      	movs	r0, #0
 801cf20:	f7fe fc20 	bl	801b764 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cf24:	483a      	ldr	r0, [pc, #232]	; (801d010 <RadioSetRxGenericConfig+0x2c0>)
 801cf26:	f000 ff07 	bl	801dd38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cf2a:	483a      	ldr	r0, [pc, #232]	; (801d014 <RadioSetRxGenericConfig+0x2c4>)
 801cf2c:	f000 ffd6 	bl	801dedc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801cf30:	f107 031c 	add.w	r3, r7, #28
 801cf34:	4618      	mov	r0, r3
 801cf36:	f000 fb06 	bl	801d546 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801cf3a:	68bb      	ldr	r3, [r7, #8]
 801cf3c:	8c1b      	ldrh	r3, [r3, #32]
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f000 fb50 	bl	801d5e4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f000 fb2b 	bl	801d5a4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801cf4e:	683b      	ldr	r3, [r7, #0]
 801cf50:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801cf54:	fb03 f202 	mul.w	r2, r3, r2
 801cf58:	68bb      	ldr	r3, [r7, #8]
 801cf5a:	68db      	ldr	r3, [r3, #12]
 801cf5c:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf60:	4a28      	ldr	r2, [pc, #160]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cf62:	6093      	str	r3, [r2, #8]
        break;
 801cf64:	e0b9      	b.n	801d0da <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801cf66:	68bb      	ldr	r3, [r7, #8]
 801cf68:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d102      	bne.n	801cf74 <RadioSetRxGenericConfig+0x224>
            return -1;
 801cf6e:	f04f 33ff 	mov.w	r3, #4294967295
 801cf72:	e0b3      	b.n	801d0dc <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801cf74:	68bb      	ldr	r3, [r7, #8]
 801cf76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801cf7a:	2b01      	cmp	r3, #1
 801cf7c:	d104      	bne.n	801cf88 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801cf7e:	68bb      	ldr	r3, [r7, #8]
 801cf80:	69db      	ldr	r3, [r3, #28]
 801cf82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cf86:	e002      	b.n	801cf8e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801cf88:	23ff      	movs	r3, #255	; 0xff
 801cf8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cf8e:	68bb      	ldr	r3, [r7, #8]
 801cf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	bf14      	ite	ne
 801cf96:	2301      	movne	r3, #1
 801cf98:	2300      	moveq	r3, #0
 801cf9a:	b2db      	uxtb	r3, r3
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f000 fc99 	bl	801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	b2db      	uxtb	r3, r3
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f000 fca3 	bl	801d8f2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801cfac:	4b15      	ldr	r3, [pc, #84]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cfae:	2201      	movs	r2, #1
 801cfb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801cfb4:	68bb      	ldr	r3, [r7, #8]
 801cfb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801cfba:	4b12      	ldr	r3, [pc, #72]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cfbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801cfc0:	68bb      	ldr	r3, [r7, #8]
 801cfc2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801cfc6:	4b0f      	ldr	r3, [pc, #60]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cfc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801cfcc:	68bb      	ldr	r3, [r7, #8]
 801cfce:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801cfd2:	4b0c      	ldr	r3, [pc, #48]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cfd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801cfde:	2b02      	cmp	r3, #2
 801cfe0:	d01a      	beq.n	801d018 <RadioSetRxGenericConfig+0x2c8>
 801cfe2:	2b02      	cmp	r3, #2
 801cfe4:	dc2c      	bgt.n	801d040 <RadioSetRxGenericConfig+0x2f0>
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d002      	beq.n	801cff0 <RadioSetRxGenericConfig+0x2a0>
 801cfea:	2b01      	cmp	r3, #1
 801cfec:	d005      	beq.n	801cffa <RadioSetRxGenericConfig+0x2aa>
            break;
 801cfee:	e027      	b.n	801d040 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801cff0:	4b04      	ldr	r3, [pc, #16]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cff2:	2200      	movs	r2, #0
 801cff4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cff8:	e023      	b.n	801d042 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801cffa:	4b02      	ldr	r3, [pc, #8]	; (801d004 <RadioSetRxGenericConfig+0x2b4>)
 801cffc:	2201      	movs	r2, #1
 801cffe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d002:	e01e      	b.n	801d042 <RadioSetRxGenericConfig+0x2f2>
 801d004:	20004158 	.word	0x20004158
 801d008:	20004154 	.word	0x20004154
 801d00c:	200041c8 	.word	0x200041c8
 801d010:	20004190 	.word	0x20004190
 801d014:	20004166 	.word	0x20004166
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d018:	68bb      	ldr	r3, [r7, #8]
 801d01a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d01e:	2b0b      	cmp	r3, #11
 801d020:	d004      	beq.n	801d02c <RadioSetRxGenericConfig+0x2dc>
 801d022:	68bb      	ldr	r3, [r7, #8]
 801d024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d028:	2b0c      	cmp	r3, #12
 801d02a:	d104      	bne.n	801d036 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d02c:	4b2d      	ldr	r3, [pc, #180]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d02e:	2201      	movs	r2, #1
 801d030:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d034:	e005      	b.n	801d042 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d036:	4b2b      	ldr	r3, [pc, #172]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d038:	2200      	movs	r2, #0
 801d03a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d03e:	e000      	b.n	801d042 <RadioSetRxGenericConfig+0x2f2>
            break;
 801d040:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d042:	4b28      	ldr	r3, [pc, #160]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d044:	2201      	movs	r2, #1
 801d046:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d048:	68bb      	ldr	r3, [r7, #8]
 801d04a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801d04c:	4b25      	ldr	r3, [pc, #148]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d04e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d050:	68bb      	ldr	r3, [r7, #8]
 801d052:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801d056:	4b23      	ldr	r3, [pc, #140]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d058:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d05a:	4a22      	ldr	r2, [pc, #136]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d05c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d060:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d062:	68bb      	ldr	r3, [r7, #8]
 801d064:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801d068:	4b1e      	ldr	r3, [pc, #120]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d06a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d06e:	68bb      	ldr	r3, [r7, #8]
 801d070:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801d074:	4b1b      	ldr	r3, [pc, #108]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d07a:	f7ff f9de 	bl	801c43a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d07e:	2001      	movs	r0, #1
 801d080:	f7fe fb70 	bl	801b764 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d084:	4818      	ldr	r0, [pc, #96]	; (801d0e8 <RadioSetRxGenericConfig+0x398>)
 801d086:	f000 fe57 	bl	801dd38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d08a:	4818      	ldr	r0, [pc, #96]	; (801d0ec <RadioSetRxGenericConfig+0x39c>)
 801d08c:	f000 ff26 	bl	801dedc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d090:	4b14      	ldr	r3, [pc, #80]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d096:	2b01      	cmp	r3, #1
 801d098:	d10d      	bne.n	801d0b6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801d09a:	f240 7036 	movw	r0, #1846	; 0x736
 801d09e:	f001 f879 	bl	801e194 <SUBGRF_ReadRegister>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	f023 0304 	bic.w	r3, r3, #4
 801d0a8:	b2db      	uxtb	r3, r3
 801d0aa:	4619      	mov	r1, r3
 801d0ac:	f240 7036 	movw	r0, #1846	; 0x736
 801d0b0:	f001 f85c 	bl	801e16c <SUBGRF_WriteRegister>
 801d0b4:	e00c      	b.n	801d0d0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801d0b6:	f240 7036 	movw	r0, #1846	; 0x736
 801d0ba:	f001 f86b 	bl	801e194 <SUBGRF_ReadRegister>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	f043 0304 	orr.w	r3, r3, #4
 801d0c4:	b2db      	uxtb	r3, r3
 801d0c6:	4619      	mov	r1, r3
 801d0c8:	f240 7036 	movw	r0, #1846	; 0x736
 801d0cc:	f001 f84e 	bl	801e16c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d0d0:	4b04      	ldr	r3, [pc, #16]	; (801d0e4 <RadioSetRxGenericConfig+0x394>)
 801d0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d0d6:	609a      	str	r2, [r3, #8]
        break;
 801d0d8:	bf00      	nop
    }
    return status;
 801d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d0dc:	4618      	mov	r0, r3
 801d0de:	3730      	adds	r7, #48	; 0x30
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	bd80      	pop	{r7, pc}
 801d0e4:	20004158 	.word	0x20004158
 801d0e8:	20004190 	.word	0x20004190
 801d0ec:	20004166 	.word	0x20004166

0801d0f0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b08a      	sub	sp, #40	; 0x28
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	60b9      	str	r1, [r7, #8]
 801d0f8:	607b      	str	r3, [r7, #4]
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	73fb      	strb	r3, [r7, #15]
 801d0fe:	4613      	mov	r3, r2
 801d100:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801d102:	2300      	movs	r3, #0
 801d104:	61fb      	str	r3, [r7, #28]
 801d106:	2300      	movs	r3, #0
 801d108:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d10a:	f001 fb06 	bl	801e71a <RFW_DeInit>
    switch( modem )
 801d10e:	7bfb      	ldrb	r3, [r7, #15]
 801d110:	2b02      	cmp	r3, #2
 801d112:	f000 8144 	beq.w	801d39e <RadioSetTxGenericConfig+0x2ae>
 801d116:	2b02      	cmp	r3, #2
 801d118:	f300 8160 	bgt.w	801d3dc <RadioSetTxGenericConfig+0x2ec>
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d003      	beq.n	801d128 <RadioSetTxGenericConfig+0x38>
 801d120:	2b01      	cmp	r3, #1
 801d122:	f000 80b7 	beq.w	801d294 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801d126:	e159      	b.n	801d3dc <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d128:	68bb      	ldr	r3, [r7, #8]
 801d12a:	689b      	ldr	r3, [r3, #8]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d003      	beq.n	801d138 <RadioSetTxGenericConfig+0x48>
 801d130:	68bb      	ldr	r3, [r7, #8]
 801d132:	691b      	ldr	r3, [r3, #16]
 801d134:	2b00      	cmp	r3, #0
 801d136:	d102      	bne.n	801d13e <RadioSetTxGenericConfig+0x4e>
            return -1;
 801d138:	f04f 33ff 	mov.w	r3, #4294967295
 801d13c:	e163      	b.n	801d406 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801d13e:	68bb      	ldr	r3, [r7, #8]
 801d140:	7d1b      	ldrb	r3, [r3, #20]
 801d142:	2b08      	cmp	r3, #8
 801d144:	d902      	bls.n	801d14c <RadioSetTxGenericConfig+0x5c>
            return -1;
 801d146:	f04f 33ff 	mov.w	r3, #4294967295
 801d14a:	e15c      	b.n	801d406 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801d14c:	2300      	movs	r3, #0
 801d14e:	627b      	str	r3, [r7, #36]	; 0x24
 801d150:	e00d      	b.n	801d16e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801d152:	68bb      	ldr	r3, [r7, #8]
 801d154:	699a      	ldr	r2, [r3, #24]
 801d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d158:	4413      	add	r3, r2
 801d15a:	7819      	ldrb	r1, [r3, #0]
 801d15c:	f107 021c 	add.w	r2, r7, #28
 801d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d162:	4413      	add	r3, r2
 801d164:	460a      	mov	r2, r1
 801d166:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d16a:	3301      	adds	r3, #1
 801d16c:	627b      	str	r3, [r7, #36]	; 0x24
 801d16e:	68bb      	ldr	r3, [r7, #8]
 801d170:	7d1b      	ldrb	r3, [r3, #20]
 801d172:	461a      	mov	r2, r3
 801d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d176:	4293      	cmp	r3, r2
 801d178:	dbeb      	blt.n	801d152 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d17a:	4ba5      	ldr	r3, [pc, #660]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d17c:	2200      	movs	r2, #0
 801d17e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d182:	68bb      	ldr	r3, [r7, #8]
 801d184:	689b      	ldr	r3, [r3, #8]
 801d186:	4aa2      	ldr	r2, [pc, #648]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d188:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	781a      	ldrb	r2, [r3, #0]
 801d18e:	4ba0      	ldr	r3, [pc, #640]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	4618      	mov	r0, r3
 801d19a:	f001 f9f1 	bl	801e580 <SUBGRF_GetFskBandwidthRegValue>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	461a      	mov	r2, r3
 801d1a2:	4b9b      	ldr	r3, [pc, #620]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d1a8:	68bb      	ldr	r3, [r7, #8]
 801d1aa:	68db      	ldr	r3, [r3, #12]
 801d1ac:	4a98      	ldr	r2, [pc, #608]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1ae:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d1b0:	4b97      	ldr	r3, [pc, #604]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d1b6:	68bb      	ldr	r3, [r7, #8]
 801d1b8:	691b      	ldr	r3, [r3, #16]
 801d1ba:	b29b      	uxth	r3, r3
 801d1bc:	00db      	lsls	r3, r3, #3
 801d1be:	b29a      	uxth	r2, r3
 801d1c0:	4b93      	ldr	r3, [pc, #588]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1c2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d1c4:	4b92      	ldr	r3, [pc, #584]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1c6:	2204      	movs	r2, #4
 801d1c8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d1ca:	68bb      	ldr	r3, [r7, #8]
 801d1cc:	7d1b      	ldrb	r3, [r3, #20]
 801d1ce:	00db      	lsls	r3, r3, #3
 801d1d0:	b2da      	uxtb	r2, r3
 801d1d2:	4b8f      	ldr	r3, [pc, #572]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1d4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d1d6:	4b8e      	ldr	r3, [pc, #568]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d1d8:	2200      	movs	r2, #0
 801d1da:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d1dc:	68bb      	ldr	r3, [r7, #8]
 801d1de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d1e2:	2b02      	cmp	r3, #2
 801d1e4:	d003      	beq.n	801d1ee <RadioSetTxGenericConfig+0xfe>
 801d1e6:	68bb      	ldr	r3, [r7, #8]
 801d1e8:	7f9b      	ldrb	r3, [r3, #30]
 801d1ea:	2b02      	cmp	r3, #2
 801d1ec:	d12a      	bne.n	801d244 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d1ee:	68bb      	ldr	r3, [r7, #8]
 801d1f0:	7fdb      	ldrb	r3, [r3, #31]
 801d1f2:	2bf1      	cmp	r3, #241	; 0xf1
 801d1f4:	d00a      	beq.n	801d20c <RadioSetTxGenericConfig+0x11c>
 801d1f6:	68bb      	ldr	r3, [r7, #8]
 801d1f8:	7fdb      	ldrb	r3, [r3, #31]
 801d1fa:	2bf2      	cmp	r3, #242	; 0xf2
 801d1fc:	d006      	beq.n	801d20c <RadioSetTxGenericConfig+0x11c>
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	7fdb      	ldrb	r3, [r3, #31]
 801d202:	2b01      	cmp	r3, #1
 801d204:	d002      	beq.n	801d20c <RadioSetTxGenericConfig+0x11c>
                return -1;
 801d206:	f04f 33ff 	mov.w	r3, #4294967295
 801d20a:	e0fc      	b.n	801d406 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801d20c:	2301      	movs	r3, #1
 801d20e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801d210:	68bb      	ldr	r3, [r7, #8]
 801d212:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d214:	4b7f      	ldr	r3, [pc, #508]	; (801d414 <RadioSetTxGenericConfig+0x324>)
 801d216:	6819      	ldr	r1, [r3, #0]
 801d218:	f107 0310 	add.w	r3, r7, #16
 801d21c:	4a7e      	ldr	r2, [pc, #504]	; (801d418 <RadioSetTxGenericConfig+0x328>)
 801d21e:	4618      	mov	r0, r3
 801d220:	f001 fa6e 	bl	801e700 <RFW_Init>
 801d224:	4603      	mov	r3, r0
 801d226:	2b00      	cmp	r3, #0
 801d228:	d002      	beq.n	801d230 <RadioSetTxGenericConfig+0x140>
              return -1;
 801d22a:	f04f 33ff 	mov.w	r3, #4294967295
 801d22e:	e0ea      	b.n	801d406 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d230:	4b77      	ldr	r3, [pc, #476]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d232:	2200      	movs	r2, #0
 801d234:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801d236:	4b76      	ldr	r3, [pc, #472]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d238:	2201      	movs	r2, #1
 801d23a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d23c:	4b74      	ldr	r3, [pc, #464]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d23e:	2200      	movs	r2, #0
 801d240:	755a      	strb	r2, [r3, #21]
        {
 801d242:	e00c      	b.n	801d25e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	7fda      	ldrb	r2, [r3, #31]
 801d248:	4b71      	ldr	r3, [pc, #452]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d24a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d252:	4b6f      	ldr	r3, [pc, #444]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d254:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d256:	68bb      	ldr	r3, [r7, #8]
 801d258:	7f9a      	ldrb	r2, [r3, #30]
 801d25a:	4b6d      	ldr	r3, [pc, #436]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d25c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d25e:	f7ff f8ec 	bl	801c43a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d262:	2000      	movs	r0, #0
 801d264:	f7fe fa7e 	bl	801b764 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d268:	486c      	ldr	r0, [pc, #432]	; (801d41c <RadioSetTxGenericConfig+0x32c>)
 801d26a:	f000 fd65 	bl	801dd38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d26e:	486c      	ldr	r0, [pc, #432]	; (801d420 <RadioSetTxGenericConfig+0x330>)
 801d270:	f000 fe34 	bl	801dedc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d274:	f107 031c 	add.w	r3, r7, #28
 801d278:	4618      	mov	r0, r3
 801d27a:	f000 f964 	bl	801d546 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	8b9b      	ldrh	r3, [r3, #28]
 801d282:	4618      	mov	r0, r3
 801d284:	f000 f9ae 	bl	801d5e4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	8c1b      	ldrh	r3, [r3, #32]
 801d28c:	4618      	mov	r0, r3
 801d28e:	f000 f989 	bl	801d5a4 <SUBGRF_SetCrcPolynomial>
        break;
 801d292:	e0a4      	b.n	801d3de <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d294:	4b5e      	ldr	r3, [pc, #376]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d296:	2201      	movs	r2, #1
 801d298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801d2a2:	4b5b      	ldr	r3, [pc, #364]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d2a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d2a8:	68bb      	ldr	r3, [r7, #8]
 801d2aa:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801d2ae:	4b58      	ldr	r3, [pc, #352]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d2b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801d2ba:	4b55      	ldr	r3, [pc, #340]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d2bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801d2c6:	2b02      	cmp	r3, #2
 801d2c8:	d010      	beq.n	801d2ec <RadioSetTxGenericConfig+0x1fc>
 801d2ca:	2b02      	cmp	r3, #2
 801d2cc:	dc22      	bgt.n	801d314 <RadioSetTxGenericConfig+0x224>
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d002      	beq.n	801d2d8 <RadioSetTxGenericConfig+0x1e8>
 801d2d2:	2b01      	cmp	r3, #1
 801d2d4:	d005      	beq.n	801d2e2 <RadioSetTxGenericConfig+0x1f2>
            break;
 801d2d6:	e01d      	b.n	801d314 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d2d8:	4b4d      	ldr	r3, [pc, #308]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d2da:	2200      	movs	r2, #0
 801d2dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2e0:	e019      	b.n	801d316 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d2e2:	4b4b      	ldr	r3, [pc, #300]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d2e4:	2201      	movs	r2, #1
 801d2e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2ea:	e014      	b.n	801d316 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d2f2:	2b0b      	cmp	r3, #11
 801d2f4:	d004      	beq.n	801d300 <RadioSetTxGenericConfig+0x210>
 801d2f6:	68bb      	ldr	r3, [r7, #8]
 801d2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d2fc:	2b0c      	cmp	r3, #12
 801d2fe:	d104      	bne.n	801d30a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d300:	4b43      	ldr	r3, [pc, #268]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d302:	2201      	movs	r2, #1
 801d304:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d308:	e005      	b.n	801d316 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d30a:	4b41      	ldr	r3, [pc, #260]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d30c:	2200      	movs	r2, #0
 801d30e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d312:	e000      	b.n	801d316 <RadioSetTxGenericConfig+0x226>
            break;
 801d314:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d316:	4b3e      	ldr	r3, [pc, #248]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d318:	2201      	movs	r2, #1
 801d31a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801d320:	4b3b      	ldr	r3, [pc, #236]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d322:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d324:	68bb      	ldr	r3, [r7, #8]
 801d326:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d32a:	4b39      	ldr	r3, [pc, #228]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d32c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d32e:	68bb      	ldr	r3, [r7, #8]
 801d330:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801d334:	4b36      	ldr	r3, [pc, #216]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d336:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d33a:	68bb      	ldr	r3, [r7, #8]
 801d33c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801d340:	4b33      	ldr	r3, [pc, #204]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d346:	f7ff f878 	bl	801c43a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d34a:	2001      	movs	r0, #1
 801d34c:	f7fe fa0a 	bl	801b764 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d350:	4832      	ldr	r0, [pc, #200]	; (801d41c <RadioSetTxGenericConfig+0x32c>)
 801d352:	f000 fcf1 	bl	801dd38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d356:	4832      	ldr	r0, [pc, #200]	; (801d420 <RadioSetTxGenericConfig+0x330>)
 801d358:	f000 fdc0 	bl	801dedc <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d35c:	4b2c      	ldr	r3, [pc, #176]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d35e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d362:	2b06      	cmp	r3, #6
 801d364:	d10d      	bne.n	801d382 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801d366:	f640 0089 	movw	r0, #2185	; 0x889
 801d36a:	f000 ff13 	bl	801e194 <SUBGRF_ReadRegister>
 801d36e:	4603      	mov	r3, r0
 801d370:	f023 0304 	bic.w	r3, r3, #4
 801d374:	b2db      	uxtb	r3, r3
 801d376:	4619      	mov	r1, r3
 801d378:	f640 0089 	movw	r0, #2185	; 0x889
 801d37c:	f000 fef6 	bl	801e16c <SUBGRF_WriteRegister>
        break;
 801d380:	e02d      	b.n	801d3de <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801d382:	f640 0089 	movw	r0, #2185	; 0x889
 801d386:	f000 ff05 	bl	801e194 <SUBGRF_ReadRegister>
 801d38a:	4603      	mov	r3, r0
 801d38c:	f043 0304 	orr.w	r3, r3, #4
 801d390:	b2db      	uxtb	r3, r3
 801d392:	4619      	mov	r1, r3
 801d394:	f640 0089 	movw	r0, #2185	; 0x889
 801d398:	f000 fee8 	bl	801e16c <SUBGRF_WriteRegister>
        break;
 801d39c:	e01f      	b.n	801d3de <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d39e:	68bb      	ldr	r3, [r7, #8]
 801d3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d004      	beq.n	801d3b0 <RadioSetTxGenericConfig+0x2c0>
 801d3a6:	68bb      	ldr	r3, [r7, #8]
 801d3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d3ae:	d902      	bls.n	801d3b6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801d3b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d3b4:	e027      	b.n	801d406 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801d3b6:	2002      	movs	r0, #2
 801d3b8:	f7fe f9d4 	bl	801b764 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d3bc:	4b14      	ldr	r3, [pc, #80]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d3be:	2202      	movs	r2, #2
 801d3c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d3c4:	68bb      	ldr	r3, [r7, #8]
 801d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3c8:	4a11      	ldr	r2, [pc, #68]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d3ca:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d3cc:	4b10      	ldr	r3, [pc, #64]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d3ce:	2216      	movs	r2, #22
 801d3d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d3d4:	4811      	ldr	r0, [pc, #68]	; (801d41c <RadioSetTxGenericConfig+0x32c>)
 801d3d6:	f000 fcaf 	bl	801dd38 <SUBGRF_SetModulationParams>
        break;
 801d3da:	e000      	b.n	801d3de <RadioSetTxGenericConfig+0x2ee>
        break;
 801d3dc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d3de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f000 ffde 	bl	801e3a4 <SUBGRF_SetRfTxPower>
 801d3e8:	4603      	mov	r3, r0
 801d3ea:	461a      	mov	r2, r3
 801d3ec:	4b08      	ldr	r3, [pc, #32]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d3ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d3f2:	4b07      	ldr	r3, [pc, #28]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d3f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f001 f9a2 	bl	801e742 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d3fe:	4a04      	ldr	r2, [pc, #16]	; (801d410 <RadioSetTxGenericConfig+0x320>)
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	6053      	str	r3, [r2, #4]
    return 0;
 801d404:	2300      	movs	r3, #0
}
 801d406:	4618      	mov	r0, r3
 801d408:	3728      	adds	r7, #40	; 0x28
 801d40a:	46bd      	mov	sp, r7
 801d40c:	bd80      	pop	{r7, pc}
 801d40e:	bf00      	nop
 801d410:	20004158 	.word	0x20004158
 801d414:	20004154 	.word	0x20004154
 801d418:	200041b0 	.word	0x200041b0
 801d41c:	20004190 	.word	0x20004190
 801d420:	20004166 	.word	0x20004166

0801d424 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d002      	beq.n	801d438 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d432:	4a1a      	ldr	r2, [pc, #104]	; (801d49c <SUBGRF_Init+0x78>)
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d438:	f7e4 f89c 	bl	8001574 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d43c:	2002      	movs	r0, #2
 801d43e:	f001 f87d 	bl	801e53c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d442:	4b17      	ldr	r3, [pc, #92]	; (801d4a0 <SUBGRF_Init+0x7c>)
 801d444:	2200      	movs	r2, #0
 801d446:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d448:	2000      	movs	r0, #0
 801d44a:	f000 f977 	bl	801d73c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d44e:	f7ee ff81 	bl	800c354 <RBI_IsTCXO>
 801d452:	4603      	mov	r3, r0
 801d454:	2b01      	cmp	r3, #1
 801d456:	d10e      	bne.n	801d476 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d458:	2140      	movs	r1, #64	; 0x40
 801d45a:	2001      	movs	r0, #1
 801d45c:	f000 fb78 	bl	801db50 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d460:	2100      	movs	r1, #0
 801d462:	f640 1011 	movw	r0, #2321	; 0x911
 801d466:	f000 fe81 	bl	801e16c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d46a:	237f      	movs	r3, #127	; 0x7f
 801d46c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d46e:	7b38      	ldrb	r0, [r7, #12]
 801d470:	f000 fa85 	bl	801d97e <SUBGRF_Calibrate>
 801d474:	e009      	b.n	801d48a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d476:	2120      	movs	r1, #32
 801d478:	f640 1011 	movw	r0, #2321	; 0x911
 801d47c:	f000 fe76 	bl	801e16c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d480:	2120      	movs	r1, #32
 801d482:	f640 1012 	movw	r0, #2322	; 0x912
 801d486:	f000 fe71 	bl	801e16c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801d48a:	f7ee ff47 	bl	800c31c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d48e:	4b05      	ldr	r3, [pc, #20]	; (801d4a4 <SUBGRF_Init+0x80>)
 801d490:	2201      	movs	r2, #1
 801d492:	701a      	strb	r2, [r3, #0]
}
 801d494:	bf00      	nop
 801d496:	3710      	adds	r7, #16
 801d498:	46bd      	mov	sp, r7
 801d49a:	bd80      	pop	{r7, pc}
 801d49c:	200041ec 	.word	0x200041ec
 801d4a0:	200041e8 	.word	0x200041e8
 801d4a4:	200041e0 	.word	0x200041e0

0801d4a8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d4a8:	b480      	push	{r7}
 801d4aa:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d4ac:	4b02      	ldr	r3, [pc, #8]	; (801d4b8 <SUBGRF_GetOperatingMode+0x10>)
 801d4ae:	781b      	ldrb	r3, [r3, #0]
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	46bd      	mov	sp, r7
 801d4b4:	bc80      	pop	{r7}
 801d4b6:	4770      	bx	lr
 801d4b8:	200041e0 	.word	0x200041e0

0801d4bc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d4bc:	b580      	push	{r7, lr}
 801d4be:	b082      	sub	sp, #8
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	6078      	str	r0, [r7, #4]
 801d4c4:	460b      	mov	r3, r1
 801d4c6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d4c8:	78fb      	ldrb	r3, [r7, #3]
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	6879      	ldr	r1, [r7, #4]
 801d4ce:	2000      	movs	r0, #0
 801d4d0:	f000 feb8 	bl	801e244 <SUBGRF_WriteBuffer>
}
 801d4d4:	bf00      	nop
 801d4d6:	3708      	adds	r7, #8
 801d4d8:	46bd      	mov	sp, r7
 801d4da:	bd80      	pop	{r7, pc}

0801d4dc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d4dc:	b580      	push	{r7, lr}
 801d4de:	b086      	sub	sp, #24
 801d4e0:	af00      	add	r7, sp, #0
 801d4e2:	60f8      	str	r0, [r7, #12]
 801d4e4:	60b9      	str	r1, [r7, #8]
 801d4e6:	4613      	mov	r3, r2
 801d4e8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d4ee:	f107 0317 	add.w	r3, r7, #23
 801d4f2:	4619      	mov	r1, r3
 801d4f4:	68b8      	ldr	r0, [r7, #8]
 801d4f6:	f000 fdbb 	bl	801e070 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d4fa:	68bb      	ldr	r3, [r7, #8]
 801d4fc:	781b      	ldrb	r3, [r3, #0]
 801d4fe:	79fa      	ldrb	r2, [r7, #7]
 801d500:	429a      	cmp	r2, r3
 801d502:	d201      	bcs.n	801d508 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d504:	2301      	movs	r3, #1
 801d506:	e007      	b.n	801d518 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d508:	7df8      	ldrb	r0, [r7, #23]
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	781b      	ldrb	r3, [r3, #0]
 801d50e:	461a      	mov	r2, r3
 801d510:	68f9      	ldr	r1, [r7, #12]
 801d512:	f000 feb9 	bl	801e288 <SUBGRF_ReadBuffer>

    return 0;
 801d516:	2300      	movs	r3, #0
}
 801d518:	4618      	mov	r0, r3
 801d51a:	3718      	adds	r7, #24
 801d51c:	46bd      	mov	sp, r7
 801d51e:	bd80      	pop	{r7, pc}

0801d520 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b084      	sub	sp, #16
 801d524:	af00      	add	r7, sp, #0
 801d526:	60f8      	str	r0, [r7, #12]
 801d528:	460b      	mov	r3, r1
 801d52a:	607a      	str	r2, [r7, #4]
 801d52c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d52e:	7afb      	ldrb	r3, [r7, #11]
 801d530:	4619      	mov	r1, r3
 801d532:	68f8      	ldr	r0, [r7, #12]
 801d534:	f7ff ffc2 	bl	801d4bc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d538:	6878      	ldr	r0, [r7, #4]
 801d53a:	f000 f91b 	bl	801d774 <SUBGRF_SetTx>
}
 801d53e:	bf00      	nop
 801d540:	3710      	adds	r7, #16
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}

0801d546 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d546:	b580      	push	{r7, lr}
 801d548:	b082      	sub	sp, #8
 801d54a:	af00      	add	r7, sp, #0
 801d54c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d54e:	2208      	movs	r2, #8
 801d550:	6879      	ldr	r1, [r7, #4]
 801d552:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d556:	f000 fe31 	bl	801e1bc <SUBGRF_WriteRegisters>
    return 0;
 801d55a:	2300      	movs	r3, #0
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3708      	adds	r7, #8
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}

0801d564 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b084      	sub	sp, #16
 801d568:	af00      	add	r7, sp, #0
 801d56a:	4603      	mov	r3, r0
 801d56c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d56e:	88fb      	ldrh	r3, [r7, #6]
 801d570:	0a1b      	lsrs	r3, r3, #8
 801d572:	b29b      	uxth	r3, r3
 801d574:	b2db      	uxtb	r3, r3
 801d576:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d578:	88fb      	ldrh	r3, [r7, #6]
 801d57a:	b2db      	uxtb	r3, r3
 801d57c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d57e:	f000 fb6b 	bl	801dc58 <SUBGRF_GetPacketType>
 801d582:	4603      	mov	r3, r0
 801d584:	2b00      	cmp	r3, #0
 801d586:	d108      	bne.n	801d59a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d588:	f107 030c 	add.w	r3, r7, #12
 801d58c:	2202      	movs	r2, #2
 801d58e:	4619      	mov	r1, r3
 801d590:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801d594:	f000 fe12 	bl	801e1bc <SUBGRF_WriteRegisters>
            break;
 801d598:	e000      	b.n	801d59c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801d59a:	bf00      	nop
    }
}
 801d59c:	bf00      	nop
 801d59e:	3710      	adds	r7, #16
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	bd80      	pop	{r7, pc}

0801d5a4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b084      	sub	sp, #16
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801d5ae:	88fb      	ldrh	r3, [r7, #6]
 801d5b0:	0a1b      	lsrs	r3, r3, #8
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801d5b8:	88fb      	ldrh	r3, [r7, #6]
 801d5ba:	b2db      	uxtb	r3, r3
 801d5bc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d5be:	f000 fb4b 	bl	801dc58 <SUBGRF_GetPacketType>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d108      	bne.n	801d5da <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801d5c8:	f107 030c 	add.w	r3, r7, #12
 801d5cc:	2202      	movs	r2, #2
 801d5ce:	4619      	mov	r1, r3
 801d5d0:	f240 60be 	movw	r0, #1726	; 0x6be
 801d5d4:	f000 fdf2 	bl	801e1bc <SUBGRF_WriteRegisters>
            break;
 801d5d8:	e000      	b.n	801d5dc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801d5da:	bf00      	nop
    }
}
 801d5dc:	bf00      	nop
 801d5de:	3710      	adds	r7, #16
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	bd80      	pop	{r7, pc}

0801d5e4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b084      	sub	sp, #16
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801d5f2:	f000 fb31 	bl	801dc58 <SUBGRF_GetPacketType>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d121      	bne.n	801d640 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801d5fc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d600:	f000 fdc8 	bl	801e194 <SUBGRF_ReadRegister>
 801d604:	4603      	mov	r3, r0
 801d606:	f023 0301 	bic.w	r3, r3, #1
 801d60a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801d60c:	88fb      	ldrh	r3, [r7, #6]
 801d60e:	0a1b      	lsrs	r3, r3, #8
 801d610:	b29b      	uxth	r3, r3
 801d612:	b25b      	sxtb	r3, r3
 801d614:	f003 0301 	and.w	r3, r3, #1
 801d618:	b25a      	sxtb	r2, r3
 801d61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d61e:	4313      	orrs	r3, r2
 801d620:	b25b      	sxtb	r3, r3
 801d622:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801d624:	7bfb      	ldrb	r3, [r7, #15]
 801d626:	4619      	mov	r1, r3
 801d628:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d62c:	f000 fd9e 	bl	801e16c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801d630:	88fb      	ldrh	r3, [r7, #6]
 801d632:	b2db      	uxtb	r3, r3
 801d634:	4619      	mov	r1, r3
 801d636:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801d63a:	f000 fd97 	bl	801e16c <SUBGRF_WriteRegister>
            break;
 801d63e:	e000      	b.n	801d642 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801d640:	bf00      	nop
    }
}
 801d642:	bf00      	nop
 801d644:	3710      	adds	r7, #16
 801d646:	46bd      	mov	sp, r7
 801d648:	bd80      	pop	{r7, pc}

0801d64a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801d64a:	b580      	push	{r7, lr}
 801d64c:	b082      	sub	sp, #8
 801d64e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801d650:	2300      	movs	r3, #0
 801d652:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801d654:	2300      	movs	r3, #0
 801d656:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801d658:	2300      	movs	r3, #0
 801d65a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801d65c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d660:	f000 fd98 	bl	801e194 <SUBGRF_ReadRegister>
 801d664:	4603      	mov	r3, r0
 801d666:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801d668:	79fb      	ldrb	r3, [r7, #7]
 801d66a:	f023 0301 	bic.w	r3, r3, #1
 801d66e:	b2db      	uxtb	r3, r3
 801d670:	4619      	mov	r1, r3
 801d672:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d676:	f000 fd79 	bl	801e16c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801d67a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d67e:	f000 fd89 	bl	801e194 <SUBGRF_ReadRegister>
 801d682:	4603      	mov	r3, r0
 801d684:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801d686:	79bb      	ldrb	r3, [r7, #6]
 801d688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d68c:	b2db      	uxtb	r3, r3
 801d68e:	4619      	mov	r1, r3
 801d690:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d694:	f000 fd6a 	bl	801e16c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d698:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d69c:	f000 f88a 	bl	801d7b4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801d6a0:	463b      	mov	r3, r7
 801d6a2:	2204      	movs	r2, #4
 801d6a4:	4619      	mov	r1, r3
 801d6a6:	f640 0019 	movw	r0, #2073	; 0x819
 801d6aa:	f000 fda9 	bl	801e200 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801d6ae:	2000      	movs	r0, #0
 801d6b0:	f000 f844 	bl	801d73c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801d6b4:	79fb      	ldrb	r3, [r7, #7]
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d6bc:	f000 fd56 	bl	801e16c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801d6c0:	79bb      	ldrb	r3, [r7, #6]
 801d6c2:	4619      	mov	r1, r3
 801d6c4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d6c8:	f000 fd50 	bl	801e16c <SUBGRF_WriteRegister>

    return number;
 801d6cc:	683b      	ldr	r3, [r7, #0]
}
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	3708      	adds	r7, #8
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	bd80      	pop	{r7, pc}
	...

0801d6d8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801d6d8:	b580      	push	{r7, lr}
 801d6da:	b084      	sub	sp, #16
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801d6e0:	2000      	movs	r0, #0
 801d6e2:	f7ee fe22 	bl	800c32a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d6e6:	2002      	movs	r0, #2
 801d6e8:	f000 ff28 	bl	801e53c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d6ec:	793b      	ldrb	r3, [r7, #4]
 801d6ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d6f2:	b2db      	uxtb	r3, r3
 801d6f4:	009b      	lsls	r3, r3, #2
 801d6f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d6f8:	793b      	ldrb	r3, [r7, #4]
 801d6fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d6fe:	b2db      	uxtb	r3, r3
 801d700:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d702:	b25b      	sxtb	r3, r3
 801d704:	4313      	orrs	r3, r2
 801d706:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801d708:	793b      	ldrb	r3, [r7, #4]
 801d70a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d70e:	b2db      	uxtb	r3, r3
 801d710:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d712:	4313      	orrs	r3, r2
 801d714:	b25b      	sxtb	r3, r3
 801d716:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d718:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801d71a:	f107 030f 	add.w	r3, r7, #15
 801d71e:	2201      	movs	r2, #1
 801d720:	4619      	mov	r1, r3
 801d722:	2084      	movs	r0, #132	; 0x84
 801d724:	f000 fdd2 	bl	801e2cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801d728:	4b03      	ldr	r3, [pc, #12]	; (801d738 <SUBGRF_SetSleep+0x60>)
 801d72a:	2200      	movs	r2, #0
 801d72c:	701a      	strb	r2, [r3, #0]
}
 801d72e:	bf00      	nop
 801d730:	3710      	adds	r7, #16
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}
 801d736:	bf00      	nop
 801d738:	200041e0 	.word	0x200041e0

0801d73c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801d73c:	b580      	push	{r7, lr}
 801d73e:	b082      	sub	sp, #8
 801d740:	af00      	add	r7, sp, #0
 801d742:	4603      	mov	r3, r0
 801d744:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801d746:	1dfb      	adds	r3, r7, #7
 801d748:	2201      	movs	r2, #1
 801d74a:	4619      	mov	r1, r3
 801d74c:	2080      	movs	r0, #128	; 0x80
 801d74e:	f000 fdbd 	bl	801e2cc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801d752:	79fb      	ldrb	r3, [r7, #7]
 801d754:	2b00      	cmp	r3, #0
 801d756:	d103      	bne.n	801d760 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801d758:	4b05      	ldr	r3, [pc, #20]	; (801d770 <SUBGRF_SetStandby+0x34>)
 801d75a:	2201      	movs	r2, #1
 801d75c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801d75e:	e002      	b.n	801d766 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801d760:	4b03      	ldr	r3, [pc, #12]	; (801d770 <SUBGRF_SetStandby+0x34>)
 801d762:	2202      	movs	r2, #2
 801d764:	701a      	strb	r2, [r3, #0]
}
 801d766:	bf00      	nop
 801d768:	3708      	adds	r7, #8
 801d76a:	46bd      	mov	sp, r7
 801d76c:	bd80      	pop	{r7, pc}
 801d76e:	bf00      	nop
 801d770:	200041e0 	.word	0x200041e0

0801d774 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b084      	sub	sp, #16
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801d77c:	4b0c      	ldr	r3, [pc, #48]	; (801d7b0 <SUBGRF_SetTx+0x3c>)
 801d77e:	2204      	movs	r2, #4
 801d780:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	0c1b      	lsrs	r3, r3, #16
 801d786:	b2db      	uxtb	r3, r3
 801d788:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	0a1b      	lsrs	r3, r3, #8
 801d78e:	b2db      	uxtb	r3, r3
 801d790:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	b2db      	uxtb	r3, r3
 801d796:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801d798:	f107 030c 	add.w	r3, r7, #12
 801d79c:	2203      	movs	r2, #3
 801d79e:	4619      	mov	r1, r3
 801d7a0:	2083      	movs	r0, #131	; 0x83
 801d7a2:	f000 fd93 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d7a6:	bf00      	nop
 801d7a8:	3710      	adds	r7, #16
 801d7aa:	46bd      	mov	sp, r7
 801d7ac:	bd80      	pop	{r7, pc}
 801d7ae:	bf00      	nop
 801d7b0:	200041e0 	.word	0x200041e0

0801d7b4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801d7b4:	b580      	push	{r7, lr}
 801d7b6:	b084      	sub	sp, #16
 801d7b8:	af00      	add	r7, sp, #0
 801d7ba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d7bc:	4b0c      	ldr	r3, [pc, #48]	; (801d7f0 <SUBGRF_SetRx+0x3c>)
 801d7be:	2205      	movs	r2, #5
 801d7c0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	0c1b      	lsrs	r3, r3, #16
 801d7c6:	b2db      	uxtb	r3, r3
 801d7c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	0a1b      	lsrs	r3, r3, #8
 801d7ce:	b2db      	uxtb	r3, r3
 801d7d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	b2db      	uxtb	r3, r3
 801d7d6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d7d8:	f107 030c 	add.w	r3, r7, #12
 801d7dc:	2203      	movs	r2, #3
 801d7de:	4619      	mov	r1, r3
 801d7e0:	2082      	movs	r0, #130	; 0x82
 801d7e2:	f000 fd73 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d7e6:	bf00      	nop
 801d7e8:	3710      	adds	r7, #16
 801d7ea:	46bd      	mov	sp, r7
 801d7ec:	bd80      	pop	{r7, pc}
 801d7ee:	bf00      	nop
 801d7f0:	200041e0 	.word	0x200041e0

0801d7f4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801d7f4:	b580      	push	{r7, lr}
 801d7f6:	b084      	sub	sp, #16
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d7fc:	4b0e      	ldr	r3, [pc, #56]	; (801d838 <SUBGRF_SetRxBoosted+0x44>)
 801d7fe:	2205      	movs	r2, #5
 801d800:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801d802:	2197      	movs	r1, #151	; 0x97
 801d804:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801d808:	f000 fcb0 	bl	801e16c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	0c1b      	lsrs	r3, r3, #16
 801d810:	b2db      	uxtb	r3, r3
 801d812:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	0a1b      	lsrs	r3, r3, #8
 801d818:	b2db      	uxtb	r3, r3
 801d81a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	b2db      	uxtb	r3, r3
 801d820:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d822:	f107 030c 	add.w	r3, r7, #12
 801d826:	2203      	movs	r2, #3
 801d828:	4619      	mov	r1, r3
 801d82a:	2082      	movs	r0, #130	; 0x82
 801d82c:	f000 fd4e 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d830:	bf00      	nop
 801d832:	3710      	adds	r7, #16
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}
 801d838:	200041e0 	.word	0x200041e0

0801d83c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	b084      	sub	sp, #16
 801d840:	af00      	add	r7, sp, #0
 801d842:	6078      	str	r0, [r7, #4]
 801d844:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	0c1b      	lsrs	r3, r3, #16
 801d84a:	b2db      	uxtb	r3, r3
 801d84c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	0a1b      	lsrs	r3, r3, #8
 801d852:	b2db      	uxtb	r3, r3
 801d854:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	b2db      	uxtb	r3, r3
 801d85a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801d85c:	683b      	ldr	r3, [r7, #0]
 801d85e:	0c1b      	lsrs	r3, r3, #16
 801d860:	b2db      	uxtb	r3, r3
 801d862:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801d864:	683b      	ldr	r3, [r7, #0]
 801d866:	0a1b      	lsrs	r3, r3, #8
 801d868:	b2db      	uxtb	r3, r3
 801d86a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	b2db      	uxtb	r3, r3
 801d870:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801d872:	f107 0308 	add.w	r3, r7, #8
 801d876:	2206      	movs	r2, #6
 801d878:	4619      	mov	r1, r3
 801d87a:	2094      	movs	r0, #148	; 0x94
 801d87c:	f000 fd26 	bl	801e2cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801d880:	4b03      	ldr	r3, [pc, #12]	; (801d890 <SUBGRF_SetRxDutyCycle+0x54>)
 801d882:	2206      	movs	r2, #6
 801d884:	701a      	strb	r2, [r3, #0]
}
 801d886:	bf00      	nop
 801d888:	3710      	adds	r7, #16
 801d88a:	46bd      	mov	sp, r7
 801d88c:	bd80      	pop	{r7, pc}
 801d88e:	bf00      	nop
 801d890:	200041e0 	.word	0x200041e0

0801d894 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801d894:	b580      	push	{r7, lr}
 801d896:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801d898:	2200      	movs	r2, #0
 801d89a:	2100      	movs	r1, #0
 801d89c:	20c5      	movs	r0, #197	; 0xc5
 801d89e:	f000 fd15 	bl	801e2cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801d8a2:	4b02      	ldr	r3, [pc, #8]	; (801d8ac <SUBGRF_SetCad+0x18>)
 801d8a4:	2207      	movs	r2, #7
 801d8a6:	701a      	strb	r2, [r3, #0]
}
 801d8a8:	bf00      	nop
 801d8aa:	bd80      	pop	{r7, pc}
 801d8ac:	200041e0 	.word	0x200041e0

0801d8b0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801d8b0:	b580      	push	{r7, lr}
 801d8b2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	2100      	movs	r1, #0
 801d8b8:	20d1      	movs	r0, #209	; 0xd1
 801d8ba:	f000 fd07 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d8be:	bf00      	nop
 801d8c0:	bd80      	pop	{r7, pc}

0801d8c2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801d8c2:	b580      	push	{r7, lr}
 801d8c4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	2100      	movs	r1, #0
 801d8ca:	20d2      	movs	r0, #210	; 0xd2
 801d8cc:	f000 fcfe 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d8d0:	bf00      	nop
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b082      	sub	sp, #8
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	4603      	mov	r3, r0
 801d8dc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801d8de:	1dfb      	adds	r3, r7, #7
 801d8e0:	2201      	movs	r2, #1
 801d8e2:	4619      	mov	r1, r3
 801d8e4:	209f      	movs	r0, #159	; 0x9f
 801d8e6:	f000 fcf1 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d8ea:	bf00      	nop
 801d8ec:	3708      	adds	r7, #8
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bd80      	pop	{r7, pc}

0801d8f2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801d8f2:	b580      	push	{r7, lr}
 801d8f4:	b084      	sub	sp, #16
 801d8f6:	af00      	add	r7, sp, #0
 801d8f8:	4603      	mov	r3, r0
 801d8fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801d8fc:	1dfb      	adds	r3, r7, #7
 801d8fe:	2201      	movs	r2, #1
 801d900:	4619      	mov	r1, r3
 801d902:	20a0      	movs	r0, #160	; 0xa0
 801d904:	f000 fce2 	bl	801e2cc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801d908:	79fb      	ldrb	r3, [r7, #7]
 801d90a:	2b3f      	cmp	r3, #63	; 0x3f
 801d90c:	d91c      	bls.n	801d948 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801d90e:	79fb      	ldrb	r3, [r7, #7]
 801d910:	085b      	lsrs	r3, r3, #1
 801d912:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801d914:	2300      	movs	r3, #0
 801d916:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801d918:	2300      	movs	r3, #0
 801d91a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801d91c:	e005      	b.n	801d92a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801d91e:	7bfb      	ldrb	r3, [r7, #15]
 801d920:	089b      	lsrs	r3, r3, #2
 801d922:	73fb      	strb	r3, [r7, #15]
            exp++;
 801d924:	7bbb      	ldrb	r3, [r7, #14]
 801d926:	3301      	adds	r3, #1
 801d928:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801d92a:	7bfb      	ldrb	r3, [r7, #15]
 801d92c:	2b1f      	cmp	r3, #31
 801d92e:	d8f6      	bhi.n	801d91e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801d930:	7bfb      	ldrb	r3, [r7, #15]
 801d932:	00db      	lsls	r3, r3, #3
 801d934:	b2da      	uxtb	r2, r3
 801d936:	7bbb      	ldrb	r3, [r7, #14]
 801d938:	4413      	add	r3, r2
 801d93a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801d93c:	7b7b      	ldrb	r3, [r7, #13]
 801d93e:	4619      	mov	r1, r3
 801d940:	f240 7006 	movw	r0, #1798	; 0x706
 801d944:	f000 fc12 	bl	801e16c <SUBGRF_WriteRegister>
    }
}
 801d948:	bf00      	nop
 801d94a:	3710      	adds	r7, #16
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801d950:	b580      	push	{r7, lr}
 801d952:	b082      	sub	sp, #8
 801d954:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801d956:	f7ee fd04 	bl	800c362 <RBI_IsDCDC>
 801d95a:	4603      	mov	r3, r0
 801d95c:	2b01      	cmp	r3, #1
 801d95e:	d102      	bne.n	801d966 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801d960:	2301      	movs	r3, #1
 801d962:	71fb      	strb	r3, [r7, #7]
 801d964:	e001      	b.n	801d96a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801d966:	2300      	movs	r3, #0
 801d968:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801d96a:	1dfb      	adds	r3, r7, #7
 801d96c:	2201      	movs	r2, #1
 801d96e:	4619      	mov	r1, r3
 801d970:	2096      	movs	r0, #150	; 0x96
 801d972:	f000 fcab 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801d976:	bf00      	nop
 801d978:	3708      	adds	r7, #8
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bd80      	pop	{r7, pc}

0801d97e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801d97e:	b580      	push	{r7, lr}
 801d980:	b084      	sub	sp, #16
 801d982:	af00      	add	r7, sp, #0
 801d984:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801d986:	793b      	ldrb	r3, [r7, #4]
 801d988:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801d98c:	b2db      	uxtb	r3, r3
 801d98e:	019b      	lsls	r3, r3, #6
 801d990:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801d992:	793b      	ldrb	r3, [r7, #4]
 801d994:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801d998:	b2db      	uxtb	r3, r3
 801d99a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801d99c:	b25b      	sxtb	r3, r3
 801d99e:	4313      	orrs	r3, r2
 801d9a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801d9a2:	793b      	ldrb	r3, [r7, #4]
 801d9a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d9a8:	b2db      	uxtb	r3, r3
 801d9aa:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801d9ac:	b25b      	sxtb	r3, r3
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801d9b2:	793b      	ldrb	r3, [r7, #4]
 801d9b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d9b8:	b2db      	uxtb	r3, r3
 801d9ba:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801d9bc:	b25b      	sxtb	r3, r3
 801d9be:	4313      	orrs	r3, r2
 801d9c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801d9c2:	793b      	ldrb	r3, [r7, #4]
 801d9c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d9c8:	b2db      	uxtb	r3, r3
 801d9ca:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801d9cc:	b25b      	sxtb	r3, r3
 801d9ce:	4313      	orrs	r3, r2
 801d9d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801d9d2:	793b      	ldrb	r3, [r7, #4]
 801d9d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d9d8:	b2db      	uxtb	r3, r3
 801d9da:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801d9dc:	b25b      	sxtb	r3, r3
 801d9de:	4313      	orrs	r3, r2
 801d9e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801d9e2:	793b      	ldrb	r3, [r7, #4]
 801d9e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d9e8:	b2db      	uxtb	r3, r3
 801d9ea:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801d9ec:	4313      	orrs	r3, r2
 801d9ee:	b25b      	sxtb	r3, r3
 801d9f0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801d9f2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801d9f4:	f107 030f 	add.w	r3, r7, #15
 801d9f8:	2201      	movs	r2, #1
 801d9fa:	4619      	mov	r1, r3
 801d9fc:	2089      	movs	r0, #137	; 0x89
 801d9fe:	f000 fc65 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801da02:	bf00      	nop
 801da04:	3710      	adds	r7, #16
 801da06:	46bd      	mov	sp, r7
 801da08:	bd80      	pop	{r7, pc}
	...

0801da0c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801da0c:	b580      	push	{r7, lr}
 801da0e:	b084      	sub	sp, #16
 801da10:	af00      	add	r7, sp, #0
 801da12:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	4a1b      	ldr	r2, [pc, #108]	; (801da84 <SUBGRF_CalibrateImage+0x78>)
 801da18:	4293      	cmp	r3, r2
 801da1a:	d904      	bls.n	801da26 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801da1c:	23e1      	movs	r3, #225	; 0xe1
 801da1e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801da20:	23e9      	movs	r3, #233	; 0xe9
 801da22:	737b      	strb	r3, [r7, #13]
 801da24:	e022      	b.n	801da6c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	4a17      	ldr	r2, [pc, #92]	; (801da88 <SUBGRF_CalibrateImage+0x7c>)
 801da2a:	4293      	cmp	r3, r2
 801da2c:	d904      	bls.n	801da38 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801da2e:	23d7      	movs	r3, #215	; 0xd7
 801da30:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801da32:	23db      	movs	r3, #219	; 0xdb
 801da34:	737b      	strb	r3, [r7, #13]
 801da36:	e019      	b.n	801da6c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	4a14      	ldr	r2, [pc, #80]	; (801da8c <SUBGRF_CalibrateImage+0x80>)
 801da3c:	4293      	cmp	r3, r2
 801da3e:	d904      	bls.n	801da4a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801da40:	23c1      	movs	r3, #193	; 0xc1
 801da42:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801da44:	23c5      	movs	r3, #197	; 0xc5
 801da46:	737b      	strb	r3, [r7, #13]
 801da48:	e010      	b.n	801da6c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	4a10      	ldr	r2, [pc, #64]	; (801da90 <SUBGRF_CalibrateImage+0x84>)
 801da4e:	4293      	cmp	r3, r2
 801da50:	d904      	bls.n	801da5c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801da52:	2375      	movs	r3, #117	; 0x75
 801da54:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801da56:	2381      	movs	r3, #129	; 0x81
 801da58:	737b      	strb	r3, [r7, #13]
 801da5a:	e007      	b.n	801da6c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	4a0d      	ldr	r2, [pc, #52]	; (801da94 <SUBGRF_CalibrateImage+0x88>)
 801da60:	4293      	cmp	r3, r2
 801da62:	d903      	bls.n	801da6c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801da64:	236b      	movs	r3, #107	; 0x6b
 801da66:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801da68:	236f      	movs	r3, #111	; 0x6f
 801da6a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801da6c:	f107 030c 	add.w	r3, r7, #12
 801da70:	2202      	movs	r2, #2
 801da72:	4619      	mov	r1, r3
 801da74:	2098      	movs	r0, #152	; 0x98
 801da76:	f000 fc29 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801da7a:	bf00      	nop
 801da7c:	3710      	adds	r7, #16
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}
 801da82:	bf00      	nop
 801da84:	35a4e900 	.word	0x35a4e900
 801da88:	32a9f880 	.word	0x32a9f880
 801da8c:	2de54480 	.word	0x2de54480
 801da90:	1b6b0b00 	.word	0x1b6b0b00
 801da94:	1954fc40 	.word	0x1954fc40

0801da98 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801da98:	b590      	push	{r4, r7, lr}
 801da9a:	b085      	sub	sp, #20
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	4604      	mov	r4, r0
 801daa0:	4608      	mov	r0, r1
 801daa2:	4611      	mov	r1, r2
 801daa4:	461a      	mov	r2, r3
 801daa6:	4623      	mov	r3, r4
 801daa8:	71fb      	strb	r3, [r7, #7]
 801daaa:	4603      	mov	r3, r0
 801daac:	71bb      	strb	r3, [r7, #6]
 801daae:	460b      	mov	r3, r1
 801dab0:	717b      	strb	r3, [r7, #5]
 801dab2:	4613      	mov	r3, r2
 801dab4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801dab6:	79fb      	ldrb	r3, [r7, #7]
 801dab8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801daba:	79bb      	ldrb	r3, [r7, #6]
 801dabc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801dabe:	797b      	ldrb	r3, [r7, #5]
 801dac0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801dac2:	793b      	ldrb	r3, [r7, #4]
 801dac4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801dac6:	f107 030c 	add.w	r3, r7, #12
 801daca:	2204      	movs	r2, #4
 801dacc:	4619      	mov	r1, r3
 801dace:	2095      	movs	r0, #149	; 0x95
 801dad0:	f000 fbfc 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801dad4:	bf00      	nop
 801dad6:	3714      	adds	r7, #20
 801dad8:	46bd      	mov	sp, r7
 801dada:	bd90      	pop	{r4, r7, pc}

0801dadc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801dadc:	b590      	push	{r4, r7, lr}
 801dade:	b085      	sub	sp, #20
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	4604      	mov	r4, r0
 801dae4:	4608      	mov	r0, r1
 801dae6:	4611      	mov	r1, r2
 801dae8:	461a      	mov	r2, r3
 801daea:	4623      	mov	r3, r4
 801daec:	80fb      	strh	r3, [r7, #6]
 801daee:	4603      	mov	r3, r0
 801daf0:	80bb      	strh	r3, [r7, #4]
 801daf2:	460b      	mov	r3, r1
 801daf4:	807b      	strh	r3, [r7, #2]
 801daf6:	4613      	mov	r3, r2
 801daf8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801dafa:	88fb      	ldrh	r3, [r7, #6]
 801dafc:	0a1b      	lsrs	r3, r3, #8
 801dafe:	b29b      	uxth	r3, r3
 801db00:	b2db      	uxtb	r3, r3
 801db02:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801db04:	88fb      	ldrh	r3, [r7, #6]
 801db06:	b2db      	uxtb	r3, r3
 801db08:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801db0a:	88bb      	ldrh	r3, [r7, #4]
 801db0c:	0a1b      	lsrs	r3, r3, #8
 801db0e:	b29b      	uxth	r3, r3
 801db10:	b2db      	uxtb	r3, r3
 801db12:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801db14:	88bb      	ldrh	r3, [r7, #4]
 801db16:	b2db      	uxtb	r3, r3
 801db18:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801db1a:	887b      	ldrh	r3, [r7, #2]
 801db1c:	0a1b      	lsrs	r3, r3, #8
 801db1e:	b29b      	uxth	r3, r3
 801db20:	b2db      	uxtb	r3, r3
 801db22:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801db24:	887b      	ldrh	r3, [r7, #2]
 801db26:	b2db      	uxtb	r3, r3
 801db28:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801db2a:	883b      	ldrh	r3, [r7, #0]
 801db2c:	0a1b      	lsrs	r3, r3, #8
 801db2e:	b29b      	uxth	r3, r3
 801db30:	b2db      	uxtb	r3, r3
 801db32:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801db34:	883b      	ldrh	r3, [r7, #0]
 801db36:	b2db      	uxtb	r3, r3
 801db38:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801db3a:	f107 0308 	add.w	r3, r7, #8
 801db3e:	2208      	movs	r2, #8
 801db40:	4619      	mov	r1, r3
 801db42:	2008      	movs	r0, #8
 801db44:	f000 fbc2 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801db48:	bf00      	nop
 801db4a:	3714      	adds	r7, #20
 801db4c:	46bd      	mov	sp, r7
 801db4e:	bd90      	pop	{r4, r7, pc}

0801db50 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801db50:	b580      	push	{r7, lr}
 801db52:	b084      	sub	sp, #16
 801db54:	af00      	add	r7, sp, #0
 801db56:	4603      	mov	r3, r0
 801db58:	6039      	str	r1, [r7, #0]
 801db5a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801db5c:	79fb      	ldrb	r3, [r7, #7]
 801db5e:	f003 0307 	and.w	r3, r3, #7
 801db62:	b2db      	uxtb	r3, r3
 801db64:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	0c1b      	lsrs	r3, r3, #16
 801db6a:	b2db      	uxtb	r3, r3
 801db6c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	0a1b      	lsrs	r3, r3, #8
 801db72:	b2db      	uxtb	r3, r3
 801db74:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801db76:	683b      	ldr	r3, [r7, #0]
 801db78:	b2db      	uxtb	r3, r3
 801db7a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801db7c:	f107 030c 	add.w	r3, r7, #12
 801db80:	2204      	movs	r2, #4
 801db82:	4619      	mov	r1, r3
 801db84:	2097      	movs	r0, #151	; 0x97
 801db86:	f000 fba1 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801db8a:	bf00      	nop
 801db8c:	3710      	adds	r7, #16
 801db8e:	46bd      	mov	sp, r7
 801db90:	bd80      	pop	{r7, pc}
	...

0801db94 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801db94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801db98:	b084      	sub	sp, #16
 801db9a:	af00      	add	r7, sp, #0
 801db9c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801db9e:	2300      	movs	r3, #0
 801dba0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801dba2:	4b1d      	ldr	r3, [pc, #116]	; (801dc18 <SUBGRF_SetRfFrequency+0x84>)
 801dba4:	781b      	ldrb	r3, [r3, #0]
 801dba6:	f083 0301 	eor.w	r3, r3, #1
 801dbaa:	b2db      	uxtb	r3, r3
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d005      	beq.n	801dbbc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801dbb0:	6878      	ldr	r0, [r7, #4]
 801dbb2:	f7ff ff2b 	bl	801da0c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801dbb6:	4b18      	ldr	r3, [pc, #96]	; (801dc18 <SUBGRF_SetRfFrequency+0x84>)
 801dbb8:	2201      	movs	r2, #1
 801dbba:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	2200      	movs	r2, #0
 801dbc0:	461c      	mov	r4, r3
 801dbc2:	4615      	mov	r5, r2
 801dbc4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dbc8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dbcc:	4a13      	ldr	r2, [pc, #76]	; (801dc1c <SUBGRF_SetRfFrequency+0x88>)
 801dbce:	f04f 0300 	mov.w	r3, #0
 801dbd2:	4640      	mov	r0, r8
 801dbd4:	4649      	mov	r1, r9
 801dbd6:	f7e2 fe55 	bl	8000884 <__aeabi_uldivmod>
 801dbda:	4602      	mov	r2, r0
 801dbdc:	460b      	mov	r3, r1
 801dbde:	4613      	mov	r3, r2
 801dbe0:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	0e1b      	lsrs	r3, r3, #24
 801dbe6:	b2db      	uxtb	r3, r3
 801dbe8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	0c1b      	lsrs	r3, r3, #16
 801dbee:	b2db      	uxtb	r3, r3
 801dbf0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	0a1b      	lsrs	r3, r3, #8
 801dbf6:	b2db      	uxtb	r3, r3
 801dbf8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	b2db      	uxtb	r3, r3
 801dbfe:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801dc00:	f107 0308 	add.w	r3, r7, #8
 801dc04:	2204      	movs	r2, #4
 801dc06:	4619      	mov	r1, r3
 801dc08:	2086      	movs	r0, #134	; 0x86
 801dc0a:	f000 fb5f 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801dc0e:	bf00      	nop
 801dc10:	3710      	adds	r7, #16
 801dc12:	46bd      	mov	sp, r7
 801dc14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dc18:	200041e8 	.word	0x200041e8
 801dc1c:	01e84800 	.word	0x01e84800

0801dc20 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b082      	sub	sp, #8
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	4603      	mov	r3, r0
 801dc28:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801dc2a:	79fa      	ldrb	r2, [r7, #7]
 801dc2c:	4b09      	ldr	r3, [pc, #36]	; (801dc54 <SUBGRF_SetPacketType+0x34>)
 801dc2e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801dc30:	79fb      	ldrb	r3, [r7, #7]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d104      	bne.n	801dc40 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801dc36:	2100      	movs	r1, #0
 801dc38:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801dc3c:	f000 fa96 	bl	801e16c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801dc40:	1dfb      	adds	r3, r7, #7
 801dc42:	2201      	movs	r2, #1
 801dc44:	4619      	mov	r1, r3
 801dc46:	208a      	movs	r0, #138	; 0x8a
 801dc48:	f000 fb40 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801dc4c:	bf00      	nop
 801dc4e:	3708      	adds	r7, #8
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd80      	pop	{r7, pc}
 801dc54:	200041e1 	.word	0x200041e1

0801dc58 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801dc58:	b480      	push	{r7}
 801dc5a:	af00      	add	r7, sp, #0
    return PacketType;
 801dc5c:	4b02      	ldr	r3, [pc, #8]	; (801dc68 <SUBGRF_GetPacketType+0x10>)
 801dc5e:	781b      	ldrb	r3, [r3, #0]
}
 801dc60:	4618      	mov	r0, r3
 801dc62:	46bd      	mov	sp, r7
 801dc64:	bc80      	pop	{r7}
 801dc66:	4770      	bx	lr
 801dc68:	200041e1 	.word	0x200041e1

0801dc6c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801dc6c:	b580      	push	{r7, lr}
 801dc6e:	b084      	sub	sp, #16
 801dc70:	af00      	add	r7, sp, #0
 801dc72:	4603      	mov	r3, r0
 801dc74:	71fb      	strb	r3, [r7, #7]
 801dc76:	460b      	mov	r3, r1
 801dc78:	71bb      	strb	r3, [r7, #6]
 801dc7a:	4613      	mov	r3, r2
 801dc7c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801dc7e:	79fb      	ldrb	r3, [r7, #7]
 801dc80:	2b01      	cmp	r3, #1
 801dc82:	d124      	bne.n	801dcce <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801dc84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dc88:	2b0f      	cmp	r3, #15
 801dc8a:	d106      	bne.n	801dc9a <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801dc8c:	2301      	movs	r3, #1
 801dc8e:	2201      	movs	r2, #1
 801dc90:	2100      	movs	r1, #0
 801dc92:	2006      	movs	r0, #6
 801dc94:	f7ff ff00 	bl	801da98 <SUBGRF_SetPaConfig>
 801dc98:	e005      	b.n	801dca6 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	2201      	movs	r2, #1
 801dc9e:	2100      	movs	r1, #0
 801dca0:	2004      	movs	r0, #4
 801dca2:	f7ff fef9 	bl	801da98 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801dca6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dcaa:	2b0d      	cmp	r3, #13
 801dcac:	dd02      	ble.n	801dcb4 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801dcae:	230e      	movs	r3, #14
 801dcb0:	71bb      	strb	r3, [r7, #6]
 801dcb2:	e006      	b.n	801dcc2 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801dcb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dcb8:	f113 0f11 	cmn.w	r3, #17
 801dcbc:	da01      	bge.n	801dcc2 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801dcbe:	23ef      	movs	r3, #239	; 0xef
 801dcc0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801dcc2:	2118      	movs	r1, #24
 801dcc4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dcc8:	f000 fa50 	bl	801e16c <SUBGRF_WriteRegister>
 801dccc:	e025      	b.n	801dd1a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801dcce:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801dcd2:	f000 fa5f 	bl	801e194 <SUBGRF_ReadRegister>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	f043 031e 	orr.w	r3, r3, #30
 801dcdc:	b2db      	uxtb	r3, r3
 801dcde:	4619      	mov	r1, r3
 801dce0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801dce4:	f000 fa42 	bl	801e16c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801dce8:	2301      	movs	r3, #1
 801dcea:	2200      	movs	r2, #0
 801dcec:	2107      	movs	r1, #7
 801dcee:	2004      	movs	r0, #4
 801dcf0:	f7ff fed2 	bl	801da98 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801dcf4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dcf8:	2b16      	cmp	r3, #22
 801dcfa:	dd02      	ble.n	801dd02 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801dcfc:	2316      	movs	r3, #22
 801dcfe:	71bb      	strb	r3, [r7, #6]
 801dd00:	e006      	b.n	801dd10 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801dd02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dd06:	f113 0f09 	cmn.w	r3, #9
 801dd0a:	da01      	bge.n	801dd10 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801dd0c:	23f7      	movs	r3, #247	; 0xf7
 801dd0e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801dd10:	2138      	movs	r1, #56	; 0x38
 801dd12:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dd16:	f000 fa29 	bl	801e16c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801dd1a:	79bb      	ldrb	r3, [r7, #6]
 801dd1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801dd1e:	797b      	ldrb	r3, [r7, #5]
 801dd20:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801dd22:	f107 030c 	add.w	r3, r7, #12
 801dd26:	2202      	movs	r2, #2
 801dd28:	4619      	mov	r1, r3
 801dd2a:	208e      	movs	r0, #142	; 0x8e
 801dd2c:	f000 face 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801dd30:	bf00      	nop
 801dd32:	3710      	adds	r7, #16
 801dd34:	46bd      	mov	sp, r7
 801dd36:	bd80      	pop	{r7, pc}

0801dd38 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801dd38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dd3c:	b086      	sub	sp, #24
 801dd3e:	af00      	add	r7, sp, #0
 801dd40:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801dd42:	2300      	movs	r3, #0
 801dd44:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801dd46:	4a61      	ldr	r2, [pc, #388]	; (801decc <SUBGRF_SetModulationParams+0x194>)
 801dd48:	f107 0308 	add.w	r3, r7, #8
 801dd4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd50:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	781a      	ldrb	r2, [r3, #0]
 801dd58:	4b5d      	ldr	r3, [pc, #372]	; (801ded0 <SUBGRF_SetModulationParams+0x198>)
 801dd5a:	781b      	ldrb	r3, [r3, #0]
 801dd5c:	429a      	cmp	r2, r3
 801dd5e:	d004      	beq.n	801dd6a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	781b      	ldrb	r3, [r3, #0]
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7ff ff5b 	bl	801dc20 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	781b      	ldrb	r3, [r3, #0]
 801dd6e:	2b03      	cmp	r3, #3
 801dd70:	f200 80a5 	bhi.w	801debe <SUBGRF_SetModulationParams+0x186>
 801dd74:	a201      	add	r2, pc, #4	; (adr r2, 801dd7c <SUBGRF_SetModulationParams+0x44>)
 801dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd7a:	bf00      	nop
 801dd7c:	0801dd8d 	.word	0x0801dd8d
 801dd80:	0801de4d 	.word	0x0801de4d
 801dd84:	0801de0f 	.word	0x0801de0f
 801dd88:	0801de7b 	.word	0x0801de7b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801dd8c:	2308      	movs	r3, #8
 801dd8e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	685b      	ldr	r3, [r3, #4]
 801dd94:	4a4f      	ldr	r2, [pc, #316]	; (801ded4 <SUBGRF_SetModulationParams+0x19c>)
 801dd96:	fbb2 f3f3 	udiv	r3, r2, r3
 801dd9a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801dd9c:	697b      	ldr	r3, [r7, #20]
 801dd9e:	0c1b      	lsrs	r3, r3, #16
 801dda0:	b2db      	uxtb	r3, r3
 801dda2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801dda4:	697b      	ldr	r3, [r7, #20]
 801dda6:	0a1b      	lsrs	r3, r3, #8
 801dda8:	b2db      	uxtb	r3, r3
 801ddaa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ddac:	697b      	ldr	r3, [r7, #20]
 801ddae:	b2db      	uxtb	r3, r3
 801ddb0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	7b1b      	ldrb	r3, [r3, #12]
 801ddb6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	7b5b      	ldrb	r3, [r3, #13]
 801ddbc:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	689b      	ldr	r3, [r3, #8]
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	461c      	mov	r4, r3
 801ddc6:	4615      	mov	r5, r2
 801ddc8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ddcc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ddd0:	4a41      	ldr	r2, [pc, #260]	; (801ded8 <SUBGRF_SetModulationParams+0x1a0>)
 801ddd2:	f04f 0300 	mov.w	r3, #0
 801ddd6:	4640      	mov	r0, r8
 801ddd8:	4649      	mov	r1, r9
 801ddda:	f7e2 fd53 	bl	8000884 <__aeabi_uldivmod>
 801ddde:	4602      	mov	r2, r0
 801dde0:	460b      	mov	r3, r1
 801dde2:	4613      	mov	r3, r2
 801dde4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801dde6:	697b      	ldr	r3, [r7, #20]
 801dde8:	0c1b      	lsrs	r3, r3, #16
 801ddea:	b2db      	uxtb	r3, r3
 801ddec:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ddee:	697b      	ldr	r3, [r7, #20]
 801ddf0:	0a1b      	lsrs	r3, r3, #8
 801ddf2:	b2db      	uxtb	r3, r3
 801ddf4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ddf6:	697b      	ldr	r3, [r7, #20]
 801ddf8:	b2db      	uxtb	r3, r3
 801ddfa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ddfc:	7cfb      	ldrb	r3, [r7, #19]
 801ddfe:	b29a      	uxth	r2, r3
 801de00:	f107 0308 	add.w	r3, r7, #8
 801de04:	4619      	mov	r1, r3
 801de06:	208b      	movs	r0, #139	; 0x8b
 801de08:	f000 fa60 	bl	801e2cc <SUBGRF_WriteCommand>
        break;
 801de0c:	e058      	b.n	801dec0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801de0e:	2304      	movs	r3, #4
 801de10:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	691b      	ldr	r3, [r3, #16]
 801de16:	4a2f      	ldr	r2, [pc, #188]	; (801ded4 <SUBGRF_SetModulationParams+0x19c>)
 801de18:	fbb2 f3f3 	udiv	r3, r2, r3
 801de1c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801de1e:	697b      	ldr	r3, [r7, #20]
 801de20:	0c1b      	lsrs	r3, r3, #16
 801de22:	b2db      	uxtb	r3, r3
 801de24:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801de26:	697b      	ldr	r3, [r7, #20]
 801de28:	0a1b      	lsrs	r3, r3, #8
 801de2a:	b2db      	uxtb	r3, r3
 801de2c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	b2db      	uxtb	r3, r3
 801de32:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	7d1b      	ldrb	r3, [r3, #20]
 801de38:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801de3a:	7cfb      	ldrb	r3, [r7, #19]
 801de3c:	b29a      	uxth	r2, r3
 801de3e:	f107 0308 	add.w	r3, r7, #8
 801de42:	4619      	mov	r1, r3
 801de44:	208b      	movs	r0, #139	; 0x8b
 801de46:	f000 fa41 	bl	801e2cc <SUBGRF_WriteCommand>
        break;
 801de4a:	e039      	b.n	801dec0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801de4c:	2304      	movs	r3, #4
 801de4e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	7e1b      	ldrb	r3, [r3, #24]
 801de54:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	7e5b      	ldrb	r3, [r3, #25]
 801de5a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	7e9b      	ldrb	r3, [r3, #26]
 801de60:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	7edb      	ldrb	r3, [r3, #27]
 801de66:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801de68:	7cfb      	ldrb	r3, [r7, #19]
 801de6a:	b29a      	uxth	r2, r3
 801de6c:	f107 0308 	add.w	r3, r7, #8
 801de70:	4619      	mov	r1, r3
 801de72:	208b      	movs	r0, #139	; 0x8b
 801de74:	f000 fa2a 	bl	801e2cc <SUBGRF_WriteCommand>

        break;
 801de78:	e022      	b.n	801dec0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801de7a:	2305      	movs	r3, #5
 801de7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	685b      	ldr	r3, [r3, #4]
 801de82:	4a14      	ldr	r2, [pc, #80]	; (801ded4 <SUBGRF_SetModulationParams+0x19c>)
 801de84:	fbb2 f3f3 	udiv	r3, r2, r3
 801de88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801de8a:	697b      	ldr	r3, [r7, #20]
 801de8c:	0c1b      	lsrs	r3, r3, #16
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801de92:	697b      	ldr	r3, [r7, #20]
 801de94:	0a1b      	lsrs	r3, r3, #8
 801de96:	b2db      	uxtb	r3, r3
 801de98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801de9a:	697b      	ldr	r3, [r7, #20]
 801de9c:	b2db      	uxtb	r3, r3
 801de9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	7b1b      	ldrb	r3, [r3, #12]
 801dea4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	7b5b      	ldrb	r3, [r3, #13]
 801deaa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801deac:	7cfb      	ldrb	r3, [r7, #19]
 801deae:	b29a      	uxth	r2, r3
 801deb0:	f107 0308 	add.w	r3, r7, #8
 801deb4:	4619      	mov	r1, r3
 801deb6:	208b      	movs	r0, #139	; 0x8b
 801deb8:	f000 fa08 	bl	801e2cc <SUBGRF_WriteCommand>
        break;
 801debc:	e000      	b.n	801dec0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801debe:	bf00      	nop
    }
}
 801dec0:	bf00      	nop
 801dec2:	3718      	adds	r7, #24
 801dec4:	46bd      	mov	sp, r7
 801dec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801deca:	bf00      	nop
 801decc:	080229c4 	.word	0x080229c4
 801ded0:	200041e1 	.word	0x200041e1
 801ded4:	3d090000 	.word	0x3d090000
 801ded8:	01e84800 	.word	0x01e84800

0801dedc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b086      	sub	sp, #24
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801dee4:	2300      	movs	r3, #0
 801dee6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801dee8:	4a48      	ldr	r2, [pc, #288]	; (801e00c <SUBGRF_SetPacketParams+0x130>)
 801deea:	f107 030c 	add.w	r3, r7, #12
 801deee:	ca07      	ldmia	r2, {r0, r1, r2}
 801def0:	c303      	stmia	r3!, {r0, r1}
 801def2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	781a      	ldrb	r2, [r3, #0]
 801def8:	4b45      	ldr	r3, [pc, #276]	; (801e010 <SUBGRF_SetPacketParams+0x134>)
 801defa:	781b      	ldrb	r3, [r3, #0]
 801defc:	429a      	cmp	r2, r3
 801defe:	d004      	beq.n	801df0a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	781b      	ldrb	r3, [r3, #0]
 801df04:	4618      	mov	r0, r3
 801df06:	f7ff fe8b 	bl	801dc20 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	781b      	ldrb	r3, [r3, #0]
 801df0e:	2b03      	cmp	r3, #3
 801df10:	d878      	bhi.n	801e004 <SUBGRF_SetPacketParams+0x128>
 801df12:	a201      	add	r2, pc, #4	; (adr r2, 801df18 <SUBGRF_SetPacketParams+0x3c>)
 801df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df18:	0801df29 	.word	0x0801df29
 801df1c:	0801dfb9 	.word	0x0801dfb9
 801df20:	0801dfad 	.word	0x0801dfad
 801df24:	0801df29 	.word	0x0801df29
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	7a5b      	ldrb	r3, [r3, #9]
 801df2c:	2bf1      	cmp	r3, #241	; 0xf1
 801df2e:	d10a      	bne.n	801df46 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801df30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801df34:	f7ff fb16 	bl	801d564 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801df38:	f248 0005 	movw	r0, #32773	; 0x8005
 801df3c:	f7ff fb32 	bl	801d5a4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801df40:	2302      	movs	r3, #2
 801df42:	75bb      	strb	r3, [r7, #22]
 801df44:	e011      	b.n	801df6a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	7a5b      	ldrb	r3, [r3, #9]
 801df4a:	2bf2      	cmp	r3, #242	; 0xf2
 801df4c:	d10a      	bne.n	801df64 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801df4e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801df52:	f7ff fb07 	bl	801d564 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801df56:	f241 0021 	movw	r0, #4129	; 0x1021
 801df5a:	f7ff fb23 	bl	801d5a4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801df5e:	2306      	movs	r3, #6
 801df60:	75bb      	strb	r3, [r7, #22]
 801df62:	e002      	b.n	801df6a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	7a5b      	ldrb	r3, [r3, #9]
 801df68:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801df6a:	2309      	movs	r3, #9
 801df6c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	885b      	ldrh	r3, [r3, #2]
 801df72:	0a1b      	lsrs	r3, r3, #8
 801df74:	b29b      	uxth	r3, r3
 801df76:	b2db      	uxtb	r3, r3
 801df78:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	885b      	ldrh	r3, [r3, #2]
 801df7e:	b2db      	uxtb	r3, r3
 801df80:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	791b      	ldrb	r3, [r3, #4]
 801df86:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	795b      	ldrb	r3, [r3, #5]
 801df8c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	799b      	ldrb	r3, [r3, #6]
 801df92:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	79db      	ldrb	r3, [r3, #7]
 801df98:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	7a1b      	ldrb	r3, [r3, #8]
 801df9e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801dfa0:	7dbb      	ldrb	r3, [r7, #22]
 801dfa2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	7a9b      	ldrb	r3, [r3, #10]
 801dfa8:	753b      	strb	r3, [r7, #20]
        break;
 801dfaa:	e022      	b.n	801dff2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801dfac:	2301      	movs	r3, #1
 801dfae:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	7b1b      	ldrb	r3, [r3, #12]
 801dfb4:	733b      	strb	r3, [r7, #12]
        break;
 801dfb6:	e01c      	b.n	801dff2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801dfb8:	2306      	movs	r3, #6
 801dfba:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	89db      	ldrh	r3, [r3, #14]
 801dfc0:	0a1b      	lsrs	r3, r3, #8
 801dfc2:	b29b      	uxth	r3, r3
 801dfc4:	b2db      	uxtb	r3, r3
 801dfc6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	89db      	ldrh	r3, [r3, #14]
 801dfcc:	b2db      	uxtb	r3, r3
 801dfce:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	7c1a      	ldrb	r2, [r3, #16]
 801dfd4:	4b0f      	ldr	r3, [pc, #60]	; (801e014 <SUBGRF_SetPacketParams+0x138>)
 801dfd6:	4611      	mov	r1, r2
 801dfd8:	7019      	strb	r1, [r3, #0]
 801dfda:	4613      	mov	r3, r2
 801dfdc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	7c5b      	ldrb	r3, [r3, #17]
 801dfe2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	7c9b      	ldrb	r3, [r3, #18]
 801dfe8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	7cdb      	ldrb	r3, [r3, #19]
 801dfee:	747b      	strb	r3, [r7, #17]
        break;
 801dff0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801dff2:	7dfb      	ldrb	r3, [r7, #23]
 801dff4:	b29a      	uxth	r2, r3
 801dff6:	f107 030c 	add.w	r3, r7, #12
 801dffa:	4619      	mov	r1, r3
 801dffc:	208c      	movs	r0, #140	; 0x8c
 801dffe:	f000 f965 	bl	801e2cc <SUBGRF_WriteCommand>
 801e002:	e000      	b.n	801e006 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e004:	bf00      	nop
}
 801e006:	3718      	adds	r7, #24
 801e008:	46bd      	mov	sp, r7
 801e00a:	bd80      	pop	{r7, pc}
 801e00c:	080229cc 	.word	0x080229cc
 801e010:	200041e1 	.word	0x200041e1
 801e014:	200041e2 	.word	0x200041e2

0801e018 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b084      	sub	sp, #16
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	4603      	mov	r3, r0
 801e020:	460a      	mov	r2, r1
 801e022:	71fb      	strb	r3, [r7, #7]
 801e024:	4613      	mov	r3, r2
 801e026:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e028:	79fb      	ldrb	r3, [r7, #7]
 801e02a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e02c:	79bb      	ldrb	r3, [r7, #6]
 801e02e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e030:	f107 030c 	add.w	r3, r7, #12
 801e034:	2202      	movs	r2, #2
 801e036:	4619      	mov	r1, r3
 801e038:	208f      	movs	r0, #143	; 0x8f
 801e03a:	f000 f947 	bl	801e2cc <SUBGRF_WriteCommand>
}
 801e03e:	bf00      	nop
 801e040:	3710      	adds	r7, #16
 801e042:	46bd      	mov	sp, r7
 801e044:	bd80      	pop	{r7, pc}

0801e046 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e046:	b580      	push	{r7, lr}
 801e048:	b082      	sub	sp, #8
 801e04a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e04c:	2300      	movs	r3, #0
 801e04e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e050:	1d3b      	adds	r3, r7, #4
 801e052:	2201      	movs	r2, #1
 801e054:	4619      	mov	r1, r3
 801e056:	2015      	movs	r0, #21
 801e058:	f000 f95a 	bl	801e310 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e05c:	793b      	ldrb	r3, [r7, #4]
 801e05e:	425b      	negs	r3, r3
 801e060:	105b      	asrs	r3, r3, #1
 801e062:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e064:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e068:	4618      	mov	r0, r3
 801e06a:	3708      	adds	r7, #8
 801e06c:	46bd      	mov	sp, r7
 801e06e:	bd80      	pop	{r7, pc}

0801e070 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e070:	b580      	push	{r7, lr}
 801e072:	b084      	sub	sp, #16
 801e074:	af00      	add	r7, sp, #0
 801e076:	6078      	str	r0, [r7, #4]
 801e078:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e07a:	f107 030c 	add.w	r3, r7, #12
 801e07e:	2202      	movs	r2, #2
 801e080:	4619      	mov	r1, r3
 801e082:	2013      	movs	r0, #19
 801e084:	f000 f944 	bl	801e310 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e088:	f7ff fde6 	bl	801dc58 <SUBGRF_GetPacketType>
 801e08c:	4603      	mov	r3, r0
 801e08e:	2b01      	cmp	r3, #1
 801e090:	d10d      	bne.n	801e0ae <SUBGRF_GetRxBufferStatus+0x3e>
 801e092:	4b0c      	ldr	r3, [pc, #48]	; (801e0c4 <SUBGRF_GetRxBufferStatus+0x54>)
 801e094:	781b      	ldrb	r3, [r3, #0]
 801e096:	b2db      	uxtb	r3, r3
 801e098:	2b01      	cmp	r3, #1
 801e09a:	d108      	bne.n	801e0ae <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e09c:	f240 7002 	movw	r0, #1794	; 0x702
 801e0a0:	f000 f878 	bl	801e194 <SUBGRF_ReadRegister>
 801e0a4:	4603      	mov	r3, r0
 801e0a6:	461a      	mov	r2, r3
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	701a      	strb	r2, [r3, #0]
 801e0ac:	e002      	b.n	801e0b4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e0ae:	7b3a      	ldrb	r2, [r7, #12]
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e0b4:	7b7a      	ldrb	r2, [r7, #13]
 801e0b6:	683b      	ldr	r3, [r7, #0]
 801e0b8:	701a      	strb	r2, [r3, #0]
}
 801e0ba:	bf00      	nop
 801e0bc:	3710      	adds	r7, #16
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	bd80      	pop	{r7, pc}
 801e0c2:	bf00      	nop
 801e0c4:	200041e2 	.word	0x200041e2

0801e0c8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e0c8:	b580      	push	{r7, lr}
 801e0ca:	b084      	sub	sp, #16
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e0d0:	f107 030c 	add.w	r3, r7, #12
 801e0d4:	2203      	movs	r2, #3
 801e0d6:	4619      	mov	r1, r3
 801e0d8:	2014      	movs	r0, #20
 801e0da:	f000 f919 	bl	801e310 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e0de:	f7ff fdbb 	bl	801dc58 <SUBGRF_GetPacketType>
 801e0e2:	4603      	mov	r3, r0
 801e0e4:	461a      	mov	r2, r3
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	781b      	ldrb	r3, [r3, #0]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d002      	beq.n	801e0f8 <SUBGRF_GetPacketStatus+0x30>
 801e0f2:	2b01      	cmp	r3, #1
 801e0f4:	d013      	beq.n	801e11e <SUBGRF_GetPacketStatus+0x56>
 801e0f6:	e02a      	b.n	801e14e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e0f8:	7b3a      	ldrb	r2, [r7, #12]
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e0fe:	7b7b      	ldrb	r3, [r7, #13]
 801e100:	425b      	negs	r3, r3
 801e102:	105b      	asrs	r3, r3, #1
 801e104:	b25a      	sxtb	r2, r3
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e10a:	7bbb      	ldrb	r3, [r7, #14]
 801e10c:	425b      	negs	r3, r3
 801e10e:	105b      	asrs	r3, r3, #1
 801e110:	b25a      	sxtb	r2, r3
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	2200      	movs	r2, #0
 801e11a:	609a      	str	r2, [r3, #8]
            break;
 801e11c:	e020      	b.n	801e160 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e11e:	7b3b      	ldrb	r3, [r7, #12]
 801e120:	425b      	negs	r3, r3
 801e122:	105b      	asrs	r3, r3, #1
 801e124:	b25a      	sxtb	r2, r3
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e12a:	7b7b      	ldrb	r3, [r7, #13]
 801e12c:	b25b      	sxtb	r3, r3
 801e12e:	3302      	adds	r3, #2
 801e130:	109b      	asrs	r3, r3, #2
 801e132:	b25a      	sxtb	r2, r3
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e138:	7bbb      	ldrb	r3, [r7, #14]
 801e13a:	425b      	negs	r3, r3
 801e13c:	105b      	asrs	r3, r3, #1
 801e13e:	b25a      	sxtb	r2, r3
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e144:	4b08      	ldr	r3, [pc, #32]	; (801e168 <SUBGRF_GetPacketStatus+0xa0>)
 801e146:	681a      	ldr	r2, [r3, #0]
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	611a      	str	r2, [r3, #16]
            break;
 801e14c:	e008      	b.n	801e160 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e14e:	2214      	movs	r2, #20
 801e150:	2100      	movs	r1, #0
 801e152:	6878      	ldr	r0, [r7, #4]
 801e154:	f000 fe7d 	bl	801ee52 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	220f      	movs	r2, #15
 801e15c:	701a      	strb	r2, [r3, #0]
            break;
 801e15e:	bf00      	nop
    }
}
 801e160:	bf00      	nop
 801e162:	3710      	adds	r7, #16
 801e164:	46bd      	mov	sp, r7
 801e166:	bd80      	pop	{r7, pc}
 801e168:	200041e4 	.word	0x200041e4

0801e16c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e16c:	b580      	push	{r7, lr}
 801e16e:	b082      	sub	sp, #8
 801e170:	af00      	add	r7, sp, #0
 801e172:	4603      	mov	r3, r0
 801e174:	460a      	mov	r2, r1
 801e176:	80fb      	strh	r3, [r7, #6]
 801e178:	4613      	mov	r3, r2
 801e17a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e17c:	1d7a      	adds	r2, r7, #5
 801e17e:	88f9      	ldrh	r1, [r7, #6]
 801e180:	2301      	movs	r3, #1
 801e182:	4803      	ldr	r0, [pc, #12]	; (801e190 <SUBGRF_WriteRegister+0x24>)
 801e184:	f7e8 fe02 	bl	8006d8c <HAL_SUBGHZ_WriteRegisters>
}
 801e188:	bf00      	nop
 801e18a:	3708      	adds	r7, #8
 801e18c:	46bd      	mov	sp, r7
 801e18e:	bd80      	pop	{r7, pc}
 801e190:	20000a74 	.word	0x20000a74

0801e194 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e194:	b580      	push	{r7, lr}
 801e196:	b084      	sub	sp, #16
 801e198:	af00      	add	r7, sp, #0
 801e19a:	4603      	mov	r3, r0
 801e19c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e19e:	f107 020f 	add.w	r2, r7, #15
 801e1a2:	88f9      	ldrh	r1, [r7, #6]
 801e1a4:	2301      	movs	r3, #1
 801e1a6:	4804      	ldr	r0, [pc, #16]	; (801e1b8 <SUBGRF_ReadRegister+0x24>)
 801e1a8:	f7e8 fe4f 	bl	8006e4a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1ae:	4618      	mov	r0, r3
 801e1b0:	3710      	adds	r7, #16
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	bd80      	pop	{r7, pc}
 801e1b6:	bf00      	nop
 801e1b8:	20000a74 	.word	0x20000a74

0801e1bc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e1bc:	b580      	push	{r7, lr}
 801e1be:	b086      	sub	sp, #24
 801e1c0:	af00      	add	r7, sp, #0
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	6039      	str	r1, [r7, #0]
 801e1c6:	80fb      	strh	r3, [r7, #6]
 801e1c8:	4613      	mov	r3, r2
 801e1ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1cc:	f3ef 8310 	mrs	r3, PRIMASK
 801e1d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e1d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e1d6:	b672      	cpsid	i
}
 801e1d8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e1da:	88bb      	ldrh	r3, [r7, #4]
 801e1dc:	88f9      	ldrh	r1, [r7, #6]
 801e1de:	683a      	ldr	r2, [r7, #0]
 801e1e0:	4806      	ldr	r0, [pc, #24]	; (801e1fc <SUBGRF_WriteRegisters+0x40>)
 801e1e2:	f7e8 fdd3 	bl	8006d8c <HAL_SUBGHZ_WriteRegisters>
 801e1e6:	697b      	ldr	r3, [r7, #20]
 801e1e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1ea:	693b      	ldr	r3, [r7, #16]
 801e1ec:	f383 8810 	msr	PRIMASK, r3
}
 801e1f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e1f2:	bf00      	nop
 801e1f4:	3718      	adds	r7, #24
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bd80      	pop	{r7, pc}
 801e1fa:	bf00      	nop
 801e1fc:	20000a74 	.word	0x20000a74

0801e200 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b086      	sub	sp, #24
 801e204:	af00      	add	r7, sp, #0
 801e206:	4603      	mov	r3, r0
 801e208:	6039      	str	r1, [r7, #0]
 801e20a:	80fb      	strh	r3, [r7, #6]
 801e20c:	4613      	mov	r3, r2
 801e20e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e210:	f3ef 8310 	mrs	r3, PRIMASK
 801e214:	60fb      	str	r3, [r7, #12]
  return(result);
 801e216:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e21a:	b672      	cpsid	i
}
 801e21c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e21e:	88bb      	ldrh	r3, [r7, #4]
 801e220:	88f9      	ldrh	r1, [r7, #6]
 801e222:	683a      	ldr	r2, [r7, #0]
 801e224:	4806      	ldr	r0, [pc, #24]	; (801e240 <SUBGRF_ReadRegisters+0x40>)
 801e226:	f7e8 fe10 	bl	8006e4a <HAL_SUBGHZ_ReadRegisters>
 801e22a:	697b      	ldr	r3, [r7, #20]
 801e22c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e22e:	693b      	ldr	r3, [r7, #16]
 801e230:	f383 8810 	msr	PRIMASK, r3
}
 801e234:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e236:	bf00      	nop
 801e238:	3718      	adds	r7, #24
 801e23a:	46bd      	mov	sp, r7
 801e23c:	bd80      	pop	{r7, pc}
 801e23e:	bf00      	nop
 801e240:	20000a74 	.word	0x20000a74

0801e244 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e244:	b580      	push	{r7, lr}
 801e246:	b086      	sub	sp, #24
 801e248:	af00      	add	r7, sp, #0
 801e24a:	4603      	mov	r3, r0
 801e24c:	6039      	str	r1, [r7, #0]
 801e24e:	71fb      	strb	r3, [r7, #7]
 801e250:	4613      	mov	r3, r2
 801e252:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e254:	f3ef 8310 	mrs	r3, PRIMASK
 801e258:	60fb      	str	r3, [r7, #12]
  return(result);
 801e25a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e25e:	b672      	cpsid	i
}
 801e260:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e262:	79bb      	ldrb	r3, [r7, #6]
 801e264:	b29b      	uxth	r3, r3
 801e266:	79f9      	ldrb	r1, [r7, #7]
 801e268:	683a      	ldr	r2, [r7, #0]
 801e26a:	4806      	ldr	r0, [pc, #24]	; (801e284 <SUBGRF_WriteBuffer+0x40>)
 801e26c:	f7e8 ff01 	bl	8007072 <HAL_SUBGHZ_WriteBuffer>
 801e270:	697b      	ldr	r3, [r7, #20]
 801e272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e274:	693b      	ldr	r3, [r7, #16]
 801e276:	f383 8810 	msr	PRIMASK, r3
}
 801e27a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e27c:	bf00      	nop
 801e27e:	3718      	adds	r7, #24
 801e280:	46bd      	mov	sp, r7
 801e282:	bd80      	pop	{r7, pc}
 801e284:	20000a74 	.word	0x20000a74

0801e288 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e288:	b580      	push	{r7, lr}
 801e28a:	b086      	sub	sp, #24
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	4603      	mov	r3, r0
 801e290:	6039      	str	r1, [r7, #0]
 801e292:	71fb      	strb	r3, [r7, #7]
 801e294:	4613      	mov	r3, r2
 801e296:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e298:	f3ef 8310 	mrs	r3, PRIMASK
 801e29c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e29e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e2a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e2a2:	b672      	cpsid	i
}
 801e2a4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e2a6:	79bb      	ldrb	r3, [r7, #6]
 801e2a8:	b29b      	uxth	r3, r3
 801e2aa:	79f9      	ldrb	r1, [r7, #7]
 801e2ac:	683a      	ldr	r2, [r7, #0]
 801e2ae:	4806      	ldr	r0, [pc, #24]	; (801e2c8 <SUBGRF_ReadBuffer+0x40>)
 801e2b0:	f7e8 ff32 	bl	8007118 <HAL_SUBGHZ_ReadBuffer>
 801e2b4:	697b      	ldr	r3, [r7, #20]
 801e2b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2b8:	693b      	ldr	r3, [r7, #16]
 801e2ba:	f383 8810 	msr	PRIMASK, r3
}
 801e2be:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e2c0:	bf00      	nop
 801e2c2:	3718      	adds	r7, #24
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd80      	pop	{r7, pc}
 801e2c8:	20000a74 	.word	0x20000a74

0801e2cc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b086      	sub	sp, #24
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	4603      	mov	r3, r0
 801e2d4:	6039      	str	r1, [r7, #0]
 801e2d6:	71fb      	strb	r3, [r7, #7]
 801e2d8:	4613      	mov	r3, r2
 801e2da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e2e0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e2e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e2e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e2e6:	b672      	cpsid	i
}
 801e2e8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e2ea:	88bb      	ldrh	r3, [r7, #4]
 801e2ec:	79f9      	ldrb	r1, [r7, #7]
 801e2ee:	683a      	ldr	r2, [r7, #0]
 801e2f0:	4806      	ldr	r0, [pc, #24]	; (801e30c <SUBGRF_WriteCommand+0x40>)
 801e2f2:	f7e8 fe0b 	bl	8006f0c <HAL_SUBGHZ_ExecSetCmd>
 801e2f6:	697b      	ldr	r3, [r7, #20]
 801e2f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2fa:	693b      	ldr	r3, [r7, #16]
 801e2fc:	f383 8810 	msr	PRIMASK, r3
}
 801e300:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e302:	bf00      	nop
 801e304:	3718      	adds	r7, #24
 801e306:	46bd      	mov	sp, r7
 801e308:	bd80      	pop	{r7, pc}
 801e30a:	bf00      	nop
 801e30c:	20000a74 	.word	0x20000a74

0801e310 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e310:	b580      	push	{r7, lr}
 801e312:	b086      	sub	sp, #24
 801e314:	af00      	add	r7, sp, #0
 801e316:	4603      	mov	r3, r0
 801e318:	6039      	str	r1, [r7, #0]
 801e31a:	71fb      	strb	r3, [r7, #7]
 801e31c:	4613      	mov	r3, r2
 801e31e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e320:	f3ef 8310 	mrs	r3, PRIMASK
 801e324:	60fb      	str	r3, [r7, #12]
  return(result);
 801e326:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e32a:	b672      	cpsid	i
}
 801e32c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e32e:	88bb      	ldrh	r3, [r7, #4]
 801e330:	79f9      	ldrb	r1, [r7, #7]
 801e332:	683a      	ldr	r2, [r7, #0]
 801e334:	4806      	ldr	r0, [pc, #24]	; (801e350 <SUBGRF_ReadCommand+0x40>)
 801e336:	f7e8 fe48 	bl	8006fca <HAL_SUBGHZ_ExecGetCmd>
 801e33a:	697b      	ldr	r3, [r7, #20]
 801e33c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e33e:	693b      	ldr	r3, [r7, #16]
 801e340:	f383 8810 	msr	PRIMASK, r3
}
 801e344:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e346:	bf00      	nop
 801e348:	3718      	adds	r7, #24
 801e34a:	46bd      	mov	sp, r7
 801e34c:	bd80      	pop	{r7, pc}
 801e34e:	bf00      	nop
 801e350:	20000a74 	.word	0x20000a74

0801e354 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b084      	sub	sp, #16
 801e358:	af00      	add	r7, sp, #0
 801e35a:	4603      	mov	r3, r0
 801e35c:	460a      	mov	r2, r1
 801e35e:	71fb      	strb	r3, [r7, #7]
 801e360:	4613      	mov	r3, r2
 801e362:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e364:	2301      	movs	r3, #1
 801e366:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e368:	79bb      	ldrb	r3, [r7, #6]
 801e36a:	2b01      	cmp	r3, #1
 801e36c:	d10d      	bne.n	801e38a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e36e:	79fb      	ldrb	r3, [r7, #7]
 801e370:	2b01      	cmp	r3, #1
 801e372:	d104      	bne.n	801e37e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e374:	2302      	movs	r3, #2
 801e376:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e378:	2004      	movs	r0, #4
 801e37a:	f000 f8df 	bl	801e53c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e37e:	79fb      	ldrb	r3, [r7, #7]
 801e380:	2b02      	cmp	r3, #2
 801e382:	d107      	bne.n	801e394 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e384:	2303      	movs	r3, #3
 801e386:	73fb      	strb	r3, [r7, #15]
 801e388:	e004      	b.n	801e394 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e38a:	79bb      	ldrb	r3, [r7, #6]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d101      	bne.n	801e394 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e390:	2301      	movs	r3, #1
 801e392:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e394:	7bfb      	ldrb	r3, [r7, #15]
 801e396:	4618      	mov	r0, r3
 801e398:	f7ed ffc7 	bl	800c32a <RBI_ConfigRFSwitch>
}
 801e39c:	bf00      	nop
 801e39e:	3710      	adds	r7, #16
 801e3a0:	46bd      	mov	sp, r7
 801e3a2:	bd80      	pop	{r7, pc}

0801e3a4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801e3a4:	b580      	push	{r7, lr}
 801e3a6:	b084      	sub	sp, #16
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e3ae:	2301      	movs	r3, #1
 801e3b0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e3b2:	f7ed ffc8 	bl	800c346 <RBI_GetTxConfig>
 801e3b6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e3b8:	68bb      	ldr	r3, [r7, #8]
 801e3ba:	2b02      	cmp	r3, #2
 801e3bc:	d016      	beq.n	801e3ec <SUBGRF_SetRfTxPower+0x48>
 801e3be:	68bb      	ldr	r3, [r7, #8]
 801e3c0:	2b02      	cmp	r3, #2
 801e3c2:	dc16      	bgt.n	801e3f2 <SUBGRF_SetRfTxPower+0x4e>
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d003      	beq.n	801e3d2 <SUBGRF_SetRfTxPower+0x2e>
 801e3ca:	68bb      	ldr	r3, [r7, #8]
 801e3cc:	2b01      	cmp	r3, #1
 801e3ce:	d00a      	beq.n	801e3e6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e3d0:	e00f      	b.n	801e3f2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e3d6:	2b0f      	cmp	r3, #15
 801e3d8:	dd02      	ble.n	801e3e0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e3da:	2302      	movs	r3, #2
 801e3dc:	73fb      	strb	r3, [r7, #15]
            break;
 801e3de:	e009      	b.n	801e3f4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e3e0:	2301      	movs	r3, #1
 801e3e2:	73fb      	strb	r3, [r7, #15]
            break;
 801e3e4:	e006      	b.n	801e3f4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e3e6:	2301      	movs	r3, #1
 801e3e8:	73fb      	strb	r3, [r7, #15]
            break;
 801e3ea:	e003      	b.n	801e3f4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e3ec:	2302      	movs	r3, #2
 801e3ee:	73fb      	strb	r3, [r7, #15]
            break;
 801e3f0:	e000      	b.n	801e3f4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801e3f2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e3f4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e3f8:	7bfb      	ldrb	r3, [r7, #15]
 801e3fa:	2202      	movs	r2, #2
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	f7ff fc35 	bl	801dc6c <SUBGRF_SetTxParams>

    return paSelect;
 801e402:	7bfb      	ldrb	r3, [r7, #15]
}
 801e404:	4618      	mov	r0, r3
 801e406:	3710      	adds	r7, #16
 801e408:	46bd      	mov	sp, r7
 801e40a:	bd80      	pop	{r7, pc}

0801e40c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e40c:	b480      	push	{r7}
 801e40e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e410:	2301      	movs	r3, #1
}
 801e412:	4618      	mov	r0, r3
 801e414:	46bd      	mov	sp, r7
 801e416:	bc80      	pop	{r7}
 801e418:	4770      	bx	lr
	...

0801e41c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e424:	4b03      	ldr	r3, [pc, #12]	; (801e434 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	2001      	movs	r0, #1
 801e42a:	4798      	blx	r3
}
 801e42c:	bf00      	nop
 801e42e:	3708      	adds	r7, #8
 801e430:	46bd      	mov	sp, r7
 801e432:	bd80      	pop	{r7, pc}
 801e434:	200041ec 	.word	0x200041ec

0801e438 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e438:	b580      	push	{r7, lr}
 801e43a:	b082      	sub	sp, #8
 801e43c:	af00      	add	r7, sp, #0
 801e43e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e440:	4b03      	ldr	r3, [pc, #12]	; (801e450 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	2002      	movs	r0, #2
 801e446:	4798      	blx	r3
}
 801e448:	bf00      	nop
 801e44a:	3708      	adds	r7, #8
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bd80      	pop	{r7, pc}
 801e450:	200041ec 	.word	0x200041ec

0801e454 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b082      	sub	sp, #8
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e45c:	4b03      	ldr	r3, [pc, #12]	; (801e46c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	2040      	movs	r0, #64	; 0x40
 801e462:	4798      	blx	r3
}
 801e464:	bf00      	nop
 801e466:	3708      	adds	r7, #8
 801e468:	46bd      	mov	sp, r7
 801e46a:	bd80      	pop	{r7, pc}
 801e46c:	200041ec 	.word	0x200041ec

0801e470 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e470:	b580      	push	{r7, lr}
 801e472:	b082      	sub	sp, #8
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
 801e478:	460b      	mov	r3, r1
 801e47a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e47c:	78fb      	ldrb	r3, [r7, #3]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d002      	beq.n	801e488 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e482:	2b01      	cmp	r3, #1
 801e484:	d005      	beq.n	801e492 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e486:	e00a      	b.n	801e49e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e488:	4b07      	ldr	r3, [pc, #28]	; (801e4a8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	2080      	movs	r0, #128	; 0x80
 801e48e:	4798      	blx	r3
            break;
 801e490:	e005      	b.n	801e49e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e492:	4b05      	ldr	r3, [pc, #20]	; (801e4a8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e49a:	4798      	blx	r3
            break;
 801e49c:	bf00      	nop
    }
}
 801e49e:	bf00      	nop
 801e4a0:	3708      	adds	r7, #8
 801e4a2:	46bd      	mov	sp, r7
 801e4a4:	bd80      	pop	{r7, pc}
 801e4a6:	bf00      	nop
 801e4a8:	200041ec 	.word	0x200041ec

0801e4ac <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e4ac:	b580      	push	{r7, lr}
 801e4ae:	b082      	sub	sp, #8
 801e4b0:	af00      	add	r7, sp, #0
 801e4b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e4b4:	4b04      	ldr	r3, [pc, #16]	; (801e4c8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e4bc:	4798      	blx	r3
}
 801e4be:	bf00      	nop
 801e4c0:	3708      	adds	r7, #8
 801e4c2:	46bd      	mov	sp, r7
 801e4c4:	bd80      	pop	{r7, pc}
 801e4c6:	bf00      	nop
 801e4c8:	200041ec 	.word	0x200041ec

0801e4cc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	b082      	sub	sp, #8
 801e4d0:	af00      	add	r7, sp, #0
 801e4d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801e4d4:	4b03      	ldr	r3, [pc, #12]	; (801e4e4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	2020      	movs	r0, #32
 801e4da:	4798      	blx	r3
}
 801e4dc:	bf00      	nop
 801e4de:	3708      	adds	r7, #8
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	bd80      	pop	{r7, pc}
 801e4e4:	200041ec 	.word	0x200041ec

0801e4e8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b082      	sub	sp, #8
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801e4f0:	4b03      	ldr	r3, [pc, #12]	; (801e500 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	2004      	movs	r0, #4
 801e4f6:	4798      	blx	r3
}
 801e4f8:	bf00      	nop
 801e4fa:	3708      	adds	r7, #8
 801e4fc:	46bd      	mov	sp, r7
 801e4fe:	bd80      	pop	{r7, pc}
 801e500:	200041ec 	.word	0x200041ec

0801e504 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b082      	sub	sp, #8
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801e50c:	4b03      	ldr	r3, [pc, #12]	; (801e51c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	2008      	movs	r0, #8
 801e512:	4798      	blx	r3
}
 801e514:	bf00      	nop
 801e516:	3708      	adds	r7, #8
 801e518:	46bd      	mov	sp, r7
 801e51a:	bd80      	pop	{r7, pc}
 801e51c:	200041ec 	.word	0x200041ec

0801e520 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e520:	b580      	push	{r7, lr}
 801e522:	b082      	sub	sp, #8
 801e524:	af00      	add	r7, sp, #0
 801e526:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801e528:	4b03      	ldr	r3, [pc, #12]	; (801e538 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	2010      	movs	r0, #16
 801e52e:	4798      	blx	r3
}
 801e530:	bf00      	nop
 801e532:	3708      	adds	r7, #8
 801e534:	46bd      	mov	sp, r7
 801e536:	bd80      	pop	{r7, pc}
 801e538:	200041ec 	.word	0x200041ec

0801e53c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801e53c:	b580      	push	{r7, lr}
 801e53e:	b084      	sub	sp, #16
 801e540:	af00      	add	r7, sp, #0
 801e542:	4603      	mov	r3, r0
 801e544:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801e546:	f7ed ff0c 	bl	800c362 <RBI_IsDCDC>
 801e54a:	4603      	mov	r3, r0
 801e54c:	2b01      	cmp	r3, #1
 801e54e:	d112      	bne.n	801e576 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801e550:	f640 1023 	movw	r0, #2339	; 0x923
 801e554:	f7ff fe1e 	bl	801e194 <SUBGRF_ReadRegister>
 801e558:	4603      	mov	r3, r0
 801e55a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801e55c:	7bfb      	ldrb	r3, [r7, #15]
 801e55e:	f023 0306 	bic.w	r3, r3, #6
 801e562:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801e564:	7bfa      	ldrb	r2, [r7, #15]
 801e566:	79fb      	ldrb	r3, [r7, #7]
 801e568:	4313      	orrs	r3, r2
 801e56a:	b2db      	uxtb	r3, r3
 801e56c:	4619      	mov	r1, r3
 801e56e:	f640 1023 	movw	r0, #2339	; 0x923
 801e572:	f7ff fdfb 	bl	801e16c <SUBGRF_WriteRegister>
  }
}
 801e576:	bf00      	nop
 801e578:	3710      	adds	r7, #16
 801e57a:	46bd      	mov	sp, r7
 801e57c:	bd80      	pop	{r7, pc}
	...

0801e580 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801e580:	b480      	push	{r7}
 801e582:	b085      	sub	sp, #20
 801e584:	af00      	add	r7, sp, #0
 801e586:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d101      	bne.n	801e592 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801e58e:	231f      	movs	r3, #31
 801e590:	e016      	b.n	801e5c0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e592:	2300      	movs	r3, #0
 801e594:	73fb      	strb	r3, [r7, #15]
 801e596:	e00f      	b.n	801e5b8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801e598:	7bfb      	ldrb	r3, [r7, #15]
 801e59a:	4a0c      	ldr	r2, [pc, #48]	; (801e5cc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e59c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e5a0:	687a      	ldr	r2, [r7, #4]
 801e5a2:	429a      	cmp	r2, r3
 801e5a4:	d205      	bcs.n	801e5b2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801e5a6:	7bfb      	ldrb	r3, [r7, #15]
 801e5a8:	4a08      	ldr	r2, [pc, #32]	; (801e5cc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e5aa:	00db      	lsls	r3, r3, #3
 801e5ac:	4413      	add	r3, r2
 801e5ae:	791b      	ldrb	r3, [r3, #4]
 801e5b0:	e006      	b.n	801e5c0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e5b2:	7bfb      	ldrb	r3, [r7, #15]
 801e5b4:	3301      	adds	r3, #1
 801e5b6:	73fb      	strb	r3, [r7, #15]
 801e5b8:	7bfb      	ldrb	r3, [r7, #15]
 801e5ba:	2b15      	cmp	r3, #21
 801e5bc:	d9ec      	bls.n	801e598 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801e5be:	e7fe      	b.n	801e5be <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801e5c0:	4618      	mov	r0, r3
 801e5c2:	3714      	adds	r7, #20
 801e5c4:	46bd      	mov	sp, r7
 801e5c6:	bc80      	pop	{r7}
 801e5c8:	4770      	bx	lr
 801e5ca:	bf00      	nop
 801e5cc:	0802336c 	.word	0x0802336c

0801e5d0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801e5d0:	b580      	push	{r7, lr}
 801e5d2:	b08a      	sub	sp, #40	; 0x28
 801e5d4:	af00      	add	r7, sp, #0
 801e5d6:	6078      	str	r0, [r7, #4]
 801e5d8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801e5da:	4b35      	ldr	r3, [pc, #212]	; (801e6b0 <SUBGRF_GetCFO+0xe0>)
 801e5dc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801e5de:	f640 0007 	movw	r0, #2055	; 0x807
 801e5e2:	f7ff fdd7 	bl	801e194 <SUBGRF_ReadRegister>
 801e5e6:	4603      	mov	r3, r0
 801e5e8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801e5ea:	7ffb      	ldrb	r3, [r7, #31]
 801e5ec:	08db      	lsrs	r3, r3, #3
 801e5ee:	b2db      	uxtb	r3, r3
 801e5f0:	f003 0303 	and.w	r3, r3, #3
 801e5f4:	3328      	adds	r3, #40	; 0x28
 801e5f6:	443b      	add	r3, r7
 801e5f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801e5fc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801e5fe:	7ffb      	ldrb	r3, [r7, #31]
 801e600:	f003 0307 	and.w	r3, r3, #7
 801e604:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801e606:	7fba      	ldrb	r2, [r7, #30]
 801e608:	7f7b      	ldrb	r3, [r7, #29]
 801e60a:	3b01      	subs	r3, #1
 801e60c:	fa02 f303 	lsl.w	r3, r2, r3
 801e610:	461a      	mov	r2, r3
 801e612:	4b28      	ldr	r3, [pc, #160]	; (801e6b4 <SUBGRF_GetCFO+0xe4>)
 801e614:	fbb3 f3f2 	udiv	r3, r3, r2
 801e618:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801e61a:	69ba      	ldr	r2, [r7, #24]
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e622:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801e624:	2301      	movs	r3, #1
 801e626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801e62a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e62e:	697a      	ldr	r2, [r7, #20]
 801e630:	fb02 f303 	mul.w	r3, r2, r3
 801e634:	2b07      	cmp	r3, #7
 801e636:	d802      	bhi.n	801e63e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801e638:	2302      	movs	r3, #2
 801e63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801e63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e642:	697a      	ldr	r2, [r7, #20]
 801e644:	fb02 f303 	mul.w	r3, r2, r3
 801e648:	2b03      	cmp	r3, #3
 801e64a:	d802      	bhi.n	801e652 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801e64c:	2304      	movs	r3, #4
 801e64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801e652:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e656:	69bb      	ldr	r3, [r7, #24]
 801e658:	fb02 f303 	mul.w	r3, r2, r3
 801e65c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801e65e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801e662:	f7ff fd97 	bl	801e194 <SUBGRF_ReadRegister>
 801e666:	4603      	mov	r3, r0
 801e668:	021b      	lsls	r3, r3, #8
 801e66a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e66e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801e670:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801e674:	f7ff fd8e 	bl	801e194 <SUBGRF_ReadRegister>
 801e678:	4603      	mov	r3, r0
 801e67a:	461a      	mov	r2, r3
 801e67c:	6a3b      	ldr	r3, [r7, #32]
 801e67e:	4313      	orrs	r3, r2
 801e680:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801e682:	6a3b      	ldr	r3, [r7, #32]
 801e684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d005      	beq.n	801e698 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801e68c:	6a3b      	ldr	r3, [r7, #32]
 801e68e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801e692:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801e696:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801e698:	693b      	ldr	r3, [r7, #16]
 801e69a:	095b      	lsrs	r3, r3, #5
 801e69c:	6a3a      	ldr	r2, [r7, #32]
 801e69e:	fb02 f303 	mul.w	r3, r2, r3
 801e6a2:	11da      	asrs	r2, r3, #7
 801e6a4:	683b      	ldr	r3, [r7, #0]
 801e6a6:	601a      	str	r2, [r3, #0]
}
 801e6a8:	bf00      	nop
 801e6aa:	3728      	adds	r7, #40	; 0x28
 801e6ac:	46bd      	mov	sp, r7
 801e6ae:	bd80      	pop	{r7, pc}
 801e6b0:	0c0a0804 	.word	0x0c0a0804
 801e6b4:	01e84800 	.word	0x01e84800

0801e6b8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801e6b8:	b480      	push	{r7}
 801e6ba:	b087      	sub	sp, #28
 801e6bc:	af00      	add	r7, sp, #0
 801e6be:	4603      	mov	r3, r0
 801e6c0:	60b9      	str	r1, [r7, #8]
 801e6c2:	607a      	str	r2, [r7, #4]
 801e6c4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801e6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801e6ce:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801e6d0:	697b      	ldr	r3, [r7, #20]
}
 801e6d2:	4618      	mov	r0, r3
 801e6d4:	371c      	adds	r7, #28
 801e6d6:	46bd      	mov	sp, r7
 801e6d8:	bc80      	pop	{r7}
 801e6da:	4770      	bx	lr

0801e6dc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801e6dc:	b480      	push	{r7}
 801e6de:	b087      	sub	sp, #28
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	4603      	mov	r3, r0
 801e6e4:	60b9      	str	r1, [r7, #8]
 801e6e6:	607a      	str	r2, [r7, #4]
 801e6e8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801e6ea:	2300      	movs	r3, #0
 801e6ec:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801e6ee:	f04f 33ff 	mov.w	r3, #4294967295
 801e6f2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801e6f4:	697b      	ldr	r3, [r7, #20]
}
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	371c      	adds	r7, #28
 801e6fa:	46bd      	mov	sp, r7
 801e6fc:	bc80      	pop	{r7}
 801e6fe:	4770      	bx	lr

0801e700 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801e700:	b480      	push	{r7}
 801e702:	b085      	sub	sp, #20
 801e704:	af00      	add	r7, sp, #0
 801e706:	60f8      	str	r0, [r7, #12]
 801e708:	60b9      	str	r1, [r7, #8]
 801e70a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801e70c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801e710:	4618      	mov	r0, r3
 801e712:	3714      	adds	r7, #20
 801e714:	46bd      	mov	sp, r7
 801e716:	bc80      	pop	{r7}
 801e718:	4770      	bx	lr

0801e71a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801e71a:	b480      	push	{r7}
 801e71c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801e71e:	bf00      	nop
 801e720:	46bd      	mov	sp, r7
 801e722:	bc80      	pop	{r7}
 801e724:	4770      	bx	lr

0801e726 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801e726:	b480      	push	{r7}
 801e728:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801e72a:	2300      	movs	r3, #0
#endif
}
 801e72c:	4618      	mov	r0, r3
 801e72e:	46bd      	mov	sp, r7
 801e730:	bc80      	pop	{r7}
 801e732:	4770      	bx	lr

0801e734 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801e734:	b480      	push	{r7}
 801e736:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801e738:	2300      	movs	r3, #0
#endif
}
 801e73a:	4618      	mov	r0, r3
 801e73c:	46bd      	mov	sp, r7
 801e73e:	bc80      	pop	{r7}
 801e740:	4770      	bx	lr

0801e742 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801e742:	b480      	push	{r7}
 801e744:	b083      	sub	sp, #12
 801e746:	af00      	add	r7, sp, #0
 801e748:	4603      	mov	r3, r0
 801e74a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801e74c:	bf00      	nop
 801e74e:	370c      	adds	r7, #12
 801e750:	46bd      	mov	sp, r7
 801e752:	bc80      	pop	{r7}
 801e754:	4770      	bx	lr

0801e756 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801e756:	b480      	push	{r7}
 801e758:	b087      	sub	sp, #28
 801e75a:	af00      	add	r7, sp, #0
 801e75c:	60f8      	str	r0, [r7, #12]
 801e75e:	460b      	mov	r3, r1
 801e760:	607a      	str	r2, [r7, #4]
 801e762:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801e764:	f04f 33ff 	mov.w	r3, #4294967295
 801e768:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801e76a:	697b      	ldr	r3, [r7, #20]
}
 801e76c:	4618      	mov	r0, r3
 801e76e:	371c      	adds	r7, #28
 801e770:	46bd      	mov	sp, r7
 801e772:	bc80      	pop	{r7}
 801e774:	4770      	bx	lr

0801e776 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801e776:	b480      	push	{r7}
 801e778:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801e77a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801e77e:	4618      	mov	r0, r3
 801e780:	46bd      	mov	sp, r7
 801e782:	bc80      	pop	{r7}
 801e784:	4770      	bx	lr

0801e786 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801e786:	b480      	push	{r7}
 801e788:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801e78a:	bf00      	nop
 801e78c:	46bd      	mov	sp, r7
 801e78e:	bc80      	pop	{r7}
 801e790:	4770      	bx	lr

0801e792 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801e792:	b480      	push	{r7}
 801e794:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801e796:	bf00      	nop
 801e798:	46bd      	mov	sp, r7
 801e79a:	bc80      	pop	{r7}
 801e79c:	4770      	bx	lr

0801e79e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801e79e:	b480      	push	{r7}
 801e7a0:	b083      	sub	sp, #12
 801e7a2:	af00      	add	r7, sp, #0
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801e7a8:	bf00      	nop
 801e7aa:	370c      	adds	r7, #12
 801e7ac:	46bd      	mov	sp, r7
 801e7ae:	bc80      	pop	{r7}
 801e7b0:	4770      	bx	lr
	...

0801e7b4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e7b4:	b580      	push	{r7, lr}
 801e7b6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e7b8:	2218      	movs	r2, #24
 801e7ba:	2100      	movs	r1, #0
 801e7bc:	4807      	ldr	r0, [pc, #28]	; (801e7dc <UTIL_ADV_TRACE_Init+0x28>)
 801e7be:	f000 fb48 	bl	801ee52 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e7c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e7c6:	2100      	movs	r1, #0
 801e7c8:	4805      	ldr	r0, [pc, #20]	; (801e7e0 <UTIL_ADV_TRACE_Init+0x2c>)
 801e7ca:	f000 fb42 	bl	801ee52 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e7ce:	4b05      	ldr	r3, [pc, #20]	; (801e7e4 <UTIL_ADV_TRACE_Init+0x30>)
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	4805      	ldr	r0, [pc, #20]	; (801e7e8 <UTIL_ADV_TRACE_Init+0x34>)
 801e7d4:	4798      	blx	r3
 801e7d6:	4603      	mov	r3, r0
}
 801e7d8:	4618      	mov	r0, r3
 801e7da:	bd80      	pop	{r7, pc}
 801e7dc:	200041f0 	.word	0x200041f0
 801e7e0:	20004208 	.word	0x20004208
 801e7e4:	08022b3c 	.word	0x08022b3c
 801e7e8:	0801ea89 	.word	0x0801ea89

0801e7ec <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e7ec:	b480      	push	{r7}
 801e7ee:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e7f0:	4b06      	ldr	r3, [pc, #24]	; (801e80c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7f2:	8a5a      	ldrh	r2, [r3, #18]
 801e7f4:	4b05      	ldr	r3, [pc, #20]	; (801e80c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7f6:	8a1b      	ldrh	r3, [r3, #16]
 801e7f8:	429a      	cmp	r2, r3
 801e7fa:	d101      	bne.n	801e800 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e7fc:	2301      	movs	r3, #1
 801e7fe:	e000      	b.n	801e802 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e800:	2300      	movs	r3, #0
}
 801e802:	4618      	mov	r0, r3
 801e804:	46bd      	mov	sp, r7
 801e806:	bc80      	pop	{r7}
 801e808:	4770      	bx	lr
 801e80a:	bf00      	nop
 801e80c:	200041f0 	.word	0x200041f0

0801e810 <UTIL_ADV_TRACE_StartRxProcess>:

UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_StartRxProcess(void (*UserCallback)(uint8_t *PData, uint16_t Size, uint8_t Error))
{
 801e810:	b580      	push	{r7, lr}
 801e812:	b082      	sub	sp, #8
 801e814:	af00      	add	r7, sp, #0
 801e816:	6078      	str	r0, [r7, #4]
  /* start the RX process */
  return UTIL_TraceDriver.StartRx(UserCallback);
 801e818:	4b04      	ldr	r3, [pc, #16]	; (801e82c <UTIL_ADV_TRACE_StartRxProcess+0x1c>)
 801e81a:	689b      	ldr	r3, [r3, #8]
 801e81c:	6878      	ldr	r0, [r7, #4]
 801e81e:	4798      	blx	r3
 801e820:	4603      	mov	r3, r0
}
 801e822:	4618      	mov	r0, r3
 801e824:	3708      	adds	r7, #8
 801e826:	46bd      	mov	sp, r7
 801e828:	bd80      	pop	{r7, pc}
 801e82a:	bf00      	nop
 801e82c:	08022b3c 	.word	0x08022b3c

0801e830 <UTIL_ADV_TRACE_COND_FSend>:

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e830:	b408      	push	{r3}
 801e832:	b580      	push	{r7, lr}
 801e834:	b08d      	sub	sp, #52	; 0x34
 801e836:	af00      	add	r7, sp, #0
 801e838:	60f8      	str	r0, [r7, #12]
 801e83a:	60b9      	str	r1, [r7, #8]
 801e83c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e83e:	2300      	movs	r3, #0
 801e840:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e842:	2300      	movs	r3, #0
 801e844:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e846:	4b37      	ldr	r3, [pc, #220]	; (801e924 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e848:	7a1b      	ldrb	r3, [r3, #8]
 801e84a:	461a      	mov	r2, r3
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	4293      	cmp	r3, r2
 801e850:	d902      	bls.n	801e858 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e852:	f06f 0304 	mvn.w	r3, #4
 801e856:	e05e      	b.n	801e916 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e858:	4b32      	ldr	r3, [pc, #200]	; (801e924 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e85a:	68da      	ldr	r2, [r3, #12]
 801e85c:	68bb      	ldr	r3, [r7, #8]
 801e85e:	4013      	ands	r3, r2
 801e860:	68ba      	ldr	r2, [r7, #8]
 801e862:	429a      	cmp	r2, r3
 801e864:	d002      	beq.n	801e86c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e866:	f06f 0305 	mvn.w	r3, #5
 801e86a:	e054      	b.n	801e916 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e86c:	4b2d      	ldr	r3, [pc, #180]	; (801e924 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e86e:	685b      	ldr	r3, [r3, #4]
 801e870:	2b00      	cmp	r3, #0
 801e872:	d00a      	beq.n	801e88a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	2b00      	cmp	r3, #0
 801e878:	d007      	beq.n	801e88a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e87a:	4b2a      	ldr	r3, [pc, #168]	; (801e924 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e87c:	685b      	ldr	r3, [r3, #4]
 801e87e:	f107 0116 	add.w	r1, r7, #22
 801e882:	f107 0218 	add.w	r2, r7, #24
 801e886:	4610      	mov	r0, r2
 801e888:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e88a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e88e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e894:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e898:	4823      	ldr	r0, [pc, #140]	; (801e928 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e89a:	f001 ff79 	bl	8020790 <tiny_vsnprintf_like>
 801e89e:	4603      	mov	r3, r0
 801e8a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e8a2:	f000 f9fb 	bl	801ec9c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e8a6:	8afa      	ldrh	r2, [r7, #22]
 801e8a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e8aa:	4413      	add	r3, r2
 801e8ac:	b29b      	uxth	r3, r3
 801e8ae:	f107 0214 	add.w	r2, r7, #20
 801e8b2:	4611      	mov	r1, r2
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	f000 f973 	bl	801eba0 <TRACE_AllocateBufer>
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e8c0:	d025      	beq.n	801e90e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e8c6:	e00e      	b.n	801e8e6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e8c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e8ca:	8aba      	ldrh	r2, [r7, #20]
 801e8cc:	3330      	adds	r3, #48	; 0x30
 801e8ce:	443b      	add	r3, r7
 801e8d0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e8d4:	4b15      	ldr	r3, [pc, #84]	; (801e92c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e8d6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e8d8:	8abb      	ldrh	r3, [r7, #20]
 801e8da:	3301      	adds	r3, #1
 801e8dc:	b29b      	uxth	r3, r3
 801e8de:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e8e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e8e6:	8afb      	ldrh	r3, [r7, #22]
 801e8e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e8ea:	429a      	cmp	r2, r3
 801e8ec:	d3ec      	bcc.n	801e8c8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e8ee:	8abb      	ldrh	r3, [r7, #20]
 801e8f0:	461a      	mov	r2, r3
 801e8f2:	4b0e      	ldr	r3, [pc, #56]	; (801e92c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e8f4:	18d0      	adds	r0, r2, r3
 801e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e8fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e8fe:	f001 ff47 	bl	8020790 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e902:	f000 f9e9 	bl	801ecd8 <TRACE_UnLock>

    return TRACE_Send();
 801e906:	f000 f83b 	bl	801e980 <TRACE_Send>
 801e90a:	4603      	mov	r3, r0
 801e90c:	e003      	b.n	801e916 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e90e:	f000 f9e3 	bl	801ecd8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e912:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e916:	4618      	mov	r0, r3
 801e918:	3734      	adds	r7, #52	; 0x34
 801e91a:	46bd      	mov	sp, r7
 801e91c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e920:	b001      	add	sp, #4
 801e922:	4770      	bx	lr
 801e924:	200041f0 	.word	0x200041f0
 801e928:	20004608 	.word	0x20004608
 801e92c:	20004208 	.word	0x20004208

0801e930 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e930:	b480      	push	{r7}
 801e932:	b083      	sub	sp, #12
 801e934:	af00      	add	r7, sp, #0
 801e936:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e938:	4a03      	ldr	r2, [pc, #12]	; (801e948 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	6053      	str	r3, [r2, #4]
}
 801e93e:	bf00      	nop
 801e940:	370c      	adds	r7, #12
 801e942:	46bd      	mov	sp, r7
 801e944:	bc80      	pop	{r7}
 801e946:	4770      	bx	lr
 801e948:	200041f0 	.word	0x200041f0

0801e94c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e94c:	b480      	push	{r7}
 801e94e:	b083      	sub	sp, #12
 801e950:	af00      	add	r7, sp, #0
 801e952:	4603      	mov	r3, r0
 801e954:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e956:	4a04      	ldr	r2, [pc, #16]	; (801e968 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e958:	79fb      	ldrb	r3, [r7, #7]
 801e95a:	7213      	strb	r3, [r2, #8]
}
 801e95c:	bf00      	nop
 801e95e:	370c      	adds	r7, #12
 801e960:	46bd      	mov	sp, r7
 801e962:	bc80      	pop	{r7}
 801e964:	4770      	bx	lr
 801e966:	bf00      	nop
 801e968:	200041f0 	.word	0x200041f0

0801e96c <UTIL_ADV_TRACE_GetVerboseLevel>:

uint8_t UTIL_ADV_TRACE_GetVerboseLevel(void)
{
 801e96c:	b480      	push	{r7}
 801e96e:	af00      	add	r7, sp, #0
  return ADV_TRACE_Ctx.CurrentVerboseLevel;
 801e970:	4b02      	ldr	r3, [pc, #8]	; (801e97c <UTIL_ADV_TRACE_GetVerboseLevel+0x10>)
 801e972:	7a1b      	ldrb	r3, [r3, #8]
}
 801e974:	4618      	mov	r0, r3
 801e976:	46bd      	mov	sp, r7
 801e978:	bc80      	pop	{r7}
 801e97a:	4770      	bx	lr
 801e97c:	200041f0 	.word	0x200041f0

0801e980 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b088      	sub	sp, #32
 801e984:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e986:	2300      	movs	r3, #0
 801e988:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e98a:	2300      	movs	r3, #0
 801e98c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e98e:	f3ef 8310 	mrs	r3, PRIMASK
 801e992:	613b      	str	r3, [r7, #16]
  return(result);
 801e994:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e998:	b672      	cpsid	i
}
 801e99a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e99c:	f000 f9ba 	bl	801ed14 <TRACE_IsLocked>
 801e9a0:	4603      	mov	r3, r0
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d15d      	bne.n	801ea62 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e9a6:	f000 f979 	bl	801ec9c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e9aa:	4b34      	ldr	r3, [pc, #208]	; (801ea7c <TRACE_Send+0xfc>)
 801e9ac:	8a1a      	ldrh	r2, [r3, #16]
 801e9ae:	4b33      	ldr	r3, [pc, #204]	; (801ea7c <TRACE_Send+0xfc>)
 801e9b0:	8a5b      	ldrh	r3, [r3, #18]
 801e9b2:	429a      	cmp	r2, r3
 801e9b4:	d04d      	beq.n	801ea52 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e9b6:	4b31      	ldr	r3, [pc, #196]	; (801ea7c <TRACE_Send+0xfc>)
 801e9b8:	789b      	ldrb	r3, [r3, #2]
 801e9ba:	2b01      	cmp	r3, #1
 801e9bc:	d117      	bne.n	801e9ee <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e9be:	4b2f      	ldr	r3, [pc, #188]	; (801ea7c <TRACE_Send+0xfc>)
 801e9c0:	881a      	ldrh	r2, [r3, #0]
 801e9c2:	4b2e      	ldr	r3, [pc, #184]	; (801ea7c <TRACE_Send+0xfc>)
 801e9c4:	8a1b      	ldrh	r3, [r3, #16]
 801e9c6:	1ad3      	subs	r3, r2, r3
 801e9c8:	b29a      	uxth	r2, r3
 801e9ca:	4b2c      	ldr	r3, [pc, #176]	; (801ea7c <TRACE_Send+0xfc>)
 801e9cc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e9ce:	4b2b      	ldr	r3, [pc, #172]	; (801ea7c <TRACE_Send+0xfc>)
 801e9d0:	2202      	movs	r2, #2
 801e9d2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e9d4:	4b29      	ldr	r3, [pc, #164]	; (801ea7c <TRACE_Send+0xfc>)
 801e9d6:	2200      	movs	r2, #0
 801e9d8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e9da:	4b28      	ldr	r3, [pc, #160]	; (801ea7c <TRACE_Send+0xfc>)
 801e9dc:	8a9b      	ldrh	r3, [r3, #20]
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d105      	bne.n	801e9ee <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e9e2:	4b26      	ldr	r3, [pc, #152]	; (801ea7c <TRACE_Send+0xfc>)
 801e9e4:	2200      	movs	r2, #0
 801e9e6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e9e8:	4b24      	ldr	r3, [pc, #144]	; (801ea7c <TRACE_Send+0xfc>)
 801e9ea:	2200      	movs	r2, #0
 801e9ec:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e9ee:	4b23      	ldr	r3, [pc, #140]	; (801ea7c <TRACE_Send+0xfc>)
 801e9f0:	789b      	ldrb	r3, [r3, #2]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d115      	bne.n	801ea22 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e9f6:	4b21      	ldr	r3, [pc, #132]	; (801ea7c <TRACE_Send+0xfc>)
 801e9f8:	8a5a      	ldrh	r2, [r3, #18]
 801e9fa:	4b20      	ldr	r3, [pc, #128]	; (801ea7c <TRACE_Send+0xfc>)
 801e9fc:	8a1b      	ldrh	r3, [r3, #16]
 801e9fe:	429a      	cmp	r2, r3
 801ea00:	d908      	bls.n	801ea14 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ea02:	4b1e      	ldr	r3, [pc, #120]	; (801ea7c <TRACE_Send+0xfc>)
 801ea04:	8a5a      	ldrh	r2, [r3, #18]
 801ea06:	4b1d      	ldr	r3, [pc, #116]	; (801ea7c <TRACE_Send+0xfc>)
 801ea08:	8a1b      	ldrh	r3, [r3, #16]
 801ea0a:	1ad3      	subs	r3, r2, r3
 801ea0c:	b29a      	uxth	r2, r3
 801ea0e:	4b1b      	ldr	r3, [pc, #108]	; (801ea7c <TRACE_Send+0xfc>)
 801ea10:	829a      	strh	r2, [r3, #20]
 801ea12:	e006      	b.n	801ea22 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ea14:	4b19      	ldr	r3, [pc, #100]	; (801ea7c <TRACE_Send+0xfc>)
 801ea16:	8a1b      	ldrh	r3, [r3, #16]
 801ea18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ea1c:	b29a      	uxth	r2, r3
 801ea1e:	4b17      	ldr	r3, [pc, #92]	; (801ea7c <TRACE_Send+0xfc>)
 801ea20:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ea22:	4b16      	ldr	r3, [pc, #88]	; (801ea7c <TRACE_Send+0xfc>)
 801ea24:	8a1b      	ldrh	r3, [r3, #16]
 801ea26:	461a      	mov	r2, r3
 801ea28:	4b15      	ldr	r3, [pc, #84]	; (801ea80 <TRACE_Send+0x100>)
 801ea2a:	4413      	add	r3, r2
 801ea2c:	61bb      	str	r3, [r7, #24]
 801ea2e:	697b      	ldr	r3, [r7, #20]
 801ea30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	f383 8810 	msr	PRIMASK, r3
}
 801ea38:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ea3a:	f7e2 ff1f 	bl	800187c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ea3e:	4b11      	ldr	r3, [pc, #68]	; (801ea84 <TRACE_Send+0x104>)
 801ea40:	68db      	ldr	r3, [r3, #12]
 801ea42:	4a0e      	ldr	r2, [pc, #56]	; (801ea7c <TRACE_Send+0xfc>)
 801ea44:	8a92      	ldrh	r2, [r2, #20]
 801ea46:	4611      	mov	r1, r2
 801ea48:	69b8      	ldr	r0, [r7, #24]
 801ea4a:	4798      	blx	r3
 801ea4c:	4603      	mov	r3, r0
 801ea4e:	77fb      	strb	r3, [r7, #31]
 801ea50:	e00d      	b.n	801ea6e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ea52:	f000 f941 	bl	801ecd8 <TRACE_UnLock>
 801ea56:	697b      	ldr	r3, [r7, #20]
 801ea58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea5a:	68bb      	ldr	r3, [r7, #8]
 801ea5c:	f383 8810 	msr	PRIMASK, r3
}
 801ea60:	e005      	b.n	801ea6e <TRACE_Send+0xee>
 801ea62:	697b      	ldr	r3, [r7, #20]
 801ea64:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	f383 8810 	msr	PRIMASK, r3
}
 801ea6c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ea6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ea72:	4618      	mov	r0, r3
 801ea74:	3720      	adds	r7, #32
 801ea76:	46bd      	mov	sp, r7
 801ea78:	bd80      	pop	{r7, pc}
 801ea7a:	bf00      	nop
 801ea7c:	200041f0 	.word	0x200041f0
 801ea80:	20004208 	.word	0x20004208
 801ea84:	08022b3c 	.word	0x08022b3c

0801ea88 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b088      	sub	sp, #32
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ea90:	2300      	movs	r3, #0
 801ea92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea94:	f3ef 8310 	mrs	r3, PRIMASK
 801ea98:	617b      	str	r3, [r7, #20]
  return(result);
 801ea9a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea9e:	b672      	cpsid	i
}
 801eaa0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801eaa2:	4b3c      	ldr	r3, [pc, #240]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaa4:	789b      	ldrb	r3, [r3, #2]
 801eaa6:	2b02      	cmp	r3, #2
 801eaa8:	d106      	bne.n	801eab8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eaaa:	4b3a      	ldr	r3, [pc, #232]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaac:	2200      	movs	r2, #0
 801eaae:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eab0:	4b38      	ldr	r3, [pc, #224]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eab2:	2200      	movs	r2, #0
 801eab4:	821a      	strh	r2, [r3, #16]
 801eab6:	e00a      	b.n	801eace <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801eab8:	4b36      	ldr	r3, [pc, #216]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaba:	8a1a      	ldrh	r2, [r3, #16]
 801eabc:	4b35      	ldr	r3, [pc, #212]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eabe:	8a9b      	ldrh	r3, [r3, #20]
 801eac0:	4413      	add	r3, r2
 801eac2:	b29b      	uxth	r3, r3
 801eac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801eac8:	b29a      	uxth	r2, r3
 801eaca:	4b32      	ldr	r3, [pc, #200]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eacc:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801eace:	4b31      	ldr	r3, [pc, #196]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801ead0:	8a1a      	ldrh	r2, [r3, #16]
 801ead2:	4b30      	ldr	r3, [pc, #192]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801ead4:	8a5b      	ldrh	r3, [r3, #18]
 801ead6:	429a      	cmp	r2, r3
 801ead8:	d04d      	beq.n	801eb76 <TRACE_TxCpltCallback+0xee>
 801eada:	4b2e      	ldr	r3, [pc, #184]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eadc:	8adb      	ldrh	r3, [r3, #22]
 801eade:	2b01      	cmp	r3, #1
 801eae0:	d149      	bne.n	801eb76 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801eae2:	4b2c      	ldr	r3, [pc, #176]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eae4:	789b      	ldrb	r3, [r3, #2]
 801eae6:	2b01      	cmp	r3, #1
 801eae8:	d117      	bne.n	801eb1a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801eaea:	4b2a      	ldr	r3, [pc, #168]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaec:	881a      	ldrh	r2, [r3, #0]
 801eaee:	4b29      	ldr	r3, [pc, #164]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaf0:	8a1b      	ldrh	r3, [r3, #16]
 801eaf2:	1ad3      	subs	r3, r2, r3
 801eaf4:	b29a      	uxth	r2, r3
 801eaf6:	4b27      	ldr	r3, [pc, #156]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eaf8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801eafa:	4b26      	ldr	r3, [pc, #152]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eafc:	2202      	movs	r2, #2
 801eafe:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801eb00:	4b24      	ldr	r3, [pc, #144]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb02:	2200      	movs	r2, #0
 801eb04:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801eb06:	4b23      	ldr	r3, [pc, #140]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb08:	8a9b      	ldrh	r3, [r3, #20]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d105      	bne.n	801eb1a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eb0e:	4b21      	ldr	r3, [pc, #132]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb10:	2200      	movs	r2, #0
 801eb12:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eb14:	4b1f      	ldr	r3, [pc, #124]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb16:	2200      	movs	r2, #0
 801eb18:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801eb1a:	4b1e      	ldr	r3, [pc, #120]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb1c:	789b      	ldrb	r3, [r3, #2]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d115      	bne.n	801eb4e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801eb22:	4b1c      	ldr	r3, [pc, #112]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb24:	8a5a      	ldrh	r2, [r3, #18]
 801eb26:	4b1b      	ldr	r3, [pc, #108]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb28:	8a1b      	ldrh	r3, [r3, #16]
 801eb2a:	429a      	cmp	r2, r3
 801eb2c:	d908      	bls.n	801eb40 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801eb2e:	4b19      	ldr	r3, [pc, #100]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb30:	8a5a      	ldrh	r2, [r3, #18]
 801eb32:	4b18      	ldr	r3, [pc, #96]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb34:	8a1b      	ldrh	r3, [r3, #16]
 801eb36:	1ad3      	subs	r3, r2, r3
 801eb38:	b29a      	uxth	r2, r3
 801eb3a:	4b16      	ldr	r3, [pc, #88]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb3c:	829a      	strh	r2, [r3, #20]
 801eb3e:	e006      	b.n	801eb4e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801eb40:	4b14      	ldr	r3, [pc, #80]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb42:	8a1b      	ldrh	r3, [r3, #16]
 801eb44:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801eb48:	b29a      	uxth	r2, r3
 801eb4a:	4b12      	ldr	r3, [pc, #72]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb4c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801eb4e:	4b11      	ldr	r3, [pc, #68]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb50:	8a1b      	ldrh	r3, [r3, #16]
 801eb52:	461a      	mov	r2, r3
 801eb54:	4b10      	ldr	r3, [pc, #64]	; (801eb98 <TRACE_TxCpltCallback+0x110>)
 801eb56:	4413      	add	r3, r2
 801eb58:	61fb      	str	r3, [r7, #28]
 801eb5a:	69bb      	ldr	r3, [r7, #24]
 801eb5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	f383 8810 	msr	PRIMASK, r3
}
 801eb64:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801eb66:	4b0d      	ldr	r3, [pc, #52]	; (801eb9c <TRACE_TxCpltCallback+0x114>)
 801eb68:	68db      	ldr	r3, [r3, #12]
 801eb6a:	4a0a      	ldr	r2, [pc, #40]	; (801eb94 <TRACE_TxCpltCallback+0x10c>)
 801eb6c:	8a92      	ldrh	r2, [r2, #20]
 801eb6e:	4611      	mov	r1, r2
 801eb70:	69f8      	ldr	r0, [r7, #28]
 801eb72:	4798      	blx	r3
 801eb74:	e00a      	b.n	801eb8c <TRACE_TxCpltCallback+0x104>
 801eb76:	69bb      	ldr	r3, [r7, #24]
 801eb78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb7a:	68fb      	ldr	r3, [r7, #12]
 801eb7c:	f383 8810 	msr	PRIMASK, r3
}
 801eb80:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801eb82:	f7e2 fe83 	bl	800188c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801eb86:	f000 f8a7 	bl	801ecd8 <TRACE_UnLock>
  }
}
 801eb8a:	bf00      	nop
 801eb8c:	bf00      	nop
 801eb8e:	3720      	adds	r7, #32
 801eb90:	46bd      	mov	sp, r7
 801eb92:	bd80      	pop	{r7, pc}
 801eb94:	200041f0 	.word	0x200041f0
 801eb98:	20004208 	.word	0x20004208
 801eb9c:	08022b3c 	.word	0x08022b3c

0801eba0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801eba0:	b480      	push	{r7}
 801eba2:	b087      	sub	sp, #28
 801eba4:	af00      	add	r7, sp, #0
 801eba6:	4603      	mov	r3, r0
 801eba8:	6039      	str	r1, [r7, #0]
 801ebaa:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ebac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ebb0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebb2:	f3ef 8310 	mrs	r3, PRIMASK
 801ebb6:	60fb      	str	r3, [r7, #12]
  return(result);
 801ebb8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ebba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ebbc:	b672      	cpsid	i
}
 801ebbe:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ebc0:	4b35      	ldr	r3, [pc, #212]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebc2:	8a5a      	ldrh	r2, [r3, #18]
 801ebc4:	4b34      	ldr	r3, [pc, #208]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebc6:	8a1b      	ldrh	r3, [r3, #16]
 801ebc8:	429a      	cmp	r2, r3
 801ebca:	d11b      	bne.n	801ec04 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ebcc:	4b32      	ldr	r3, [pc, #200]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebce:	8a5b      	ldrh	r3, [r3, #18]
 801ebd0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ebd4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801ebd6:	88fa      	ldrh	r2, [r7, #6]
 801ebd8:	8afb      	ldrh	r3, [r7, #22]
 801ebda:	429a      	cmp	r2, r3
 801ebdc:	d33a      	bcc.n	801ec54 <TRACE_AllocateBufer+0xb4>
 801ebde:	4b2e      	ldr	r3, [pc, #184]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebe0:	8a1b      	ldrh	r3, [r3, #16]
 801ebe2:	88fa      	ldrh	r2, [r7, #6]
 801ebe4:	429a      	cmp	r2, r3
 801ebe6:	d235      	bcs.n	801ec54 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ebe8:	4b2b      	ldr	r3, [pc, #172]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebea:	2201      	movs	r2, #1
 801ebec:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ebee:	4b2a      	ldr	r3, [pc, #168]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebf0:	8a5a      	ldrh	r2, [r3, #18]
 801ebf2:	4b29      	ldr	r3, [pc, #164]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebf4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ebf6:	4b28      	ldr	r3, [pc, #160]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebf8:	8a1b      	ldrh	r3, [r3, #16]
 801ebfa:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ebfc:	4b26      	ldr	r3, [pc, #152]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ebfe:	2200      	movs	r2, #0
 801ec00:	825a      	strh	r2, [r3, #18]
 801ec02:	e027      	b.n	801ec54 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ec04:	4b24      	ldr	r3, [pc, #144]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec06:	8a5a      	ldrh	r2, [r3, #18]
 801ec08:	4b23      	ldr	r3, [pc, #140]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec0a:	8a1b      	ldrh	r3, [r3, #16]
 801ec0c:	429a      	cmp	r2, r3
 801ec0e:	d91b      	bls.n	801ec48 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ec10:	4b21      	ldr	r3, [pc, #132]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec12:	8a5b      	ldrh	r3, [r3, #18]
 801ec14:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ec18:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ec1a:	88fa      	ldrh	r2, [r7, #6]
 801ec1c:	8afb      	ldrh	r3, [r7, #22]
 801ec1e:	429a      	cmp	r2, r3
 801ec20:	d318      	bcc.n	801ec54 <TRACE_AllocateBufer+0xb4>
 801ec22:	4b1d      	ldr	r3, [pc, #116]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec24:	8a1b      	ldrh	r3, [r3, #16]
 801ec26:	88fa      	ldrh	r2, [r7, #6]
 801ec28:	429a      	cmp	r2, r3
 801ec2a:	d213      	bcs.n	801ec54 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ec2c:	4b1a      	ldr	r3, [pc, #104]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec2e:	2201      	movs	r2, #1
 801ec30:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ec32:	4b19      	ldr	r3, [pc, #100]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec34:	8a5a      	ldrh	r2, [r3, #18]
 801ec36:	4b18      	ldr	r3, [pc, #96]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec38:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ec3a:	4b17      	ldr	r3, [pc, #92]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec3c:	8a1b      	ldrh	r3, [r3, #16]
 801ec3e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ec40:	4b15      	ldr	r3, [pc, #84]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec42:	2200      	movs	r2, #0
 801ec44:	825a      	strh	r2, [r3, #18]
 801ec46:	e005      	b.n	801ec54 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ec48:	4b13      	ldr	r3, [pc, #76]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec4a:	8a1a      	ldrh	r2, [r3, #16]
 801ec4c:	4b12      	ldr	r3, [pc, #72]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec4e:	8a5b      	ldrh	r3, [r3, #18]
 801ec50:	1ad3      	subs	r3, r2, r3
 801ec52:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ec54:	8afa      	ldrh	r2, [r7, #22]
 801ec56:	88fb      	ldrh	r3, [r7, #6]
 801ec58:	429a      	cmp	r2, r3
 801ec5a:	d90f      	bls.n	801ec7c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ec5c:	4b0e      	ldr	r3, [pc, #56]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec5e:	8a5a      	ldrh	r2, [r3, #18]
 801ec60:	683b      	ldr	r3, [r7, #0]
 801ec62:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ec64:	4b0c      	ldr	r3, [pc, #48]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec66:	8a5a      	ldrh	r2, [r3, #18]
 801ec68:	88fb      	ldrh	r3, [r7, #6]
 801ec6a:	4413      	add	r3, r2
 801ec6c:	b29b      	uxth	r3, r3
 801ec6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ec72:	b29a      	uxth	r2, r3
 801ec74:	4b08      	ldr	r3, [pc, #32]	; (801ec98 <TRACE_AllocateBufer+0xf8>)
 801ec76:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ec78:	2300      	movs	r3, #0
 801ec7a:	82bb      	strh	r3, [r7, #20]
 801ec7c:	693b      	ldr	r3, [r7, #16]
 801ec7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec80:	68bb      	ldr	r3, [r7, #8]
 801ec82:	f383 8810 	msr	PRIMASK, r3
}
 801ec86:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ec88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ec8c:	4618      	mov	r0, r3
 801ec8e:	371c      	adds	r7, #28
 801ec90:	46bd      	mov	sp, r7
 801ec92:	bc80      	pop	{r7}
 801ec94:	4770      	bx	lr
 801ec96:	bf00      	nop
 801ec98:	200041f0 	.word	0x200041f0

0801ec9c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ec9c:	b480      	push	{r7}
 801ec9e:	b085      	sub	sp, #20
 801eca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eca2:	f3ef 8310 	mrs	r3, PRIMASK
 801eca6:	607b      	str	r3, [r7, #4]
  return(result);
 801eca8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ecaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ecac:	b672      	cpsid	i
}
 801ecae:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ecb0:	4b08      	ldr	r3, [pc, #32]	; (801ecd4 <TRACE_Lock+0x38>)
 801ecb2:	8adb      	ldrh	r3, [r3, #22]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	b29a      	uxth	r2, r3
 801ecb8:	4b06      	ldr	r3, [pc, #24]	; (801ecd4 <TRACE_Lock+0x38>)
 801ecba:	82da      	strh	r2, [r3, #22]
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecc0:	68bb      	ldr	r3, [r7, #8]
 801ecc2:	f383 8810 	msr	PRIMASK, r3
}
 801ecc6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ecc8:	bf00      	nop
 801ecca:	3714      	adds	r7, #20
 801eccc:	46bd      	mov	sp, r7
 801ecce:	bc80      	pop	{r7}
 801ecd0:	4770      	bx	lr
 801ecd2:	bf00      	nop
 801ecd4:	200041f0 	.word	0x200041f0

0801ecd8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ecd8:	b480      	push	{r7}
 801ecda:	b085      	sub	sp, #20
 801ecdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecde:	f3ef 8310 	mrs	r3, PRIMASK
 801ece2:	607b      	str	r3, [r7, #4]
  return(result);
 801ece4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ece6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ece8:	b672      	cpsid	i
}
 801ecea:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ecec:	4b08      	ldr	r3, [pc, #32]	; (801ed10 <TRACE_UnLock+0x38>)
 801ecee:	8adb      	ldrh	r3, [r3, #22]
 801ecf0:	3b01      	subs	r3, #1
 801ecf2:	b29a      	uxth	r2, r3
 801ecf4:	4b06      	ldr	r3, [pc, #24]	; (801ed10 <TRACE_UnLock+0x38>)
 801ecf6:	82da      	strh	r2, [r3, #22]
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecfc:	68bb      	ldr	r3, [r7, #8]
 801ecfe:	f383 8810 	msr	PRIMASK, r3
}
 801ed02:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ed04:	bf00      	nop
 801ed06:	3714      	adds	r7, #20
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	bc80      	pop	{r7}
 801ed0c:	4770      	bx	lr
 801ed0e:	bf00      	nop
 801ed10:	200041f0 	.word	0x200041f0

0801ed14 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ed14:	b480      	push	{r7}
 801ed16:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ed18:	4b05      	ldr	r3, [pc, #20]	; (801ed30 <TRACE_IsLocked+0x1c>)
 801ed1a:	8adb      	ldrh	r3, [r3, #22]
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	bf14      	ite	ne
 801ed20:	2301      	movne	r3, #1
 801ed22:	2300      	moveq	r3, #0
 801ed24:	b2db      	uxtb	r3, r3
}
 801ed26:	4618      	mov	r0, r3
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	bc80      	pop	{r7}
 801ed2c:	4770      	bx	lr
 801ed2e:	bf00      	nop
 801ed30:	200041f0 	.word	0x200041f0

0801ed34 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ed34:	b480      	push	{r7}
 801ed36:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed38:	4b04      	ldr	r3, [pc, #16]	; (801ed4c <UTIL_LPM_Init+0x18>)
 801ed3a:	2200      	movs	r2, #0
 801ed3c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed3e:	4b04      	ldr	r3, [pc, #16]	; (801ed50 <UTIL_LPM_Init+0x1c>)
 801ed40:	2200      	movs	r2, #0
 801ed42:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ed44:	bf00      	nop
 801ed46:	46bd      	mov	sp, r7
 801ed48:	bc80      	pop	{r7}
 801ed4a:	4770      	bx	lr
 801ed4c:	20004808 	.word	0x20004808
 801ed50:	2000480c 	.word	0x2000480c

0801ed54 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed54:	b480      	push	{r7}
 801ed56:	b087      	sub	sp, #28
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
 801ed5c:	460b      	mov	r3, r1
 801ed5e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed60:	f3ef 8310 	mrs	r3, PRIMASK
 801ed64:	613b      	str	r3, [r7, #16]
  return(result);
 801ed66:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ed68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ed6a:	b672      	cpsid	i
}
 801ed6c:	bf00      	nop
  
  switch( state )
 801ed6e:	78fb      	ldrb	r3, [r7, #3]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d008      	beq.n	801ed86 <UTIL_LPM_SetStopMode+0x32>
 801ed74:	2b01      	cmp	r3, #1
 801ed76:	d10e      	bne.n	801ed96 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ed78:	4b0d      	ldr	r3, [pc, #52]	; (801edb0 <UTIL_LPM_SetStopMode+0x5c>)
 801ed7a:	681a      	ldr	r2, [r3, #0]
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	4313      	orrs	r3, r2
 801ed80:	4a0b      	ldr	r2, [pc, #44]	; (801edb0 <UTIL_LPM_SetStopMode+0x5c>)
 801ed82:	6013      	str	r3, [r2, #0]
      break;
 801ed84:	e008      	b.n	801ed98 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	43da      	mvns	r2, r3
 801ed8a:	4b09      	ldr	r3, [pc, #36]	; (801edb0 <UTIL_LPM_SetStopMode+0x5c>)
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	4013      	ands	r3, r2
 801ed90:	4a07      	ldr	r2, [pc, #28]	; (801edb0 <UTIL_LPM_SetStopMode+0x5c>)
 801ed92:	6013      	str	r3, [r2, #0]
      break;
 801ed94:	e000      	b.n	801ed98 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ed96:	bf00      	nop
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed9c:	68fb      	ldr	r3, [r7, #12]
 801ed9e:	f383 8810 	msr	PRIMASK, r3
}
 801eda2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801eda4:	bf00      	nop
 801eda6:	371c      	adds	r7, #28
 801eda8:	46bd      	mov	sp, r7
 801edaa:	bc80      	pop	{r7}
 801edac:	4770      	bx	lr
 801edae:	bf00      	nop
 801edb0:	20004808 	.word	0x20004808

0801edb4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801edb4:	b480      	push	{r7}
 801edb6:	b087      	sub	sp, #28
 801edb8:	af00      	add	r7, sp, #0
 801edba:	6078      	str	r0, [r7, #4]
 801edbc:	460b      	mov	r3, r1
 801edbe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edc0:	f3ef 8310 	mrs	r3, PRIMASK
 801edc4:	613b      	str	r3, [r7, #16]
  return(result);
 801edc6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801edc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801edca:	b672      	cpsid	i
}
 801edcc:	bf00      	nop
  
  switch(state)
 801edce:	78fb      	ldrb	r3, [r7, #3]
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d008      	beq.n	801ede6 <UTIL_LPM_SetOffMode+0x32>
 801edd4:	2b01      	cmp	r3, #1
 801edd6:	d10e      	bne.n	801edf6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801edd8:	4b0d      	ldr	r3, [pc, #52]	; (801ee10 <UTIL_LPM_SetOffMode+0x5c>)
 801edda:	681a      	ldr	r2, [r3, #0]
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	4313      	orrs	r3, r2
 801ede0:	4a0b      	ldr	r2, [pc, #44]	; (801ee10 <UTIL_LPM_SetOffMode+0x5c>)
 801ede2:	6013      	str	r3, [r2, #0]
      break;
 801ede4:	e008      	b.n	801edf8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	43da      	mvns	r2, r3
 801edea:	4b09      	ldr	r3, [pc, #36]	; (801ee10 <UTIL_LPM_SetOffMode+0x5c>)
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	4013      	ands	r3, r2
 801edf0:	4a07      	ldr	r2, [pc, #28]	; (801ee10 <UTIL_LPM_SetOffMode+0x5c>)
 801edf2:	6013      	str	r3, [r2, #0]
      break;
 801edf4:	e000      	b.n	801edf8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801edf6:	bf00      	nop
 801edf8:	697b      	ldr	r3, [r7, #20]
 801edfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	f383 8810 	msr	PRIMASK, r3
}
 801ee02:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ee04:	bf00      	nop
 801ee06:	371c      	adds	r7, #28
 801ee08:	46bd      	mov	sp, r7
 801ee0a:	bc80      	pop	{r7}
 801ee0c:	4770      	bx	lr
 801ee0e:	bf00      	nop
 801ee10:	2000480c 	.word	0x2000480c

0801ee14 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ee14:	b480      	push	{r7}
 801ee16:	b087      	sub	sp, #28
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	60f8      	str	r0, [r7, #12]
 801ee1c:	60b9      	str	r1, [r7, #8]
 801ee1e:	4613      	mov	r3, r2
 801ee20:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ee26:	68bb      	ldr	r3, [r7, #8]
 801ee28:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ee2a:	e007      	b.n	801ee3c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ee2c:	693a      	ldr	r2, [r7, #16]
 801ee2e:	1c53      	adds	r3, r2, #1
 801ee30:	613b      	str	r3, [r7, #16]
 801ee32:	697b      	ldr	r3, [r7, #20]
 801ee34:	1c59      	adds	r1, r3, #1
 801ee36:	6179      	str	r1, [r7, #20]
 801ee38:	7812      	ldrb	r2, [r2, #0]
 801ee3a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee3c:	88fb      	ldrh	r3, [r7, #6]
 801ee3e:	1e5a      	subs	r2, r3, #1
 801ee40:	80fa      	strh	r2, [r7, #6]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d1f2      	bne.n	801ee2c <UTIL_MEM_cpy_8+0x18>
    }
}
 801ee46:	bf00      	nop
 801ee48:	bf00      	nop
 801ee4a:	371c      	adds	r7, #28
 801ee4c:	46bd      	mov	sp, r7
 801ee4e:	bc80      	pop	{r7}
 801ee50:	4770      	bx	lr

0801ee52 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ee52:	b480      	push	{r7}
 801ee54:	b085      	sub	sp, #20
 801ee56:	af00      	add	r7, sp, #0
 801ee58:	6078      	str	r0, [r7, #4]
 801ee5a:	460b      	mov	r3, r1
 801ee5c:	70fb      	strb	r3, [r7, #3]
 801ee5e:	4613      	mov	r3, r2
 801ee60:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ee66:	e004      	b.n	801ee72 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ee68:	68fb      	ldr	r3, [r7, #12]
 801ee6a:	1c5a      	adds	r2, r3, #1
 801ee6c:	60fa      	str	r2, [r7, #12]
 801ee6e:	78fa      	ldrb	r2, [r7, #3]
 801ee70:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee72:	883b      	ldrh	r3, [r7, #0]
 801ee74:	1e5a      	subs	r2, r3, #1
 801ee76:	803a      	strh	r2, [r7, #0]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d1f5      	bne.n	801ee68 <UTIL_MEM_set_8+0x16>
  }
}
 801ee7c:	bf00      	nop
 801ee7e:	bf00      	nop
 801ee80:	3714      	adds	r7, #20
 801ee82:	46bd      	mov	sp, r7
 801ee84:	bc80      	pop	{r7}
 801ee86:	4770      	bx	lr

0801ee88 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b08c      	sub	sp, #48	; 0x30
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ee90:	4b67      	ldr	r3, [pc, #412]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801ee96:	4b66      	ldr	r3, [pc, #408]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801ee98:	681a      	ldr	r2, [r3, #0]
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	4013      	ands	r3, r2
 801ee9e:	4a64      	ldr	r2, [pc, #400]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801eea0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801eea2:	e083      	b.n	801efac <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801eea4:	2300      	movs	r3, #0
 801eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801eea8:	e002      	b.n	801eeb0 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeac:	3301      	adds	r3, #1
 801eeae:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801eeb0:	4a60      	ldr	r2, [pc, #384]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801eeb8:	4b5f      	ldr	r3, [pc, #380]	; (801f038 <UTIL_SEQ_Run+0x1b0>)
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	401a      	ands	r2, r3
 801eebe:	4b5c      	ldr	r3, [pc, #368]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	4013      	ands	r3, r2
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d0f0      	beq.n	801eeaa <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801eec8:	4a5a      	ldr	r2, [pc, #360]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801eeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eecc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801eed0:	4b59      	ldr	r3, [pc, #356]	; (801f038 <UTIL_SEQ_Run+0x1b0>)
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	401a      	ands	r2, r3
 801eed6:	4b56      	ldr	r3, [pc, #344]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	4013      	ands	r3, r2
 801eedc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801eede:	4a55      	ldr	r2, [pc, #340]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eee2:	00db      	lsls	r3, r3, #3
 801eee4:	4413      	add	r3, r2
 801eee6:	685a      	ldr	r2, [r3, #4]
 801eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeea:	4013      	ands	r3, r2
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d106      	bne.n	801eefe <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801eef0:	4a50      	ldr	r2, [pc, #320]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eef4:	00db      	lsls	r3, r3, #3
 801eef6:	4413      	add	r3, r2
 801eef8:	f04f 32ff 	mov.w	r2, #4294967295
 801eefc:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801eefe:	4a4d      	ldr	r2, [pc, #308]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef02:	00db      	lsls	r3, r3, #3
 801ef04:	4413      	add	r3, r2
 801ef06:	685a      	ldr	r2, [r3, #4]
 801ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef0a:	4013      	ands	r3, r2
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	f000 f967 	bl	801f1e0 <SEQ_BitPosition>
 801ef12:	4603      	mov	r3, r0
 801ef14:	461a      	mov	r2, r3
 801ef16:	4b49      	ldr	r3, [pc, #292]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801ef18:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801ef1a:	4a46      	ldr	r2, [pc, #280]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef1e:	00db      	lsls	r3, r3, #3
 801ef20:	4413      	add	r3, r2
 801ef22:	685a      	ldr	r2, [r3, #4]
 801ef24:	4b45      	ldr	r3, [pc, #276]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	2101      	movs	r1, #1
 801ef2a:	fa01 f303 	lsl.w	r3, r1, r3
 801ef2e:	43db      	mvns	r3, r3
 801ef30:	401a      	ands	r2, r3
 801ef32:	4940      	ldr	r1, [pc, #256]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef36:	00db      	lsls	r3, r3, #3
 801ef38:	440b      	add	r3, r1
 801ef3a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef3c:	f3ef 8310 	mrs	r3, PRIMASK
 801ef40:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef42:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ef44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ef46:	b672      	cpsid	i
}
 801ef48:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ef4a:	4b3c      	ldr	r3, [pc, #240]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	2201      	movs	r2, #1
 801ef50:	fa02 f303 	lsl.w	r3, r2, r3
 801ef54:	43da      	mvns	r2, r3
 801ef56:	4b3a      	ldr	r3, [pc, #232]	; (801f040 <UTIL_SEQ_Run+0x1b8>)
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	4013      	ands	r3, r2
 801ef5c:	4a38      	ldr	r2, [pc, #224]	; (801f040 <UTIL_SEQ_Run+0x1b8>)
 801ef5e:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ef60:	2302      	movs	r3, #2
 801ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef64:	e013      	b.n	801ef8e <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ef66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef68:	3b01      	subs	r3, #1
 801ef6a:	4a32      	ldr	r2, [pc, #200]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801ef6c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ef70:	4b32      	ldr	r3, [pc, #200]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	2201      	movs	r2, #1
 801ef76:	fa02 f303 	lsl.w	r3, r2, r3
 801ef7a:	43da      	mvns	r2, r3
 801ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef7e:	3b01      	subs	r3, #1
 801ef80:	400a      	ands	r2, r1
 801ef82:	492c      	ldr	r1, [pc, #176]	; (801f034 <UTIL_SEQ_Run+0x1ac>)
 801ef84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef8a:	3b01      	subs	r3, #1
 801ef8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	d1e8      	bne.n	801ef66 <UTIL_SEQ_Run+0xde>
 801ef94:	6a3b      	ldr	r3, [r7, #32]
 801ef96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef98:	697b      	ldr	r3, [r7, #20]
 801ef9a:	f383 8810 	msr	PRIMASK, r3
}
 801ef9e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801efa0:	4b26      	ldr	r3, [pc, #152]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	4a27      	ldr	r2, [pc, #156]	; (801f044 <UTIL_SEQ_Run+0x1bc>)
 801efa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801efaa:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801efac:	4b24      	ldr	r3, [pc, #144]	; (801f040 <UTIL_SEQ_Run+0x1b8>)
 801efae:	681a      	ldr	r2, [r3, #0]
 801efb0:	4b21      	ldr	r3, [pc, #132]	; (801f038 <UTIL_SEQ_Run+0x1b0>)
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	401a      	ands	r2, r3
 801efb6:	4b1e      	ldr	r3, [pc, #120]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	4013      	ands	r3, r2
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d007      	beq.n	801efd0 <UTIL_SEQ_Run+0x148>
 801efc0:	4b21      	ldr	r3, [pc, #132]	; (801f048 <UTIL_SEQ_Run+0x1c0>)
 801efc2:	681a      	ldr	r2, [r3, #0]
 801efc4:	4b21      	ldr	r3, [pc, #132]	; (801f04c <UTIL_SEQ_Run+0x1c4>)
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	4013      	ands	r3, r2
 801efca:	2b00      	cmp	r3, #0
 801efcc:	f43f af6a 	beq.w	801eea4 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801efd0:	4b1a      	ldr	r3, [pc, #104]	; (801f03c <UTIL_SEQ_Run+0x1b4>)
 801efd2:	f04f 32ff 	mov.w	r2, #4294967295
 801efd6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801efd8:	f000 f8f6 	bl	801f1c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efdc:	f3ef 8310 	mrs	r3, PRIMASK
 801efe0:	613b      	str	r3, [r7, #16]
  return(result);
 801efe2:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801efe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801efe6:	b672      	cpsid	i
}
 801efe8:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801efea:	4b15      	ldr	r3, [pc, #84]	; (801f040 <UTIL_SEQ_Run+0x1b8>)
 801efec:	681a      	ldr	r2, [r3, #0]
 801efee:	4b12      	ldr	r3, [pc, #72]	; (801f038 <UTIL_SEQ_Run+0x1b0>)
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	401a      	ands	r2, r3
 801eff4:	4b0e      	ldr	r3, [pc, #56]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	4013      	ands	r3, r2
 801effa:	2b00      	cmp	r3, #0
 801effc:	d108      	bne.n	801f010 <UTIL_SEQ_Run+0x188>
 801effe:	4b12      	ldr	r3, [pc, #72]	; (801f048 <UTIL_SEQ_Run+0x1c0>)
 801f000:	681a      	ldr	r2, [r3, #0]
 801f002:	4b12      	ldr	r3, [pc, #72]	; (801f04c <UTIL_SEQ_Run+0x1c4>)
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	4013      	ands	r3, r2
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d101      	bne.n	801f010 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801f00c:	f7e2 fb2c 	bl	8001668 <UTIL_SEQ_Idle>
 801f010:	69fb      	ldr	r3, [r7, #28]
 801f012:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	f383 8810 	msr	PRIMASK, r3
}
 801f01a:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801f01c:	f000 f8da 	bl	801f1d4 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801f020:	4a03      	ldr	r2, [pc, #12]	; (801f030 <UTIL_SEQ_Run+0x1a8>)
 801f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f024:	6013      	str	r3, [r2, #0]

  return;
 801f026:	bf00      	nop
}
 801f028:	3730      	adds	r7, #48	; 0x30
 801f02a:	46bd      	mov	sp, r7
 801f02c:	bd80      	pop	{r7, pc}
 801f02e:	bf00      	nop
 801f030:	20000118 	.word	0x20000118
 801f034:	200048a0 	.word	0x200048a0
 801f038:	20000114 	.word	0x20000114
 801f03c:	2000481c 	.word	0x2000481c
 801f040:	20004810 	.word	0x20004810
 801f044:	20004820 	.word	0x20004820
 801f048:	20004814 	.word	0x20004814
 801f04c:	20004818 	.word	0x20004818

0801f050 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b088      	sub	sp, #32
 801f054:	af00      	add	r7, sp, #0
 801f056:	60f8      	str	r0, [r7, #12]
 801f058:	60b9      	str	r1, [r7, #8]
 801f05a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f05c:	f3ef 8310 	mrs	r3, PRIMASK
 801f060:	617b      	str	r3, [r7, #20]
  return(result);
 801f062:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f066:	b672      	cpsid	i
}
 801f068:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f06a:	68f8      	ldr	r0, [r7, #12]
 801f06c:	f000 f8b8 	bl	801f1e0 <SEQ_BitPosition>
 801f070:	4603      	mov	r3, r0
 801f072:	4619      	mov	r1, r3
 801f074:	4a06      	ldr	r2, [pc, #24]	; (801f090 <UTIL_SEQ_RegTask+0x40>)
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f07c:	69fb      	ldr	r3, [r7, #28]
 801f07e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f080:	69bb      	ldr	r3, [r7, #24]
 801f082:	f383 8810 	msr	PRIMASK, r3
}
 801f086:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f088:	bf00      	nop
}
 801f08a:	3720      	adds	r7, #32
 801f08c:	46bd      	mov	sp, r7
 801f08e:	bd80      	pop	{r7, pc}
 801f090:	20004820 	.word	0x20004820

0801f094 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f094:	b480      	push	{r7}
 801f096:	b087      	sub	sp, #28
 801f098:	af00      	add	r7, sp, #0
 801f09a:	6078      	str	r0, [r7, #4]
 801f09c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f09e:	f3ef 8310 	mrs	r3, PRIMASK
 801f0a2:	60fb      	str	r3, [r7, #12]
  return(result);
 801f0a4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f0a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0a8:	b672      	cpsid	i
}
 801f0aa:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f0ac:	4b0d      	ldr	r3, [pc, #52]	; (801f0e4 <UTIL_SEQ_SetTask+0x50>)
 801f0ae:	681a      	ldr	r2, [r3, #0]
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	4313      	orrs	r3, r2
 801f0b4:	4a0b      	ldr	r2, [pc, #44]	; (801f0e4 <UTIL_SEQ_SetTask+0x50>)
 801f0b6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f0b8:	4a0b      	ldr	r2, [pc, #44]	; (801f0e8 <UTIL_SEQ_SetTask+0x54>)
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	431a      	orrs	r2, r3
 801f0c4:	4908      	ldr	r1, [pc, #32]	; (801f0e8 <UTIL_SEQ_SetTask+0x54>)
 801f0c6:	683b      	ldr	r3, [r7, #0]
 801f0c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f0cc:	697b      	ldr	r3, [r7, #20]
 801f0ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0d0:	693b      	ldr	r3, [r7, #16]
 801f0d2:	f383 8810 	msr	PRIMASK, r3
}
 801f0d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f0d8:	bf00      	nop
}
 801f0da:	371c      	adds	r7, #28
 801f0dc:	46bd      	mov	sp, r7
 801f0de:	bc80      	pop	{r7}
 801f0e0:	4770      	bx	lr
 801f0e2:	bf00      	nop
 801f0e4:	20004810 	.word	0x20004810
 801f0e8:	200048a0 	.word	0x200048a0

0801f0ec <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801f0ec:	b480      	push	{r7}
 801f0ee:	b087      	sub	sp, #28
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0f4:	f3ef 8310 	mrs	r3, PRIMASK
 801f0f8:	60fb      	str	r3, [r7, #12]
  return(result);
 801f0fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f0fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0fe:	b672      	cpsid	i
}
 801f100:	bf00      	nop

  EvtSet |= EvtId_bm;
 801f102:	4b08      	ldr	r3, [pc, #32]	; (801f124 <UTIL_SEQ_SetEvt+0x38>)
 801f104:	681a      	ldr	r2, [r3, #0]
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	4313      	orrs	r3, r2
 801f10a:	4a06      	ldr	r2, [pc, #24]	; (801f124 <UTIL_SEQ_SetEvt+0x38>)
 801f10c:	6013      	str	r3, [r2, #0]
 801f10e:	697b      	ldr	r3, [r7, #20]
 801f110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f112:	693b      	ldr	r3, [r7, #16]
 801f114:	f383 8810 	msr	PRIMASK, r3
}
 801f118:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f11a:	bf00      	nop
}
 801f11c:	371c      	adds	r7, #28
 801f11e:	46bd      	mov	sp, r7
 801f120:	bc80      	pop	{r7}
 801f122:	4770      	bx	lr
 801f124:	20004814 	.word	0x20004814

0801f128 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801f128:	b580      	push	{r7, lr}
 801f12a:	b086      	sub	sp, #24
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801f130:	4b1b      	ldr	r3, [pc, #108]	; (801f1a0 <UTIL_SEQ_WaitEvt+0x78>)
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801f136:	4b1a      	ldr	r3, [pc, #104]	; (801f1a0 <UTIL_SEQ_WaitEvt+0x78>)
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f13e:	d102      	bne.n	801f146 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 801f140:	2300      	movs	r3, #0
 801f142:	617b      	str	r3, [r7, #20]
 801f144:	e005      	b.n	801f152 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 801f146:	4b16      	ldr	r3, [pc, #88]	; (801f1a0 <UTIL_SEQ_WaitEvt+0x78>)
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	2201      	movs	r2, #1
 801f14c:	fa02 f303 	lsl.w	r3, r2, r3
 801f150:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801f152:	4b14      	ldr	r3, [pc, #80]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 801f158:	4a12      	ldr	r2, [pc, #72]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 801f15e:	e005      	b.n	801f16c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 801f160:	4b10      	ldr	r3, [pc, #64]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	4619      	mov	r1, r3
 801f166:	6978      	ldr	r0, [r7, #20]
 801f168:	f000 f820 	bl	801f1ac <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 801f16c:	4b0e      	ldr	r3, [pc, #56]	; (801f1a8 <UTIL_SEQ_WaitEvt+0x80>)
 801f16e:	681a      	ldr	r2, [r3, #0]
 801f170:	4b0c      	ldr	r3, [pc, #48]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	4013      	ands	r3, r2
 801f176:	2b00      	cmp	r3, #0
 801f178:	d0f2      	beq.n	801f160 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801f17a:	4a09      	ldr	r2, [pc, #36]	; (801f1a0 <UTIL_SEQ_WaitEvt+0x78>)
 801f17c:	693b      	ldr	r3, [r7, #16]
 801f17e:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 801f180:	4b08      	ldr	r3, [pc, #32]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	43da      	mvns	r2, r3
 801f186:	4b08      	ldr	r3, [pc, #32]	; (801f1a8 <UTIL_SEQ_WaitEvt+0x80>)
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	4013      	ands	r3, r2
 801f18c:	4a06      	ldr	r2, [pc, #24]	; (801f1a8 <UTIL_SEQ_WaitEvt+0x80>)
 801f18e:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 801f190:	4a04      	ldr	r2, [pc, #16]	; (801f1a4 <UTIL_SEQ_WaitEvt+0x7c>)
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	6013      	str	r3, [r2, #0]

  return;
 801f196:	bf00      	nop
}
 801f198:	3718      	adds	r7, #24
 801f19a:	46bd      	mov	sp, r7
 801f19c:	bd80      	pop	{r7, pc}
 801f19e:	bf00      	nop
 801f1a0:	2000481c 	.word	0x2000481c
 801f1a4:	20004818 	.word	0x20004818
 801f1a8:	20004814 	.word	0x20004814

0801f1ac <UTIL_SEQ_EvtIdle>:
{
  return (EvtSet & EvtWaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b082      	sub	sp, #8
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	6078      	str	r0, [r7, #4]
 801f1b4:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(~TaskId_bm);
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	43db      	mvns	r3, r3
 801f1ba:	4618      	mov	r0, r3
 801f1bc:	f7ff fe64 	bl	801ee88 <UTIL_SEQ_Run>
  return;
 801f1c0:	bf00      	nop
}
 801f1c2:	3708      	adds	r7, #8
 801f1c4:	46bd      	mov	sp, r7
 801f1c6:	bd80      	pop	{r7, pc}

0801f1c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801f1c8:	b480      	push	{r7}
 801f1ca:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f1cc:	bf00      	nop
}
 801f1ce:	46bd      	mov	sp, r7
 801f1d0:	bc80      	pop	{r7}
 801f1d2:	4770      	bx	lr

0801f1d4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801f1d4:	b480      	push	{r7}
 801f1d6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f1d8:	bf00      	nop
}
 801f1da:	46bd      	mov	sp, r7
 801f1dc:	bc80      	pop	{r7}
 801f1de:	4770      	bx	lr

0801f1e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f1e0:	b480      	push	{r7}
 801f1e2:	b085      	sub	sp, #20
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	0c1b      	lsrs	r3, r3, #16
 801f1f0:	041b      	lsls	r3, r3, #16
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d104      	bne.n	801f200 <SEQ_BitPosition+0x20>
 801f1f6:	2310      	movs	r3, #16
 801f1f8:	73fb      	strb	r3, [r7, #15]
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	041b      	lsls	r3, r3, #16
 801f1fe:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f206:	2b00      	cmp	r3, #0
 801f208:	d105      	bne.n	801f216 <SEQ_BitPosition+0x36>
 801f20a:	7bfb      	ldrb	r3, [r7, #15]
 801f20c:	3308      	adds	r3, #8
 801f20e:	73fb      	strb	r3, [r7, #15]
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	021b      	lsls	r3, r3, #8
 801f214:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d105      	bne.n	801f22c <SEQ_BitPosition+0x4c>
 801f220:	7bfb      	ldrb	r3, [r7, #15]
 801f222:	3304      	adds	r3, #4
 801f224:	73fb      	strb	r3, [r7, #15]
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	011b      	lsls	r3, r3, #4
 801f22a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	0f1b      	lsrs	r3, r3, #28
 801f230:	4a06      	ldr	r2, [pc, #24]	; (801f24c <SEQ_BitPosition+0x6c>)
 801f232:	5cd2      	ldrb	r2, [r2, r3]
 801f234:	7bfb      	ldrb	r3, [r7, #15]
 801f236:	4413      	add	r3, r2
 801f238:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f23a:	7bfb      	ldrb	r3, [r7, #15]
 801f23c:	f1c3 031f 	rsb	r3, r3, #31
 801f240:	b2db      	uxtb	r3, r3
}
 801f242:	4618      	mov	r0, r3
 801f244:	3714      	adds	r7, #20
 801f246:	46bd      	mov	sp, r7
 801f248:	bc80      	pop	{r7}
 801f24a:	4770      	bx	lr
 801f24c:	0802341c 	.word	0x0802341c

0801f250 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801f250:	b082      	sub	sp, #8
 801f252:	b480      	push	{r7}
 801f254:	b087      	sub	sp, #28
 801f256:	af00      	add	r7, sp, #0
 801f258:	60f8      	str	r0, [r7, #12]
 801f25a:	1d38      	adds	r0, r7, #4
 801f25c:	e880 0006 	stmia.w	r0, {r1, r2}
 801f260:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801f262:	2300      	movs	r3, #0
 801f264:	613b      	str	r3, [r7, #16]
 801f266:	2300      	movs	r3, #0
 801f268:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801f26a:	687a      	ldr	r2, [r7, #4]
 801f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f26e:	4413      	add	r3, r2
 801f270:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801f272:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f276:	b29a      	uxth	r2, r3
 801f278:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	4413      	add	r3, r2
 801f280:	b29b      	uxth	r3, r3
 801f282:	b21b      	sxth	r3, r3
 801f284:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801f286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f28a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f28e:	db0a      	blt.n	801f2a6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801f290:	693b      	ldr	r3, [r7, #16]
 801f292:	3301      	adds	r3, #1
 801f294:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801f296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f29a:	b29b      	uxth	r3, r3
 801f29c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801f2a0:	b29b      	uxth	r3, r3
 801f2a2:	b21b      	sxth	r3, r3
 801f2a4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f2a6:	68fb      	ldr	r3, [r7, #12]
 801f2a8:	461a      	mov	r2, r3
 801f2aa:	f107 0310 	add.w	r3, r7, #16
 801f2ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f2b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f2b6:	68f8      	ldr	r0, [r7, #12]
 801f2b8:	371c      	adds	r7, #28
 801f2ba:	46bd      	mov	sp, r7
 801f2bc:	bc80      	pop	{r7}
 801f2be:	b002      	add	sp, #8
 801f2c0:	4770      	bx	lr

0801f2c2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801f2c2:	b082      	sub	sp, #8
 801f2c4:	b480      	push	{r7}
 801f2c6:	b087      	sub	sp, #28
 801f2c8:	af00      	add	r7, sp, #0
 801f2ca:	60f8      	str	r0, [r7, #12]
 801f2cc:	1d38      	adds	r0, r7, #4
 801f2ce:	e880 0006 	stmia.w	r0, {r1, r2}
 801f2d2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	613b      	str	r3, [r7, #16]
 801f2d8:	2300      	movs	r3, #0
 801f2da:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801f2dc:	687a      	ldr	r2, [r7, #4]
 801f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2e0:	1ad3      	subs	r3, r2, r3
 801f2e2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801f2e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f2e8:	b29a      	uxth	r2, r3
 801f2ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f2ee:	b29b      	uxth	r3, r3
 801f2f0:	1ad3      	subs	r3, r2, r3
 801f2f2:	b29b      	uxth	r3, r3
 801f2f4:	b21b      	sxth	r3, r3
 801f2f6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801f2f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	da0a      	bge.n	801f316 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801f300:	693b      	ldr	r3, [r7, #16]
 801f302:	3b01      	subs	r3, #1
 801f304:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801f306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f30a:	b29b      	uxth	r3, r3
 801f30c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801f310:	b29b      	uxth	r3, r3
 801f312:	b21b      	sxth	r3, r3
 801f314:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	461a      	mov	r2, r3
 801f31a:	f107 0310 	add.w	r3, r7, #16
 801f31e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f322:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f326:	68f8      	ldr	r0, [r7, #12]
 801f328:	371c      	adds	r7, #28
 801f32a:	46bd      	mov	sp, r7
 801f32c:	bc80      	pop	{r7}
 801f32e:	b002      	add	sp, #8
 801f330:	4770      	bx	lr
	...

0801f334 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f334:	b580      	push	{r7, lr}
 801f336:	b088      	sub	sp, #32
 801f338:	af02      	add	r7, sp, #8
 801f33a:	463b      	mov	r3, r7
 801f33c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f340:	2300      	movs	r3, #0
 801f342:	60bb      	str	r3, [r7, #8]
 801f344:	2300      	movs	r3, #0
 801f346:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f348:	4b10      	ldr	r3, [pc, #64]	; (801f38c <SysTimeSet+0x58>)
 801f34a:	691b      	ldr	r3, [r3, #16]
 801f34c:	f107 0208 	add.w	r2, r7, #8
 801f350:	3204      	adds	r2, #4
 801f352:	4610      	mov	r0, r2
 801f354:	4798      	blx	r3
 801f356:	4603      	mov	r3, r0
 801f358:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f35a:	f107 0010 	add.w	r0, r7, #16
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	9300      	str	r3, [sp, #0]
 801f362:	68bb      	ldr	r3, [r7, #8]
 801f364:	463a      	mov	r2, r7
 801f366:	ca06      	ldmia	r2, {r1, r2}
 801f368:	f7ff ffab 	bl	801f2c2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f36c:	4b07      	ldr	r3, [pc, #28]	; (801f38c <SysTimeSet+0x58>)
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	693a      	ldr	r2, [r7, #16]
 801f372:	4610      	mov	r0, r2
 801f374:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f376:	4b05      	ldr	r3, [pc, #20]	; (801f38c <SysTimeSet+0x58>)
 801f378:	689b      	ldr	r3, [r3, #8]
 801f37a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f37e:	4610      	mov	r0, r2
 801f380:	4798      	blx	r3
}
 801f382:	bf00      	nop
 801f384:	3718      	adds	r7, #24
 801f386:	46bd      	mov	sp, r7
 801f388:	bd80      	pop	{r7, pc}
 801f38a:	bf00      	nop
 801f38c:	08022b28 	.word	0x08022b28

0801f390 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f390:	b580      	push	{r7, lr}
 801f392:	b08a      	sub	sp, #40	; 0x28
 801f394:	af02      	add	r7, sp, #8
 801f396:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f398:	2300      	movs	r3, #0
 801f39a:	61bb      	str	r3, [r7, #24]
 801f39c:	2300      	movs	r3, #0
 801f39e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	613b      	str	r3, [r7, #16]
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f3a8:	4b14      	ldr	r3, [pc, #80]	; (801f3fc <SysTimeGet+0x6c>)
 801f3aa:	691b      	ldr	r3, [r3, #16]
 801f3ac:	f107 0218 	add.w	r2, r7, #24
 801f3b0:	3204      	adds	r2, #4
 801f3b2:	4610      	mov	r0, r2
 801f3b4:	4798      	blx	r3
 801f3b6:	4603      	mov	r3, r0
 801f3b8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f3ba:	4b10      	ldr	r3, [pc, #64]	; (801f3fc <SysTimeGet+0x6c>)
 801f3bc:	68db      	ldr	r3, [r3, #12]
 801f3be:	4798      	blx	r3
 801f3c0:	4603      	mov	r3, r0
 801f3c2:	b21b      	sxth	r3, r3
 801f3c4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f3c6:	4b0d      	ldr	r3, [pc, #52]	; (801f3fc <SysTimeGet+0x6c>)
 801f3c8:	685b      	ldr	r3, [r3, #4]
 801f3ca:	4798      	blx	r3
 801f3cc:	4603      	mov	r3, r0
 801f3ce:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f3d0:	f107 0010 	add.w	r0, r7, #16
 801f3d4:	69fb      	ldr	r3, [r7, #28]
 801f3d6:	9300      	str	r3, [sp, #0]
 801f3d8:	69bb      	ldr	r3, [r7, #24]
 801f3da:	f107 0208 	add.w	r2, r7, #8
 801f3de:	ca06      	ldmia	r2, {r1, r2}
 801f3e0:	f7ff ff36 	bl	801f250 <SysTimeAdd>

  return sysTime;
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	461a      	mov	r2, r3
 801f3e8:	f107 0310 	add.w	r3, r7, #16
 801f3ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f3f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f3f4:	6878      	ldr	r0, [r7, #4]
 801f3f6:	3720      	adds	r7, #32
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	bd80      	pop	{r7, pc}
 801f3fc:	08022b28 	.word	0x08022b28

0801f400 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f400:	b580      	push	{r7, lr}
 801f402:	b084      	sub	sp, #16
 801f404:	af00      	add	r7, sp, #0
 801f406:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f408:	2300      	movs	r3, #0
 801f40a:	60bb      	str	r3, [r7, #8]
 801f40c:	2300      	movs	r3, #0
 801f40e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f410:	4b0a      	ldr	r3, [pc, #40]	; (801f43c <SysTimeGetMcuTime+0x3c>)
 801f412:	691b      	ldr	r3, [r3, #16]
 801f414:	f107 0208 	add.w	r2, r7, #8
 801f418:	3204      	adds	r2, #4
 801f41a:	4610      	mov	r0, r2
 801f41c:	4798      	blx	r3
 801f41e:	4603      	mov	r3, r0
 801f420:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	461a      	mov	r2, r3
 801f426:	f107 0308 	add.w	r3, r7, #8
 801f42a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f42e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f432:	6878      	ldr	r0, [r7, #4]
 801f434:	3710      	adds	r7, #16
 801f436:	46bd      	mov	sp, r7
 801f438:	bd80      	pop	{r7, pc}
 801f43a:	bf00      	nop
 801f43c:	08022b28 	.word	0x08022b28

0801f440 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f440:	b580      	push	{r7, lr}
 801f442:	b088      	sub	sp, #32
 801f444:	af02      	add	r7, sp, #8
 801f446:	463b      	mov	r3, r7
 801f448:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f44c:	4b0f      	ldr	r3, [pc, #60]	; (801f48c <SysTimeToMs+0x4c>)
 801f44e:	68db      	ldr	r3, [r3, #12]
 801f450:	4798      	blx	r3
 801f452:	4603      	mov	r3, r0
 801f454:	b21b      	sxth	r3, r3
 801f456:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f458:	4b0c      	ldr	r3, [pc, #48]	; (801f48c <SysTimeToMs+0x4c>)
 801f45a:	685b      	ldr	r3, [r3, #4]
 801f45c:	4798      	blx	r3
 801f45e:	4603      	mov	r3, r0
 801f460:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f462:	f107 0008 	add.w	r0, r7, #8
 801f466:	697b      	ldr	r3, [r7, #20]
 801f468:	9300      	str	r3, [sp, #0]
 801f46a:	693b      	ldr	r3, [r7, #16]
 801f46c:	463a      	mov	r2, r7
 801f46e:	ca06      	ldmia	r2, {r1, r2}
 801f470:	f7ff ff27 	bl	801f2c2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f474:	68bb      	ldr	r3, [r7, #8]
 801f476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f47a:	fb02 f303 	mul.w	r3, r2, r3
 801f47e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f482:	4413      	add	r3, r2
}
 801f484:	4618      	mov	r0, r3
 801f486:	3718      	adds	r7, #24
 801f488:	46bd      	mov	sp, r7
 801f48a:	bd80      	pop	{r7, pc}
 801f48c:	08022b28 	.word	0x08022b28

0801f490 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f490:	b580      	push	{r7, lr}
 801f492:	b08a      	sub	sp, #40	; 0x28
 801f494:	af02      	add	r7, sp, #8
 801f496:	6078      	str	r0, [r7, #4]
 801f498:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f49a:	683b      	ldr	r3, [r7, #0]
 801f49c:	4a19      	ldr	r2, [pc, #100]	; (801f504 <SysTimeFromMs+0x74>)
 801f49e:	fba2 2303 	umull	r2, r3, r2, r3
 801f4a2:	099b      	lsrs	r3, r3, #6
 801f4a4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f4a6:	69fb      	ldr	r3, [r7, #28]
 801f4a8:	617b      	str	r3, [r7, #20]
 801f4aa:	683b      	ldr	r3, [r7, #0]
 801f4ac:	b29a      	uxth	r2, r3
 801f4ae:	69fb      	ldr	r3, [r7, #28]
 801f4b0:	b29b      	uxth	r3, r3
 801f4b2:	4619      	mov	r1, r3
 801f4b4:	0149      	lsls	r1, r1, #5
 801f4b6:	1ac9      	subs	r1, r1, r3
 801f4b8:	0089      	lsls	r1, r1, #2
 801f4ba:	440b      	add	r3, r1
 801f4bc:	00db      	lsls	r3, r3, #3
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	1ad3      	subs	r3, r2, r3
 801f4c2:	b29b      	uxth	r3, r3
 801f4c4:	b21b      	sxth	r3, r3
 801f4c6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f4c8:	f107 030c 	add.w	r3, r7, #12
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	601a      	str	r2, [r3, #0]
 801f4d0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f4d2:	4b0d      	ldr	r3, [pc, #52]	; (801f508 <SysTimeFromMs+0x78>)
 801f4d4:	68db      	ldr	r3, [r3, #12]
 801f4d6:	4798      	blx	r3
 801f4d8:	4603      	mov	r3, r0
 801f4da:	b21b      	sxth	r3, r3
 801f4dc:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f4de:	4b0a      	ldr	r3, [pc, #40]	; (801f508 <SysTimeFromMs+0x78>)
 801f4e0:	685b      	ldr	r3, [r3, #4]
 801f4e2:	4798      	blx	r3
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f4e8:	6878      	ldr	r0, [r7, #4]
 801f4ea:	693b      	ldr	r3, [r7, #16]
 801f4ec:	9300      	str	r3, [sp, #0]
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	f107 0214 	add.w	r2, r7, #20
 801f4f4:	ca06      	ldmia	r2, {r1, r2}
 801f4f6:	f7ff feab 	bl	801f250 <SysTimeAdd>
}
 801f4fa:	6878      	ldr	r0, [r7, #4]
 801f4fc:	3720      	adds	r7, #32
 801f4fe:	46bd      	mov	sp, r7
 801f500:	bd80      	pop	{r7, pc}
 801f502:	bf00      	nop
 801f504:	10624dd3 	.word	0x10624dd3
 801f508:	08022b28 	.word	0x08022b28

0801f50c <SysTimeLocalTime>:
        ( ( uint32_t )localtime->tm_hour * TM_SECONDS_IN_1HOUR ) );
  return nbsecs - CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS;
}

void SysTimeLocalTime( const uint32_t timestamp, struct tm *localtime )
{
 801f50c:	b590      	push	{r4, r7, lr}
 801f50e:	b08d      	sub	sp, #52	; 0x34
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
 801f514:	6039      	str	r1, [r7, #0]
  uint32_t correctionMonth[4] =
 801f516:	4b54      	ldr	r3, [pc, #336]	; (801f668 <SysTimeLocalTime+0x15c>)
 801f518:	f107 041c 	add.w	r4, r7, #28
 801f51c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f51e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    DAYS_IN_MONTH_CORRECTION_LEAP,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM
  };
  uint32_t weekDays = 1; // Monday 1st January 1968
 801f522:	2301      	movs	r3, #1
 801f524:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t minutes;
  uint32_t days;
  uint32_t divOut;
  uint32_t divReminder;

  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 801f526:	687a      	ldr	r2, [r7, #4]
 801f528:	4b50      	ldr	r3, [pc, #320]	; (801f66c <SysTimeLocalTime+0x160>)
 801f52a:	4413      	add	r3, r2
 801f52c:	f107 0218 	add.w	r2, r7, #24
 801f530:	f107 0110 	add.w	r1, r7, #16
 801f534:	4618      	mov	r0, r3
 801f536:	f000 f8ef 	bl	801f718 <CalendarDiv86400>

  // Calculates seconds
  CalendarDiv60( seconds, &minutes, &divReminder );
 801f53a:	69bb      	ldr	r3, [r7, #24]
 801f53c:	f107 0208 	add.w	r2, r7, #8
 801f540:	f107 0114 	add.w	r1, r7, #20
 801f544:	4618      	mov	r0, r3
 801f546:	f000 f95b 	bl	801f800 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 801f54a:	68bb      	ldr	r3, [r7, #8]
 801f54c:	b2db      	uxtb	r3, r3
 801f54e:	461a      	mov	r2, r3
 801f550:	683b      	ldr	r3, [r7, #0]
 801f552:	601a      	str	r2, [r3, #0]

  // Calculates minutes and hours
  CalendarDiv60( minutes, &divOut, &divReminder);
 801f554:	697b      	ldr	r3, [r7, #20]
 801f556:	f107 0208 	add.w	r2, r7, #8
 801f55a:	f107 010c 	add.w	r1, r7, #12
 801f55e:	4618      	mov	r0, r3
 801f560:	f000 f94e 	bl	801f800 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 801f564:	68bb      	ldr	r3, [r7, #8]
 801f566:	b2db      	uxtb	r3, r3
 801f568:	461a      	mov	r2, r3
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	605a      	str	r2, [r3, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 801f56e:	68fb      	ldr	r3, [r7, #12]
 801f570:	b2db      	uxtb	r3, r3
 801f572:	461a      	mov	r2, r3
 801f574:	683b      	ldr	r3, [r7, #0]
 801f576:	609a      	str	r2, [r3, #8]

  // Calculates year
  localtime->tm_year = DIV_365_25( days );
 801f578:	693b      	ldr	r3, [r7, #16]
 801f57a:	4a3d      	ldr	r2, [pc, #244]	; (801f670 <SysTimeLocalTime+0x164>)
 801f57c:	fb02 f303 	mul.w	r3, r2, r3
 801f580:	f503 43b1 	add.w	r3, r3, #22656	; 0x5880
 801f584:	335e      	adds	r3, #94	; 0x5e
 801f586:	0e5b      	lsrs	r3, r3, #25
 801f588:	461a      	mov	r2, r3
 801f58a:	683b      	ldr	r3, [r7, #0]
 801f58c:	615a      	str	r2, [r3, #20]
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 801f58e:	693a      	ldr	r2, [r7, #16]
 801f590:	683b      	ldr	r3, [r7, #0]
 801f592:	695b      	ldr	r3, [r3, #20]
 801f594:	4619      	mov	r1, r3
 801f596:	f240 53b5 	movw	r3, #1461	; 0x5b5
 801f59a:	fb01 f303 	mul.w	r3, r1, r3
 801f59e:	3303      	adds	r3, #3
 801f5a0:	089b      	lsrs	r3, r3, #2
 801f5a2:	1ad3      	subs	r3, r2, r3
 801f5a4:	613b      	str	r3, [r7, #16]

  localtime->tm_yday = days;
 801f5a6:	693b      	ldr	r3, [r7, #16]
 801f5a8:	461a      	mov	r2, r3
 801f5aa:	683b      	ldr	r3, [r7, #0]
 801f5ac:	61da      	str	r2, [r3, #28]

  // Calculates month
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 801f5ae:	693a      	ldr	r2, [r7, #16]
 801f5b0:	683b      	ldr	r3, [r7, #0]
 801f5b2:	695b      	ldr	r3, [r3, #20]
 801f5b4:	4619      	mov	r1, r3
 801f5b6:	4610      	mov	r0, r2
 801f5b8:	f000 f85e 	bl	801f678 <CalendarGetMonth>
 801f5bc:	4603      	mov	r3, r0
 801f5be:	461a      	mov	r2, r3
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	611a      	str	r2, [r3, #16]

  // calculates weekdays
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	695a      	ldr	r2, [r3, #20]
 801f5c8:	4613      	mov	r3, r2
 801f5ca:	009b      	lsls	r3, r3, #2
 801f5cc:	4413      	add	r3, r2
 801f5ce:	3303      	adds	r3, #3
 801f5d0:	109b      	asrs	r3, r3, #2
 801f5d2:	461a      	mov	r2, r3
 801f5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5d6:	4413      	add	r3, r2
 801f5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  weekDays += days;
 801f5da:	693b      	ldr	r3, [r7, #16]
 801f5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5de:	4413      	add	r3, r2
 801f5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  localtime->tm_wday = MODULO_7( weekDays );
 801f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e4:	3301      	adds	r3, #1
 801f5e6:	4a23      	ldr	r2, [pc, #140]	; (801f674 <SysTimeLocalTime+0x168>)
 801f5e8:	fb02 f303 	mul.w	r3, r2, r3
 801f5ec:	0d5a      	lsrs	r2, r3, #21
 801f5ee:	4613      	mov	r3, r2
 801f5f0:	00db      	lsls	r3, r3, #3
 801f5f2:	1a9b      	subs	r3, r3, r2
 801f5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5f6:	1ad3      	subs	r3, r2, r3
 801f5f8:	461a      	mov	r2, r3
 801f5fa:	683b      	ldr	r3, [r7, #0]
 801f5fc:	619a      	str	r2, [r3, #24]

  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	695b      	ldr	r3, [r3, #20]
 801f602:	425a      	negs	r2, r3
 801f604:	f003 0303 	and.w	r3, r3, #3
 801f608:	f002 0203 	and.w	r2, r2, #3
 801f60c:	bf58      	it	pl
 801f60e:	4253      	negpl	r3, r2
 801f610:	009b      	lsls	r3, r3, #2
 801f612:	3330      	adds	r3, #48	; 0x30
 801f614:	443b      	add	r3, r7
 801f616:	f853 2c14 	ldr.w	r2, [r3, #-20]
 801f61a:	683b      	ldr	r3, [r7, #0]
 801f61c:	691b      	ldr	r3, [r3, #16]
 801f61e:	005b      	lsls	r3, r3, #1
 801f620:	fa22 f303 	lsr.w	r3, r2, r3
 801f624:	f003 0103 	and.w	r1, r3, #3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 801f628:	683b      	ldr	r3, [r7, #0]
 801f62a:	691a      	ldr	r2, [r3, #16]
 801f62c:	4613      	mov	r3, r2
 801f62e:	011b      	lsls	r3, r3, #4
 801f630:	1a9b      	subs	r3, r3, r2
 801f632:	009b      	lsls	r3, r3, #2
 801f634:	4413      	add	r3, r2
 801f636:	3301      	adds	r3, #1
 801f638:	105b      	asrs	r3, r3, #1
 801f63a:	1aca      	subs	r2, r1, r3
 801f63c:	693b      	ldr	r3, [r7, #16]
 801f63e:	4413      	add	r3, r2
 801f640:	613b      	str	r3, [r7, #16]

  // Convert 0 to 1 indexed.
  localtime->tm_mday = days + 1;
 801f642:	693b      	ldr	r3, [r7, #16]
 801f644:	3301      	adds	r3, #1
 801f646:	461a      	mov	r2, r3
 801f648:	683b      	ldr	r3, [r7, #0]
 801f64a:	60da      	str	r2, [r3, #12]

  localtime->tm_year += CALC_REF_YEAR;
 801f64c:	683b      	ldr	r3, [r7, #0]
 801f64e:	695b      	ldr	r3, [r3, #20]
 801f650:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	615a      	str	r2, [r3, #20]

  localtime->tm_isdst = -1;
 801f658:	683b      	ldr	r3, [r7, #0]
 801f65a:	f04f 32ff 	mov.w	r2, #4294967295
 801f65e:	621a      	str	r2, [r3, #32]
}
 801f660:	bf00      	nop
 801f662:	3734      	adds	r7, #52	; 0x34
 801f664:	46bd      	mov	sp, r7
 801f666:	bd90      	pop	{r4, r7, pc}
 801f668:	080229f4 	.word	0x080229f4
 801f66c:	03c3b880 	.word	0x03c3b880
 801f670:	000166db 	.word	0x000166db
 801f674:	00049249 	.word	0x00049249

0801f678 <CalendarGetMonth>:
  *  @addtogroup SYSTIME_private_function
  *
  *  @{
  */
static uint32_t CalendarGetMonth( uint32_t days, uint32_t year )
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b084      	sub	sp, #16
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
 801f680:	6039      	str	r1, [r7, #0]
  uint32_t month;
  if( ( year % 4 ) == 0 )
 801f682:	683b      	ldr	r3, [r7, #0]
 801f684:	f003 0303 	and.w	r3, r3, #3
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d120      	bne.n	801f6ce <CalendarGetMonth+0x56>
  {   /*leap year*/
    if( days < END_OF_FEBRUARY_LEAP )
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	2b3b      	cmp	r3, #59	; 0x3b
 801f690:	d806      	bhi.n	801f6a0 <CalendarGetMonth+0x28>
    {   // January or February
      // month =  days * 2 / ( 30 + 31 );
      month = CalendarDiv61( days * 2 );
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	005b      	lsls	r3, r3, #1
 801f696:	4618      	mov	r0, r3
 801f698:	f000 f87e 	bl	801f798 <CalendarDiv61>
 801f69c:	60f8      	str	r0, [r7, #12]
 801f69e:	e036      	b.n	801f70e <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_LEAP )
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	2bd4      	cmp	r3, #212	; 0xd4
 801f6a4:	d809      	bhi.n	801f6ba <CalendarGetMonth+0x42>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	3b3c      	subs	r3, #60	; 0x3c
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f000 f873 	bl	801f798 <CalendarDiv61>
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	3302      	adds	r3, #2
 801f6b6:	60fb      	str	r3, [r7, #12]
 801f6b8:	e029      	b.n	801f70e <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	3bd5      	subs	r3, #213	; 0xd5
 801f6be:	005b      	lsls	r3, r3, #1
 801f6c0:	4618      	mov	r0, r3
 801f6c2:	f000 f869 	bl	801f798 <CalendarDiv61>
 801f6c6:	4603      	mov	r3, r0
 801f6c8:	3307      	adds	r3, #7
 801f6ca:	60fb      	str	r3, [r7, #12]
 801f6cc:	e01f      	b.n	801f70e <CalendarGetMonth+0x96>
    }
  }
  else
  {
    if( days < END_OF_FEBRUARY_NORM )
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	2b3a      	cmp	r3, #58	; 0x3a
 801f6d2:	d806      	bhi.n	801f6e2 <CalendarGetMonth+0x6a>
    {   // January or February
      month = CalendarDiv61( days * 2 );
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	005b      	lsls	r3, r3, #1
 801f6d8:	4618      	mov	r0, r3
 801f6da:	f000 f85d 	bl	801f798 <CalendarDiv61>
 801f6de:	60f8      	str	r0, [r7, #12]
 801f6e0:	e015      	b.n	801f70e <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_NORM )
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	2bd3      	cmp	r3, #211	; 0xd3
 801f6e6:	d809      	bhi.n	801f6fc <CalendarGetMonth+0x84>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	3b3b      	subs	r3, #59	; 0x3b
 801f6ec:	005b      	lsls	r3, r3, #1
 801f6ee:	4618      	mov	r0, r3
 801f6f0:	f000 f852 	bl	801f798 <CalendarDiv61>
 801f6f4:	4603      	mov	r3, r0
 801f6f6:	3302      	adds	r3, #2
 801f6f8:	60fb      	str	r3, [r7, #12]
 801f6fa:	e008      	b.n	801f70e <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	3bd4      	subs	r3, #212	; 0xd4
 801f700:	005b      	lsls	r3, r3, #1
 801f702:	4618      	mov	r0, r3
 801f704:	f000 f848 	bl	801f798 <CalendarDiv61>
 801f708:	4603      	mov	r3, r0
 801f70a:	3307      	adds	r3, #7
 801f70c:	60fb      	str	r3, [r7, #12]
    }
  }
  return month;
 801f70e:	68fb      	ldr	r3, [r7, #12]
}
 801f710:	4618      	mov	r0, r3
 801f712:	3710      	adds	r7, #16
 801f714:	46bd      	mov	sp, r7
 801f716:	bd80      	pop	{r7, pc}

0801f718 <CalendarDiv86400>:

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801f718:	b480      	push	{r7}
 801f71a:	b087      	sub	sp, #28
 801f71c:	af00      	add	r7, sp, #0
 801f71e:	60f8      	str	r0, [r7, #12]
 801f720:	60b9      	str	r1, [r7, #8]
 801f722:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
 801f724:	2300      	movs	r3, #0
 801f726:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_86400( in );
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	0c9a      	lsrs	r2, r3, #18
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	0c5b      	lsrs	r3, r3, #17
 801f730:	4413      	add	r3, r2
 801f732:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801f734:	e010      	b.n	801f758 <CalendarDiv86400+0x40>
  {
    outTemp += divResult;
 801f736:	697a      	ldr	r2, [r7, #20]
 801f738:	693b      	ldr	r3, [r7, #16]
 801f73a:	4413      	add	r3, r2
 801f73c:	617b      	str	r3, [r7, #20]
    in -= divResult * 86400;
 801f73e:	693b      	ldr	r3, [r7, #16]
 801f740:	4a13      	ldr	r2, [pc, #76]	; (801f790 <CalendarDiv86400+0x78>)
 801f742:	fb02 f303 	mul.w	r3, r2, r3
 801f746:	68fa      	ldr	r2, [r7, #12]
 801f748:	1ad3      	subs	r3, r2, r3
 801f74a:	60fb      	str	r3, [r7, #12]
    divResult= DIV_APPROX_86400( in );
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	0c9a      	lsrs	r2, r3, #18
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	0c5b      	lsrs	r3, r3, #17
 801f754:	4413      	add	r3, r2
 801f756:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801f758:	693b      	ldr	r3, [r7, #16]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d1eb      	bne.n	801f736 <CalendarDiv86400+0x1e>
  }
  if( in >= 86400 )
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	4a0c      	ldr	r2, [pc, #48]	; (801f794 <CalendarDiv86400+0x7c>)
 801f762:	4293      	cmp	r3, r2
 801f764:	d908      	bls.n	801f778 <CalendarDiv86400+0x60>
  {
    outTemp += 1;
 801f766:	697b      	ldr	r3, [r7, #20]
 801f768:	3301      	adds	r3, #1
 801f76a:	617b      	str	r3, [r7, #20]
    in -= 86400;
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 801f772:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801f776:	60fb      	str	r3, [r7, #12]
  }

  *remainder = in;
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	68fa      	ldr	r2, [r7, #12]
 801f77c:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801f77e:	68bb      	ldr	r3, [r7, #8]
 801f780:	697a      	ldr	r2, [r7, #20]
 801f782:	601a      	str	r2, [r3, #0]
#endif
}
 801f784:	bf00      	nop
 801f786:	371c      	adds	r7, #28
 801f788:	46bd      	mov	sp, r7
 801f78a:	bc80      	pop	{r7}
 801f78c:	4770      	bx	lr
 801f78e:	bf00      	nop
 801f790:	00015180 	.word	0x00015180
 801f794:	0001517f 	.word	0x0001517f

0801f798 <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 801f798:	b480      	push	{r7}
 801f79a:	b085      	sub	sp, #20
 801f79c:	af00      	add	r7, sp, #0
 801f79e:	6078      	str	r0, [r7, #4]
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	60fb      	str	r3, [r7, #12]
  uint32_t divResult = DIV_APPROX_61( in );
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	4a15      	ldr	r2, [pc, #84]	; (801f7fc <CalendarDiv61+0x64>)
 801f7a8:	fb02 f303 	mul.w	r3, r2, r3
 801f7ac:	0d9b      	lsrs	r3, r3, #22
 801f7ae:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801f7b0:	e012      	b.n	801f7d8 <CalendarDiv61+0x40>
  {
    outTemp += divResult;
 801f7b2:	68fa      	ldr	r2, [r7, #12]
 801f7b4:	68bb      	ldr	r3, [r7, #8]
 801f7b6:	4413      	add	r3, r2
 801f7b8:	60fb      	str	r3, [r7, #12]
    in -= divResult * 61;
 801f7ba:	68ba      	ldr	r2, [r7, #8]
 801f7bc:	4613      	mov	r3, r2
 801f7be:	011b      	lsls	r3, r3, #4
 801f7c0:	1a9b      	subs	r3, r3, r2
 801f7c2:	009b      	lsls	r3, r3, #2
 801f7c4:	4413      	add	r3, r2
 801f7c6:	687a      	ldr	r2, [r7, #4]
 801f7c8:	1ad3      	subs	r3, r2, r3
 801f7ca:	607b      	str	r3, [r7, #4]
    divResult = DIV_APPROX_61( in );
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	4a0b      	ldr	r2, [pc, #44]	; (801f7fc <CalendarDiv61+0x64>)
 801f7d0:	fb02 f303 	mul.w	r3, r2, r3
 801f7d4:	0d9b      	lsrs	r3, r3, #22
 801f7d6:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801f7d8:	68bb      	ldr	r3, [r7, #8]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d1e9      	bne.n	801f7b2 <CalendarDiv61+0x1a>
  }
  if( in >= 61 )
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2b3c      	cmp	r3, #60	; 0x3c
 801f7e2:	d905      	bls.n	801f7f0 <CalendarDiv61+0x58>
  {
    outTemp += 1;
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	3301      	adds	r3, #1
 801f7e8:	60fb      	str	r3, [r7, #12]
    in -= 61;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	3b3d      	subs	r3, #61	; 0x3d
 801f7ee:	607b      	str	r3, [r7, #4]
  }
  return outTemp;
 801f7f0:	68fb      	ldr	r3, [r7, #12]
#endif
}
 801f7f2:	4618      	mov	r0, r3
 801f7f4:	3714      	adds	r7, #20
 801f7f6:	46bd      	mov	sp, r7
 801f7f8:	bc80      	pop	{r7}
 801f7fa:	4770      	bx	lr
 801f7fc:	00010c97 	.word	0x00010c97

0801f800 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801f800:	b480      	push	{r7}
 801f802:	b087      	sub	sp, #28
 801f804:	af00      	add	r7, sp, #0
 801f806:	60f8      	str	r0, [r7, #12]
 801f808:	60b9      	str	r1, [r7, #8]
 801f80a:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
 801f80c:	2300      	movs	r3, #0
 801f80e:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_60( in );
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	f244 4244 	movw	r2, #17476	; 0x4444
 801f816:	fb02 f303 	mul.w	r3, r2, r3
 801f81a:	0d1b      	lsrs	r3, r3, #20
 801f81c:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801f81e:	e013      	b.n	801f848 <CalendarDiv60+0x48>
  {
    outTemp += divResult;
 801f820:	697a      	ldr	r2, [r7, #20]
 801f822:	693b      	ldr	r3, [r7, #16]
 801f824:	4413      	add	r3, r2
 801f826:	617b      	str	r3, [r7, #20]
    in -= divResult * 60;
 801f828:	693a      	ldr	r2, [r7, #16]
 801f82a:	4613      	mov	r3, r2
 801f82c:	011b      	lsls	r3, r3, #4
 801f82e:	1a9b      	subs	r3, r3, r2
 801f830:	009b      	lsls	r3, r3, #2
 801f832:	461a      	mov	r2, r3
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	1a9b      	subs	r3, r3, r2
 801f838:	60fb      	str	r3, [r7, #12]
    divResult = DIV_APPROX_60( in );
 801f83a:	68fb      	ldr	r3, [r7, #12]
 801f83c:	f244 4244 	movw	r2, #17476	; 0x4444
 801f840:	fb02 f303 	mul.w	r3, r2, r3
 801f844:	0d1b      	lsrs	r3, r3, #20
 801f846:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801f848:	693b      	ldr	r3, [r7, #16]
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d1e8      	bne.n	801f820 <CalendarDiv60+0x20>
  }
  if( in >= 60 )
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	2b3b      	cmp	r3, #59	; 0x3b
 801f852:	d905      	bls.n	801f860 <CalendarDiv60+0x60>
  {
    outTemp += 1;
 801f854:	697b      	ldr	r3, [r7, #20]
 801f856:	3301      	adds	r3, #1
 801f858:	617b      	str	r3, [r7, #20]
    in -= 60;
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	3b3c      	subs	r3, #60	; 0x3c
 801f85e:	60fb      	str	r3, [r7, #12]
  }
  *remainder = in;
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	68fa      	ldr	r2, [r7, #12]
 801f864:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801f866:	68bb      	ldr	r3, [r7, #8]
 801f868:	697a      	ldr	r2, [r7, #20]
 801f86a:	601a      	str	r2, [r3, #0]
#endif
}
 801f86c:	bf00      	nop
 801f86e:	371c      	adds	r7, #28
 801f870:	46bd      	mov	sp, r7
 801f872:	bc80      	pop	{r7}
 801f874:	4770      	bx	lr
	...

0801f878 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f878:	b580      	push	{r7, lr}
 801f87a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f87c:	4b04      	ldr	r3, [pc, #16]	; (801f890 <UTIL_TIMER_Init+0x18>)
 801f87e:	2200      	movs	r2, #0
 801f880:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f882:	4b04      	ldr	r3, [pc, #16]	; (801f894 <UTIL_TIMER_Init+0x1c>)
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	4798      	blx	r3
 801f888:	4603      	mov	r3, r0
}
 801f88a:	4618      	mov	r0, r3
 801f88c:	bd80      	pop	{r7, pc}
 801f88e:	bf00      	nop
 801f890:	200048b0 	.word	0x200048b0
 801f894:	08022afc 	.word	0x08022afc

0801f898 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f898:	b580      	push	{r7, lr}
 801f89a:	b084      	sub	sp, #16
 801f89c:	af00      	add	r7, sp, #0
 801f89e:	60f8      	str	r0, [r7, #12]
 801f8a0:	60b9      	str	r1, [r7, #8]
 801f8a2:	603b      	str	r3, [r7, #0]
 801f8a4:	4613      	mov	r3, r2
 801f8a6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d023      	beq.n	801f8f6 <UTIL_TIMER_Create+0x5e>
 801f8ae:	683b      	ldr	r3, [r7, #0]
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	d020      	beq.n	801f8f6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	2200      	movs	r2, #0
 801f8b8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f8ba:	4b11      	ldr	r3, [pc, #68]	; (801f900 <UTIL_TIMER_Create+0x68>)
 801f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8be:	68b8      	ldr	r0, [r7, #8]
 801f8c0:	4798      	blx	r3
 801f8c2:	4602      	mov	r2, r0
 801f8c4:	68fb      	ldr	r3, [r7, #12]
 801f8c6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	2200      	movs	r2, #0
 801f8d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f8d4:	68fb      	ldr	r3, [r7, #12]
 801f8d6:	2200      	movs	r2, #0
 801f8d8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	683a      	ldr	r2, [r7, #0]
 801f8de:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	69ba      	ldr	r2, [r7, #24]
 801f8e4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	79fa      	ldrb	r2, [r7, #7]
 801f8ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	2200      	movs	r2, #0
 801f8f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f8f2:	2300      	movs	r3, #0
 801f8f4:	e000      	b.n	801f8f8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f8f6:	2301      	movs	r3, #1
  }
}
 801f8f8:	4618      	mov	r0, r3
 801f8fa:	3710      	adds	r7, #16
 801f8fc:	46bd      	mov	sp, r7
 801f8fe:	bd80      	pop	{r7, pc}
 801f900:	08022afc 	.word	0x08022afc

0801f904 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f904:	b580      	push	{r7, lr}
 801f906:	b08a      	sub	sp, #40	; 0x28
 801f908:	af00      	add	r7, sp, #0
 801f90a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f90c:	2300      	movs	r3, #0
 801f90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	2b00      	cmp	r3, #0
 801f916:	d056      	beq.n	801f9c6 <UTIL_TIMER_Start+0xc2>
 801f918:	6878      	ldr	r0, [r7, #4]
 801f91a:	f000 f9a9 	bl	801fc70 <TimerExists>
 801f91e:	4603      	mov	r3, r0
 801f920:	f083 0301 	eor.w	r3, r3, #1
 801f924:	b2db      	uxtb	r3, r3
 801f926:	2b00      	cmp	r3, #0
 801f928:	d04d      	beq.n	801f9c6 <UTIL_TIMER_Start+0xc2>
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	7a5b      	ldrb	r3, [r3, #9]
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d149      	bne.n	801f9c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f932:	f3ef 8310 	mrs	r3, PRIMASK
 801f936:	613b      	str	r3, [r7, #16]
  return(result);
 801f938:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f93a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f93c:	b672      	cpsid	i
}
 801f93e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	685b      	ldr	r3, [r3, #4]
 801f944:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f946:	4b24      	ldr	r3, [pc, #144]	; (801f9d8 <UTIL_TIMER_Start+0xd4>)
 801f948:	6a1b      	ldr	r3, [r3, #32]
 801f94a:	4798      	blx	r3
 801f94c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f94e:	6a3a      	ldr	r2, [r7, #32]
 801f950:	69bb      	ldr	r3, [r7, #24]
 801f952:	429a      	cmp	r2, r3
 801f954:	d201      	bcs.n	801f95a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f956:	69bb      	ldr	r3, [r7, #24]
 801f958:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	6a3a      	ldr	r2, [r7, #32]
 801f95e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	2200      	movs	r2, #0
 801f964:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	2201      	movs	r2, #1
 801f96a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	2200      	movs	r2, #0
 801f970:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f972:	4b1a      	ldr	r3, [pc, #104]	; (801f9dc <UTIL_TIMER_Start+0xd8>)
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	2b00      	cmp	r3, #0
 801f978:	d106      	bne.n	801f988 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f97a:	4b17      	ldr	r3, [pc, #92]	; (801f9d8 <UTIL_TIMER_Start+0xd4>)
 801f97c:	691b      	ldr	r3, [r3, #16]
 801f97e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f980:	6878      	ldr	r0, [r7, #4]
 801f982:	f000 f9eb 	bl	801fd5c <TimerInsertNewHeadTimer>
 801f986:	e017      	b.n	801f9b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f988:	4b13      	ldr	r3, [pc, #76]	; (801f9d8 <UTIL_TIMER_Start+0xd4>)
 801f98a:	699b      	ldr	r3, [r3, #24]
 801f98c:	4798      	blx	r3
 801f98e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	681a      	ldr	r2, [r3, #0]
 801f994:	697b      	ldr	r3, [r7, #20]
 801f996:	441a      	add	r2, r3
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	681a      	ldr	r2, [r3, #0]
 801f9a0:	4b0e      	ldr	r3, [pc, #56]	; (801f9dc <UTIL_TIMER_Start+0xd8>)
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	429a      	cmp	r2, r3
 801f9a8:	d203      	bcs.n	801f9b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f9aa:	6878      	ldr	r0, [r7, #4]
 801f9ac:	f000 f9d6 	bl	801fd5c <TimerInsertNewHeadTimer>
 801f9b0:	e002      	b.n	801f9b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f9b2:	6878      	ldr	r0, [r7, #4]
 801f9b4:	f000 f9a2 	bl	801fcfc <TimerInsertTimer>
 801f9b8:	69fb      	ldr	r3, [r7, #28]
 801f9ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	f383 8810 	msr	PRIMASK, r3
}
 801f9c2:	bf00      	nop
  {
 801f9c4:	e002      	b.n	801f9cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801f9c6:	2301      	movs	r3, #1
 801f9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801f9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f9d0:	4618      	mov	r0, r3
 801f9d2:	3728      	adds	r7, #40	; 0x28
 801f9d4:	46bd      	mov	sp, r7
 801f9d6:	bd80      	pop	{r7, pc}
 801f9d8:	08022afc 	.word	0x08022afc
 801f9dc:	200048b0 	.word	0x200048b0

0801f9e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	b088      	sub	sp, #32
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d05b      	beq.n	801faaa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f9f2:	f3ef 8310 	mrs	r3, PRIMASK
 801f9f6:	60fb      	str	r3, [r7, #12]
  return(result);
 801f9f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f9fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f9fc:	b672      	cpsid	i
}
 801f9fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801fa00:	4b2d      	ldr	r3, [pc, #180]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801fa06:	4b2c      	ldr	r3, [pc, #176]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	2201      	movs	r2, #1
 801fa10:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801fa12:	4b29      	ldr	r3, [pc, #164]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d041      	beq.n	801fa9e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	2200      	movs	r2, #0
 801fa1e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801fa20:	4b25      	ldr	r3, [pc, #148]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	687a      	ldr	r2, [r7, #4]
 801fa26:	429a      	cmp	r2, r3
 801fa28:	d134      	bne.n	801fa94 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801fa2a:	4b23      	ldr	r3, [pc, #140]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	2200      	movs	r2, #0
 801fa30:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801fa32:	4b21      	ldr	r3, [pc, #132]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	695b      	ldr	r3, [r3, #20]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d00a      	beq.n	801fa52 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801fa3c:	4b1e      	ldr	r3, [pc, #120]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	695b      	ldr	r3, [r3, #20]
 801fa42:	4a1d      	ldr	r2, [pc, #116]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa44:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801fa46:	4b1c      	ldr	r3, [pc, #112]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	4618      	mov	r0, r3
 801fa4c:	f000 f92c 	bl	801fca8 <TimerSetTimeout>
 801fa50:	e023      	b.n	801fa9a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801fa52:	4b1a      	ldr	r3, [pc, #104]	; (801fabc <UTIL_TIMER_Stop+0xdc>)
 801fa54:	68db      	ldr	r3, [r3, #12]
 801fa56:	4798      	blx	r3
            TimerListHead = NULL;
 801fa58:	4b17      	ldr	r3, [pc, #92]	; (801fab8 <UTIL_TIMER_Stop+0xd8>)
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	601a      	str	r2, [r3, #0]
 801fa5e:	e01c      	b.n	801fa9a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801fa60:	697a      	ldr	r2, [r7, #20]
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	429a      	cmp	r2, r3
 801fa66:	d110      	bne.n	801fa8a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801fa68:	697b      	ldr	r3, [r7, #20]
 801fa6a:	695b      	ldr	r3, [r3, #20]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d006      	beq.n	801fa7e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801fa70:	697b      	ldr	r3, [r7, #20]
 801fa72:	695b      	ldr	r3, [r3, #20]
 801fa74:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fa76:	69bb      	ldr	r3, [r7, #24]
 801fa78:	697a      	ldr	r2, [r7, #20]
 801fa7a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801fa7c:	e00d      	b.n	801fa9a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801fa7e:	2300      	movs	r3, #0
 801fa80:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fa82:	69bb      	ldr	r3, [r7, #24]
 801fa84:	697a      	ldr	r2, [r7, #20]
 801fa86:	615a      	str	r2, [r3, #20]
            break;
 801fa88:	e007      	b.n	801fa9a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801fa8a:	697b      	ldr	r3, [r7, #20]
 801fa8c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801fa8e:	697b      	ldr	r3, [r7, #20]
 801fa90:	695b      	ldr	r3, [r3, #20]
 801fa92:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801fa94:	697b      	ldr	r3, [r7, #20]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d1e2      	bne.n	801fa60 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801fa9a:	2300      	movs	r3, #0
 801fa9c:	77fb      	strb	r3, [r7, #31]
 801fa9e:	693b      	ldr	r3, [r7, #16]
 801faa0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801faa2:	68bb      	ldr	r3, [r7, #8]
 801faa4:	f383 8810 	msr	PRIMASK, r3
}
 801faa8:	e001      	b.n	801faae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801faaa:	2301      	movs	r3, #1
 801faac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801faae:	7ffb      	ldrb	r3, [r7, #31]
}
 801fab0:	4618      	mov	r0, r3
 801fab2:	3720      	adds	r7, #32
 801fab4:	46bd      	mov	sp, r7
 801fab6:	bd80      	pop	{r7, pc}
 801fab8:	200048b0 	.word	0x200048b0
 801fabc:	08022afc 	.word	0x08022afc

0801fac0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b084      	sub	sp, #16
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
 801fac8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801faca:	2300      	movs	r3, #0
 801facc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d102      	bne.n	801fada <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801fad4:	2301      	movs	r3, #1
 801fad6:	73fb      	strb	r3, [r7, #15]
 801fad8:	e014      	b.n	801fb04 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801fada:	4b0d      	ldr	r3, [pc, #52]	; (801fb10 <UTIL_TIMER_SetPeriod+0x50>)
 801fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fade:	6838      	ldr	r0, [r7, #0]
 801fae0:	4798      	blx	r3
 801fae2:	4602      	mov	r2, r0
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801fae8:	6878      	ldr	r0, [r7, #4]
 801faea:	f000 f8c1 	bl	801fc70 <TimerExists>
 801faee:	4603      	mov	r3, r0
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d007      	beq.n	801fb04 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	f7ff ff73 	bl	801f9e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801fafa:	6878      	ldr	r0, [r7, #4]
 801fafc:	f7ff ff02 	bl	801f904 <UTIL_TIMER_Start>
 801fb00:	4603      	mov	r3, r0
 801fb02:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801fb04:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb06:	4618      	mov	r0, r3
 801fb08:	3710      	adds	r7, #16
 801fb0a:	46bd      	mov	sp, r7
 801fb0c:	bd80      	pop	{r7, pc}
 801fb0e:	bf00      	nop
 801fb10:	08022afc 	.word	0x08022afc

0801fb14 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801fb14:	b590      	push	{r4, r7, lr}
 801fb16:	b089      	sub	sp, #36	; 0x24
 801fb18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb1a:	f3ef 8310 	mrs	r3, PRIMASK
 801fb1e:	60bb      	str	r3, [r7, #8]
  return(result);
 801fb20:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fb22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fb24:	b672      	cpsid	i
}
 801fb26:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801fb28:	4b38      	ldr	r3, [pc, #224]	; (801fc0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fb2a:	695b      	ldr	r3, [r3, #20]
 801fb2c:	4798      	blx	r3
 801fb2e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801fb30:	4b36      	ldr	r3, [pc, #216]	; (801fc0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fb32:	691b      	ldr	r3, [r3, #16]
 801fb34:	4798      	blx	r3
 801fb36:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801fb38:	693a      	ldr	r2, [r7, #16]
 801fb3a:	697b      	ldr	r3, [r7, #20]
 801fb3c:	1ad3      	subs	r3, r2, r3
 801fb3e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801fb40:	4b33      	ldr	r3, [pc, #204]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d037      	beq.n	801fbb8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801fb48:	4b31      	ldr	r3, [pc, #196]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801fb4e:	69fb      	ldr	r3, [r7, #28]
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	68fa      	ldr	r2, [r7, #12]
 801fb54:	429a      	cmp	r2, r3
 801fb56:	d206      	bcs.n	801fb66 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801fb58:	69fb      	ldr	r3, [r7, #28]
 801fb5a:	681a      	ldr	r2, [r3, #0]
 801fb5c:	68fb      	ldr	r3, [r7, #12]
 801fb5e:	1ad2      	subs	r2, r2, r3
 801fb60:	69fb      	ldr	r3, [r7, #28]
 801fb62:	601a      	str	r2, [r3, #0]
 801fb64:	e002      	b.n	801fb6c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801fb66:	69fb      	ldr	r3, [r7, #28]
 801fb68:	2200      	movs	r2, #0
 801fb6a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fb6c:	69fb      	ldr	r3, [r7, #28]
 801fb6e:	695b      	ldr	r3, [r3, #20]
 801fb70:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fb72:	69fb      	ldr	r3, [r7, #28]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d1ea      	bne.n	801fb4e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fb78:	e01e      	b.n	801fbb8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fb7a:	4b25      	ldr	r3, [pc, #148]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fb80:	4b23      	ldr	r3, [pc, #140]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	695b      	ldr	r3, [r3, #20]
 801fb86:	4a22      	ldr	r2, [pc, #136]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb88:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fb8a:	69fb      	ldr	r3, [r7, #28]
 801fb8c:	2200      	movs	r2, #0
 801fb8e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fb90:	69fb      	ldr	r3, [r7, #28]
 801fb92:	2200      	movs	r2, #0
 801fb94:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fb96:	69fb      	ldr	r3, [r7, #28]
 801fb98:	68db      	ldr	r3, [r3, #12]
 801fb9a:	69fa      	ldr	r2, [r7, #28]
 801fb9c:	6912      	ldr	r2, [r2, #16]
 801fb9e:	4610      	mov	r0, r2
 801fba0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fba2:	69fb      	ldr	r3, [r7, #28]
 801fba4:	7adb      	ldrb	r3, [r3, #11]
 801fba6:	2b01      	cmp	r3, #1
 801fba8:	d106      	bne.n	801fbb8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fbaa:	69fb      	ldr	r3, [r7, #28]
 801fbac:	7a9b      	ldrb	r3, [r3, #10]
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d102      	bne.n	801fbb8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fbb2:	69f8      	ldr	r0, [r7, #28]
 801fbb4:	f7ff fea6 	bl	801f904 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fbb8:	4b15      	ldr	r3, [pc, #84]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d00d      	beq.n	801fbdc <UTIL_TIMER_IRQ_Handler+0xc8>
 801fbc0:	4b13      	ldr	r3, [pc, #76]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d0d7      	beq.n	801fb7a <UTIL_TIMER_IRQ_Handler+0x66>
 801fbca:	4b11      	ldr	r3, [pc, #68]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	681c      	ldr	r4, [r3, #0]
 801fbd0:	4b0e      	ldr	r3, [pc, #56]	; (801fc0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fbd2:	699b      	ldr	r3, [r3, #24]
 801fbd4:	4798      	blx	r3
 801fbd6:	4603      	mov	r3, r0
 801fbd8:	429c      	cmp	r4, r3
 801fbda:	d3ce      	bcc.n	801fb7a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fbdc:	4b0c      	ldr	r3, [pc, #48]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d009      	beq.n	801fbf8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801fbe4:	4b0a      	ldr	r3, [pc, #40]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	7a1b      	ldrb	r3, [r3, #8]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d104      	bne.n	801fbf8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fbee:	4b08      	ldr	r3, [pc, #32]	; (801fc10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbf0:	681b      	ldr	r3, [r3, #0]
 801fbf2:	4618      	mov	r0, r3
 801fbf4:	f000 f858 	bl	801fca8 <TimerSetTimeout>
 801fbf8:	69bb      	ldr	r3, [r7, #24]
 801fbfa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	f383 8810 	msr	PRIMASK, r3
}
 801fc02:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fc04:	bf00      	nop
 801fc06:	3724      	adds	r7, #36	; 0x24
 801fc08:	46bd      	mov	sp, r7
 801fc0a:	bd90      	pop	{r4, r7, pc}
 801fc0c:	08022afc 	.word	0x08022afc
 801fc10:	200048b0 	.word	0x200048b0

0801fc14 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fc14:	b580      	push	{r7, lr}
 801fc16:	b082      	sub	sp, #8
 801fc18:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fc1a:	4b06      	ldr	r3, [pc, #24]	; (801fc34 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fc1c:	69db      	ldr	r3, [r3, #28]
 801fc1e:	4798      	blx	r3
 801fc20:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801fc22:	4b04      	ldr	r3, [pc, #16]	; (801fc34 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc26:	6878      	ldr	r0, [r7, #4]
 801fc28:	4798      	blx	r3
 801fc2a:	4603      	mov	r3, r0
}
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	3708      	adds	r7, #8
 801fc30:	46bd      	mov	sp, r7
 801fc32:	bd80      	pop	{r7, pc}
 801fc34:	08022afc 	.word	0x08022afc

0801fc38 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fc38:	b580      	push	{r7, lr}
 801fc3a:	b084      	sub	sp, #16
 801fc3c:	af00      	add	r7, sp, #0
 801fc3e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801fc40:	4b0a      	ldr	r3, [pc, #40]	; (801fc6c <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc42:	69db      	ldr	r3, [r3, #28]
 801fc44:	4798      	blx	r3
 801fc46:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801fc48:	4b08      	ldr	r3, [pc, #32]	; (801fc6c <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc4c:	6878      	ldr	r0, [r7, #4]
 801fc4e:	4798      	blx	r3
 801fc50:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801fc52:	4b06      	ldr	r3, [pc, #24]	; (801fc6c <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc56:	68f9      	ldr	r1, [r7, #12]
 801fc58:	68ba      	ldr	r2, [r7, #8]
 801fc5a:	1a8a      	subs	r2, r1, r2
 801fc5c:	4610      	mov	r0, r2
 801fc5e:	4798      	blx	r3
 801fc60:	4603      	mov	r3, r0
}
 801fc62:	4618      	mov	r0, r3
 801fc64:	3710      	adds	r7, #16
 801fc66:	46bd      	mov	sp, r7
 801fc68:	bd80      	pop	{r7, pc}
 801fc6a:	bf00      	nop
 801fc6c:	08022afc 	.word	0x08022afc

0801fc70 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fc70:	b480      	push	{r7}
 801fc72:	b085      	sub	sp, #20
 801fc74:	af00      	add	r7, sp, #0
 801fc76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fc78:	4b0a      	ldr	r3, [pc, #40]	; (801fca4 <TimerExists+0x34>)
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fc7e:	e008      	b.n	801fc92 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fc80:	68fa      	ldr	r2, [r7, #12]
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	429a      	cmp	r2, r3
 801fc86:	d101      	bne.n	801fc8c <TimerExists+0x1c>
    {
      return true;
 801fc88:	2301      	movs	r3, #1
 801fc8a:	e006      	b.n	801fc9a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	695b      	ldr	r3, [r3, #20]
 801fc90:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801fc92:	68fb      	ldr	r3, [r7, #12]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d1f3      	bne.n	801fc80 <TimerExists+0x10>
  }
  return false;
 801fc98:	2300      	movs	r3, #0
}
 801fc9a:	4618      	mov	r0, r3
 801fc9c:	3714      	adds	r7, #20
 801fc9e:	46bd      	mov	sp, r7
 801fca0:	bc80      	pop	{r7}
 801fca2:	4770      	bx	lr
 801fca4:	200048b0 	.word	0x200048b0

0801fca8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fca8:	b590      	push	{r4, r7, lr}
 801fcaa:	b085      	sub	sp, #20
 801fcac:	af00      	add	r7, sp, #0
 801fcae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fcb0:	4b11      	ldr	r3, [pc, #68]	; (801fcf8 <TimerSetTimeout+0x50>)
 801fcb2:	6a1b      	ldr	r3, [r3, #32]
 801fcb4:	4798      	blx	r3
 801fcb6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2201      	movs	r2, #1
 801fcbc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	681c      	ldr	r4, [r3, #0]
 801fcc2:	4b0d      	ldr	r3, [pc, #52]	; (801fcf8 <TimerSetTimeout+0x50>)
 801fcc4:	699b      	ldr	r3, [r3, #24]
 801fcc6:	4798      	blx	r3
 801fcc8:	4602      	mov	r2, r0
 801fcca:	68fb      	ldr	r3, [r7, #12]
 801fccc:	4413      	add	r3, r2
 801fcce:	429c      	cmp	r4, r3
 801fcd0:	d207      	bcs.n	801fce2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fcd2:	4b09      	ldr	r3, [pc, #36]	; (801fcf8 <TimerSetTimeout+0x50>)
 801fcd4:	699b      	ldr	r3, [r3, #24]
 801fcd6:	4798      	blx	r3
 801fcd8:	4602      	mov	r2, r0
 801fcda:	68fb      	ldr	r3, [r7, #12]
 801fcdc:	441a      	add	r2, r3
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fce2:	4b05      	ldr	r3, [pc, #20]	; (801fcf8 <TimerSetTimeout+0x50>)
 801fce4:	689b      	ldr	r3, [r3, #8]
 801fce6:	687a      	ldr	r2, [r7, #4]
 801fce8:	6812      	ldr	r2, [r2, #0]
 801fcea:	4610      	mov	r0, r2
 801fcec:	4798      	blx	r3
}
 801fcee:	bf00      	nop
 801fcf0:	3714      	adds	r7, #20
 801fcf2:	46bd      	mov	sp, r7
 801fcf4:	bd90      	pop	{r4, r7, pc}
 801fcf6:	bf00      	nop
 801fcf8:	08022afc 	.word	0x08022afc

0801fcfc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fcfc:	b480      	push	{r7}
 801fcfe:	b085      	sub	sp, #20
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fd04:	4b14      	ldr	r3, [pc, #80]	; (801fd58 <TimerInsertTimer+0x5c>)
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801fd0a:	4b13      	ldr	r3, [pc, #76]	; (801fd58 <TimerInsertTimer+0x5c>)
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	695b      	ldr	r3, [r3, #20]
 801fd10:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801fd12:	e012      	b.n	801fd3a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681a      	ldr	r2, [r3, #0]
 801fd18:	68bb      	ldr	r3, [r7, #8]
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	429a      	cmp	r2, r3
 801fd1e:	d905      	bls.n	801fd2c <TimerInsertTimer+0x30>
    {
        cur = next;
 801fd20:	68bb      	ldr	r3, [r7, #8]
 801fd22:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fd24:	68bb      	ldr	r3, [r7, #8]
 801fd26:	695b      	ldr	r3, [r3, #20]
 801fd28:	60bb      	str	r3, [r7, #8]
 801fd2a:	e006      	b.n	801fd3a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fd2c:	68fb      	ldr	r3, [r7, #12]
 801fd2e:	687a      	ldr	r2, [r7, #4]
 801fd30:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	68ba      	ldr	r2, [r7, #8]
 801fd36:	615a      	str	r2, [r3, #20]
        return;
 801fd38:	e009      	b.n	801fd4e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	695b      	ldr	r3, [r3, #20]
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d1e8      	bne.n	801fd14 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	687a      	ldr	r2, [r7, #4]
 801fd46:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	615a      	str	r2, [r3, #20]
}
 801fd4e:	3714      	adds	r7, #20
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bc80      	pop	{r7}
 801fd54:	4770      	bx	lr
 801fd56:	bf00      	nop
 801fd58:	200048b0 	.word	0x200048b0

0801fd5c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801fd5c:	b580      	push	{r7, lr}
 801fd5e:	b084      	sub	sp, #16
 801fd60:	af00      	add	r7, sp, #0
 801fd62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fd64:	4b0b      	ldr	r3, [pc, #44]	; (801fd94 <TimerInsertNewHeadTimer+0x38>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801fd6a:	68fb      	ldr	r3, [r7, #12]
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d002      	beq.n	801fd76 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	2200      	movs	r2, #0
 801fd74:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	68fa      	ldr	r2, [r7, #12]
 801fd7a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801fd7c:	4a05      	ldr	r2, [pc, #20]	; (801fd94 <TimerInsertNewHeadTimer+0x38>)
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801fd82:	4b04      	ldr	r3, [pc, #16]	; (801fd94 <TimerInsertNewHeadTimer+0x38>)
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	4618      	mov	r0, r3
 801fd88:	f7ff ff8e 	bl	801fca8 <TimerSetTimeout>
}
 801fd8c:	bf00      	nop
 801fd8e:	3710      	adds	r7, #16
 801fd90:	46bd      	mov	sp, r7
 801fd92:	bd80      	pop	{r7, pc}
 801fd94:	200048b0 	.word	0x200048b0

0801fd98 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 801fd98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fd9c:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 801fda0:	af00      	add	r7, sp, #0
 801fda2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fda6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fdaa:	6018      	str	r0, [r3, #0]
 801fdac:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdb0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801fdb4:	6019      	str	r1, [r3, #0]
 801fdb6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801fdbe:	601a      	str	r2, [r3, #0]
  u_char *fmt = (u_char *)fmt0;
 801fdc0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdc4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
#else  
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
 801fdce:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdd2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  fp_r = strlen(str);
 801fddc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fde0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fde4:	6818      	ldr	r0, [r3, #0]
 801fde6:	f7e0 f9cb 	bl	8000180 <strlen>
 801fdea:	4603      	mov	r3, r0
 801fdec:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

  nassigned = 0;
 801fdf0:	2300      	movs	r3, #0
 801fdf2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  nread = 0;
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  base = 0;    /* XXX just to keep gcc happy */
 801fdfc:	2300      	movs	r3, #0
 801fdfe:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
  for (;;) {
    c = *fmt++;
 801fe02:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 801fe06:	1c53      	adds	r3, r2, #1
 801fe08:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801fe0c:	7813      	ldrb	r3, [r2, #0]
 801fe0e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    if (c == 0)
 801fe12:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d102      	bne.n	801fe20 <tiny_vfscanf+0x88>
      return (nassigned);
 801fe1a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801fe1e:	e386      	b.n	802052e <tiny_vfscanf+0x796>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 801fe20:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe24:	2b25      	cmp	r3, #37	; 0x25
 801fe26:	f040 809f 	bne.w	801ff68 <tiny_vfscanf+0x1d0>
      goto literal;
    width = 0;
 801fe2a:	2300      	movs	r3, #0
 801fe2c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    flags = 0;
 801fe30:	2300      	movs	r3, #0
 801fe32:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 801fe36:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 801fe3a:	1c53      	adds	r3, r2, #1
 801fe3c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801fe40:	7813      	ldrb	r3, [r2, #0]
 801fe42:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    switch (c) {
 801fe46:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe4a:	2b78      	cmp	r3, #120	; 0x78
 801fe4c:	f300 8102 	bgt.w	8020054 <tiny_vfscanf+0x2bc>
 801fe50:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe54:	2b44      	cmp	r3, #68	; 0x44
 801fe56:	da13      	bge.n	801fe80 <tiny_vfscanf+0xe8>
 801fe58:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe5c:	2b39      	cmp	r3, #57	; 0x39
 801fe5e:	f300 80f9 	bgt.w	8020054 <tiny_vfscanf+0x2bc>
 801fe62:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe66:	2b30      	cmp	r3, #48	; 0x30
 801fe68:	f280 80bc 	bge.w	801ffe4 <tiny_vfscanf+0x24c>
 801fe6c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	f000 80ec 	beq.w	802004e <tiny_vfscanf+0x2b6>
 801fe76:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe7a:	2b25      	cmp	r3, #37	; 0x25
 801fe7c:	d075      	beq.n	801ff6a <tiny_vfscanf+0x1d2>
      if (isupper(c))
        flags |= LONG;
      c = CT_INT;
      base = 10;
#endif
      break;
 801fe7e:	e0e9      	b.n	8020054 <tiny_vfscanf+0x2bc>
    switch (c) {
 801fe80:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe84:	3b44      	subs	r3, #68	; 0x44
 801fe86:	2b34      	cmp	r3, #52	; 0x34
 801fe88:	f200 80e4 	bhi.w	8020054 <tiny_vfscanf+0x2bc>
 801fe8c:	a201      	add	r2, pc, #4	; (adr r2, 801fe94 <tiny_vfscanf+0xfc>)
 801fe8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe92:	bf00      	nop
 801fe94:	08020001 	.word	0x08020001
 801fe98:	08020055 	.word	0x08020055
 801fe9c:	08020055 	.word	0x08020055
 801fea0:	08020055 	.word	0x08020055
 801fea4:	08020055 	.word	0x08020055
 801fea8:	08020055 	.word	0x08020055
 801feac:	08020055 	.word	0x08020055
 801feb0:	08020055 	.word	0x08020055
 801feb4:	08020055 	.word	0x08020055
 801feb8:	08020055 	.word	0x08020055
 801febc:	08020055 	.word	0x08020055
 801fec0:	08020055 	.word	0x08020055
 801fec4:	08020055 	.word	0x08020055
 801fec8:	08020055 	.word	0x08020055
 801fecc:	08020055 	.word	0x08020055
 801fed0:	08020055 	.word	0x08020055
 801fed4:	08020055 	.word	0x08020055
 801fed8:	08020055 	.word	0x08020055
 801fedc:	08020055 	.word	0x08020055
 801fee0:	08020055 	.word	0x08020055
 801fee4:	08020035 	.word	0x08020035
 801fee8:	08020055 	.word	0x08020055
 801feec:	08020055 	.word	0x08020055
 801fef0:	08020055 	.word	0x08020055
 801fef4:	08020055 	.word	0x08020055
 801fef8:	08020055 	.word	0x08020055
 801fefc:	08020055 	.word	0x08020055
 801ff00:	08020055 	.word	0x08020055
 801ff04:	08020055 	.word	0x08020055
 801ff08:	08020055 	.word	0x08020055
 801ff0c:	08020055 	.word	0x08020055
 801ff10:	08020055 	.word	0x08020055
 801ff14:	0802000d 	.word	0x0802000d
 801ff18:	08020055 	.word	0x08020055
 801ff1c:	08020055 	.word	0x08020055
 801ff20:	08020055 	.word	0x08020055
 801ff24:	0801ffa7 	.word	0x0801ffa7
 801ff28:	08020055 	.word	0x08020055
 801ff2c:	08020055 	.word	0x08020055
 801ff30:	08020055 	.word	0x08020055
 801ff34:	0801ffd7 	.word	0x0801ffd7
 801ff38:	08020055 	.word	0x08020055
 801ff3c:	08020055 	.word	0x08020055
 801ff40:	08020055 	.word	0x08020055
 801ff44:	08020055 	.word	0x08020055
 801ff48:	08020055 	.word	0x08020055
 801ff4c:	08020055 	.word	0x08020055
 801ff50:	08020055 	.word	0x08020055
 801ff54:	08020055 	.word	0x08020055
 801ff58:	0802001b 	.word	0x0802001b
 801ff5c:	08020055 	.word	0x08020055
 801ff60:	08020055 	.word	0x08020055
 801ff64:	08020035 	.word	0x08020035
      goto literal;
 801ff68:	bf00      	nop
      if (fp_r <= 0 && __srefill(fp))
 801ff6a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	f340 82cb 	ble.w	802050a <tiny_vfscanf+0x772>
      if (*fp_p != c)
 801ff74:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ff78:	781b      	ldrb	r3, [r3, #0]
 801ff7a:	461a      	mov	r2, r3
 801ff7c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801ff80:	4293      	cmp	r3, r2
 801ff82:	f040 82cf 	bne.w	8020524 <tiny_vfscanf+0x78c>
      fp_r--, fp_p++;
 801ff86:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 801ff8a:	3b01      	subs	r3, #1
 801ff8c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 801ff90:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ff94:	3301      	adds	r3, #1
 801ff96:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      nread++;
 801ff9a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801ff9e:	3301      	adds	r3, #1
 801ffa0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
      continue;
 801ffa4:	e2b0      	b.n	8020508 <tiny_vfscanf+0x770>
      if (*fmt == 'h') {
 801ffa6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801ffaa:	781b      	ldrb	r3, [r3, #0]
 801ffac:	2b68      	cmp	r3, #104	; 0x68
 801ffae:	d10b      	bne.n	801ffc8 <tiny_vfscanf+0x230>
        fmt++;
 801ffb0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801ffb4:	3301      	adds	r3, #1
 801ffb6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
        flags |= SHORTSHORT;
 801ffba:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ffbe:	f043 0308 	orr.w	r3, r3, #8
 801ffc2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801ffc6:	e736      	b.n	801fe36 <tiny_vfscanf+0x9e>
        flags |= SHORT;
 801ffc8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ffcc:	f043 0304 	orr.w	r3, r3, #4
 801ffd0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      goto again;
 801ffd4:	e72f      	b.n	801fe36 <tiny_vfscanf+0x9e>
      flags |= LONG;
 801ffd6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ffda:	f043 0301 	orr.w	r3, r3, #1
 801ffde:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      goto again;
 801ffe2:	e728      	b.n	801fe36 <tiny_vfscanf+0x9e>
      width = width * 10 + c - '0';
 801ffe4:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 801ffe8:	4613      	mov	r3, r2
 801ffea:	009b      	lsls	r3, r3, #2
 801ffec:	4413      	add	r3, r2
 801ffee:	005b      	lsls	r3, r3, #1
 801fff0:	461a      	mov	r2, r3
 801fff2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fff6:	4413      	add	r3, r2
 801fff8:	3b30      	subs	r3, #48	; 0x30
 801fffa:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      goto again;
 801fffe:	e71a      	b.n	801fe36 <tiny_vfscanf+0x9e>
      flags |= LONG;
 8020000:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020004:	f043 0301 	orr.w	r3, r3, #1
 8020008:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      c = CT_INT;
 802000c:	2303      	movs	r3, #3
 802000e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      base = 10;
 8020012:	230a      	movs	r3, #10
 8020014:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 8020018:	e01d      	b.n	8020056 <tiny_vfscanf+0x2be>
      c = CT_INT;
 802001a:	2303      	movs	r3, #3
 802001c:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      flags |= UNSIGNED;
 8020020:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020028:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      base = 10;
 802002c:	230a      	movs	r3, #10
 802002e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 8020032:	e010      	b.n	8020056 <tiny_vfscanf+0x2be>
      c = CT_INT;
 8020034:	2303      	movs	r3, #3
 8020036:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      flags |= UNSIGNED;
 802003a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 802003e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020042:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      base = 16;
 8020046:	2310      	movs	r3, #16
 8020048:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 802004c:	e003      	b.n	8020056 <tiny_vfscanf+0x2be>
      return (EOF);
 802004e:	f04f 33ff 	mov.w	r3, #4294967295
 8020052:	e26c      	b.n	802052e <tiny_vfscanf+0x796>
      break;
 8020054:	bf00      	nop
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 8020056:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 802005a:	2b00      	cmp	r3, #0
 802005c:	f340 8257 	ble.w	802050e <tiny_vfscanf+0x776>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 8020060:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020064:	2b03      	cmp	r3, #3
 8020066:	f47f aecc 	bne.w	801fe02 <tiny_vfscanf+0x6a>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 802006a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802006e:	3b01      	subs	r3, #1
 8020070:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8020074:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8020078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802007c:	d303      	bcc.n	8020086 <tiny_vfscanf+0x2ee>
        width = sizeof(buf) - 2;
 802007e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8020082:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      width++;
 8020086:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802008a:	3301      	adds	r3, #1
 802008c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 8020090:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020094:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8020098:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
 802009c:	2300      	movs	r3, #0
 802009e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      value = 0;
 80200a2:	f04f 0200 	mov.w	r2, #0
 80200a6:	f04f 0300 	mov.w	r3, #0
 80200aa:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
      for (p = buf; width; width--) {
 80200ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80200b2:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80200b6:	e182      	b.n	80203be <tiny_vfscanf+0x626>
        c = *fp_p;
 80200b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80200bc:	781b      	ldrb	r3, [r3, #0]
 80200be:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80200c2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80200c6:	3b2b      	subs	r3, #43	; 0x2b
 80200c8:	2b3b      	cmp	r3, #59	; 0x3b
 80200ca:	f200 817e 	bhi.w	80203ca <tiny_vfscanf+0x632>
 80200ce:	a201      	add	r2, pc, #4	; (adr r2, 80200d4 <tiny_vfscanf+0x33c>)
 80200d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200d4:	08020355 	.word	0x08020355
 80200d8:	080203cb 	.word	0x080203cb
 80200dc:	08020343 	.word	0x08020343
 80200e0:	080203cb 	.word	0x080203cb
 80200e4:	080203cb 	.word	0x080203cb
 80200e8:	080201c5 	.word	0x080201c5
 80200ec:	080201c5 	.word	0x080201c5
 80200f0:	080201c5 	.word	0x080201c5
 80200f4:	080201c5 	.word	0x080201c5
 80200f8:	080201c5 	.word	0x080201c5
 80200fc:	080201c5 	.word	0x080201c5
 8020100:	080201c5 	.word	0x080201c5
 8020104:	080201c5 	.word	0x080201c5
 8020108:	080201c5 	.word	0x080201c5
 802010c:	080201c5 	.word	0x080201c5
 8020110:	080203cb 	.word	0x080203cb
 8020114:	080203cb 	.word	0x080203cb
 8020118:	080203cb 	.word	0x080203cb
 802011c:	080203cb 	.word	0x080203cb
 8020120:	080203cb 	.word	0x080203cb
 8020124:	080203cb 	.word	0x080203cb
 8020128:	080203cb 	.word	0x080203cb
 802012c:	0802023d 	.word	0x0802023d
 8020130:	0802023d 	.word	0x0802023d
 8020134:	0802023d 	.word	0x0802023d
 8020138:	0802023d 	.word	0x0802023d
 802013c:	0802023d 	.word	0x0802023d
 8020140:	0802023d 	.word	0x0802023d
 8020144:	080203cb 	.word	0x080203cb
 8020148:	080203cb 	.word	0x080203cb
 802014c:	080203cb 	.word	0x080203cb
 8020150:	080203cb 	.word	0x080203cb
 8020154:	080203cb 	.word	0x080203cb
 8020158:	080203cb 	.word	0x080203cb
 802015c:	080203cb 	.word	0x080203cb
 8020160:	080203cb 	.word	0x080203cb
 8020164:	080203cb 	.word	0x080203cb
 8020168:	080203cb 	.word	0x080203cb
 802016c:	080203cb 	.word	0x080203cb
 8020170:	080203cb 	.word	0x080203cb
 8020174:	080203cb 	.word	0x080203cb
 8020178:	080203cb 	.word	0x080203cb
 802017c:	080203cb 	.word	0x080203cb
 8020180:	080203cb 	.word	0x080203cb
 8020184:	080203cb 	.word	0x080203cb
 8020188:	080203cb 	.word	0x080203cb
 802018c:	080203cb 	.word	0x080203cb
 8020190:	080203cb 	.word	0x080203cb
 8020194:	080203cb 	.word	0x080203cb
 8020198:	080203cb 	.word	0x080203cb
 802019c:	080203cb 	.word	0x080203cb
 80201a0:	080203cb 	.word	0x080203cb
 80201a4:	080203cb 	.word	0x080203cb
 80201a8:	080203cb 	.word	0x080203cb
 80201ac:	080202c1 	.word	0x080202c1
 80201b0:	080202c1 	.word	0x080202c1
 80201b4:	080202c1 	.word	0x080202c1
 80201b8:	080202c1 	.word	0x080202c1
 80201bc:	080202c1 	.word	0x080202c1
 80201c0:	080202c1 	.word	0x080202c1
        /* we only support base 10 and 16 */
        case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
        case '8': case '9':
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 80201c4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80201c8:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 80201cc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - '0';
 80201d0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80201d4:	17da      	asrs	r2, r3, #31
 80201d6:	663b      	str	r3, [r7, #96]	; 0x60
 80201d8:	667a      	str	r2, [r7, #100]	; 0x64
 80201da:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80201de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80201e2:	460a      	mov	r2, r1
 80201e4:	fb02 f203 	mul.w	r2, r2, r3
 80201e8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80201ec:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 80201f0:	4601      	mov	r1, r0
 80201f2:	fb01 f303 	mul.w	r3, r1, r3
 80201f6:	441a      	add	r2, r3
 80201f8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80201fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80201fe:	fba3 4501 	umull	r4, r5, r3, r1
 8020202:	1953      	adds	r3, r2, r5
 8020204:	461d      	mov	r5, r3
 8020206:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 802020a:	17da      	asrs	r2, r3, #31
 802020c:	64bb      	str	r3, [r7, #72]	; 0x48
 802020e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8020210:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8020214:	460b      	mov	r3, r1
 8020216:	18e3      	adds	r3, r4, r3
 8020218:	643b      	str	r3, [r7, #64]	; 0x40
 802021a:	4613      	mov	r3, r2
 802021c:	eb45 0303 	adc.w	r3, r5, r3
 8020220:	647b      	str	r3, [r7, #68]	; 0x44
 8020222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020226:	4611      	mov	r1, r2
 8020228:	3930      	subs	r1, #48	; 0x30
 802022a:	61b9      	str	r1, [r7, #24]
 802022c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020230:	61fb      	str	r3, [r7, #28]
 8020232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020236:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;
 802023a:	e0a4      	b.n	8020386 <tiny_vfscanf+0x5ee>
          
        /* letters ok iff hex */
        case 'A': case 'B': case 'C':
        case 'D': case 'E': case 'F':
          /* no need to fix base here */
          if (base <= 10)
 802023c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020240:	2b0a      	cmp	r3, #10
 8020242:	f340 809a 	ble.w	802037a <tiny_vfscanf+0x5e2>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 8020246:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 802024a:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 802024e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'A' + 10;
 8020252:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020256:	17da      	asrs	r2, r3, #31
 8020258:	65bb      	str	r3, [r7, #88]	; 0x58
 802025a:	65fa      	str	r2, [r7, #92]	; 0x5c
 802025c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8020260:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8020264:	460a      	mov	r2, r1
 8020266:	fb02 f203 	mul.w	r2, r2, r3
 802026a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 802026e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8020272:	4601      	mov	r1, r0
 8020274:	fb01 f303 	mul.w	r3, r1, r3
 8020278:	441a      	add	r2, r3
 802027a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802027e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8020280:	fba3 8901 	umull	r8, r9, r3, r1
 8020284:	eb02 0309 	add.w	r3, r2, r9
 8020288:	4699      	mov	r9, r3
 802028a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 802028e:	17da      	asrs	r2, r3, #31
 8020290:	63bb      	str	r3, [r7, #56]	; 0x38
 8020292:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8020298:	4611      	mov	r1, r2
 802029a:	eb18 0101 	adds.w	r1, r8, r1
 802029e:	6339      	str	r1, [r7, #48]	; 0x30
 80202a0:	eb49 0303 	adc.w	r3, r9, r3
 80202a4:	637b      	str	r3, [r7, #52]	; 0x34
 80202a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80202aa:	4611      	mov	r1, r2
 80202ac:	3937      	subs	r1, #55	; 0x37
 80202ae:	6139      	str	r1, [r7, #16]
 80202b0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80202b4:	617b      	str	r3, [r7, #20]
 80202b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80202ba:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;          
 80202be:	e062      	b.n	8020386 <tiny_vfscanf+0x5ee>
        
        case 'a': case 'b': case 'c':
        case 'd': case 'e': case 'f':
          /* no need to fix base here */
          if (base <= 10)
 80202c0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80202c4:	2b0a      	cmp	r3, #10
 80202c6:	dd5a      	ble.n	802037e <tiny_vfscanf+0x5e6>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 80202c8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80202cc:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 80202d0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'a' + 10;
 80202d4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80202d8:	17da      	asrs	r2, r3, #31
 80202da:	653b      	str	r3, [r7, #80]	; 0x50
 80202dc:	657a      	str	r2, [r7, #84]	; 0x54
 80202de:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80202e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80202e6:	460a      	mov	r2, r1
 80202e8:	fb02 f203 	mul.w	r2, r2, r3
 80202ec:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80202f0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 80202f4:	4601      	mov	r1, r0
 80202f6:	fb01 f303 	mul.w	r3, r1, r3
 80202fa:	441a      	add	r2, r3
 80202fc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8020300:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8020302:	fba3 ab01 	umull	sl, fp, r3, r1
 8020306:	eb02 030b 	add.w	r3, r2, fp
 802030a:	469b      	mov	fp, r3
 802030c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020310:	17da      	asrs	r2, r3, #31
 8020312:	62bb      	str	r3, [r7, #40]	; 0x28
 8020314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802031a:	4611      	mov	r1, r2
 802031c:	eb1a 0101 	adds.w	r1, sl, r1
 8020320:	6239      	str	r1, [r7, #32]
 8020322:	eb4b 0303 	adc.w	r3, fp, r3
 8020326:	627b      	str	r3, [r7, #36]	; 0x24
 8020328:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802032c:	4611      	mov	r1, r2
 802032e:	3957      	subs	r1, #87	; 0x57
 8020330:	60b9      	str	r1, [r7, #8]
 8020332:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020336:	60fb      	str	r3, [r7, #12]
 8020338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802033c:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;
 8020340:	e021      	b.n	8020386 <tiny_vfscanf+0x5ee>

        /* sign ok only as first character */
        case '-':
          if (!(flags & HAVESIGN)) {
 8020342:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802034a:	2b00      	cmp	r3, #0
 802034c:	d102      	bne.n	8020354 <tiny_vfscanf+0x5bc>
            sign_minus = 1;
 802034e:	2301      	movs	r3, #1
 8020350:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
          }
          /* FALLTHROUGH */
        case '+':
          if (flags & SIGNOK) {
 8020354:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802035c:	2b00      	cmp	r3, #0
 802035e:	d010      	beq.n	8020382 <tiny_vfscanf+0x5ea>
            flags &= ~SIGNOK;
 8020360:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020368:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
            flags |= HAVESIGN;
 802036c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020374:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
            goto ok;
 8020378:	e005      	b.n	8020386 <tiny_vfscanf+0x5ee>
            break;  /* not legal here */
 802037a:	bf00      	nop
 802037c:	e025      	b.n	80203ca <tiny_vfscanf+0x632>
            break;  /* not legal here */
 802037e:	bf00      	nop
 8020380:	e023      	b.n	80203ca <tiny_vfscanf+0x632>
          }
          break;
 8020382:	bf00      	nop

        /*
         * If we got here, c is not a legal character
         * for a number.  Stop accumulating digits.
         */
        break;
 8020384:	e021      	b.n	80203ca <tiny_vfscanf+0x632>
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 8020386:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 802038a:	1c53      	adds	r3, r2, #1
 802038c:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8020390:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020394:	b2db      	uxtb	r3, r3
 8020396:	7013      	strb	r3, [r2, #0]
        if (--fp_r > 0)
 8020398:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 802039c:	3b01      	subs	r3, #1
 802039e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80203a2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	dd11      	ble.n	80203ce <tiny_vfscanf+0x636>
          fp_p++;
 80203aa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80203ae:	3301      	adds	r3, #1
 80203b0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (p = buf; width; width--) {
 80203b4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80203b8:	3b01      	subs	r3, #1
 80203ba:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80203be:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	f47f ae78 	bne.w	80200b8 <tiny_vfscanf+0x320>
 80203c8:	e002      	b.n	80203d0 <tiny_vfscanf+0x638>
        break;
 80203ca:	bf00      	nop
 80203cc:	e000      	b.n	80203d0 <tiny_vfscanf+0x638>
        else if (__srefill(fp))
          break;    /* EOF */
 80203ce:	bf00      	nop
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 80203d0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80203d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d020      	beq.n	802041e <tiny_vfscanf+0x686>
        if (p > buf)
 80203dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80203e0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80203e4:	429a      	cmp	r2, r3
 80203e6:	f240 809f 	bls.w	8020528 <tiny_vfscanf+0x790>
        {
          --c;
 80203ea:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80203ee:	3b01      	subs	r3, #1
 80203f0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          --p;
 80203f4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80203f8:	3b01      	subs	r3, #1
 80203fa:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
          ungetc(c++, fp);
 80203fe:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020402:	3301      	adds	r3, #1
 8020404:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8020408:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 802040c:	3b01      	subs	r3, #1
 802040e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8020412:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8020416:	3301      	adds	r3, #1
 8020418:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          /* There is a dummy post-increment to 
             avoid an unused value warning */
        }
        goto match_failure;
 802041c:	e084      	b.n	8020528 <tiny_vfscanf+0x790>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 802041e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8020422:	2300      	movs	r3, #0
 8020424:	7013      	strb	r3, [r2, #0]
        if (sign_minus)
 8020426:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 802042a:	2b00      	cmp	r3, #0
 802042c:	d00b      	beq.n	8020446 <tiny_vfscanf+0x6ae>
          value = -value;
 802042e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8020432:	2100      	movs	r1, #0
 8020434:	4250      	negs	r0, r2
 8020436:	6038      	str	r0, [r7, #0]
 8020438:	eb61 0303 	sbc.w	r3, r1, r3
 802043c:	607b      	str	r3, [r7, #4]
 802043e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020442:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          *va_arg(ap, size_t *) = value;
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
 8020446:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 802044a:	f003 0301 	and.w	r3, r3, #1
 802044e:	2b00      	cmp	r3, #0
 8020450:	d00f      	beq.n	8020472 <tiny_vfscanf+0x6da>
          *va_arg(ap, long *) = value;
 8020452:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020456:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 802045a:	6819      	ldr	r1, [r3, #0]
 802045c:	1d0a      	adds	r2, r1, #4
 802045e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020462:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8020466:	601a      	str	r2, [r3, #0]
 8020468:	680a      	ldr	r2, [r1, #0]
 802046a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802046e:	6013      	str	r3, [r2, #0]
 8020470:	e03a      	b.n	80204e8 <tiny_vfscanf+0x750>
        else if (flags & SHORT)
 8020472:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020476:	f003 0304 	and.w	r3, r3, #4
 802047a:	2b00      	cmp	r3, #0
 802047c:	d00f      	beq.n	802049e <tiny_vfscanf+0x706>
          *va_arg(ap, short *) = value;
 802047e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020482:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8020486:	6819      	ldr	r1, [r3, #0]
 8020488:	1d0a      	adds	r2, r1, #4
 802048a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 802048e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8020492:	601a      	str	r2, [r3, #0]
 8020494:	680a      	ldr	r2, [r1, #0]
 8020496:	f9b7 3280 	ldrsh.w	r3, [r7, #640]	; 0x280
 802049a:	8013      	strh	r3, [r2, #0]
 802049c:	e024      	b.n	80204e8 <tiny_vfscanf+0x750>
        else if (flags & SHORTSHORT)
 802049e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80204a2:	f003 0308 	and.w	r3, r3, #8
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d00f      	beq.n	80204ca <tiny_vfscanf+0x732>
          *va_arg(ap, char *) = value;
 80204aa:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204b2:	6819      	ldr	r1, [r3, #0]
 80204b4:	1d0a      	adds	r2, r1, #4
 80204b6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204be:	601a      	str	r2, [r3, #0]
 80204c0:	680a      	ldr	r2, [r1, #0]
 80204c2:	f897 3280 	ldrb.w	r3, [r7, #640]	; 0x280
 80204c6:	7013      	strb	r3, [r2, #0]
 80204c8:	e00e      	b.n	80204e8 <tiny_vfscanf+0x750>
        else
          *va_arg(ap, int *) = value;
 80204ca:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204ce:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204d2:	6819      	ldr	r1, [r3, #0]
 80204d4:	1d0a      	adds	r2, r1, #4
 80204d6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204de:	601a      	str	r2, [r3, #0]
 80204e0:	680a      	ldr	r2, [r1, #0]
 80204e2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80204e6:	6013      	str	r3, [r2, #0]
        nassigned++;
 80204e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80204ec:	3301      	adds	r3, #1
 80204ee:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
      }
      nread += p - buf;
 80204f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80204f6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80204fa:	1a9a      	subs	r2, r3, r2
 80204fc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8020500:	4413      	add	r3, r2
 8020502:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
      break;
 8020506:	bf00      	nop
    c = *fmt++;
 8020508:	e47b      	b.n	801fe02 <tiny_vfscanf+0x6a>
        goto input_failure;
 802050a:	bf00      	nop
 802050c:	e000      	b.n	8020510 <tiny_vfscanf+0x778>
      goto input_failure;
 802050e:	bf00      	nop
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 8020510:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8020514:	2b00      	cmp	r3, #0
 8020516:	d002      	beq.n	802051e <tiny_vfscanf+0x786>
 8020518:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 802051c:	e007      	b.n	802052e <tiny_vfscanf+0x796>
 802051e:	f04f 33ff 	mov.w	r3, #4294967295
 8020522:	e004      	b.n	802052e <tiny_vfscanf+0x796>
        goto match_failure;
 8020524:	bf00      	nop
 8020526:	e000      	b.n	802052a <tiny_vfscanf+0x792>
        goto match_failure;
 8020528:	bf00      	nop
match_failure:
  return (nassigned);
 802052a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
}
 802052e:	4618      	mov	r0, r3
 8020530:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 8020534:	46bd      	mov	sp, r7
 8020536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802053a:	bf00      	nop

0802053c <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 802053c:	b40e      	push	{r1, r2, r3}
 802053e:	b580      	push	{r7, lr}
 8020540:	b085      	sub	sp, #20
 8020542:	af00      	add	r7, sp, #0
 8020544:	6078      	str	r0, [r7, #4]
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 8020546:	f107 0320 	add.w	r3, r7, #32
 802054a:	60bb      	str	r3, [r7, #8]
  ret = tiny_vfscanf(str, fmt, ap);
 802054c:	68ba      	ldr	r2, [r7, #8]
 802054e:	69f9      	ldr	r1, [r7, #28]
 8020550:	6878      	ldr	r0, [r7, #4]
 8020552:	f7ff fc21 	bl	801fd98 <tiny_vfscanf>
 8020556:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return (ret);
 8020558:	68fb      	ldr	r3, [r7, #12]
}
 802055a:	4618      	mov	r0, r3
 802055c:	3714      	adds	r7, #20
 802055e:	46bd      	mov	sp, r7
 8020560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020564:	b003      	add	sp, #12
 8020566:	4770      	bx	lr

08020568 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8020568:	b480      	push	{r7}
 802056a:	b085      	sub	sp, #20
 802056c:	af00      	add	r7, sp, #0
 802056e:	6078      	str	r0, [r7, #4]
  int i = 0;
 8020570:	2300      	movs	r3, #0
 8020572:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8020574:	e00e      	b.n	8020594 <ee_skip_atoi+0x2c>
 8020576:	68fa      	ldr	r2, [r7, #12]
 8020578:	4613      	mov	r3, r2
 802057a:	009b      	lsls	r3, r3, #2
 802057c:	4413      	add	r3, r2
 802057e:	005b      	lsls	r3, r3, #1
 8020580:	4618      	mov	r0, r3
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	1c59      	adds	r1, r3, #1
 8020588:	687a      	ldr	r2, [r7, #4]
 802058a:	6011      	str	r1, [r2, #0]
 802058c:	781b      	ldrb	r3, [r3, #0]
 802058e:	4403      	add	r3, r0
 8020590:	3b30      	subs	r3, #48	; 0x30
 8020592:	60fb      	str	r3, [r7, #12]
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	781b      	ldrb	r3, [r3, #0]
 802059a:	2b2f      	cmp	r3, #47	; 0x2f
 802059c:	d904      	bls.n	80205a8 <ee_skip_atoi+0x40>
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	681b      	ldr	r3, [r3, #0]
 80205a2:	781b      	ldrb	r3, [r3, #0]
 80205a4:	2b39      	cmp	r3, #57	; 0x39
 80205a6:	d9e6      	bls.n	8020576 <ee_skip_atoi+0xe>
  return i;
 80205a8:	68fb      	ldr	r3, [r7, #12]
}
 80205aa:	4618      	mov	r0, r3
 80205ac:	3714      	adds	r7, #20
 80205ae:	46bd      	mov	sp, r7
 80205b0:	bc80      	pop	{r7}
 80205b2:	4770      	bx	lr

080205b4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80205b4:	b480      	push	{r7}
 80205b6:	b099      	sub	sp, #100	; 0x64
 80205b8:	af00      	add	r7, sp, #0
 80205ba:	60f8      	str	r0, [r7, #12]
 80205bc:	60b9      	str	r1, [r7, #8]
 80205be:	607a      	str	r2, [r7, #4]
 80205c0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 80205c2:	4b71      	ldr	r3, [pc, #452]	; (8020788 <ee_number+0x1d4>)
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80205c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80205ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d002      	beq.n	80205d8 <ee_number+0x24>
 80205d2:	4b6e      	ldr	r3, [pc, #440]	; (802078c <ee_number+0x1d8>)
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80205d8:	683b      	ldr	r3, [r7, #0]
 80205da:	2b01      	cmp	r3, #1
 80205dc:	dd02      	ble.n	80205e4 <ee_number+0x30>
 80205de:	683b      	ldr	r3, [r7, #0]
 80205e0:	2b24      	cmp	r3, #36	; 0x24
 80205e2:	dd01      	ble.n	80205e8 <ee_number+0x34>
 80205e4:	2300      	movs	r3, #0
 80205e6:	e0ca      	b.n	802077e <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 80205e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80205ea:	f003 0301 	and.w	r3, r3, #1
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d001      	beq.n	80205f6 <ee_number+0x42>
 80205f2:	2330      	movs	r3, #48	; 0x30
 80205f4:	e000      	b.n	80205f8 <ee_number+0x44>
 80205f6:	2320      	movs	r3, #32
 80205f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 80205fc:	2300      	movs	r3, #0
 80205fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8020602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020604:	f003 0302 	and.w	r3, r3, #2
 8020608:	2b00      	cmp	r3, #0
 802060a:	d00b      	beq.n	8020624 <ee_number+0x70>
  {
    if (num < 0)
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	2b00      	cmp	r3, #0
 8020610:	da08      	bge.n	8020624 <ee_number+0x70>
    {
      sign = '-';
 8020612:	232d      	movs	r3, #45	; 0x2d
 8020614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	425b      	negs	r3, r3
 802061c:	607b      	str	r3, [r7, #4]
      size--;
 802061e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020620:	3b01      	subs	r3, #1
 8020622:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8020624:	2300      	movs	r3, #0
 8020626:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	2b00      	cmp	r3, #0
 802062c:	d11e      	bne.n	802066c <ee_number+0xb8>
    tmp[i++] = '0';
 802062e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020630:	1c5a      	adds	r2, r3, #1
 8020632:	657a      	str	r2, [r7, #84]	; 0x54
 8020634:	3360      	adds	r3, #96	; 0x60
 8020636:	443b      	add	r3, r7
 8020638:	2230      	movs	r2, #48	; 0x30
 802063a:	f803 2c50 	strb.w	r2, [r3, #-80]
 802063e:	e018      	b.n	8020672 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	683a      	ldr	r2, [r7, #0]
 8020644:	fbb3 f1f2 	udiv	r1, r3, r2
 8020648:	fb01 f202 	mul.w	r2, r1, r2
 802064c:	1a9b      	subs	r3, r3, r2
 802064e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020650:	441a      	add	r2, r3
 8020652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020654:	1c59      	adds	r1, r3, #1
 8020656:	6579      	str	r1, [r7, #84]	; 0x54
 8020658:	7812      	ldrb	r2, [r2, #0]
 802065a:	3360      	adds	r3, #96	; 0x60
 802065c:	443b      	add	r3, r7
 802065e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8020662:	687a      	ldr	r2, [r7, #4]
 8020664:	683b      	ldr	r3, [r7, #0]
 8020666:	fbb2 f3f3 	udiv	r3, r2, r3
 802066a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d1e6      	bne.n	8020640 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8020672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020676:	429a      	cmp	r2, r3
 8020678:	dd01      	ble.n	802067e <ee_number+0xca>
 802067a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 802067e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020682:	1ad3      	subs	r3, r2, r3
 8020684:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8020686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020688:	f003 0301 	and.w	r3, r3, #1
 802068c:	2b00      	cmp	r3, #0
 802068e:	d112      	bne.n	80206b6 <ee_number+0x102>
 8020690:	e00c      	b.n	80206ac <ee_number+0xf8>
 8020692:	68fb      	ldr	r3, [r7, #12]
 8020694:	1c5a      	adds	r2, r3, #1
 8020696:	60fa      	str	r2, [r7, #12]
 8020698:	2220      	movs	r2, #32
 802069a:	701a      	strb	r2, [r3, #0]
 802069c:	68bb      	ldr	r3, [r7, #8]
 802069e:	3b01      	subs	r3, #1
 80206a0:	60bb      	str	r3, [r7, #8]
 80206a2:	68bb      	ldr	r3, [r7, #8]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d101      	bne.n	80206ac <ee_number+0xf8>
 80206a8:	68fb      	ldr	r3, [r7, #12]
 80206aa:	e068      	b.n	802077e <ee_number+0x1ca>
 80206ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80206ae:	1e5a      	subs	r2, r3, #1
 80206b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	dced      	bgt.n	8020692 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 80206b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d01b      	beq.n	80206f6 <ee_number+0x142>
 80206be:	68fb      	ldr	r3, [r7, #12]
 80206c0:	1c5a      	adds	r2, r3, #1
 80206c2:	60fa      	str	r2, [r7, #12]
 80206c4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80206c8:	701a      	strb	r2, [r3, #0]
 80206ca:	68bb      	ldr	r3, [r7, #8]
 80206cc:	3b01      	subs	r3, #1
 80206ce:	60bb      	str	r3, [r7, #8]
 80206d0:	68bb      	ldr	r3, [r7, #8]
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d10f      	bne.n	80206f6 <ee_number+0x142>
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	e051      	b.n	802077e <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	1c5a      	adds	r2, r3, #1
 80206de:	60fa      	str	r2, [r7, #12]
 80206e0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80206e4:	701a      	strb	r2, [r3, #0]
 80206e6:	68bb      	ldr	r3, [r7, #8]
 80206e8:	3b01      	subs	r3, #1
 80206ea:	60bb      	str	r3, [r7, #8]
 80206ec:	68bb      	ldr	r3, [r7, #8]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d101      	bne.n	80206f6 <ee_number+0x142>
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	e043      	b.n	802077e <ee_number+0x1ca>
 80206f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80206f8:	1e5a      	subs	r2, r3, #1
 80206fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	dcec      	bgt.n	80206da <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8020700:	e00c      	b.n	802071c <ee_number+0x168>
 8020702:	68fb      	ldr	r3, [r7, #12]
 8020704:	1c5a      	adds	r2, r3, #1
 8020706:	60fa      	str	r2, [r7, #12]
 8020708:	2230      	movs	r2, #48	; 0x30
 802070a:	701a      	strb	r2, [r3, #0]
 802070c:	68bb      	ldr	r3, [r7, #8]
 802070e:	3b01      	subs	r3, #1
 8020710:	60bb      	str	r3, [r7, #8]
 8020712:	68bb      	ldr	r3, [r7, #8]
 8020714:	2b00      	cmp	r3, #0
 8020716:	d101      	bne.n	802071c <ee_number+0x168>
 8020718:	68fb      	ldr	r3, [r7, #12]
 802071a:	e030      	b.n	802077e <ee_number+0x1ca>
 802071c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802071e:	1e5a      	subs	r2, r3, #1
 8020720:	66fa      	str	r2, [r7, #108]	; 0x6c
 8020722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020724:	429a      	cmp	r2, r3
 8020726:	dbec      	blt.n	8020702 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8020728:	e010      	b.n	802074c <ee_number+0x198>
 802072a:	68fb      	ldr	r3, [r7, #12]
 802072c:	1c5a      	adds	r2, r3, #1
 802072e:	60fa      	str	r2, [r7, #12]
 8020730:	f107 0110 	add.w	r1, r7, #16
 8020734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020736:	440a      	add	r2, r1
 8020738:	7812      	ldrb	r2, [r2, #0]
 802073a:	701a      	strb	r2, [r3, #0]
 802073c:	68bb      	ldr	r3, [r7, #8]
 802073e:	3b01      	subs	r3, #1
 8020740:	60bb      	str	r3, [r7, #8]
 8020742:	68bb      	ldr	r3, [r7, #8]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d101      	bne.n	802074c <ee_number+0x198>
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	e018      	b.n	802077e <ee_number+0x1ca>
 802074c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802074e:	1e5a      	subs	r2, r3, #1
 8020750:	657a      	str	r2, [r7, #84]	; 0x54
 8020752:	2b00      	cmp	r3, #0
 8020754:	dce9      	bgt.n	802072a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8020756:	e00c      	b.n	8020772 <ee_number+0x1be>
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	1c5a      	adds	r2, r3, #1
 802075c:	60fa      	str	r2, [r7, #12]
 802075e:	2220      	movs	r2, #32
 8020760:	701a      	strb	r2, [r3, #0]
 8020762:	68bb      	ldr	r3, [r7, #8]
 8020764:	3b01      	subs	r3, #1
 8020766:	60bb      	str	r3, [r7, #8]
 8020768:	68bb      	ldr	r3, [r7, #8]
 802076a:	2b00      	cmp	r3, #0
 802076c:	d101      	bne.n	8020772 <ee_number+0x1be>
 802076e:	68fb      	ldr	r3, [r7, #12]
 8020770:	e005      	b.n	802077e <ee_number+0x1ca>
 8020772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020774:	1e5a      	subs	r2, r3, #1
 8020776:	66ba      	str	r2, [r7, #104]	; 0x68
 8020778:	2b00      	cmp	r3, #0
 802077a:	dced      	bgt.n	8020758 <ee_number+0x1a4>

  return str;
 802077c:	68fb      	ldr	r3, [r7, #12]
}
 802077e:	4618      	mov	r0, r3
 8020780:	3764      	adds	r7, #100	; 0x64
 8020782:	46bd      	mov	sp, r7
 8020784:	bc80      	pop	{r7}
 8020786:	4770      	bx	lr
 8020788:	2000011c 	.word	0x2000011c
 802078c:	20000120 	.word	0x20000120

08020790 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	b092      	sub	sp, #72	; 0x48
 8020794:	af04      	add	r7, sp, #16
 8020796:	60f8      	str	r0, [r7, #12]
 8020798:	60b9      	str	r1, [r7, #8]
 802079a:	607a      	str	r2, [r7, #4]
 802079c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 802079e:	68bb      	ldr	r3, [r7, #8]
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	dc01      	bgt.n	80207a8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 80207a4:	2300      	movs	r3, #0
 80207a6:	e13e      	b.n	8020a26 <tiny_vsnprintf_like+0x296>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80207ac:	e128      	b.n	8020a00 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 80207ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80207b0:	68fb      	ldr	r3, [r7, #12]
 80207b2:	1ad2      	subs	r2, r2, r3
 80207b4:	68bb      	ldr	r3, [r7, #8]
 80207b6:	3b01      	subs	r3, #1
 80207b8:	429a      	cmp	r2, r3
 80207ba:	f280 812e 	bge.w	8020a1a <tiny_vsnprintf_like+0x28a>
    
    if (*fmt != '%')
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	781b      	ldrb	r3, [r3, #0]
 80207c2:	2b25      	cmp	r3, #37	; 0x25
 80207c4:	d006      	beq.n	80207d4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 80207c6:	687a      	ldr	r2, [r7, #4]
 80207c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ca:	1c59      	adds	r1, r3, #1
 80207cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80207ce:	7812      	ldrb	r2, [r2, #0]
 80207d0:	701a      	strb	r2, [r3, #0]
      continue;
 80207d2:	e112      	b.n	80209fa <tiny_vsnprintf_like+0x26a>
    }
                  
    // Process flags
    flags = 0;
 80207d4:	2300      	movs	r3, #0
 80207d6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	3301      	adds	r3, #1
 80207dc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	781b      	ldrb	r3, [r3, #0]
 80207e2:	2b30      	cmp	r3, #48	; 0x30
 80207e4:	d103      	bne.n	80207ee <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 80207e6:	6a3b      	ldr	r3, [r7, #32]
 80207e8:	f043 0301 	orr.w	r3, r3, #1
 80207ec:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 80207ee:	f04f 33ff 	mov.w	r3, #4294967295
 80207f2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 80207f4:	687b      	ldr	r3, [r7, #4]
 80207f6:	781b      	ldrb	r3, [r3, #0]
 80207f8:	2b2f      	cmp	r3, #47	; 0x2f
 80207fa:	d908      	bls.n	802080e <tiny_vsnprintf_like+0x7e>
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	781b      	ldrb	r3, [r3, #0]
 8020800:	2b39      	cmp	r3, #57	; 0x39
 8020802:	d804      	bhi.n	802080e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8020804:	1d3b      	adds	r3, r7, #4
 8020806:	4618      	mov	r0, r3
 8020808:	f7ff feae 	bl	8020568 <ee_skip_atoi>
 802080c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 802080e:	f04f 33ff 	mov.w	r3, #4294967295
 8020812:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8020814:	f04f 33ff 	mov.w	r3, #4294967295
 8020818:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 802081a:	230a      	movs	r3, #10
 802081c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	781b      	ldrb	r3, [r3, #0]
 8020822:	3b58      	subs	r3, #88	; 0x58
 8020824:	2b20      	cmp	r3, #32
 8020826:	f200 8094 	bhi.w	8020952 <tiny_vsnprintf_like+0x1c2>
 802082a:	a201      	add	r2, pc, #4	; (adr r2, 8020830 <tiny_vsnprintf_like+0xa0>)
 802082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020830:	0802093b 	.word	0x0802093b
 8020834:	08020953 	.word	0x08020953
 8020838:	08020953 	.word	0x08020953
 802083c:	08020953 	.word	0x08020953
 8020840:	08020953 	.word	0x08020953
 8020844:	08020953 	.word	0x08020953
 8020848:	08020953 	.word	0x08020953
 802084c:	08020953 	.word	0x08020953
 8020850:	08020953 	.word	0x08020953
 8020854:	08020953 	.word	0x08020953
 8020858:	08020953 	.word	0x08020953
 802085c:	080208bf 	.word	0x080208bf
 8020860:	08020949 	.word	0x08020949
 8020864:	08020953 	.word	0x08020953
 8020868:	08020953 	.word	0x08020953
 802086c:	08020953 	.word	0x08020953
 8020870:	08020953 	.word	0x08020953
 8020874:	08020949 	.word	0x08020949
 8020878:	08020953 	.word	0x08020953
 802087c:	08020953 	.word	0x08020953
 8020880:	08020953 	.word	0x08020953
 8020884:	08020953 	.word	0x08020953
 8020888:	08020953 	.word	0x08020953
 802088c:	08020953 	.word	0x08020953
 8020890:	08020953 	.word	0x08020953
 8020894:	08020953 	.word	0x08020953
 8020898:	08020953 	.word	0x08020953
 802089c:	080208df 	.word	0x080208df
 80208a0:	08020953 	.word	0x08020953
 80208a4:	0802099f 	.word	0x0802099f
 80208a8:	08020953 	.word	0x08020953
 80208ac:	08020953 	.word	0x08020953
 80208b0:	08020943 	.word	0x08020943
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80208b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208b6:	1c5a      	adds	r2, r3, #1
 80208b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80208ba:	2220      	movs	r2, #32
 80208bc:	701a      	strb	r2, [r3, #0]
 80208be:	69fb      	ldr	r3, [r7, #28]
 80208c0:	3b01      	subs	r3, #1
 80208c2:	61fb      	str	r3, [r7, #28]
 80208c4:	69fb      	ldr	r3, [r7, #28]
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	dcf4      	bgt.n	80208b4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	1d1a      	adds	r2, r3, #4
 80208ce:	603a      	str	r2, [r7, #0]
 80208d0:	6819      	ldr	r1, [r3, #0]
 80208d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208d4:	1c5a      	adds	r2, r3, #1
 80208d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80208d8:	b2ca      	uxtb	r2, r1
 80208da:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80208dc:	e08d      	b.n	80209fa <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	1d1a      	adds	r2, r3, #4
 80208e2:	603a      	str	r2, [r7, #0]
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 80208e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d101      	bne.n	80208f2 <tiny_vsnprintf_like+0x162>
 80208ee:	4b50      	ldr	r3, [pc, #320]	; (8020a30 <tiny_vsnprintf_like+0x2a0>)
 80208f0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 80208f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80208f4:	f7df fc44 	bl	8000180 <strlen>
 80208f8:	4603      	mov	r3, r0
 80208fa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80208fc:	e004      	b.n	8020908 <tiny_vsnprintf_like+0x178>
 80208fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020900:	1c5a      	adds	r2, r3, #1
 8020902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020904:	2220      	movs	r2, #32
 8020906:	701a      	strb	r2, [r3, #0]
 8020908:	69fb      	ldr	r3, [r7, #28]
 802090a:	1e5a      	subs	r2, r3, #1
 802090c:	61fa      	str	r2, [r7, #28]
 802090e:	693a      	ldr	r2, [r7, #16]
 8020910:	429a      	cmp	r2, r3
 8020912:	dbf4      	blt.n	80208fe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8020914:	2300      	movs	r3, #0
 8020916:	62bb      	str	r3, [r7, #40]	; 0x28
 8020918:	e00a      	b.n	8020930 <tiny_vsnprintf_like+0x1a0>
 802091a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802091c:	1c53      	adds	r3, r2, #1
 802091e:	627b      	str	r3, [r7, #36]	; 0x24
 8020920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020922:	1c59      	adds	r1, r3, #1
 8020924:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020926:	7812      	ldrb	r2, [r2, #0]
 8020928:	701a      	strb	r2, [r3, #0]
 802092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802092c:	3301      	adds	r3, #1
 802092e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020932:	693b      	ldr	r3, [r7, #16]
 8020934:	429a      	cmp	r2, r3
 8020936:	dbf0      	blt.n	802091a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8020938:	e05f      	b.n	80209fa <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 802093a:	6a3b      	ldr	r3, [r7, #32]
 802093c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020940:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8020942:	2310      	movs	r3, #16
 8020944:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8020946:	e02b      	b.n	80209a0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 8020948:	6a3b      	ldr	r3, [r7, #32]
 802094a:	f043 0302 	orr.w	r3, r3, #2
 802094e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8020950:	e025      	b.n	802099e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	2b25      	cmp	r3, #37	; 0x25
 8020958:	d004      	beq.n	8020964 <tiny_vsnprintf_like+0x1d4>
 802095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802095c:	1c5a      	adds	r2, r3, #1
 802095e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020960:	2225      	movs	r2, #37	; 0x25
 8020962:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8020964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020966:	68fb      	ldr	r3, [r7, #12]
 8020968:	1ad2      	subs	r2, r2, r3
 802096a:	68bb      	ldr	r3, [r7, #8]
 802096c:	3b01      	subs	r3, #1
 802096e:	429a      	cmp	r2, r3
 8020970:	da16      	bge.n	80209a0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	781b      	ldrb	r3, [r3, #0]
 8020976:	2b00      	cmp	r3, #0
 8020978:	d006      	beq.n	8020988 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 802097a:	687a      	ldr	r2, [r7, #4]
 802097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802097e:	1c59      	adds	r1, r3, #1
 8020980:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020982:	7812      	ldrb	r2, [r2, #0]
 8020984:	701a      	strb	r2, [r3, #0]
 8020986:	e002      	b.n	802098e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	3b01      	subs	r3, #1
 802098c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 802098e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	1ad2      	subs	r2, r2, r3
 8020994:	68bb      	ldr	r3, [r7, #8]
 8020996:	3b01      	subs	r3, #1
 8020998:	429a      	cmp	r2, r3
 802099a:	db2d      	blt.n	80209f8 <tiny_vsnprintf_like+0x268>
 802099c:	e000      	b.n	80209a0 <tiny_vsnprintf_like+0x210>
        break;
 802099e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 80209a0:	697b      	ldr	r3, [r7, #20]
 80209a2:	2b6c      	cmp	r3, #108	; 0x6c
 80209a4:	d105      	bne.n	80209b2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	1d1a      	adds	r2, r3, #4
 80209aa:	603a      	str	r2, [r7, #0]
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	637b      	str	r3, [r7, #52]	; 0x34
 80209b0:	e00f      	b.n	80209d2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 80209b2:	6a3b      	ldr	r3, [r7, #32]
 80209b4:	f003 0302 	and.w	r3, r3, #2
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d005      	beq.n	80209c8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 80209bc:	683b      	ldr	r3, [r7, #0]
 80209be:	1d1a      	adds	r2, r3, #4
 80209c0:	603a      	str	r2, [r7, #0]
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	637b      	str	r3, [r7, #52]	; 0x34
 80209c6:	e004      	b.n	80209d2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 80209c8:	683b      	ldr	r3, [r7, #0]
 80209ca:	1d1a      	adds	r2, r3, #4
 80209cc:	603a      	str	r2, [r7, #0]
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80209d2:	68bb      	ldr	r3, [r7, #8]
 80209d4:	1e5a      	subs	r2, r3, #1
 80209d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209d8:	68fb      	ldr	r3, [r7, #12]
 80209da:	1acb      	subs	r3, r1, r3
 80209dc:	1ad1      	subs	r1, r2, r3
 80209de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80209e0:	6a3b      	ldr	r3, [r7, #32]
 80209e2:	9302      	str	r3, [sp, #8]
 80209e4:	69bb      	ldr	r3, [r7, #24]
 80209e6:	9301      	str	r3, [sp, #4]
 80209e8:	69fb      	ldr	r3, [r7, #28]
 80209ea:	9300      	str	r3, [sp, #0]
 80209ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80209f0:	f7ff fde0 	bl	80205b4 <ee_number>
 80209f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80209f6:	e000      	b.n	80209fa <tiny_vsnprintf_like+0x26a>
        continue;
 80209f8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	3301      	adds	r3, #1
 80209fe:	607b      	str	r3, [r7, #4]
 8020a00:	687b      	ldr	r3, [r7, #4]
 8020a02:	781b      	ldrb	r3, [r3, #0]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	f47f aed2 	bne.w	80207ae <tiny_vsnprintf_like+0x1e>
 8020a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	1ad2      	subs	r2, r2, r3
 8020a10:	68bb      	ldr	r3, [r7, #8]
 8020a12:	3b01      	subs	r3, #1
 8020a14:	429a      	cmp	r2, r3
 8020a16:	f6bf aeca 	bge.w	80207ae <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 8020a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a1c:	2200      	movs	r2, #0
 8020a1e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8020a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a22:	68fb      	ldr	r3, [r7, #12]
 8020a24:	1ad3      	subs	r3, r2, r3
}
 8020a26:	4618      	mov	r0, r3
 8020a28:	3738      	adds	r7, #56	; 0x38
 8020a2a:	46bd      	mov	sp, r7
 8020a2c:	bd80      	pop	{r7, pc}
 8020a2e:	bf00      	nop
 8020a30:	08022a54 	.word	0x08022a54

08020a34 <memset>:
 8020a34:	4402      	add	r2, r0
 8020a36:	4603      	mov	r3, r0
 8020a38:	4293      	cmp	r3, r2
 8020a3a:	d100      	bne.n	8020a3e <memset+0xa>
 8020a3c:	4770      	bx	lr
 8020a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8020a42:	e7f9      	b.n	8020a38 <memset+0x4>

08020a44 <strncmp>:
 8020a44:	b510      	push	{r4, lr}
 8020a46:	b16a      	cbz	r2, 8020a64 <strncmp+0x20>
 8020a48:	3901      	subs	r1, #1
 8020a4a:	1884      	adds	r4, r0, r2
 8020a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020a50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020a54:	429a      	cmp	r2, r3
 8020a56:	d103      	bne.n	8020a60 <strncmp+0x1c>
 8020a58:	42a0      	cmp	r0, r4
 8020a5a:	d001      	beq.n	8020a60 <strncmp+0x1c>
 8020a5c:	2a00      	cmp	r2, #0
 8020a5e:	d1f5      	bne.n	8020a4c <strncmp+0x8>
 8020a60:	1ad0      	subs	r0, r2, r3
 8020a62:	bd10      	pop	{r4, pc}
 8020a64:	4610      	mov	r0, r2
 8020a66:	e7fc      	b.n	8020a62 <strncmp+0x1e>

08020a68 <__libc_init_array>:
 8020a68:	b570      	push	{r4, r5, r6, lr}
 8020a6a:	4d0d      	ldr	r5, [pc, #52]	; (8020aa0 <__libc_init_array+0x38>)
 8020a6c:	4c0d      	ldr	r4, [pc, #52]	; (8020aa4 <__libc_init_array+0x3c>)
 8020a6e:	1b64      	subs	r4, r4, r5
 8020a70:	10a4      	asrs	r4, r4, #2
 8020a72:	2600      	movs	r6, #0
 8020a74:	42a6      	cmp	r6, r4
 8020a76:	d109      	bne.n	8020a8c <__libc_init_array+0x24>
 8020a78:	4d0b      	ldr	r5, [pc, #44]	; (8020aa8 <__libc_init_array+0x40>)
 8020a7a:	4c0c      	ldr	r4, [pc, #48]	; (8020aac <__libc_init_array+0x44>)
 8020a7c:	f000 f898 	bl	8020bb0 <_init>
 8020a80:	1b64      	subs	r4, r4, r5
 8020a82:	10a4      	asrs	r4, r4, #2
 8020a84:	2600      	movs	r6, #0
 8020a86:	42a6      	cmp	r6, r4
 8020a88:	d105      	bne.n	8020a96 <__libc_init_array+0x2e>
 8020a8a:	bd70      	pop	{r4, r5, r6, pc}
 8020a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a90:	4798      	blx	r3
 8020a92:	3601      	adds	r6, #1
 8020a94:	e7ee      	b.n	8020a74 <__libc_init_array+0xc>
 8020a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a9a:	4798      	blx	r3
 8020a9c:	3601      	adds	r6, #1
 8020a9e:	e7f2      	b.n	8020a86 <__libc_init_array+0x1e>
 8020aa0:	08023434 	.word	0x08023434
 8020aa4:	08023434 	.word	0x08023434
 8020aa8:	08023434 	.word	0x08023434
 8020aac:	08023438 	.word	0x08023438

08020ab0 <floor>:
 8020ab0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8020ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ab8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8020abc:	2e13      	cmp	r6, #19
 8020abe:	460b      	mov	r3, r1
 8020ac0:	4607      	mov	r7, r0
 8020ac2:	460c      	mov	r4, r1
 8020ac4:	4605      	mov	r5, r0
 8020ac6:	dc32      	bgt.n	8020b2e <floor+0x7e>
 8020ac8:	2e00      	cmp	r6, #0
 8020aca:	da14      	bge.n	8020af6 <floor+0x46>
 8020acc:	a334      	add	r3, pc, #208	; (adr r3, 8020ba0 <floor+0xf0>)
 8020ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ad2:	f7df fb63 	bl	800019c <__adddf3>
 8020ad6:	2200      	movs	r2, #0
 8020ad8:	2300      	movs	r3, #0
 8020ada:	f7df fd93 	bl	8000604 <__aeabi_dcmpgt>
 8020ade:	b138      	cbz	r0, 8020af0 <floor+0x40>
 8020ae0:	2c00      	cmp	r4, #0
 8020ae2:	da56      	bge.n	8020b92 <floor+0xe2>
 8020ae4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8020ae8:	4325      	orrs	r5, r4
 8020aea:	d055      	beq.n	8020b98 <floor+0xe8>
 8020aec:	4c2e      	ldr	r4, [pc, #184]	; (8020ba8 <floor+0xf8>)
 8020aee:	2500      	movs	r5, #0
 8020af0:	4623      	mov	r3, r4
 8020af2:	462f      	mov	r7, r5
 8020af4:	e025      	b.n	8020b42 <floor+0x92>
 8020af6:	4a2d      	ldr	r2, [pc, #180]	; (8020bac <floor+0xfc>)
 8020af8:	fa42 f806 	asr.w	r8, r2, r6
 8020afc:	ea01 0208 	and.w	r2, r1, r8
 8020b00:	4302      	orrs	r2, r0
 8020b02:	d01e      	beq.n	8020b42 <floor+0x92>
 8020b04:	a326      	add	r3, pc, #152	; (adr r3, 8020ba0 <floor+0xf0>)
 8020b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b0a:	f7df fb47 	bl	800019c <__adddf3>
 8020b0e:	2200      	movs	r2, #0
 8020b10:	2300      	movs	r3, #0
 8020b12:	f7df fd77 	bl	8000604 <__aeabi_dcmpgt>
 8020b16:	2800      	cmp	r0, #0
 8020b18:	d0ea      	beq.n	8020af0 <floor+0x40>
 8020b1a:	2c00      	cmp	r4, #0
 8020b1c:	bfbe      	ittt	lt
 8020b1e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020b22:	4133      	asrlt	r3, r6
 8020b24:	18e4      	addlt	r4, r4, r3
 8020b26:	ea24 0408 	bic.w	r4, r4, r8
 8020b2a:	2500      	movs	r5, #0
 8020b2c:	e7e0      	b.n	8020af0 <floor+0x40>
 8020b2e:	2e33      	cmp	r6, #51	; 0x33
 8020b30:	dd0b      	ble.n	8020b4a <floor+0x9a>
 8020b32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020b36:	d104      	bne.n	8020b42 <floor+0x92>
 8020b38:	4602      	mov	r2, r0
 8020b3a:	f7df fb2f 	bl	800019c <__adddf3>
 8020b3e:	4607      	mov	r7, r0
 8020b40:	460b      	mov	r3, r1
 8020b42:	4638      	mov	r0, r7
 8020b44:	4619      	mov	r1, r3
 8020b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b4a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8020b4e:	f04f 38ff 	mov.w	r8, #4294967295
 8020b52:	fa28 f802 	lsr.w	r8, r8, r2
 8020b56:	ea10 0f08 	tst.w	r0, r8
 8020b5a:	d0f2      	beq.n	8020b42 <floor+0x92>
 8020b5c:	a310      	add	r3, pc, #64	; (adr r3, 8020ba0 <floor+0xf0>)
 8020b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b62:	f7df fb1b 	bl	800019c <__adddf3>
 8020b66:	2200      	movs	r2, #0
 8020b68:	2300      	movs	r3, #0
 8020b6a:	f7df fd4b 	bl	8000604 <__aeabi_dcmpgt>
 8020b6e:	2800      	cmp	r0, #0
 8020b70:	d0be      	beq.n	8020af0 <floor+0x40>
 8020b72:	2c00      	cmp	r4, #0
 8020b74:	da0a      	bge.n	8020b8c <floor+0xdc>
 8020b76:	2e14      	cmp	r6, #20
 8020b78:	d101      	bne.n	8020b7e <floor+0xce>
 8020b7a:	3401      	adds	r4, #1
 8020b7c:	e006      	b.n	8020b8c <floor+0xdc>
 8020b7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020b82:	2301      	movs	r3, #1
 8020b84:	40b3      	lsls	r3, r6
 8020b86:	441d      	add	r5, r3
 8020b88:	42af      	cmp	r7, r5
 8020b8a:	d8f6      	bhi.n	8020b7a <floor+0xca>
 8020b8c:	ea25 0508 	bic.w	r5, r5, r8
 8020b90:	e7ae      	b.n	8020af0 <floor+0x40>
 8020b92:	2500      	movs	r5, #0
 8020b94:	462c      	mov	r4, r5
 8020b96:	e7ab      	b.n	8020af0 <floor+0x40>
 8020b98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8020b9c:	e7a8      	b.n	8020af0 <floor+0x40>
 8020b9e:	bf00      	nop
 8020ba0:	8800759c 	.word	0x8800759c
 8020ba4:	7e37e43c 	.word	0x7e37e43c
 8020ba8:	bff00000 	.word	0xbff00000
 8020bac:	000fffff 	.word	0x000fffff

08020bb0 <_init>:
 8020bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bb2:	bf00      	nop
 8020bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bb6:	bc08      	pop	{r3}
 8020bb8:	469e      	mov	lr, r3
 8020bba:	4770      	bx	lr

08020bbc <_fini>:
 8020bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bbe:	bf00      	nop
 8020bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bc2:	bc08      	pop	{r3}
 8020bc4:	469e      	mov	lr, r3
 8020bc6:	4770      	bx	lr
